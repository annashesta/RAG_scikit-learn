Search.setIndex({"alltitles": {"(Generalized) linear models": [[207, "generalized-linear-models"]], "1-way partial dependence with different models": [[184, "way-partial-dependence-with-different-models"]], "20 newsgroups dataset": [[102, "newsgroups-dataset"]], "2D interaction plots": [[184, "d-interaction-plots"]], "3D representation": [[184, "d-representation"]], "A constant prediction baseline": [[207, "a-constant-prediction-baseline"]], "A demo of K-Means clustering on the handwritten digits data": [[91, null]], "A demo of structured Ward hierarchical clustering on an image of coins": [[81, null]], "A demo of the Spectral Biclustering algorithm": [[58, null]], "A demo of the Spectral Co-Clustering algorithm": [[59, null]], "A demo of the mean-shift clustering algorithm": [[96, null]], "A more flexible plotting API": [[316, "a-more-flexible-plotting-api"]], "A note on shuffling": [[408, "a-note-on-shuffling"]], "A qualitative look at the predictions": [[52, "a-qualitative-look-at-the-predictions"]], "A simple algorithmic trick: warm restarts": [[378, "a-simple-algorithmic-trick-warm-restarts"]], "A typical workflow for triaging issues": [[371, "a-typical-workflow-for-triaging-issues"]], "AIC and BIC criteria": [[995, "aic-and-bic-criteria"]], "API Interface": [[395, "api-interface"]], "API Reference": [[1, null]], "API changes": [[1036, "api-changes"]], "API changes summary": [[1029, "api-changes-summary"], [1029, "id4"], [1029, "id7"], [1029, "id10"], [1030, "api-changes-summary"], [1031, "api-changes-summary"], [1032, "api-changes-summary"], [1033, "api-changes-summary"], [1034, "api-changes-summary"], [1035, "api-changes-summary"], [1035, "id6"], [1036, "api-changes-summary"]], "API compatibility checkers": [[41, "module-sklearn.utils.estimator_checks"]], "APIs of scikit-learn objects": [[374, "apis-of-scikit-learn-objects"]], "ARDRegression": [[644, null]], "ARFF parser": [[366, "arff-parser"]], "AWeber": [[1023, "id9"]], "Ability of Gaussian process regression (GPR) to estimate data noise-level": [[173, null]], "Ablation study": [[243, "ablation-study"]], "About the project": [[384, "about-the-project"]], "About us": [[0, null]], "Access pipeline steps": [[405, "access-pipeline-steps"]], "Access to nested parameters": [[405, "access-to-nested-parameters"]], "Accuracy of the Model": [[185, "accuracy-of-the-model"]], "Accuracy score": [[999, "accuracy-score"]], "Accuracy vs alpha for training and testing sets": [[351, "accuracy-vs-alpha-for-training-and-testing-sets"]], "Active Core Contributors": [[0, "active-core-contributors"]], "AdaBoost": [[411, "adaboost"]], "AdaBoostClassifier": [[551, null]], "AdaBoostRegressor": [[552, null]], "Adapting predefined metrics via make_scorer": [[999, "adapting-predefined-metrics-via-make-scorer"]], "Add support for monotonic constraints in tree-based models": [[320, "add-support-for-monotonic-constraints-in-tree-based-models"]], "Adding connectivity constraints": [[404, "adding-connectivity-constraints"]], "Additive Chi Squared Kernel": [[991, "additive-chi-squared-kernel"]], "AdditiveChi2Sampler": [[638, null]], "Addressing the problem with a business metric": [[258, "addressing-the-problem-with-a-business-metric"]], "Adjustment for chance in clustering performance evaluation": [[72, null]], "Advanced Plotting With Partial Dependence": [[244, null]], "Advantages:": [[404, null], [404, null], [404, null], [404, null], [404, null], [404, null], [404, null], [404, null]], "Affinity Propagation": [[404, "affinity-propagation"]], "AffinityPropagation": [[437, null]], "Agglomerative clustering with and without structure": [[74, null]], "Agglomerative clustering with different metrics": [[75, null]], "AgglomerativeClustering": [[438, null]], "Aggressive elimination of candidates": [[988, "aggressive-elimination-of-candidates"]], "Algorithms": [[1003, "algorithms"]], "Almost complete Metadata Routing support": [[322, "almost-complete-metadata-routing-support"]], "Alpine Linux": [[390, "alpine-linux"]], "Alternatives to brute force parameter search": [[988, "alternatives-to-brute-force-parameter-search"]], "Ames Housing dataset": [[243, "ames-housing-dataset"]], "An example custom estimator implementing a simple classifier": [[132, "an-example-custom-estimator-implementing-a-simple-classifier"]], "An example of K-Means++ initialization": [[92, null]], "Anaconda and Enthought Deployment Manager for all supported platforms": [[390, "anaconda-and-enthought-deployment-manager-for-all-supported-platforms"]], "Analysis": [[66, "analysis"], [134, "analysis"]], "Analysis of a bag-of-words document classifier": [[347, "analysis-of-a-bag-of-words-document-classifier"]], "Analysis of the error metrics": [[146, "analysis-of-the-error-metrics"]], "Analysis of the plots": [[184, "analysis-of-the-plots"]], "Analysis of the results": [[64, "analysis-of-the-results"]], "Analyzing results with the cv_results_ attribute": [[988, "analyzing-results-with-the-cv-results-attribute"]], "Analyzing the Bike Sharing Demand dataset": [[52, "analyzing-the-bike-sharing-demand-dataset"]], "Applications and examples": [[412, "applications-and-examples"]], "Approximate nearest neighbors in TSNE": [[284, null]], "Arch Linux": [[390, "arch-linux"]], "Architectural / general goals": [[1019, "architectural-general-goals"]], "Array API support": [[322, "array-api-support"], [323, "array-api-support"]], "Array API support (experimental)": [[400, null]], "Attributes": [[386, "attributes"]], "Authors": [[1029, "authors"], [1029, "id20"]], "Automated Contributions Policy": [[372, "automated-contributions-policy"]], "Automatic Relevance Determination (ARD)": [[194, "automatic-relevance-determination-ard"]], "Automatic Relevance Determination - ARD": [[995, "automatic-relevance-determination-ard"]], "Automatic parameter searches": [[385, "automatic-parameter-searches"]], "Auxiliary functions that operate on arrays": [[41, "module-sklearn.utils.arrayfuncs"]], "Available Plotting Utilities": [[1026, "available-plotting-utilities"]], "BIRCH": [[404, "birch"]], "BNP Paribas Cardif": [[1023, "id29"]], "Bagging meta-estimator": [[411, "bagging-meta-estimator"]], "BaggingClassifier": [[553, null]], "BaggingRegressor": [[554, null]], "Balance model complexity and cross-validated score": [[263, null]], "Balanced accuracy score": [[999, "balanced-accuracy-score"]], "Ball Tree": [[1002, "ball-tree"]], "BallTree": [[844, null]], "BaseEstimator": [[418, null]], "Basic kernels": [[414, "basic-kernels"]], "Basic shrinkage": [[406, "basic-shrinkage"]], "Bayesian Regression": [[995, "bayesian-regression"]], "Bayesian Ridge Regression": [[995, "bayesian-ridge-regression"]], "Bayesian regressions with polynomial feature expansion": [[190, "bayesian-regressions-with-polynomial-feature-expansion"]], "Bayesian regressors": [[25, "bayesian-regressors"]], "BayesianGaussianMixture": [[797, null]], "BayesianRidge": [[645, null]], "Benchmark and plot helper functions": [[49, "benchmark-and-plot-helper-functions"]], "Benchmark bulk/atomic prediction speed for various regressors": [[49, "benchmark-bulk-atomic-prediction-speed-for-various-regressors"]], "Benchmark influence": [[46, "benchmark-influence"]], "Benchmark n_features influence on prediction speed": [[49, "benchmark-n-features-influence-on-prediction-speed"]], "Benchmark throughput": [[49, "benchmark-throughput"]], "Benchmarking classifiers": [[347, "benchmarking-classifiers"]], "Bernoulli Naive Bayes": [[1001, "bernoulli-naive-bayes"]], "Bernoulli Restricted Boltzmann machines": [[1004, "bernoulli-restricted-boltzmann-machines"]], "BernoulliNB": [[839, null]], "BernoulliRBM": [[860, null]], "Bestofmedia Group": [[1023, "id13"]], "BiclusterMixin": [[419, null]], "Biclustering": [[56, null], [180, "biclustering"], [368, "biclustering"], [401, null]], "Biclustering documents with the Spectral Co-clustering algorithm": [[57, null]], "Biclustering evaluation": [[401, "biclustering-evaluation"]], "Biclustering metrics": [[27, "biclustering-metrics"]], "Bike sharing dataset preprocessing": [[184, "bike-sharing-dataset-preprocessing"]], "Binarizer": [[867, null]], "Binary Case": [[995, "binary-case"]], "Binary case": [[999, "binary-case"]], "Binary classification": [[999, "binary-classification"]], "Birch": [[439, null]], "Birchbox": [[1023, "id12"]], "Bisecting K-Means": [[404, "bisecting-k-means"]], "Bisecting K-Means and Regular K-Means Performance Comparison": [[78, null]], "BisectingKMeans": [[440, null]], "BisectingKMeans: divide and cluster": [[317, "bisectingkmeans-divide-and-cluster"]], "Blind source separation using FastICA": [[121, null]], "Boil down your script to something as small as possible": [[377, "boil-down-your-script-to-something-as-small-as-possible"]], "Booking.com": [[1023, "id8"]], "Branding & Logos": [[0, "branding-logos"]], "Breast cancer Wisconsin (diagnostic) dataset": [[369, "breast-cancer-wisconsin-diagnostic-dataset"]], "Brier score loss": [[999, "brier-score-loss"]], "Brute Force": [[1002, "brute-force"]], "Bug Tracker": [[1022, "bug-tracker"]], "Bug fixes": [[1032, "bug-fixes"], [1032, "id1"], [1032, "id3"], [1033, "bug-fixes"], [1033, "id3"], [1034, "bug-fixes"], [1034, "id3"], [1035, "bug-fixes"], [1035, "id5"], [1036, "bug-fixes"], [1036, "id4"]], "Bug triaging and issue curation": [[371, null]], "Build a pipeline": [[405, "build-a-pipeline"]], "Build the dataset": [[172, "build-the-dataset"]], "Building a specific version from a tag": [[370, "building-a-specific-version-from-a-tag"]], "Building and testing for the ARM64 platform on a x86_64 machine": [[380, "building-and-testing-for-the-arm64-platform-on-a-x86-64-machine"]], "Building from source": [[370, "building-from-source"]], "Building the documentation": [[372, "building-the-documentation"]], "Bulk versus Atomic mode": [[359, "bulk-versus-atomic-mode"]], "Bunch": [[919, null]], "CCA": [[479, null]], "CCA (PLS mode B with symmetric deflation)": [[115, "cca-pls-mode-b-with-symmetric-deflation"]], "CV splitters": [[355, "cv-splitters"], [355, "id3"]], "Caching nearest neighbors": [[286, null]], "Caching transformers within a Pipeline": [[104, "caching-transformers-within-a-pipeline"]], "Caching transformers: avoid repeated computation": [[405, "caching-transformers-avoid-repeated-computation"]], "CalibratedClassifierCV": [[434, null]], "Calibrating a classifier": [[402, "calibrating-a-classifier"]], "Calibration": [[60, null], [180, "calibration"]], "Calibration curves": [[62, "calibration-curves"], [64, "calibration-curves"], [402, "calibration-curves"]], "Calibration of a pre-fitted classifier": [[165, "calibration-of-a-pre-fitted-classifier"]], "Calibration of the confidence interval": [[146, "calibration-of-the-confidence-interval"]], "CalibrationDisplay": [[435, null]], "California Housing dataset": [[367, "california-housing-dataset"]], "Calinski-Harabasz Index": [[404, "calinski-harabasz-index"]], "Callable scorers": [[999, "callable-scorers"]], "Canonical (symmetric) PLS": [[115, "canonical-symmetric-pls"]], "Canonical Correlation Analysis": [[407, "canonical-correlation-analysis"]], "Cardiotocography dataset": [[243, "cardiotocography-dataset"]], "Categorical Feature Support in Gradient Boosting": [[143, null]], "Categorical Features Support": [[411, "categorical-features-support"]], "Categorical Naive Bayes": [[1001, "categorical-naive-bayes"]], "CategoricalNB": [[840, null]], "Centering kernel matrices": [[1009, "centering-kernel-matrices"]], "Chain of binary classifiers": [[283, "chain-of-binary-classifiers"]], "Change the default value of a parameter": [[372, "change-the-default-value-of-a-parameter"]], "Change.org": [[1023, "id14"]], "Changed displays": [[1045, "changed-displays"]], "Changed models": [[1036, "changed-models"], [1037, "changed-models"], [1037, "id9"], [1037, "id22"], [1038, "changed-models"], [1038, "id6"], [1039, "changed-models"], [1040, "changed-models"], [1040, "id3"], [1041, "changed-models"], [1042, "changed-models"], [1043, "changed-models"], [1043, "id6"], [1044, "changed-models"], [1044, "id7"], [1045, "changed-models"], [1045, "id4"], [1046, "changed-models"], [1046, "id1"], [1047, "changed-models"], [1048, "changed-models"], [1049, "changed-models"]], "Changelog": [[1029, "changelog"], [1029, "id1"], [1029, "id3"], [1029, "id6"], [1029, "id9"], [1029, "id12"], [1029, "id14"], [1029, "id16"], [1029, "id18"], [1029, "id19"], [1030, "changelog"], [1030, "id2"], [1031, "changelog"], [1032, "changelog"], [1033, "changelog"], [1033, "id2"], [1034, "changelog"], [1034, "id2"], [1035, "changelog"], [1035, "id1"], [1035, "id3"], [1036, "changelog"], [1036, "id2"], [1037, "changelog"], [1037, "id1"], [1037, "id5"], [1037, "id10"], [1037, "id23"], [1038, "changelog"], [1038, "id1"], [1038, "id2"], [1038, "id7"], [1039, "changelog"], [1039, "id1"], [1039, "id4"], [1040, "changelog"], [1040, "id1"], [1040, "id4"], [1041, "changelog"], [1041, "id1"], [1041, "id4"], [1042, "changelog"], [1042, "id6"], [1043, "changelog"], [1043, "id1"], [1043, "id7"], [1044, "changelog"], [1044, "id1"], [1044, "id9"], [1045, "changelog"], [1045, "id1"], [1045, "id6"], [1046, "changelog"], [1046, "id3"], [1047, "changelog"], [1047, "id2"], [1047, "id6"]], "Changes impacting all modules": [[1044, "changes-impacting-all-modules"], [1044, "id8"], [1045, "changes-impacting-all-modules"], [1045, "id5"], [1046, "changes-impacting-all-modules"]], "Changes impacting many modules": [[1046, "changes-impacting-many-modules"], [1047, "changes-impacting-many-modules"], [1047, "id1"], [1047, "id5"], [1048, "changes-impacting-many-modules"], [1048, "id1"], [1049, "changes-impacting-many-modules"]], "Changes to estimator checks": [[1037, "changes-to-estimator-checks"], [1038, "changes-to-estimator-checks"], [1039, "changes-to-estimator-checks"]], "Checking out pull requests as remote-tracking branches": [[380, "checking-out-pull-requests-as-remote-tracking-branches"]], "Checking scikit-learn compatibility of an estimator": [[313, "checking-scikit-learn-compatibility-of-an-estimator"]], "Checking the variability of the coefficients": [[183, "checking-the-variability-of-the-coefficients"]], "Chi-squared kernel": [[997, "chi-squared-kernel"]], "Choice of solver for Kernel PCA": [[409, "choice-of-solver-for-kernel-pca"]], "Choose parameters": [[46, "choose-parameters"]], "Choosing the right estimator": [[392, null]], "Citing scikit-learn": [[0, "citing-scikit-learn"]], "Class APIs and Estimator Types": [[386, "class-apis-and-estimator-types"]], "Class Likelihood Ratios to measure classification performance": [[267, null]], "Class likelihood ratios": [[999, "class-likelihood-ratios"]], "ClassNamePrefixFeaturesOutMixin": [[420, null]], "Classical linear regressors": [[25, "classical-linear-regressors"]], "Classification": [[65, null], [68, "classification"], [175, "classification"], [180, "classification"], [995, "classification"], [1002, "id4"], [1003, "classification"], [1013, "classification"], [1014, "classification"], [1015, "classification"]], "Classification and ROC analysis": [[274, "classification-and-roc-analysis"]], "Classification criteria": [[1015, "classification-criteria"]], "Classification metrics": [[27, "classification-metrics"], [999, "classification-metrics"]], "Classification of text documents using sparse features": [[347, null]], "Classification pipeline": [[102, "classification-pipeline"]], "Classification report": [[999, "classification-report"]], "Classifier Training": [[201, "classifier-training"]], "Classifier comparison": [[67, null]], "ClassifierChain": [[835, null], [1000, "classifierchain"]], "ClassifierMixin": [[421, null]], "ClassifierTags": [[920, null]], "Clear definition of the public API": [[1039, "clear-definition-of-the-public-api"]], "Cloning": [[374, "cloning"]], "Closing issues: a tough call": [[371, null]], "Cluster centers - MiniBatchKMeans": [[120, "cluster-centers-minibatchkmeans"]], "ClusterMixin": [[422, null]], "Clustering": [[71, null], [180, "clustering"], [404, null]], "Clustering evaluation summary": [[348, "clustering-evaluation-summary"]], "Clustering for dictionary learning": [[409, null]], "Clustering metrics": [[27, "module-sklearn.metrics.cluster"], [999, "clustering-metrics"]], "Clustering performance evaluation": [[404, "clustering-performance-evaluation"]], "Clustering sparse data with k-means": [[348, "clustering-sparse-data-with-k-means"]], "Clustering text documents using k-means": [[348, null]], "Clustering using affinity propagation": [[51, "clustering-using-affinity-propagation"]], "Code Contributors": [[1033, "code-contributors"], [1034, "code-contributors"], [1035, "code-contributors"], [1035, "id7"]], "Code Review Guidelines": [[372, "code-review-guidelines"]], "Code and Documentation Contributors": [[1036, "code-and-documentation-contributors"], [1036, "id10"], [1037, "code-and-documentation-contributors"], [1037, "id8"], [1037, "id21"], [1037, "id41"]], "Coding Sprints": [[0, "coding-sprints"]], "Coding guidelines": [[374, "coding-guidelines"]], "Coefficients comparison": [[277, "coefficients-comparison"]], "Cohen\u2019s kappa": [[999, "cohen-s-kappa"]], "Column Transformer with Heterogeneous Data Sources": [[102, null]], "Column Transformer with Mixed Types": [[103, null]], "ColumnTransformer": [[461, null]], "ColumnTransformer for heterogeneous data": [[405, "columntransformer-for-heterogeneous-data"]], "ColumnTransformer is subscriptable": [[321, "columntransformer-is-subscriptable"]], "Combine predictors using stacking": [[154, null]], "Combining the display objects into a single plot": [[234, "combining-the-display-objects-into-a-single-plot"]], "Commit message markers": [[372, "commit-message-markers"]], "Common Vectorizer usage": [[412, "common-vectorizer-usage"]], "Common estimator checks": [[400, "common-estimator-checks"]], "Common pitfalls and recommended practices": [[355, null]], "Common pitfalls and subtleties": [[355, "common-pitfalls-and-subtleties"]], "Common pitfalls in the interpretation of coefficients of linear models": [[183, null]], "Communication Team": [[0, "communication-team"]], "Compact text representation": [[235, "compact-text-representation"]], "Compare BIRCH and MiniBatchKMeans": [[77, null]], "Compare ROC and DET curves": [[261, "compare-roc-and-det-curves"]], "Compare Stochastic learning strategies for MLPClassifier": [[300, null]], "Compare cross decomposition methods": [[115, null]], "Compare different approaches to setting the regularization parameter": [[109, "compare-different-approaches-to-setting-the-regularization-parameter"]], "Compare probabilities": [[63, "compare-probabilities"]], "Compare the effect of different scalers on data with outliers": [[304, null]], "Compare times of SVR and Kernel Ridge Regression": [[239, "compare-times-of-svr-and-kernel-ridge-regression"]], "Compare with SVMs": [[159, "compare-with-svms"]], "Comparing Linear Bayesian Regressors": [[190, null]], "Comparing Nearest Neighbors with and without Neighborhood Components Analysis": [[292, null]], "Comparing QuantileRegressor and LinearRegression": [[209, "comparing-quantileregressor-and-linearregression"]], "Comparing Random Forests and Histogram Gradient Boosting models": [[140, null]], "Comparing Target Encoder with Other Encoders": [[310, null]], "Comparing anomaly detection algorithms for outlier detection on toy datasets": [[233, null]], "Comparing different clustering algorithms on toy datasets": [[79, null]], "Comparing different hierarchical linkage methods on toy datasets": [[95, null]], "Comparing random forests and the multi-output meta estimator": [[153, null]], "Comparing randomized search and grid search for hyperparameter estimation": [[272, null]], "Comparing the results": [[188, "comparing-the-results"]], "Comparing the two Lasso implementations on Dense data": [[195, "comparing-the-two-lasso-implementations-on-dense-data"]], "Comparing the two Lasso implementations on Sparse data": [[195, "comparing-the-two-lasso-implementations-on-sparse-data"]], "Comparing two models: Bayesian approach": [[264, "comparing-two-models-bayesian-approach"]], "Comparing two models: frequentist approach": [[264, "comparing-two-models-frequentist-approach"]], "Comparison between grid search and successive halving": [[275, null]], "Comparison of Calibration of Classifiers": [[64, null]], "Comparison of F-test and mutual information": [[158, null]], "Comparison of LDA and PCA 2D projection of Iris dataset": [[128, null]], "Comparison of LDA and QDA": [[70, "comparison-of-lda-and-qda"]], "Comparison of Manifold Learning methods": [[226, null]], "Comparison of kernel ridge and Gaussian process regression": [[167, null]], "Comparison of kernel ridge regression and SVR": [[239, null]], "Comparison of results": [[111, "comparison-of-results"]], "Comparison of the K-Means and MiniBatchKMeans clustering algorithms": [[97, null]], "Comparison with special purpose text vectorizers": [[349, "comparison-with-special-purpose-text-vectorizers"]], "Comparison with the regularization parameter of SVM": [[995, "comparison-with-the-regularization-parameter-of-svm"]], "Complement Naive Bayes": [[1001, "complement-naive-bayes"]], "ComplementNB": [[841, null]], "Complexity": [[1002, "complexity"], [1003, "complexity"], [1013, "complexity"], [1014, "complexity"], [1015, "complexity"]], "Complexity analysis": [[266, "complexity-analysis"]], "Composite estimators and parameter spaces": [[988, "composite-estimators-and-parameter-spaces"]], "CompoundKernel": [[612, null]], "Compression via vector quantization": [[86, "compression-via-vector-quantization"]], "Compressive sensing: tomography reconstruction with L1 prior (Lasso)": [[53, null]], "Computation methods": [[1006, "computation-methods"]], "Computation times": [[1020, null]], "Computational Performance": [[359, null]], "Compute Affinity Propagation": [[73, "compute-affinity-propagation"]], "Compute DBSCAN": [[82, "compute-dbscan"]], "Compute clustering": [[81, "compute-clustering"], [100, "compute-clustering"], [100, "id1"]], "Compute clustering with KMeans": [[97, "compute-clustering-with-kmeans"]], "Compute clustering with MeanShift": [[96, "compute-clustering-with-meanshift"]], "Compute clustering with MiniBatchKMeans": [[97, "compute-clustering-with-minibatchkmeans"]], "Compute paths": [[212, "compute-paths"]], "Compute regularization path": [[202, "compute-regularization-path"]], "Compute score and computation times": [[140, "compute-score-and-computation-times"]], "Compute the likelihood on test data": [[109, "compute-the-likelihood-on-test-data"]], "Computing Centrality scores": [[55, "computing-centrality-scores"]], "Computing Principal Singular Vector using Randomized SVD": [[55, "computing-principal-singular-vector-using-randomized-svd"]], "Computing cross-validated metrics": [[408, "computing-cross-validated-metrics"]], "Computing the Adjacency matrix": [[55, "computing-the-adjacency-matrix"]], "Computing with scikit-learn": [[358, null]], "Concatenating multiple feature extraction methods": [[106, null]], "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture": [[249, null]], "Concluding remarks": [[43, "concluding-remarks"], [230, "concluding-remarks"]], "Conclusion": [[46, "conclusion"], [52, "conclusion"], [198, "conclusion"], [205, "conclusion"], [263, "conclusion"], [281, "conclusion"], [287, "conclusion"], [311, "conclusion"], [340, "conclusion"]], "Conclusions": [[194, "conclusions"]], "Configuration switches": [[360, "configuration-switches"]], "Configuring Scikit-learn for reduced validation overhead": [[359, "configuring-scikit-learn-for-reduced-validation-overhead"]], "Confusion matrix": [[257, null], [999, "confusion-matrix"]], "ConfusionMatrixDisplay": [[697, null]], "Connectivity graph of an image": [[412, "connectivity-graph-of-an-image"]], "Consideration regarding model refitting and cross-validation": [[258, "consideration-regarding-model-refitting-and-cross-validation"]], "ConstantKernel": [[613, null]], "Construct the kernel-based regression models": [[239, "construct-the-kernel-based-regression-models"]], "Consuming Estimator": [[240, "consuming-estimator"]], "Consuming and routing Meta-Estimator": [[240, "consuming-and-routing-meta-estimator"]], "Contingency Matrix": [[404, "contingency-matrix"]], "Continuous Integration (CI)": [[372, "continuous-integration-ci"]], "Contributing": [[372, null], [384, "contributing"]], "Contributing code": [[372, "contributing-code"]], "Contributor Experience Team": [[0, "contributor-experience-team"]], "Contributors": [[387, "contributors"]], "Controlling randomness": [[355, "controlling-randomness"]], "Controlling the tree size": [[411, "controlling-the-tree-size"]], "Convergence of the AdaBoostClassifier": [[134, "convergence-of-the-adaboostclassifier"]], "ConvergenceWarning": [[569, null]], "Core Contributors": [[387, "core-contributors"]], "Cosine similarity": [[997, "cosine-similarity"]], "Cost-sensitive learning when gains and costs are not constant": [[258, "cost-sensitive-learning-when-gains-and-costs-are-not-constant"]], "Cost-sensitive learning with constant gains and costs": [[258, "cost-sensitive-learning-with-constant-gains-and-costs"]], "CountVectorizer": [[587, null]], "Covariance estimation": [[108, null], [180, "covariance-estimation"], [406, null]], "Coverage error": [[999, "coverage-error"]], "Crafting a minimal reproducer for scikit-learn": [[377, null]], "Create ConfusionMatrixDisplay": [[234, "create-confusionmatrixdisplay"]], "Create PrecisionRecallDisplay": [[234, "create-precisionrecalldisplay"]], "Create RocCurveDisplay": [[234, "create-roccurvedisplay"]], "Create Synthetic Dataset": [[311, "create-synthetic-dataset"]], "Create a random 1D dataset": [[353, "create-a-random-1d-dataset"]], "Create a random dataset": [[353, "create-a-random-dataset"]], "Create multi-label data, fit, and predict": [[271, "create-multi-label-data-fit-and-predict"]], "Create the data": [[127, "create-the-data"]], "Create the pipeline": [[339, "create-the-pipeline"]], "Creating a custom scorer object": [[999, "creating-a-custom-scorer-object"]], "Creating a dataset": [[340, "creating-a-dataset"]], "Creating a non-noisy data set": [[211, "creating-a-non-noisy-data-set"]], "Creating the dataset": [[134, "creating-the-dataset"]], "Creating transformers": [[102, "creating-transformers"]], "Cross decomposition": [[114, null], [180, "cross-decomposition"], [407, null]], "Cross validation and model selection": [[408, "cross-validation-and-model-selection"]], "Cross validation iterators": [[408, "cross-validation-iterators"]], "Cross validation of time series data": [[408, "cross-validation-of-time-series-data"]], "Cross-validation iterators for grouped data": [[408, "cross-validation-iterators-for-grouped-data"]], "Cross-validation iterators for i.i.d. data": [[408, "cross-validation-iterators-for-i-i-d-data"]], "Cross-validation iterators with stratification based on class labels": [[408, "cross-validation-iterators-with-stratification-based-on-class-labels"]], "Cross-validation of likelihood ratios": [[267, "cross-validation-of-likelihood-ratios"]], "Cross-validation: evaluating estimator performance": [[408, null]], "Curve Fitting with Bayesian Ridge Regression": [[191, null]], "Custom Inspection Points": [[184, "custom-inspection-points"]], "Custom Kernels": [[1014, "custom-kernels"]], "Custom imputation strategies for the SimpleImputer": [[321, "custom-imputation-strategies-for-the-simpleimputer"]], "Custom refit strategy of a grid search with cross-validation": [[262, null]], "Custom transformers": [[1009, "custom-transformers"]], "Custom validation set for histogram-based Gradient Boosting estimators": [[323, "custom-validation-set-for-histogram-based-gradient-boosting-estimators"]], "Customizing the vectorizer classes": [[412, "customizing-the-vectorizer-classes"]], "Cython Best Practices, Conventions and Knowledge": [[373, null]], "DBSCAN": [[404, "dbscan"], [441, null]], "DO NOT report your data unless it is extremely necessary": [[377, "do-not-report-your-data-unless-it-is-extremely-necessary"]], "Data": [[63, "data"]], "Data Loading and Feature Engineering": [[185, "data-loading-and-feature-engineering"]], "Data Loading and Preparation": [[205, "data-loading-and-preparation"]], "Data Preparation": [[144, "data-preparation"]], "Data Publica": [[1023, "id21"]], "Data and sample properties": [[386, "data-and-sample-properties"]], "Data exploration on the Bike Sharing Demand dataset": [[43, "data-exploration-on-the-bike-sharing-demand-dataset"]], "Data generation": [[70, "data-generation"], [82, "data-generation"], [90, "data-generation"], [150, "data-generation"], [162, "data-generation"], [173, "data-generation"], [254, "data-generation"], [325, "data-generation"], [343, "data-generation"]], "Data generation and model fitting": [[141, "data-generation-and-model-fitting"]], "Data leakage": [[355, "data-leakage"]], "Data leakage during pre-processing": [[355, "data-leakage-during-pre-processing"]], "Data loading": [[265, "data-loading"]], "Data preprocessing": [[147, "data-preprocessing"]], "Data: 2D projection of the iris dataset": [[66, "data-2d-projection-of-the-iris-dataset"]], "DataConversionWarning": [[570, null]], "DataDimensionalityWarning": [[571, null]], "DataFrame Support": [[1046, "dataframe-support"]], "DataRobot": [[1023, "id18"]], "Dataiku": [[1023, "id25"]], "Dataset": [[62, "dataset"], [198, "dataset"], [270, "dataset"]], "Dataset Generation": [[201, "dataset-generation"]], "Dataset Versions": [[366, "dataset-versions"]], "Dataset and Gaussian process generation": [[176, "dataset-and-gaussian-process-generation"]], "Dataset and model": [[271, "dataset-and-model"]], "Dataset based latent variables model": [[115, "dataset-based-latent-variables-model"]], "Dataset examples": [[117, null], [180, "dataset-examples"]], "Dataset generation": [[174, "dataset-generation"], [209, "dataset-generation"]], "Dataset loading utilities": [[365, null], [377, "dataset-loading-utilities"]], "Dataset preparation": [[120, "dataset-preparation"], [226, "dataset-preparation"], [229, "dataset-preparation"]], "Dataset preprocessing and model training": [[243, "dataset-preprocessing-and-model-training"]], "Dataset transformations": [[364, null]], "Datasets in svmlight / libsvm format": [[366, "datasets-in-svmlight-libsvm-format"]], "Davies-Bouldin Index": [[404, "davies-bouldin-index"]], "Dealing with multiclass target in classifiers": [[41, "module-sklearn.utils.multiclass"]], "Debian/Ubuntu": [[390, "debian-ubuntu"]], "Debugging CI issues": [[380, "debugging-ci-issues"]], "Debugging memory errors in Cython with valgrind": [[380, "debugging-memory-errors-in-cython-with-valgrind"]], "Decision Boundaries Visualization": [[201, "decision-boundaries-visualization"]], "Decision Boundaries of Multinomial and One-vs-Rest Logistic Regression": [[201, null]], "Decision Making Process": [[387, "decision-making-process"]], "Decision Surfaces of RBF Kernel SVM and Linear SVM": [[238, "decision-surfaces-of-rbf-kernel-svm-and-linear-svm"]], "Decision Tree Regression": [[353, null]], "Decision Tree Regression with AdaBoost": [[135, null]], "Decision Tree Regression with Multi-Output Targets": [[353, "decision-tree-regression-with-multi-output-targets"]], "Decision Tree on a 1D Regression Task": [[353, "decision-tree-on-a-1d-regression-task"]], "Decision Trees": [[180, "decision-trees"], [350, null], [1015, null]], "Decision boundary": [[287, "decision-boundary"]], "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset": [[330, null]], "Decision path": [[354, "decision-path"]], "DecisionBoundaryDisplay": [[631, null]], "DecisionTreeClassifier": [[912, null]], "DecisionTreeRegressor": [[913, null]], "Decoding text files": [[412, "decoding-text-files"]], "Decomposing signals in components (matrix factorization problems)": [[409, null]], "Decomposition": [[119, null], [120, "decomposition"], [180, "decomposition"]], "Decomposition: Dictionary learning": [[120, "decomposition-dictionary-learning"]], "Define a function to visualize cross-validation behavior": [[259, "define-a-function-to-visualize-cross-validation-behavior"]], "Define algorithms for the manifold learning": [[226, "define-algorithms-for-the-manifold-learning"]], "Define our evaluation benchmark": [[91, "define-our-evaluation-benchmark"]], "Define our grid-search strategy": [[262, "define-our-grid-search-strategy"]], "Define preprocessing functions": [[349, "define-preprocessing-functions"]], "Define structure of the data": [[81, "define-structure-of-the-data"]], "Define the classifiers": [[261, "define-the-classifiers"]], "Defining the list of metrics to evaluate": [[72, "defining-the-list-of-metrics-to-evaluate"]], "Demo of DBSCAN clustering algorithm": [[82, null]], "Demo of HDBSCAN clustering algorithm": [[88, null]], "Demo of OPTICS clustering algorithm": [[98, null]], "Demo of affinity propagation clustering algorithm": [[73, null]], "Demonstrating the different strategies of KBinsDiscretizer": [[307, null]], "Demonstration of k-means assumptions": [[90, null]], "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV": [[268, null]], "Density Estimation": [[410, null]], "Density Estimation for a Gaussian mixture": [[253, null]], "Density Estimation: Histograms": [[410, "density-estimation-histograms"]], "Density estimation, novelty detection": [[1014, "density-estimation-novelty-detection"]], "DensityMixin": [[423, null]], "Deprecation": [[372, "deprecation"]], "Deprecation / Default Value Change": [[240, "deprecation-default-value-change"]], "Deprecations: using FutureWarning from now on": [[1039, "deprecations-using-futurewarning-from-now-on"]], "Description of the simulated data": [[182, "description-of-the-simulated-data"]], "Design the proper kernel": [[172, "design-the-proper-kernel"]], "DetCurveDisplay": [[698, null]], "Detection error tradeoff (DET)": [[999, "detection-error-tradeoff-det"]], "Detection error tradeoff (DET) curve": [[261, null]], "Developer API for HTML representation": [[374, "developer-api-for-html-representation"]], "Developer API for check_is_fitted": [[374, "developer-api-for-check-is-fitted"]], "Developer API for set_output": [[374, "developer-api-for-set-output"]], "Developers\u2019 Tips and Tricks": [[380, null]], "Developer\u2019s Guide": [[375, null]], "Developing Estimators": [[131, null], [180, "developing-estimators"]], "Developing scikit-learn estimators": [[374, null]], "Developing with the Plotting API": [[379, null]], "Diabetes dataset": [[369, "diabetes-dataset"]], "DictVectorizer": [[349, "dictvectorizer"], [580, null]], "Dictionary Learning": [[409, "dictionary-learning"]], "Dictionary learning": [[120, "dictionary-learning"]], "Dictionary learning - positive code": [[120, "dictionary-learning-positive-code"]], "Dictionary learning - positive dictionary": [[120, "dictionary-learning-positive-dictionary"]], "Dictionary learning - positive dictionary & code": [[120, "dictionary-learning-positive-dictionary-code"]], "DictionaryLearning": [[529, null]], "Differences between solvers": [[995, "differences-between-solvers"]], "Different label assignment strategies": [[404, "different-label-assignment-strategies"]], "Different linkage type: Ward, complete, average, and single linkage": [[404, "different-linkage-type-ward-complete-average-and-single-linkage"]], "Different objects": [[374, "different-objects"]], "Different scenario and useful concepts": [[995, "different-scenario-and-useful-concepts"]], "Different scoring and fitting weights": [[395, "different-scoring-and-fitting-weights"]], "Digits dataset": [[68, "digits-dataset"]], "Dimensionality Reduction with Neighborhood Components Analysis": [[293, null]], "Dimensionality reduction": [[1002, "dimensionality-reduction"]], "Dimensionality reduction using Linear Discriminant Analysis": [[993, "dimensionality-reduction-using-linear-discriminant-analysis"]], "Discovering scikit-learn objects": [[41, "module-sklearn.utils.discovery"]], "Discretization": [[1009, "discretization"]], "Dispatching": [[382, null]], "Display Objects": [[1026, "display-objects"]], "Display code coverage in pull requests": [[380, "display-code-coverage-in-pull-requests"]], "Display results": [[212, "display-results"]], "Display the distorted image": [[123, "display-the-distorted-image"]], "Displaying Pipelines": [[245, null]], "Displaying a Complex Pipeline Chaining a Column Transformer": [[245, "displaying-a-complex-pipeline-chaining-a-column-transformer"]], "Displaying a Grid Search over a Pipeline with a Classifier": [[245, "displaying-a-grid-search-over-a-pipeline-with-a-classifier"]], "Displaying a Pipeline Chaining Multiple Preprocessing Steps & Classifier": [[245, "displaying-a-pipeline-chaining-multiple-preprocessing-steps-classifier"]], "Displaying a Pipeline and Dimensionality Reduction and Classifier": [[245, "displaying-a-pipeline-and-dimensionality-reduction-and-classifier"]], "Displaying a Pipeline with a Preprocessing Step and Classifier": [[245, "displaying-a-pipeline-with-a-preprocessing-step-and-classifier"]], "Displaying estimators and complex pipelines": [[235, null]], "Distance metrics": [[27, "distance-metrics"]], "DistanceMetric": [[699, null]], "Do you plan to implement transform for target y in a pipeline?": [[384, "do-you-plan-to-implement-transform-for-target-y-in-a-pipeline"]], "Do you support PyPy?": [[384, "do-you-support-pypy"]], "Documentation": [[372, "documentation"], [1029, "documentation"]], "Documentation Resources": [[1022, "documentation-resources"]], "Documentation Team": [[0, "documentation-team"]], "Documentation improvements": [[1032, "documentation-improvements"], [1033, "documentation-improvements"]], "Does scikit-learn work natively with various types of dataframes?": [[384, "does-scikit-learn-work-natively-with-various-types-of-dataframes"]], "Domain specific packages": [[1018, "domain-specific-packages"]], "Donating to the project": [[0, "donating-to-the-project"]], "Donations in Kind": [[0, "donations-in-kind"]], "Dot-Product kernel": [[414, "dot-product-kernel"]], "Dot-product kernel": [[176, "dot-product-kernel"]], "DotProduct": [[614, null]], "Download any dataset from the web": [[322, "download-any-dataset-from-the-web"]], "Download data, if not already on disk": [[55, "download-data-if-not-already-on-disk"]], "Download the data and make missing values sets": [[179, "download-the-data-and-make-missing-values-sets"]], "Download the dataset": [[154, "download-the-dataset"]], "Downloading datasets from the openml.org repository": [[366, "downloading-datasets-from-the-openml-org-repository"]], "Drawbacks:": [[404, null], [404, null], [404, null], [404, null], [404, null], [404, null], [404, null], [404, null]], "Dropping official support for PyPy": [[1048, "dropping-official-support-for-pypy"]], "Dropping support for building with setuptools": [[1048, "dropping-support-for-building-with-setuptools"]], "Dummy estimators": [[999, "dummy-estimators"]], "DummyClassifier": [[549, null]], "DummyRegressor": [[550, null]], "D\u00b2 score": [[999, "d2-score"]], "D\u00b2 score for classification": [[999, "d2-score-for-classification"]], "Earlier versions": [[1029, "earlier-versions"]], "Early stopping in Gradient Boosting": [[144, null]], "Early stopping of Stochastic Gradient Descent": [[214, null]], "Effect of model regularization on training and test error": [[277, null]], "Effect of number of trees and early stopping": [[149, "effect-of-number-of-trees-and-early-stopping"]], "Effect of rescaling on a PCA dimensional reduction": [[309, "effect-of-rescaling-on-a-pca-dimensional-reduction"]], "Effect of rescaling on a k-neighbors models": [[309, "effect-of-rescaling-on-a-k-neighbors-models"]], "Effect of rescaling on model\u2019s performance": [[309, "effect-of-rescaling-on-model-s-performance"]], "Effect of transforming the targets in regression model": [[107, null]], "Effect of varying threshold for self-training": [[328, null]], "EfficiencyWarning": [[572, null]], "Efficient Linear Algebra & Array Operations": [[381, "efficient-linear-algebra-array-operations"]], "Efficient Random Sampling": [[381, "efficient-random-sampling"]], "Efficient Routines for Sparse Matrices": [[381, "efficient-routines-for-sparse-matrices"]], "Eigenfaces - PCA using randomized SVD": [[120, "eigenfaces-pca-using-randomized-svd"]], "Elastic-Net": [[995, "elastic-net"]], "ElasticNet": [[194, "elasticnet"], [646, null]], "ElasticNetCV": [[647, null]], "EllipticEnvelope": [[466, null]], "Embedding in 2D space": [[51, "embedding-in-2d-space"]], "Embedding techniques comparison": [[227, "embedding-techniques-comparison"]], "Emeritus Communication Team": [[0, "emeritus-communication-team"]], "Emeritus Contributor Experience Team": [[0, "emeritus-contributor-experience-team"]], "Emeritus Core Contributors": [[0, "emeritus-core-contributors"]], "Emeritus Maintainers Team": [[0, "emeritus-maintainers-team"]], "Empirical covariance": [[406, "empirical-covariance"]], "Empirical evaluation of the impact of k-means initialization": [[94, null]], "Empirical validation": [[237, "empirical-validation"]], "EmpiricalCovariance": [[467, null]], "Encoding categorical features": [[1009, "encoding-categorical-features"]], "Encoding strategy": [[86, "encoding-strategy"]], "Enforcing keyword-only arguments": [[1040, "enforcing-keyword-only-arguments"], [1042, "enforcing-keyword-only-arguments"]], "Enhancement proposals (SLEPs)": [[387, "enhancement-proposals-sleps"]], "Enhancements": [[1032, "enhancements"], [1033, "enhancements"], [1034, "enhancements"], [1035, "enhancements"], [1035, "id4"], [1036, "enhancements"], [1036, "id3"]], "Enriched estimator displays": [[320, "enriched-estimator-displays"]], "Ensemble methods": [[133, null], [180, "ensemble-methods"]], "Ensembles: Gradient boosting, random forests, bagging, voting, stacking": [[411, null]], "Environment variables": [[360, "environment-variables"]], "Error Calculation": [[144, "error-calculation"]], "Error caused by file path length limit on Windows": [[390, "error-caused-by-file-path-length-limit-on-windows"]], "Errors and weights of the Weak Learners": [[134, "errors-and-weights-of-the-weak-learners"]], "Establishing a baseline model": [[188, "establishing-a-baseline-model"]], "Establishing parity between clusters": [[97, "establishing-parity-between-clusters"]], "Establishing the kernel approximation model": [[188, "establishing-the-kernel-approximation-model"]], "Establishing the kernelized SVM model": [[188, "establishing-the-kernelized-svm-model"]], "Estimate the covariance": [[113, "estimate-the-covariance"]], "Estimate the score": [[179, "estimate-the-score"]], "Estimated Attributes": [[374, "estimated-attributes"]], "Estimation algorithms": [[993, "estimation-algorithms"]], "Estimator Tags": [[374, "estimator-tags"]], "Estimator types": [[374, "estimator-types"]], "EstimatorCheckFailedWarning": [[573, null]], "Estimators": [[355, "estimators"], [355, "id2"], [374, "estimators"], [400, "estimators"], [400, "id2"]], "Estimators that handle NaN values": [[989, "estimators-that-handle-nan-values"]], "Evaluate the impact of the regularization parameter": [[277, "evaluate-the-impact-of-the-regularization-parameter"]], "Evaluation": [[112, "evaluation"], [302, "evaluation"]], "Evaluation metrics": [[258, "evaluation-metrics"]], "Evaluation of outlier detection estimators": [[243, null]], "Evaluation of the calibration of predictions": [[207, "evaluation-of-the-calibration-of-predictions"]], "Evaluation of the ranking power": [[207, "evaluation-of-the-ranking-power"]], "Evernote": [[1023, "id6"]], "Exact Kernel PCA": [[409, "exact-kernel-pca"]], "Exact PCA and probabilistic interpretation": [[409, "exact-pca-and-probabilistic-interpretation"]], "Example usage": [[400, "example-usage"]], "Example with noise-free target": [[174, "example-with-noise-free-target"]], "Example with noisy targets": [[174, "example-with-noisy-targets"]], "Examples": [[180, null], [361, "examples"], [403, "examples"], [1029, "examples"]], "Examples based on real world datasets": [[42, null], [180, "examples-based-on-real-world-datasets"]], "Examples of Using FrozenEstimator": [[165, null]], "Exhaustive Grid Search": [[988, "exhaustive-grid-search"]], "Exp-Sine-Squared kernel": [[176, "exp-sine-squared-kernel"], [414, "exp-sine-squared-kernel"]], "ExpSineSquared": [[615, null]], "Experimental / Under Development": [[1045, "experimental-under-development"]], "Experimental Array API support in LinearDiscriminantAnalysis": [[318, "experimental-array-api-support-in-lineardiscriminantanalysis"]], "Experimental Features": [[376, "experimental-features"]], "Explained variance score": [[999, "explained-variance-score"]], "Explicit feature map approximation for RBF kernels": [[238, null]], "Exponentiation": [[616, null]], "Exporting": [[40, "exporting"]], "External Resources, Videos and Talks": [[1017, null]], "External Tutorials": [[1017, "external-tutorials"]], "External dependencies": [[1029, "external-dependencies"]], "ExtraTreeClassifier": [[914, null]], "ExtraTreeRegressor": [[915, null]], "ExtraTreesClassifier": [[555, null]], "ExtraTreesRegressor": [[556, null]], "Extract noisy patches and reconstruct them using the dictionary": [[123, "extract-noisy-patches-and-reconstruct-them-using-the-dictionary"]], "Extract reference patches": [[123, "extract-reference-patches"]], "Extracting features": [[361, "extracting-features"]], "Extremely Randomized Trees": [[411, "extremely-randomized-trees"]], "Face completion with a multi-output estimators": [[242, null]], "Faces dataset decompositions": [[120, null]], "Faces recognition example using eigenfaces and SVMs": [[45, null]], "Factor Analysis": [[409, "factor-analysis"]], "Factor Analysis (with rotation) to visualize patterns": [[130, null]], "Factor Analysis components - FA": [[120, "factor-analysis-components-fa"]], "FactorAnalysis": [[530, null]], "Failure of Machine Learning to infer causal effects": [[182, null]], "FastICA": [[531, null]], "FastICA on 2D point clouds": [[122, null]], "Faster parser in fetch_openml": [[318, "faster-parser-in-fetch-openml"]], "Feature Extraction Latency": [[359, "feature-extraction-latency"]], "Feature Extraction using TfidfVectorizer": [[348, "feature-extraction-using-tfidfvectorizer"]], "Feature Names Support": [[316, "feature-names-support"]], "Feature Selection": [[157, null], [180, "feature-selection"]], "Feature agglomeration": [[84, null], [1016, "feature-agglomeration"]], "Feature agglomeration vs. univariate selection": [[87, null]], "Feature binarization": [[1009, "feature-binarization"]], "Feature discretization": [[306, null]], "Feature extraction": [[412, null]], "Feature hashing": [[412, "feature-hashing"]], "Feature importance based on feature permutation": [[141, "feature-importance-based-on-feature-permutation"]], "Feature importance based on mean decrease in impurity": [[141, "feature-importance-based-on-mean-decrease-in-impurity"]], "Feature importance evaluation": [[411, "feature-importance-evaluation"]], "Feature importance from coefficients": [[163, "feature-importance-from-coefficients"]], "Feature importances with a forest of trees": [[141, null]], "Feature normalization": [[188, "feature-normalization"]], "Feature scaling": [[1016, null]], "Feature selection": [[413, null]], "Feature selection as part of a pipeline": [[413, "feature-selection-as-part-of-a-pipeline"]], "Feature selection using SelectFromModel": [[413, "feature-selection-using-selectfrommodel"]], "Feature selection with sparse data": [[413, null]], "Feature transformations with ensembles of trees": [[139, null]], "FeatureAgglomeration": [[404, null], [442, null]], "FeatureHasher": [[349, "featurehasher"], [581, null]], "FeatureHasher and DictVectorizer Comparison": [[349, null]], "FeatureUnion": [[863, null]], "FeatureUnion: composite feature spaces": [[405, "featureunion-composite-feature-spaces"]], "Features in Histogram Gradient Boosting Trees": [[149, null]], "Fedora": [[390, "fedora"]], "Final conclusion": [[167, "final-conclusion"]], "Final remarks": [[90, "final-remarks"]], "Finding the Nearest Neighbors": [[1002, "finding-the-nearest-neighbors"]], "First example": [[48, "first-example"]], "First experiment: fixed ground truth labels and growing number of clusters": [[72, "first-experiment-fixed-ground-truth-labels-and-growing-number-of-clusters"]], "Fit ICA and PCA models": [[121, "fit-ica-and-pca-models"]], "Fit by cubic polynomial": [[191, "fit-by-cubic-polynomial"]], "Fit models": [[203, "fit-models"], [283, "fit-models"]], "Fit models and plot results": [[90, "fit-models-and-plot-results"]], "Fit regression model": [[147, "fit-regression-model"], [296, "fit-regression-model"], [342, "fit-regression-model"], [353, "fit-regression-model"], [353, "id1"]], "Fit the model for outlier detection (default)": [[291, "fit-the-model-for-outlier-detection-default"]], "Fit the models": [[127, "fit-the-models"]], "Fit the regressors": [[190, "fit-the-regressors"], [190, "id2"]], "FitFailedWarning": [[574, null]], "Fitting": [[374, "fitting"]], "Fitting SpectralBiclustering": [[58, "fitting-spectralbiclustering"]], "Fitting a QuantileRegressor": [[209, "fitting-a-quantileregressor"]], "Fitting additional trees": [[411, "fitting-additional-trees"]], "Fitting additional weak-learners": [[411, "fitting-additional-weak-learners"]], "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples": [[192, null]], "Fitting an elliptic envelope": [[1005, "fitting-an-elliptic-envelope"]], "Fitting and calibration": [[63, "fitting-and-calibration"]], "Fitting and predicting: estimator basics": [[385, "fitting-and-predicting-estimator-basics"]], "Fitting non-linear quantile and least squares regressors": [[146, "fitting-non-linear-quantile-and-least-squares-regressors"]], "Fixed models": [[1042, "fixed-models"]], "FixedThresholdClassifier": [[799, null]], "FixedThresholdClassifier: Setting the decision threshold of a binary classifier": [[321, "fixedthresholdclassifier-setting-the-decision-threshold-of-a-binary-classifier"]], "Fixes": [[1029, "fixes"]], "Flexibility of IterativeImputer": [[989, "flexibility-of-iterativeimputer"]], "Folding and unfolding outdated diffs on pull requests": [[380, "folding-and-unfolding-outdated-diffs-on-pull-requests"]], "Forecasting of CO2 level on Mona Loa dataset using Gaussian process regression (GPR)": [[172, null]], "Forest covertypes": [[367, "forest-covertypes"]], "Forest covertypes dataset": [[243, "forest-covertypes-dataset"]], "Fowlkes-Mallows scores": [[404, "fowlkes-mallows-scores"]], "Free-threaded CPython 3.13 support": [[322, "free-threaded-cpython-3-13-support"], [1048, "free-threaded-cpython-3-13-support"]], "FreeBSD": [[370, "freebsd"]], "Frequency model \u2013 Poisson distribution": [[224, "frequency-model-poisson-distribution"]], "Frequently Asked Questions": [[384, null]], "From binary to multiclass and multilabel": [[999, "from-binary-to-multiclass-and-multilabel"]], "From images": [[16, "module-sklearn.feature_extraction.image"]], "From text": [[16, "module-sklearn.feature_extraction.text"]], "Frozen Estimators": [[164, null], [180, "frozen-estimators"]], "FrozenEstimator": [[609, null]], "FrozenEstimator: Freezing an estimator": [[322, "frozenestimator-freezing-an-estimator"]], "Fruitful discussions": [[371, null]], "FunctionTransformer": [[868, null]], "Funding": [[0, "funding"]], "GMM Initialization Methods": [[252, null]], "GMM covariances": [[251, null]], "GPC examples": [[414, "gpc-examples"]], "Gallery examples": [[418, "gallery-examples"], [421, "gallery-examples"], [424, "gallery-examples"], [427, "gallery-examples"], [428, "gallery-examples"], [434, "gallery-examples"], [435, "gallery-examples"], [437, "gallery-examples"], [438, "gallery-examples"], [439, "gallery-examples"], [440, "gallery-examples"], [441, "gallery-examples"], [442, "gallery-examples"], [443, "gallery-examples"], [444, "gallery-examples"], [445, "gallery-examples"], [446, "gallery-examples"], [447, "gallery-examples"], [448, "gallery-examples"], [449, "gallery-examples"], [450, "gallery-examples"], [451, "gallery-examples"], [452, "gallery-examples"], [455, "gallery-examples"], [457, "gallery-examples"], [459, "gallery-examples"], [461, "gallery-examples"], [462, "gallery-examples"], [463, "gallery-examples"], [464, "gallery-examples"], [465, "gallery-examples"], [466, "gallery-examples"], [467, "gallery-examples"], [469, "gallery-examples"], [470, "gallery-examples"], [471, "gallery-examples"], [472, "gallery-examples"], [473, "gallery-examples"], [474, "gallery-examples"], [476, "gallery-examples"], [479, "gallery-examples"], [480, "gallery-examples"], [481, "gallery-examples"], [485, "gallery-examples"], [486, "gallery-examples"], [487, "gallery-examples"], [488, "gallery-examples"], [489, "gallery-examples"], [490, "gallery-examples"], [492, "gallery-examples"], [493, "gallery-examples"], [494, "gallery-examples"], [496, "gallery-examples"], [497, "gallery-examples"], [498, "gallery-examples"], [499, "gallery-examples"], [500, "gallery-examples"], [502, "gallery-examples"], [508, "gallery-examples"], [509, "gallery-examples"], [510, "gallery-examples"], [511, "gallery-examples"], [512, "gallery-examples"], [513, "gallery-examples"], [517, "gallery-examples"], [518, "gallery-examples"], [519, "gallery-examples"], [520, "gallery-examples"], [521, "gallery-examples"], [522, "gallery-examples"], [523, "gallery-examples"], [524, "gallery-examples"], [525, "gallery-examples"], [528, "gallery-examples"], [530, "gallery-examples"], [531, "gallery-examples"], [532, "gallery-examples"], [533, "gallery-examples"], [534, "gallery-examples"], [535, "gallery-examples"], [536, "gallery-examples"], [537, "gallery-examples"], [538, "gallery-examples"], [539, "gallery-examples"], [540, "gallery-examples"], [541, "gallery-examples"], [542, "gallery-examples"], [547, "gallery-examples"], [548, "gallery-examples"], [549, "gallery-examples"], [550, "gallery-examples"], [551, "gallery-examples"], [552, "gallery-examples"], [554, "gallery-examples"], [555, "gallery-examples"], [556, "gallery-examples"], [557, "gallery-examples"], [558, "gallery-examples"], [559, "gallery-examples"], [560, "gallery-examples"], [561, "gallery-examples"], [562, "gallery-examples"], [563, "gallery-examples"], [564, "gallery-examples"], [565, "gallery-examples"], [566, "gallery-examples"], [567, "gallery-examples"], [568, "gallery-examples"], [580, "gallery-examples"], [581, "gallery-examples"], [583, "gallery-examples"], [586, "gallery-examples"], [587, "gallery-examples"], [588, "gallery-examples"], [589, "gallery-examples"], [590, "gallery-examples"], [592, "gallery-examples"], [593, "gallery-examples"], [596, "gallery-examples"], [598, "gallery-examples"], [599, "gallery-examples"], [601, "gallery-examples"], [603, "gallery-examples"], [604, "gallery-examples"], [605, "gallery-examples"], [606, "gallery-examples"], [607, "gallery-examples"], [609, "gallery-examples"], [610, "gallery-examples"], [611, "gallery-examples"], [613, "gallery-examples"], [614, "gallery-examples"], [615, "gallery-examples"], [617, "gallery-examples"], [618, "gallery-examples"], [619, "gallery-examples"], [622, "gallery-examples"], [623, "gallery-examples"], [625, "gallery-examples"], [627, "gallery-examples"], [628, "gallery-examples"], [630, "gallery-examples"], [631, "gallery-examples"], [632, "gallery-examples"], [633, "gallery-examples"], [634, "gallery-examples"], [635, "gallery-examples"], [639, "gallery-examples"], [640, "gallery-examples"], [641, "gallery-examples"], [643, "gallery-examples"], [644, "gallery-examples"], [645, "gallery-examples"], [646, "gallery-examples"], [647, "gallery-examples"], [648, "gallery-examples"], [649, "gallery-examples"], [652, "gallery-examples"], [653, "gallery-examples"], [655, "gallery-examples"], [656, "gallery-examples"], [657, "gallery-examples"], [658, "gallery-examples"], [659, "gallery-examples"], [662, "gallery-examples"], [664, "gallery-examples"], [665, "gallery-examples"], [666, "gallery-examples"], [668, "gallery-examples"], [669, "gallery-examples"], [670, "gallery-examples"], [671, "gallery-examples"], [672, "gallery-examples"], [673, "gallery-examples"], [674, "gallery-examples"], [676, "gallery-examples"], [677, "gallery-examples"], [678, "gallery-examples"], [679, "gallery-examples"], [680, "gallery-examples"], [681, "gallery-examples"], [682, "gallery-examples"], [684, "gallery-examples"], [688, "gallery-examples"], [689, "gallery-examples"], [690, "gallery-examples"], [691, "gallery-examples"], [692, "gallery-examples"], [693, "gallery-examples"], [697, "gallery-examples"], [698, "gallery-examples"], [700, "gallery-examples"], [701, "gallery-examples"], [702, "gallery-examples"], [703, "gallery-examples"], [704, "gallery-examples"], [705, "gallery-examples"], [706, "gallery-examples"], [707, "gallery-examples"], [709, "gallery-examples"], [712, "gallery-examples"], [713, "gallery-examples"], [717, "gallery-examples"], [718, "gallery-examples"], [719, "gallery-examples"], [727, "gallery-examples"], [729, "gallery-examples"], [732, "gallery-examples"], [734, "gallery-examples"], [735, "gallery-examples"], [737, "gallery-examples"], [738, "gallery-examples"], [741, "gallery-examples"], [742, "gallery-examples"], [745, "gallery-examples"], [746, "gallery-examples"], [748, "gallery-examples"], [749, "gallery-examples"], [750, "gallery-examples"], [752, "gallery-examples"], [753, "gallery-examples"], [755, "gallery-examples"], [757, "gallery-examples"], [761, "gallery-examples"], [778, "gallery-examples"], [779, "gallery-examples"], [782, "gallery-examples"], [784, "gallery-examples"], [785, "gallery-examples"], [786, "gallery-examples"], [787, "gallery-examples"], [788, "gallery-examples"], [789, "gallery-examples"], [790, "gallery-examples"], [792, "gallery-examples"], [793, "gallery-examples"], [795, "gallery-examples"], [797, "gallery-examples"], [798, "gallery-examples"], [799, "gallery-examples"], [800, "gallery-examples"], [801, "gallery-examples"], [802, "gallery-examples"], [803, "gallery-examples"], [804, "gallery-examples"], [805, "gallery-examples"], [806, "gallery-examples"], [814, "gallery-examples"], [815, "gallery-examples"], [816, "gallery-examples"], [817, "gallery-examples"], [818, "gallery-examples"], [819, "gallery-examples"], [820, "gallery-examples"], [821, "gallery-examples"], [822, "gallery-examples"], [823, "gallery-examples"], [825, "gallery-examples"], [826, "gallery-examples"], [827, "gallery-examples"], [828, "gallery-examples"], [829, "gallery-examples"], [830, "gallery-examples"], [831, "gallery-examples"], [832, "gallery-examples"], [833, "gallery-examples"], [834, "gallery-examples"], [835, "gallery-examples"], [837, "gallery-examples"], [839, "gallery-examples"], [841, "gallery-examples"], [842, "gallery-examples"], [843, "gallery-examples"], [846, "gallery-examples"], [847, "gallery-examples"], [848, "gallery-examples"], [849, "gallery-examples"], [850, "gallery-examples"], [851, "gallery-examples"], [852, "gallery-examples"], [853, "gallery-examples"], [857, "gallery-examples"], [860, "gallery-examples"], [861, "gallery-examples"], [862, "gallery-examples"], [863, "gallery-examples"], [864, "gallery-examples"], [865, "gallery-examples"], [868, "gallery-examples"], [869, "gallery-examples"], [871, "gallery-examples"], [873, "gallery-examples"], [874, "gallery-examples"], [876, "gallery-examples"], [877, "gallery-examples"], [878, "gallery-examples"], [879, "gallery-examples"], [880, "gallery-examples"], [881, "gallery-examples"], [882, "gallery-examples"], [883, "gallery-examples"], [884, "gallery-examples"], [885, "gallery-examples"], [888, "gallery-examples"], [890, "gallery-examples"], [893, "gallery-examples"], [897, "gallery-examples"], [898, "gallery-examples"], [900, "gallery-examples"], [901, "gallery-examples"], [902, "gallery-examples"], [904, "gallery-examples"], [907, "gallery-examples"], [908, "gallery-examples"], [909, "gallery-examples"], [910, "gallery-examples"], [911, "gallery-examples"], [912, "gallery-examples"], [913, "gallery-examples"], [918, "gallery-examples"], [919, "gallery-examples"], [923, "gallery-examples"], [931, "gallery-examples"], [933, "gallery-examples"], [941, "gallery-examples"], [943, "gallery-examples"], [945, "gallery-examples"], [952, "gallery-examples"], [957, "gallery-examples"], [958, "gallery-examples"], [959, "gallery-examples"], [960, "gallery-examples"], [961, "gallery-examples"], [972, "gallery-examples"], [982, "gallery-examples"], [987, "gallery-examples"]], "Gamma loss for gradient boosting": [[319, "gamma-loss-for-gradient-boosting"]], "GammaRegressor": [[648, null]], "Gaussian Mixture": [[998, "gaussian-mixture"]], "Gaussian Mixture Model Ellipsoids": [[250, null]], "Gaussian Mixture Model Selection": [[254, null]], "Gaussian Mixture Model Sine Curve": [[255, null]], "Gaussian Mixture Models": [[180, "gaussian-mixture-models"], [248, null]], "Gaussian Naive Bayes": [[62, "gaussian-naive-bayes"], [1001, "gaussian-naive-bayes"]], "Gaussian Naive-Bayes": [[61, "gaussian-naive-bayes"]], "Gaussian Process Classification (GPC)": [[414, "gaussian-process-classification-gpc"]], "Gaussian Process Regression (GPR)": [[414, "gaussian-process-regression-gpr"]], "Gaussian Process for Machine Learning": [[166, null], [180, "gaussian-process-for-machine-learning"]], "Gaussian Processes": [[414, null]], "Gaussian Processes regression: basic introductory example": [[174, null]], "Gaussian mixture models": [[998, null]], "Gaussian process classification (GPC) on iris dataset": [[169, null], [414, "gaussian-process-classification-gpc-on-iris-dataset"]], "Gaussian process regression": [[167, "gaussian-process-regression"]], "Gaussian processes on discrete data structures": [[175, null]], "Gaussian random projection": [[1011, "gaussian-random-projection"]], "GaussianMixture": [[798, null]], "GaussianNB": [[842, null]], "GaussianProcessClassifier": [[610, null]], "GaussianProcessRegressor": [[611, null]], "GaussianRandomProjection": [[896, null]], "General Concepts": [[386, "general-concepts"]], "General recommendations": [[355, "general-recommendations"]], "Generalized Linear Models": [[180, "generalized-linear-models"], [189, null], [995, "generalized-linear-models"]], "Generalized Linear Models, and Poisson loss for gradient boosting": [[314, "generalized-linear-models-and-poisson-loss-for-gradient-boosting"]], "Generalized linear models (GLM) for regression": [[25, "generalized-linear-models-glm-for-regression"]], "Generate data": [[81, "generate-data"], [100, "generate-data"], [111, "generate-data"], [203, "generate-data"], [302, "generate-data"]], "Generate data with outliers": [[291, "generate-data-with-outliers"]], "Generate distorted image": [[123, "generate-distorted-image"]], "Generate sample data": [[58, "generate-sample-data"], [73, "generate-sample-data"], [88, "generate-sample-data"], [96, "generate-sample-data"], [109, "generate-sample-data"], [121, "generate-sample-data"], [122, "generate-sample-data"], [159, "generate-sample-data"], [239, "generate-sample-data"], [277, "generate-sample-data"], [296, "generate-sample-data"], [342, "generate-sample-data"]], "Generate sinusoidal data with noise": [[191, "generate-sinusoidal-data-with-noise"]], "Generate synthetic data": [[261, "generate-synthetic-data"]], "Generate synthetic dataset": [[61, "generate-synthetic-dataset"], [190, "generate-synthetic-dataset"], [190, "id1"], [194, "generate-synthetic-dataset"]], "Generate the data": [[97, "generate-the-data"], [99, "generate-the-data"], [113, "generate-the-data"]], "Generated datasets": [[368, null]], "Generated documentation on GitHub Actions": [[372, "generated-documentation-on-github-actions"]], "Generating Polars-engineered lagged features": [[52, "generating-polars-engineered-lagged-features"]], "Generating a dataset": [[167, "generating-a-dataset"]], "Generating polynomial features": [[1009, "generating-polynomial-features"]], "Generators for classification and clustering": [[368, "generators-for-classification-and-clustering"]], "Generators for decomposition": [[368, "generators-for-decomposition"]], "Generators for manifold learning": [[368, "generators-for-manifold-learning"]], "Generators for regression": [[368, "generators-for-regression"]], "Generic dictionary learning": [[409, "generic-dictionary-learning"]], "GenericUnivariateSelect": [[591, null]], "Getting Started": [[385, null]], "Getting reproducible results across multiple executions": [[355, "getting-reproducible-results-across-multiple-executions"]], "Gitter": [[1022, "gitter"]], "Glossary of Common Terms and API Elements": [[386, null]], "Good practices": [[377, "good-practices"]], "Governance": [[0, "governance"]], "Governance Model Changes": [[387, "governance-model-changes"]], "Gradient Boosting": [[43, "gradient-boosting"]], "Gradient Boosting Out-of-Bag estimates": [[145, null]], "Gradient Boosting Regression Trees for Poisson regression": [[207, "gradient-boosting-regression-trees-for-poisson-regression"]], "Gradient Boosting regression": [[147, null]], "Gradient Boosting regularization": [[148, null]], "Gradient boosting": [[184, "gradient-boosting"]], "Gradient boosting estimator with dropped categorical features": [[143, "gradient-boosting-estimator-with-dropped-categorical-features"]], "Gradient boosting estimator with native categorical support": [[143, "gradient-boosting-estimator-with-native-categorical-support"]], "Gradient boosting estimator with one-hot encoding": [[143, "gradient-boosting-estimator-with-one-hot-encoding"]], "Gradient boosting estimator with ordinal encoding": [[143, "gradient-boosting-estimator-with-ordinal-encoding"]], "Gradient-boosted trees": [[411, "gradient-boosted-trees"]], "GradientBoostingClassifier": [[557, null]], "GradientBoostingClassifier and GradientBoostingRegressor": [[411, "gradientboostingclassifier-and-gradientboostingregressor"]], "GradientBoostingClassifier vs HistGradientBoostingClassifier": [[411, null]], "GradientBoostingRegressor": [[558, null]], "Graph Routines": [[381, "graph-routines"]], "Graphical model and parametrization": [[1004, "graphical-model-and-parametrization"]], "GraphicalLasso": [[468, null]], "GraphicalLassoCV": [[469, null]], "GridSearchCV": [[800, null]], "Group K-fold": [[408, "group-k-fold"]], "Group Shuffle Split": [[408, "group-shuffle-split"]], "GroupKFold": [[801, null]], "GroupShuffleSplit": [[802, null]], "Grouping infrequent categories in OneHotEncoder": [[317, "grouping-infrequent-categories-in-onehotencoder"]], "Grouping infrequent categories in OrdinalEncoder": [[319, "grouping-infrequent-categories-in-ordinalencoder"]], "Guideline for bumping minimum versions of our dependencies": [[376, "guideline-for-bumping-minimum-versions-of-our-dependencies"]], "HDBSCAN": [[404, "hdbscan"], [443, null]], "HDBSCAN: hierarchical density-based clustering": [[319, "hdbscan-hierarchical-density-based-clustering"]], "HalvingGridSearchCV": [[803, null]], "HalvingRandomSearchCV": [[804, null]], "Hamming loss": [[999, "hamming-loss"]], "Handling Multicollinear Features": [[186, "handling-multicollinear-features"]], "Hash Functions": [[381, "hash-functions"]], "Hashing feature transformation using Totally Random Trees": [[152, null]], "HashingVectorizer": [[348, "hashingvectorizer"], [588, null]], "Helper Functions": [[381, "helper-functions"]], "Helper function": [[176, "helper-function"]], "Helper function to plot embedding": [[227, "helper-function-to-plot-embedding"]], "Helper functions": [[263, "helper-functions"]], "Hessian Eigenmapping": [[996, "hessian-eigenmapping"]], "Hierarchical Clustering": [[404, "id11"]], "Hierarchical clustering": [[404, "hierarchical-clustering"]], "Hierarchical clustering: structured vs unstructured ward": [[100, null]], "Higher-level parallelism with joblib": [[360, "higher-level-parallelism-with-joblib"]], "Highlights": [[1029, "highlights"], [1032, "highlights"], [1033, "highlights"], [1036, "highlights"], [1037, "highlights"]], "Hinge loss": [[999, "hinge-loss"]], "HistGradientBoosting Natively Supports Categorical DTypes in DataFrames": [[320, "histgradientboosting-natively-supports-categorical-dtypes-in-dataframes"]], "HistGradientBoostingClassifier": [[559, null]], "HistGradientBoostingRegressor": [[560, null]], "Histogram-Based Gradient Boosting": [[411, "histogram-based-gradient-boosting"]], "Histogram-based Gradient Boosting Models are now stable": [[316, "histogram-based-gradient-boosting-models-are-now-stable"]], "History": [[0, "history"]], "Homogeneity, completeness and V-measure": [[404, "homogeneity-completeness-and-v-measure"]], "How can I contribute to scikit-learn?": [[384, "how-can-i-contribute-to-scikit-learn"]], "How can I create a bunch object?": [[384, "how-can-i-create-a-bunch-object"]], "How can I load my own datasets into a format usable by scikit-learn?": [[384, "how-can-i-load-my-own-datasets-into-a-format-usable-by-scikit-learn"]], "How can I obtain permission to use the images in scikit-learn for my work?": [[384, "how-can-i-obtain-permission-to-use-the-images-in-scikit-learn-for-my-work"]], "How do I deal with string data (or trees, graphs\u2026)?": [[384, "how-do-i-deal-with-string-data-or-trees-graphs"]], "How do I get started with scikit-learn?": [[384, "how-do-i-get-started-with-scikit-learn"]], "How do I set a random_state for an entire execution?": [[384, "how-do-i-set-a-random-state-for-an-entire-execution"]], "How do you pronounce the project name?": [[384, "how-do-you-pronounce-the-project-name"]], "How should I save, export or deploy estimators for production?": [[384, "how-should-i-save-export-or-deploy-estimators-for-production"]], "How to avoid data leakage": [[355, "how-to-avoid-data-leakage"]], "How to contribute": [[372, "how-to-contribute"]], "How to make a good bug report": [[372, "how-to-make-a-good-bug-report"]], "How to optimize for speed": [[378, null]], "HowAboutWe": [[1023, "id16"]], "Huber Regression": [[995, "huber-regression"]], "HuberRegressor": [[649, null]], "HuberRegressor vs Ridge on dataset with strong outliers": [[193, null]], "Hugging Face": [[1023, "id5"]], "Hyper-parameter optimizers": [[29, "hyper-parameter-optimizers"]], "Hyperparameter": [[617, null]], "Hyperparameter Robustness": [[88, "hyperparameter-robustness"]], "Hyperplanes Visualization": [[201, "hyperplanes-visualization"]], "ICE vs. PDP": [[184, "ice-vs-pdp"]], "INFONEA": [[1023, "id24"]], "Illustration of GPC on the XOR dataset": [[414, "illustration-of-gpc-on-the-xor-dataset"]], "Illustration of Gaussian process classification (GPC) on the XOR dataset": [[171, null]], "Illustration of Pipeline and GridSearchCV": [[104, "illustration-of-pipeline-and-gridsearchcv"]], "Illustration of prior and posterior Gaussian process for different kernels": [[176, null]], "Image denoising using dictionary learning": [[123, null]], "Image denoising using kernel PCA": [[44, null]], "Image feature extraction": [[412, "image-feature-extraction"]], "Implementation": [[1002, "implementation"]], "Implementation decisions": [[384, "implementation-decisions"]], "Implementation details": [[1013, "implementation-details"], [1014, "implementation-details"]], "Importance of Feature Scaling": [[309, null]], "Important notes regarding the internal cross-validation": [[403, "important-notes-regarding-the-internal-cross-validation"]], "Improved API consistency of Multi-layer Perceptron": [[323, "improved-api-consistency-of-multi-layer-perceptron"]], "Improved efficiency of many estimators": [[318, "improved-efficiency-of-many-estimators"]], "Improved estimator\u2019s HTML representation": [[323, "improved-estimator-s-html-representation"]], "Improved memory and runtime efficiency for PCA on sparse data": [[320, "improved-memory-and-runtime-efficiency-for-pca-on-sparse-data"]], "Improved performances of HistGradientBoosting estimators": [[315, "improved-performances-of-histgradientboosting-estimators"]], "Improvements to the developer API for third party libraries": [[322, "improvements-to-the-developer-api-for-third-party-libraries"]], "Improvements to the histogram-based Gradient Boosting estimators": [[314, "improvements-to-the-histogram-based-gradient-boosting-estimators"]], "Imputation of missing values": [[989, null], [1009, "imputation-of-missing-values"]], "Impute missing values with mean": [[179, "impute-missing-values-with-mean"]], "Impute the missing data and score": [[179, "impute-the-missing-data-and-score"]], "Imputing missing values before building an estimator": [[179, null]], "Imputing missing values with variants of IterativeImputer": [[178, null]], "In binary classification settings": [[271, "in-binary-classification-settings"]], "In multi-label settings": [[271, "in-multi-label-settings"]], "Income prediction with fully observed variables": [[182, "income-prediction-with-fully-observed-variables"]], "Income prediction with partial observations": [[182, "income-prediction-with-partial-observations"]], "Inconsistent preprocessing": [[355, "inconsistent-preprocessing"]], "InconsistentVersionWarning": [[575, null]], "Incremental PCA": [[124, null], [409, "incremental-pca"]], "Incremental learning": [[361, "incremental-learning"]], "IncrementalPCA": [[532, null]], "Independent component analysis (ICA)": [[409, "independent-component-analysis-ica"]], "Independent components - FastICA": [[120, "independent-components-fastica"]], "Individual Conditional Expectation plots": [[315, "individual-conditional-expectation-plots"]], "Individual conditional expectation (ICE) plot": [[1006, "individual-conditional-expectation-ice-plot"]], "Inductive Clustering": [[89, null]], "Influence of the Input Data Representation": [[359, "influence-of-the-input-data-representation"]], "Influence of the Model Complexity": [[359, "influence-of-the-model-complexity"]], "Influence of the Number of Features": [[359, "influence-of-the-number-of-features"]], "Information Criterion": [[988, "information-criterion"]], "Information-criteria based model selection": [[995, "information-criteria-based-model-selection"]], "Infrequent categories": [[1009, "infrequent-categories"]], "Input and output array type handling": [[400, "input-and-output-array-type-handling"]], "Input and parameter validation": [[41, "module-sklearn.utils.validation"]], "Input data": [[404, null]], "Input validation": [[374, "input-validation"]], "InputTags": [[921, null]], "Inria": [[1023, "id3"]], "Inspection": [[180, "inspection"], [181, null], [389, null]], "Installing nightly builds": [[370, "installing-nightly-builds"]], "Installing scikit-learn": [[390, null]], "Installing the development version of scikit-learn": [[370, null]], "Installing the latest release": [[390, "installing-the-latest-release"]], "Instantiation": [[374, "instantiation"]], "Intel Extension for Scikit-learn": [[390, "intel-extension-for-scikit-learn"]], "Interaction constraints": [[411, "interaction-constraints"]], "Interaction constraints in Histogram-based Gradient Boosting Trees": [[318, "interaction-constraints-in-histogram-based-gradient-boosting-trees"]], "Interoperability and framework enhancements": [[1018, "interoperability-and-framework-enhancements"]], "Interpretation of kernel hyperparameters": [[172, "interpretation-of-kernel-hyperparameters"]], "Interpretation with feature importance": [[411, "interpretation-with-feature-importance"]], "Interpreting coefficients: being cautious about causality": [[183, "interpreting-coefficients-being-cautious-about-causality"]], "Interpreting coefficients: scale matters": [[183, "interpreting-coefficients-scale-matters"]], "Interpreting the plots": [[211, "interpreting-the-plots"]], "Introducing the set_output API": [[247, null]], "Introduction": [[263, "introduction"], [996, "introduction"]], "Invariance with respect to prevalence": [[267, "invariance-with-respect-to-prevalence"]], "Inverse Transform": [[1011, "inverse-transform"]], "Iris plants dataset": [[369, "iris-plants-dataset"]], "Iso-probability lines for Gaussian Processes classification (GPC)": [[170, null]], "Isolation Forest": [[1005, "isolation-forest"]], "IsolationForest": [[561, null]], "IsolationForest example": [[150, null]], "Isomap": [[688, null], [996, "isomap"]], "Isomap Embedding": [[226, "isomap-embedding"]], "Isotonic": [[402, "isotonic"]], "Isotonic Regression": [[236, null]], "Isotonic regression": [[990, null]], "IsotonicRegression": [[635, null]], "Issue Tracker Tags": [[372, "issue-tracker-tags"]], "Issues for New Contributors": [[372, "issues-for-new-contributors"]], "Iterative imputation of the missing values": [[179, "iterative-imputation-of-the-missing-values"]], "IterativeImputer": [[627, null]], "J.P.Morgan": [[1023, "id1"]], "Jaccard similarity coefficient score": [[999, "jaccard-similarity-coefficient-score"]], "Joint feature selection with multi-task Lasso": [[203, null]], "K-D Tree": [[1002, "k-d-tree"]], "K-bins discretization": [[1009, "k-bins-discretization"]], "K-fold": [[408, "k-fold"]], "K-means": [[404, "k-means"]], "K-means clustering on text features": [[348, "k-means-clustering-on-text-features"]], "K-nearest neighbors classifier": [[287, "k-nearest-neighbors-classifier"]], "KBinsDiscretizer": [[869, null]], "KDDCup99 - SA dataset": [[243, "kddcup99-sa-dataset"]], "KDTree": [[845, null]], "KDTree and BallTree Classes": [[1002, "kdtree-and-balltree-classes"]], "KFold": [[805, null]], "KMeans": [[444, null]], "KNN Based Imputation": [[313, "knn-based-imputation"]], "KNNImputer": [[628, null]], "KNeighborsClassifier": [[846, null]], "KNeighborsRegressor": [[847, null]], "KNeighborsTransformer": [[848, null]], "Kddcup 99 dataset": [[367, "kddcup-99-dataset"]], "Keeping the number of features constant": [[989, "keeping-the-number-of-features-constant"]], "Kernel": [[618, null]], "Kernel Approximation": [[180, "kernel-approximation"], [187, null], [991, null]], "Kernel Density Estimate of Species Distributions": [[297, null]], "Kernel Density Estimation": [[288, null], [410, "kernel-density-estimation"]], "Kernel PCA": [[125, null]], "Kernel Principal Component Analysis (kPCA)": [[409, "kernel-principal-component-analysis-kpca"]], "Kernel cookbook": [[176, "kernel-cookbook"]], "Kernel functions": [[1014, "kernel-functions"]], "Kernel methods: kernel ridge and Gaussian process": [[167, "kernel-methods-kernel-ridge-and-gaussian-process"]], "Kernel operators": [[414, "kernel-operators"]], "Kernel ridge": [[167, "kernel-ridge"]], "Kernel ridge regression": [[992, null]], "KernelCenterer": [[870, null]], "KernelDensity": [[849, null]], "KernelPCA": [[533, null]], "KernelRidge": [[643, null]], "Kernels": [[19, "module-sklearn.gaussian_process.kernels"]], "Kernels for Gaussian Processes": [[414, "kernels-for-gaussian-processes"]], "Keyword and positional arguments": [[316, "keyword-and-positional-arguments"]], "Known Major Bugs": [[1037, "known-major-bugs"], [1038, "known-major-bugs"]], "L1 Penalty and Sparsity in Logistic Regression": [[200, null]], "L1-based feature selection": [[413, "l1-based-feature-selection"]], "L1-based models for Sparse Signals": [[194, null]], "L1-penalty case": [[343, "l1-penalty-case"]], "L2-penalty case": [[343, "l2-penalty-case"]], "LARS Lasso": [[995, "lars-lasso"]], "LDA": [[993, "lda"]], "Label Propagation": [[1012, "label-propagation"]], "Label Propagation circles: Learning a complex structure": [[327, null]], "Label Propagation digits: Active learning": [[326, null]], "Label Propagation digits: Demonstrating performance": [[325, null]], "Label binarization": [[1010, "label-binarization"]], "Label encoding": [[1010, "label-encoding"]], "Label ranking average precision": [[999, "label-ranking-average-precision"]], "LabelBinarizer": [[871, null], [1010, "labelbinarizer"]], "LabelEncoder": [[872, null]], "LabelPropagation": [[899, null]], "LabelSpreading": [[900, null]], "Lagged features for time series forecasting": [[52, null]], "Laplacian kernel": [[997, "laplacian-kernel"]], "Lars": [[650, null]], "LarsCV": [[651, null]], "Lasso": [[194, "lasso"], [652, null], [995, "lasso"]], "Lasso model selection via information criteria": [[196, null]], "Lasso model selection: AIC-BIC / cross-validation": [[198, null]], "Lasso on dense and sparse data": [[195, null]], "Lasso via coordinate descent": [[198, "lasso-via-coordinate-descent"]], "Lasso via least angle regression": [[198, "lasso-via-least-angle-regression"]], "Lasso, Lasso-LARS, and Elastic Net paths": [[197, null]], "LassoCV": [[653, null]], "LassoLars": [[654, null]], "LassoLarsCV": [[655, null]], "LassoLarsIC": [[656, null]], "Latent Dirichlet Allocation (LDA)": [[409, "latent-dirichlet-allocation-lda"]], "LatentDirichletAllocation": [[534, null]], "Learn the PCA basis": [[44, "learn-the-pca-basis"]], "Learn the dictionary from reference patches": [[123, "learn-the-dictionary-from-reference-patches"]], "Learn the dictionary of images": [[83, "learn-the-dictionary-of-images"]], "Learning Curve": [[266, "learning-curve"]], "Learning Git": [[372, null]], "Learning a graph structure": [[51, "learning-a-graph-structure"]], "Learning an embedding": [[294, "learning-an-embedding"]], "Learning curve": [[994, "learning-curve"]], "LearningCurveDisplay": [[806, null]], "Least Angle Regression": [[995, "least-angle-regression"]], "Leave One Group Out": [[408, "leave-one-group-out"]], "Leave One Out (LOO)": [[408, "leave-one-out-loo"]], "Leave P Groups Out": [[408, "leave-p-groups-out"]], "Leave P Out (LPO)": [[408, "leave-p-out-lpo"]], "LeaveOneGroupOut": [[807, null]], "LeaveOneOut": [[808, null]], "LeavePGroupsOut": [[809, null]], "LeavePOut": [[810, null]], "Ledoit-Wolf shrinkage": [[406, "ledoit-wolf-shrinkage"]], "Ledoit-Wolf vs OAS estimation": [[110, null]], "LedoitWolf": [[470, null]], "Lessons learned": [[182, "lessons-learned"], [183, "lessons-learned"]], "Limitations of a simple linear model": [[167, "limitations-of-a-simple-linear-model"]], "Limitations of the Bag of Words representation": [[412, "limitations-of-the-bag-of-words-representation"]], "Limiting Working Memory": [[359, "limiting-working-memory"]], "Limiting the number of splits": [[143, "limiting-the-number-of-splits"]], "Linear Models": [[995, null]], "Linear algebra libraries": [[359, "linear-algebra-libraries"]], "Linear and Quadratic Discriminant Analysis": [[993, null]], "Linear and Quadratic Discriminant Analysis with covariance ellipsoid": [[70, null]], "Linear classifiers": [[25, "linear-classifiers"]], "Linear kernel": [[340, "linear-kernel"], [997, "linear-kernel"]], "Linear models with regularization": [[183, "linear-models-with-regularization"]], "Linear models with sparse coefficients": [[183, "linear-models-with-sparse-coefficients"]], "Linear regression model": [[205, "linear-regression-model"]], "Linear support vector classifier": [[62, "linear-support-vector-classifier"]], "LinearDiscriminantAnalysis": [[547, null]], "LinearRegression": [[657, null]], "LinearSVC": [[904, null]], "LinearSVR": [[905, null]], "Link to R\u00b2 score, the coefficient of determination": [[999, null]], "Links": [[359, "links"]], "Linnerrud dataset": [[369, "linnerrud-dataset"]], "Linux": [[370, "linux"]], "Linux compilers from conda-forge": [[370, "linux-compilers-from-conda-forge"]], "Linux compilers from the system": [[370, "linux-compilers-from-the-system"]], "Load Ames Housing dataset": [[143, "load-ames-housing-dataset"]], "Load Data": [[349, "load-data"]], "Load Data and Train a SVC": [[246, "load-data-and-train-a-svc"]], "Load Data and train model": [[234, "load-data-and-train-model"]], "Load and prepare data": [[273, "load-and-prepare-data"], [274, "load-and-prepare-data"], [309, "load-and-prepare-data"]], "Load and prepare data set": [[336, "load-and-prepare-data-set"]], "Load data": [[202, "load-data"]], "Load dataset": [[140, "load-dataset"]], "Load digits dataset": [[227, "load-digits-dataset"]], "Load some data to play with": [[339, "load-some-data-to-play-with"]], "Load the data": [[46, "load-the-data"], [83, "load-the-data"], [147, "load-the-data"], [287, "load-the-data"]], "Load the dataset": [[91, "load-the-dataset"]], "Load the dataset via OpenML": [[44, "load-the-dataset-via-openml"]], "Load the digits dataset and fit the model": [[263, "load-the-digits-dataset-and-fit-the-model"]], "Loaders": [[9, "loaders"]], "Loading Data from OpenML": [[310, "loading-data-from-openml"]], "Loading a dataset": [[283, "loading-a-dataset"]], "Loading and vectorizing the 20 newsgroups text dataset": [[347, "loading-and-vectorizing-the-20-newsgroups-text-dataset"]], "Loading datasets, basic feature extraction and target definitions": [[224, "loading-datasets-basic-feature-extraction-and-target-definitions"]], "Loading features from dicts": [[412, "loading-features-from-dicts"]], "Loading from external datasets": [[366, "loading-from-external-datasets"]], "Loading other datasets": [[366, null]], "Loading text data": [[348, "loading-text-data"]], "Loading the Iris dataset": [[126, "loading-the-iris-dataset"]], "Loading the data": [[163, "loading-the-data"]], "Loading the redirect files": [[55, "loading-the-redirect-files"]], "Local Outlier Factor": [[1005, "local-outlier-factor"]], "Local Tangent Space Alignment": [[996, "local-tangent-space-alignment"]], "LocalOutlierFactor": [[850, null]], "Locally Linear Embedding": [[996, "locally-linear-embedding"]], "Locally Linear Embeddings": [[226, "locally-linear-embeddings"]], "LocallyLinearEmbedding": [[689, null]], "Log loss": [[999, "log-loss"]], "Logistic function": [[199, null]], "Logistic regression": [[995, "logistic-regression"]], "LogisticRegression": [[658, null]], "LogisticRegression wrapped by OneVsRestClassifier": [[283, "logisticregression-wrapped-by-onevsrestclassifier"]], "LogisticRegressionCV": [[659, null]], "Look at the results": [[239, "look-at-the-results"], [342, "look-at-the-results"]], "Loss Functions": [[411, "loss-functions"]], "Lovely": [[1023, "id20"]], "Low-level parallelism": [[404, "low-level-parallelism"], [411, "low-level-parallelism"]], "Lower-level parallelism with OpenMP": [[360, "lower-level-parallelism-with-openmp"]], "MARS": [[1023, "id28"]], "MDS": [[690, null]], "MLPClassifier": [[861, null]], "MLPRegressor": [[862, null]], "MNIST classification using multinomial logistic + L1": [[222, null]], "MacPorts for Mac OSX": [[390, "macports-for-mac-osx"]], "Machinalis": [[1023, "id22"]], "Mailing Lists": [[1022, "mailing-lists"]], "Main": [[47, "main"]], "Main takeaways": [[207, "main-takeaways"]], "Maintainer Information": [[376, null]], "Maintainers Team": [[0, "maintainers-team"]], "Maintaining backwards compatibility": [[372, "maintaining-backwards-compatibility"]], "Majority Class Labels (Majority/Hard Voting)": [[411, "majority-class-labels-majority-hard-voting"]], "Make pipeline to preprocess the data": [[154, "make-pipeline-to-preprocess-the-data"]], "Making predictions": [[156, "making-predictions"]], "Manifold Learning methods on a severed sphere": [[228, null]], "Manifold learning": [[180, "manifold-learning"], [225, null], [996, null]], "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026": [[227, null]], "Manually setting the decision threshold": [[403, "manually-setting-the-decision-threshold"]], "Manually setting the decision threshold instead of tuning it": [[258, "manually-setting-the-decision-threshold-instead-of-tuning-it"]], "Map data to a normal distribution": [[308, null]], "Mapping to a Gaussian distribution": [[1009, "mapping-to-a-gaussian-distribution"]], "Mapping to a Uniform distribution": [[1009, "mapping-to-a-uniform-distribution"]], "Marking imputed values": [[989, "marking-imputed-values"]], "Matern": [[619, null]], "Mathematical Definition": [[1006, "mathematical-definition"]], "Mathematical Details": [[991, "mathematical-details"]], "Mathematical formulation": [[401, "mathematical-formulation"], [401, "id3"], [411, "mathematical-formulation"], [1002, "mathematical-formulation"], [1013, "mathematical-formulation"], [1014, "mathematical-formulation"], [1015, "mathematical-formulation"]], "Mathematical formulation of LDA dimensionality reduction": [[993, "mathematical-formulation-of-lda-dimensionality-reduction"]], "Mathematical formulation of the LDA and QDA classifiers": [[993, "mathematical-formulation-of-the-lda-and-qda-classifiers"]], "Matthews correlation coefficient": [[999, "matthews-correlation-coefficient"]], "Mat\u00e9rn kernel": [[176, "matern-kernel"], [414, "matern-kernel"]], "Max error": [[999, "max-error"]], "MaxAbsScaler": [[304, "maxabsscaler"], [873, null]], "Mean Poisson, Gamma, and Tweedie deviances": [[999, "mean-poisson-gamma-and-tweedie-deviances"]], "Mean Shift": [[404, "mean-shift"]], "Mean absolute error": [[999, "mean-absolute-error"]], "Mean absolute percentage error": [[999, "mean-absolute-percentage-error"]], "Mean squared error": [[999, "mean-squared-error"]], "Mean squared logarithmic error": [[999, "mean-squared-logarithmic-error"]], "MeanShift": [[445, null]], "Measure and plot the results": [[154, "measure-and-plot-the-results"]], "Median absolute error": [[999, "median-absolute-error"]], "Memory footprint": [[86, "memory-footprint"]], "Memory usage profiling": [[378, "memory-usage-profiling"]], "Merging Pull Requests": [[376, "merging-pull-requests"]], "Meta-estimators": [[41, "module-sklearn.utils.metaestimators"], [400, "meta-estimators"]], "MetaEstimatorMixin": [[424, null]], "Metadata Routing": [[240, null], [319, "metadata-routing"], [386, "metadata-routing"], [395, null], [1046, "metadata-routing"], [1046, "id2"], [1047, "metadata-routing"]], "Metadata Routing Support": [[320, "metadata-routing-support"]], "Metadata Routing Support Status": [[395, "metadata-routing-support-status"]], "Metadata routing": [[41, "module-sklearn.utils.metadata_routing"], [1048, "metadata-routing"], [1049, "metadata-routing"]], "MetadataRequest": [[956, null]], "MetadataRouter": [[957, null]], "MethodMapping": [[958, null]], "Methods": [[386, "methods"]], "Metrics": [[400, "metrics"]], "Metrics and scoring: quantifying the quality of predictions": [[999, null]], "Migration toward sparse arrays": [[323, "migration-toward-sparse-arrays"]], "MinCovDet": [[471, null]], "MinMaxScaler": [[304, "minmaxscaler"], [874, null]], "Mini Batch K-Means": [[404, "mini-batch-k-means"]], "Mini-batch Non Negative Matrix Factorization": [[409, "mini-batch-non-negative-matrix-factorization"]], "Mini-batch dictionary learning": [[409, "mini-batch-dictionary-learning"]], "MiniBatchDictionaryLearning": [[535, null]], "MiniBatchKMeans": [[446, null]], "MiniBatchNMF": [[536, null]], "MiniBatchNMF: an online version of NMF": [[317, "minibatchnmf-an-online-version-of-nmf"]], "MiniBatchSparsePCA": [[537, null]], "Minimal Cost-Complexity Pruning": [[1015, "minimal-cost-complexity-pruning"]], "Minimal dependencies": [[1042, "minimal-dependencies"], [1043, "minimal-dependencies"]], "Minimum Covariance Determinant": [[406, "minimum-covariance-determinant"]], "Minimum Covariance Determinant Estimator": [[112, "minimum-covariance-determinant-estimator"]], "Misc": [[1029, "misc"]], "Miscellaneous": [[25, "miscellaneous"], [180, "miscellaneous"], [232, null], [1037, "miscellaneous"], [1037, "id40"], [1038, "miscellaneous"], [1039, "miscellaneous"], [1040, "miscellaneous"], [1040, "id13"], [1041, "miscellaneous"], [1042, "miscellaneous"], [1045, "miscellaneous"]], "Misleading values on strongly correlated features": [[1007, "misleading-values-on-strongly-correlated-features"]], "Missing Value Imputation": [[177, null], [180, "missing-value-imputation"]], "Missing Values Support": [[1015, "missing-values-support"]], "Missing value support for Extra Trees": [[322, "missing-value-support-for-extra-trees"]], "Missing value support for Random Forest": [[320, "missing-value-support-for-random-forest"]], "Missing values support": [[411, "missing-values-support"]], "Missing values support in decision trees": [[319, "missing-values-support-in-decision-trees"]], "MissingIndicator": [[629, null]], "Model Complexity Influence": [[46, null]], "Model Compression": [[359, "model-compression"]], "Model Reshaping": [[359, "model-reshaping"]], "Model Selection": [[180, "model-selection"], [256, null]], "Model Selection Enhancements and API Changes": [[1035, "model-selection-enhancements-and-api-changes"]], "Model Training and Comparison": [[144, "model-training-and-comparison"]], "Model comparison": [[143, "model-comparison"]], "Model definition": [[277, "model-definition"]], "Model evaluation": [[205, "model-evaluation"], [385, "model-evaluation"]], "Model fitting and extrapolation": [[172, "model-fitting-and-extrapolation"]], "Model persistence": [[398, null]], "Model selection and evaluation": [[399, null]], "Model selection interface": [[27, "model-selection-interface"]], "Model selection with Probabilistic PCA and Factor Analysis (FA)": [[127, null]], "Model selection: development and evaluation": [[988, "model-selection-development-and-evaluation"]], "Model specific cross-validation": [[988, "model-specific-cross-validation"]], "Model training and selection": [[162, "model-training-and-selection"], [254, "model-training-and-selection"]], "Model validation": [[29, "model-validation"]], "Model with metadata stripping": [[347, "model-with-metadata-stripping"]], "Model without metadata stripping": [[347, "model-without-metadata-stripping"]], "Model-based and sequential feature selection": [[163, null]], "Modeling non-linear feature interactions with kernels": [[43, "modeling-non-linear-feature-interactions-with-kernels"]], "Modeling pairwise interactions with splines and polynomial features": [[43, "modeling-pairwise-interactions-with-splines-and-polynomial-features"]], "Modeling predictive uncertainty via quantile regression": [[52, "modeling-predictive-uncertainty-via-quantile-regression"]], "Models definition": [[302, "models-definition"]], "Models robustness to recover the ground truth weights": [[190, "models-robustness-to-recover-the-ground-truth-weights"]], "Modified Locally Linear Embedding": [[996, "modified-locally-linear-embedding"]], "Monitoring performance": [[372, "monitoring-performance"]], "Monotonic Constraints": [[151, null], [411, "monotonic-constraints"]], "Monotonic constraints": [[149, "monotonic-constraints"]], "More control with warm_start": [[1003, "more-control-with-warm-start"]], "Multi-Scale Clustering": [[88, "multi-scale-clustering"]], "Multi-class AdaBoosted Decision Trees": [[134, null]], "Multi-class case": [[999, "multi-class-case"]], "Multi-class classification": [[1014, "multi-class-classification"]], "Multi-core parallelism using joblib.Parallel": [[378, "multi-core-parallelism-using-joblib-parallel"]], "Multi-dimensional Scaling (MDS)": [[996, "multi-dimensional-scaling-mds"]], "Multi-dimensional scaling": [[229, null]], "Multi-label case": [[999, "multi-label-case"]], "Multi-label confusion matrix": [[999, "multi-label-confusion-matrix"]], "Multi-layer Perceptron": [[1003, "multi-layer-perceptron"]], "Multi-layer perceptron": [[184, "multi-layer-perceptron"]], "Multi-output problems": [[1015, "multi-output-problems"]], "Multi-task Elastic-Net": [[995, "multi-task-elastic-net"]], "Multi-task Lasso": [[995, "multi-task-lasso"]], "Multi-task linear regressors with variable selection": [[25, "multi-task-linear-regressors-with-variable-selection"]], "MultiLabelBinarizer": [[875, null], [1010, "multilabelbinarizer"]], "MultiOutputClassifier": [[836, null], [1000, "multioutputclassifier"]], "MultiOutputRegressor": [[837, null], [1000, "multioutputregressor"]], "MultiTaskElasticNet": [[660, null]], "MultiTaskElasticNetCV": [[661, null]], "MultiTaskLasso": [[662, null]], "MultiTaskLassoCV": [[663, null]], "Multiclass Receiver Operating Characteristic (ROC)": [[273, null]], "Multiclass and multilabel classification": [[999, "multiclass-and-multilabel-classification"]], "Multiclass and multilabel utility function": [[381, "multiclass-and-multilabel-utility-function"]], "Multiclass and multioutput algorithms": [[1000, null]], "Multiclass classification": [[1000, "multiclass-classification"]], "Multiclass methods": [[180, "multiclass-methods"], [280, null]], "Multiclass sparse logistic regression on 20newgroups": [[221, null]], "Multiclass support": [[402, "multiclass-support"]], "Multiclass support for LogisticRegression(solver=\"newton-cholesky\")": [[322, "multiclass-support-for-logisticregression-solver-newton-cholesky"]], "Multiclass-multioutput classification": [[1000, "multiclass-multioutput-classification"]], "Multidimensional scaling": [[226, "multidimensional-scaling"]], "Multilabel": [[368, "multilabel"]], "Multilabel classification": [[241, null], [1000, "multilabel-classification"]], "Multilabel classification using a classifier chain": [[283, null]], "Multilabel ranking metrics": [[27, "multilabel-ranking-metrics"], [999, "multilabel-ranking-metrics"]], "Multinomial Case": [[995, "multinomial-case"]], "Multinomial Naive Bayes": [[1001, "multinomial-naive-bayes"]], "MultinomialNB": [[843, null]], "Multioutput methods": [[180, "multioutput-methods"], [282, null]], "Multioutput regression": [[1000, "multioutput-regression"]], "Multiple modules": [[1037, "multiple-modules"], [1038, "multiple-modules"]], "Multiple vs. Single Imputation": [[989, "multiple-vs-single-imputation"]], "Multivariate feature imputation": [[989, "multivariate-feature-imputation"]], "Mutual Information based scores": [[404, "mutual-information-based-scores"]], "Mutual Reachability Graph": [[404, "mutual-reachability-graph"]], "NMF": [[538, null]], "NMF with a beta-divergence": [[409, "nmf-with-a-beta-divergence"]], "NMF with the Frobenius norm": [[409, "nmf-with-the-frobenius-norm"]], "Naive Bayes": [[1001, null]], "Naive evaluation of the next hour bike demand regression": [[52, "naive-evaluation-of-the-next-hour-bike-demand-regression"]], "Naive linear regression": [[43, "naive-linear-regression"]], "Native Categorical Feature Support": [[310, "native-categorical-feature-support"]], "Native support for categorical features in HistGradientBoosting estimators": [[315, "native-support-for-categorical-features-in-histgradientboosting-estimators"]], "Native support for missing values for gradient boosting": [[313, "native-support-for-missing-values-for-gradient-boosting"]], "Nearest Centroid Classification": [[295, null]], "Nearest Centroid Classifier": [[1002, "nearest-centroid-classifier"]], "Nearest Neighbor Algorithms": [[1002, "nearest-neighbor-algorithms"]], "Nearest Neighbors": [[180, "nearest-neighbors"], [285, null], [1002, null]], "Nearest Neighbors Classification": [[287, null], [1002, "nearest-neighbors-classification"]], "Nearest Neighbors Regression": [[1002, "nearest-neighbors-regression"]], "Nearest Neighbors Transformer": [[1002, "nearest-neighbors-transformer"]], "Nearest Neighbors regression": [[296, null]], "Nearest Shrunken Centroid": [[1002, "nearest-shrunken-centroid"]], "Nearest neighbors imputation": [[989, "nearest-neighbors-imputation"]], "NearestCentroid": [[851, null]], "NearestNeighbors": [[852, null]], "Neighborhood Components Analysis": [[1002, "neighborhood-components-analysis"]], "Neighborhood Components Analysis Illustration": [[294, null]], "NeighborhoodComponentsAnalysis": [[853, null]], "Nested versus non-nested cross-validation": [[269, null]], "NetBSD": [[390, "netbsd"]], "Neural Networks": [[180, "neural-networks"], [298, null]], "Neural network models (supervised)": [[1003, null]], "Neural network models (unsupervised)": [[1004, null]], "New Estimator Classes": [[1030, "new-estimator-classes"]], "New Poisson splitting criterion for DecisionTreeRegressor": [[315, "new-poisson-splitting-criterion-for-decisiontreeregressor"]], "New PolynomialCountSketch kernel approximation function": [[315, "new-polynomialcountsketch-kernel-approximation-function"]], "New SequentialFeatureSelector transformer": [[315, "new-sequentialfeatureselector-transformer"]], "New and enhanced displays": [[318, "new-and-enhanced-displays"]], "New classes": [[1029, "new-classes"]], "New display ValidationCurveDisplay": [[319, "new-display-validationcurvedisplay"]], "New documentation improvements": [[315, "new-documentation-improvements"], [316, "new-documentation-improvements"]], "New features": [[1032, "new-features"], [1033, "new-features"], [1034, "new-features"], [1035, "new-features"], [1036, "new-features"]], "New plotting API": [[313, "new-plotting-api"]], "New self-training meta-estimator": [[315, "new-self-training-meta-estimator"]], "New to Scientific Python?": [[1017, "new-to-scientific-python"]], "Next steps": [[385, "next-steps"]], "Non-Negative Least Squares": [[995, "non-negative-least-squares"]], "Non-informative classifier baseline for the ROC and DET curves": [[261, "non-informative-classifier-baseline-for-the-roc-and-det-curves"]], "Non-linear transformation": [[1009, "non-linear-transformation"]], "Non-negative components - NMF": [[120, "non-negative-components-nmf"]], "Non-negative least squares": [[204, null]], "Non-negative matrix factorization (NMF or NNMF)": [[409, "non-negative-matrix-factorization-nmf-or-nnmf"]], "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification": [[69, null]], "Normalization": [[1009, "normalization"]], "Normalized Discounted Cumulative Gain": [[999, "normalized-discounted-cumulative-gain"]], "Normalizer": [[304, "normalizer"], [876, null]], "NotFittedError": [[576, null]], "Note on MPS device support": [[400, "note-on-mps-device-support"]], "Note on device support for float64": [[400, "note-on-device-support-for-float64"]], "Notes": [[361, "notes"]], "Novelty Detection": [[1005, "novelty-detection"]], "Novelty and Outlier Detection": [[1005, null]], "Novelty detection with Local Outlier Factor": [[1005, "novelty-detection-with-local-outlier-factor"]], "Novelty detection with Local Outlier Factor (LOF)": [[290, null]], "NuSVC": [[906, null]], "NuSVR": [[907, null]], "NumPy": [[377, "numpy"]], "Number of candidates and amount of resource at each iteration": [[276, "number-of-candidates-and-amount-of-resource-at-each-iteration"]], "Numerical assertions in tests": [[374, "numerical-assertions-in-tests"]], "Nystroem": [[639, null]], "Nystroem Method for Kernel Approximation": [[991, "nystroem-method-for-kernel-approximation"]], "OAS": [[472, null]], "ONNX": [[398, "onnx"]], "OOB Errors for Random Forests": [[138, null]], "OPTICS": [[404, "optics"], [447, null]], "Obtaining predictions by cross-validation": [[408, "obtaining-predictions-by-cross-validation"]], "OkCupid": [[1023, "id19"]], "Older Versions": [[1029, null]], "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent": [[220, null]], "One-class SVM with non-linear kernel (RBF)": [[335, null]], "One-vs-One multiclass ROC": [[273, "one-vs-one-multiclass-roc"]], "One-vs-Rest multiclass ROC": [[273, "one-vs-rest-multiclass-roc"]], "OneClassSVM": [[908, null]], "OneHotEncoder": [[877, null]], "OneToOneFeatureMixin": [[425, null]], "OneVsOneClassifier": [[832, null], [1000, "onevsoneclassifier"]], "OneVsRestClassifier": [[833, null], [1000, "onevsrestclassifier"]], "Online One-Class SVM": [[316, "online-one-class-svm"], [1013, "online-one-class-svm"]], "Online learning of a dictionary of parts of faces": [[83, null]], "Optical recognition of handwritten digits dataset": [[369, "optical-recognition-of-handwritten-digits-dataset"]], "Optimal mathematical operations": [[41, "module-sklearn.utils.extmath"]], "Optimisation of kernel hyperparameters in GPR": [[173, "optimisation-of-kernel-hyperparameters-in-gpr"]], "Options to tune the decision threshold": [[403, "options-to-tune-the-decision-threshold"]], "Oracle Approximating Shrinkage": [[406, "oracle-approximating-shrinkage"]], "OrdinalEncoder": [[878, null]], "Ordinary Least Squares": [[995, "ordinary-least-squares"]], "Ordinary Least Squares Complexity": [[995, "ordinary-least-squares-complexity"]], "Ordinary Least Squares and Ridge Regression": [[205, null]], "Ordinary Least Squares and Ridge Regression Variance": [[205, "ordinary-least-squares-and-ridge-regression-variance"]], "Original data": [[270, "original-data"], [304, "original-data"]], "Original image": [[86, "original-image"]], "Original points": [[294, "original-points"]], "Orthogonal Matching Pursuit": [[206, null]], "Orthogonal Matching Pursuit (OMP)": [[995, "orthogonal-matching-pursuit-omp"]], "OrthogonalMatchingPursuit": [[664, null]], "OrthogonalMatchingPursuitCV": [[665, null]], "Other changes": [[1029, "other-changes"]], "Other estimators and tasks": [[1018, "other-estimators-and-tasks"]], "Otto Group": [[1023, "id26"]], "Our community, our values": [[372, null]], "Our vanilla classifier": [[278, "our-vanilla-classifier"]], "Out of Bag Estimates": [[988, "out-of-bag-estimates"]], "Out-of-core classification of text documents": [[47, null]], "Out-of-core naive Bayes model fitting": [[1001, "out-of-core-naive-bayes-model-fitting"]], "Outlier Detection": [[1005, "id1"]], "Outlier detection on a real data set": [[48, null]], "Outlier detection with Local Outlier Factor (LOF)": [[291, null]], "Outlier-robust regressors": [[25, "outlier-robust-regressors"]], "OutlierMixin": [[426, null]], "Outliers in the X direction": [[223, "outliers-in-the-x-direction"]], "Outliers only in the y direction": [[223, "outliers-only-in-the-y-direction"]], "Outline of the permutation importance algorithm": [[1007, "outline-of-the-permutation-importance-algorithm"]], "OutputCodeClassifier": [[834, null], [1000, "outputcodeclassifier"]], "Oversubscription: spawning too many threads": [[360, "oversubscription-spawning-too-many-threads"]], "Overview of clustering methods": [[404, "overview-of-clustering-methods"]], "Overview of multiclass training meta-estimators": [[281, null]], "Overview of outlier detection methods": [[1005, "overview-of-outlier-detection-methods"]], "PCA": [[539, null]], "PCA using randomized SVD": [[409, "pca-using-randomized-svd"]], "PCA: principal component analysis": [[1016, "pca-principal-component-analysis"]], "PHIMECA Engineering": [[1023, "id15"]], "PLS regression, with multivariate response, a.k.a. PLS2": [[115, "pls-regression-with-multivariate-response-a-k-a-pls2"]], "PLS regression, with univariate response, a.k.a. PLS1": [[115, "pls-regression-with-univariate-response-a-k-a-pls1"]], "PLSCanonical": [[407, "plscanonical"], [480, null]], "PLSRegression": [[407, "plsregression"], [481, null]], "PLSSVD": [[407, "plssvd"], [482, null]], "Packaging": [[1041, "packaging"]], "Paid support": [[1022, "paid-support"]], "Pair Confusion Matrix": [[404, "pair-confusion-matrix"]], "Pairwise comparison of all models: Bayesian approach": [[264, "pairwise-comparison-of-all-models-bayesian-approach"]], "Pairwise comparison of all models: frequentist approach": [[264, "pairwise-comparison-of-all-models-frequentist-approach"]], "Pairwise distances with non-numeric arrays": [[321, "pairwise-distances-with-non-numeric-arrays"]], "Pairwise metrics": [[27, "module-sklearn.metrics.pairwise"]], "Pairwise metrics, Affinities and Kernels": [[997, null]], "PairwiseKernel": [[620, null]], "Pandas": [[377, "pandas"]], "Pandas output with set_output API": [[318, "pandas-output-with-set-output-api"]], "Parallel": [[966, null]], "Parallel NumPy and SciPy routines from numerical libraries": [[360, "parallel-numpy-and-scipy-routines-from-numerical-libraries"]], "Parallel computing": [[41, "module-sklearn.utils.parallel"]], "Parallelism": [[360, "parallelism"], [988, "parallelism"]], "Parallelism, resource management, and configuration": [[360, null]], "Parallelization": [[411, "parallelization"]], "ParameterGrid": [[811, null]], "ParameterSampler": [[812, null]], "Parameters": [[386, "parameters"], [411, "parameters"]], "Parameters of the RBF Kernel": [[1014, "parameters-of-the-rbf-kernel"]], "Partial Dependence and Individual Conditional Expectation Plots": [[184, null]], "Partial Dependence and Individual Conditional Expectation plots": [[1006, null]], "Partial dependence plots": [[1006, "partial-dependence-plots"]], "PartialDependenceDisplay": [[632, null]], "Partitioning the data": [[188, "partitioning-the-data"]], "Passive Aggressive Algorithms": [[995, "passive-aggressive-algorithms"]], "PassiveAggressiveClassifier": [[666, null]], "PassiveAggressiveRegressor": [[667, null]], "Past Sponsors": [[0, "past-sponsors"]], "Patch extraction": [[412, "patch-extraction"]], "PatchExtractor": [[582, null]], "PeerIndex": [[1023, "id17"]], "People": [[1029, "people"], [1029, "id2"], [1029, "id5"], [1029, "id8"], [1029, "id11"], [1029, "id13"], [1029, "id15"], [1029, "id17"], [1030, "people"], [1030, "id3"], [1031, "people"], [1032, "people"]], "Perceptron": [[668, null], [995, "perceptron"]], "Perform the search with GridSearchCV": [[263, "perform-the-search-with-gridsearchcv"]], "Performance improvements": [[317, "performance-improvements"]], "Performance improvements in PCA": [[321, "performance-improvements-in-pca"]], "Performing dimensionality reduction using LSA": [[348, "performing-dimensionality-reduction-using-lsa"]], "Periodic Splines": [[208, "periodic-splines"]], "Periodic spline features": [[43, "periodic-spline-features"]], "Permutation Importance vs Random Forest Feature Importance (MDI)": [[185, null]], "Permutation Importance with Multicollinear or Correlated Features": [[186, null]], "Permutation feature importance": [[1007, null]], "Permutation test score": [[270, "permutation-test-score"], [408, "permutation-test-score"]], "Permutation-based feature importance": [[313, "permutation-based-feature-importance"]], "Pinball loss": [[999, "pinball-loss"]], "Pipeline": [[864, null]], "Pipeline ANOVA SVM": [[160, null]], "Pipeline with hyperparameter tuning": [[265, "pipeline-with-hyperparameter-tuning"]], "Pipeline: chaining estimators": [[405, "pipeline-chaining-estimators"]], "Pipelines and composite estimators": [[101, null], [180, "pipelines-and-composite-estimators"], [405, null]], "Pipelines: chaining pre-processors and estimators": [[385, "pipelines-chaining-pre-processors-and-estimators"]], "Pipelining": [[1016, null]], "Pipelining: chaining a PCA and a logistic regression": [[105, null]], "Platform-specific instructions": [[370, "platform-specific-instructions"]], "Plot Hierarchical Clustering Dendrogram": [[76, null]], "Plot Precision-Recall curve for each class and iso-f1 curves": [[271, "plot-precision-recall-curve-for-each-class-and-iso-f1-curves"]], "Plot Ridge coefficients as a function of the regularization": [[212, null]], "Plot a PCA representation": [[126, "plot-a-pca-representation"]], "Plot accuracy, training and test time of each classifier": [[347, "plot-accuracy-training-and-test-time-of-each-classifier"]], "Plot all OvO ROC curves together": [[273, "plot-all-ovo-roc-curves-together"]], "Plot all OvR ROC curves together": [[273, "plot-all-ovr-roc-curves-together"]], "Plot and analysis of the results": [[194, "plot-and-analysis-of-the-results"]], "Plot and interpret results": [[243, "plot-and-interpret-results"]], "Plot classification boundaries with different SVM Kernels": [[340, null]], "Plot classification probability": [[66, null]], "Plot data and the predicted probabilities": [[61, "plot-data-and-the-predicted-probabilities"]], "Plot different SVM classifiers in the iris dataset": [[333, null]], "Plot discrete decision boundary": [[150, "plot-discrete-decision-boundary"]], "Plot feature importance": [[147, "plot-feature-importance"]], "Plot individual and voting regression predictions": [[156, null]], "Plot multi-class SGD on the iris dataset": [[215, null]], "Plot number of features VS. cross-validation scores": [[162, "plot-number-of-features-vs-cross-validation-scores"]], "Plot of pairs of features of the Iris dataset": [[126, "plot-of-pairs-of-features-of-the-iris-dataset"]], "Plot path length decision boundary": [[150, "plot-path-length-decision-boundary"]], "Plot randomly generated multilabel dataset": [[118, null]], "Plot regularization path": [[202, "plot-regularization-path"]], "Plot result": [[73, "plot-result"], [96, "plot-result"], [100, "plot-result"], [100, "id2"]], "Plot results": [[47, "plot-results"], [82, "plot-results"], [109, "plot-results"], [121, "plot-results"], [122, "plot-results"], [140, "plot-results"], [283, "plot-results"], [291, "plot-results"]], "Plot support and time series": [[203, "plot-support-and-time-series"]], "Plot the BIC scores": [[254, "plot-the-bic-scores"]], "Plot the Precision-Recall curve": [[271, "plot-the-precision-recall-curve"]], "Plot the best model": [[254, "plot-the-best-model"]], "Plot the cross-validation score as a function of percentile of features": [[339, "plot-the-cross-validation-score-as-a-function-of-percentile-of-features"]], "Plot the decision surface of decision trees trained on the iris dataset": [[352, null]], "Plot the decision surfaces of ensembles of trees on the iris dataset": [[142, null]], "Plot the marginal log-likelihood": [[190, "plot-the-marginal-log-likelihood"]], "Plot the micro-averaged Precision-Recall curve": [[271, "plot-the-micro-averaged-precision-recall-curve"]], "Plot the most uncertain predictions": [[325, "plot-the-most-uncertain-predictions"]], "Plot the results": [[83, "plot-the-results"], [113, "plot-the-results"], [156, "plot-the-results"], [179, "plot-the-results"], [353, "plot-the-results"], [353, "id3"]], "Plot the results on an image": [[81, "plot-the-results-on-an-image"]], "Plot the support vectors in LinearSVC": [[334, null]], "Plot the true and estimated coefficients": [[190, "plot-the-true-and-estimated-coefficients"]], "Plot the true and predicted curves with log marginal likelihood (L)": [[191, "plot-the-true-and-predicted-curves-with-log-marginal-likelihood-l"]], "Plot training deviance": [[147, "plot-training-deviance"]], "Plotting": [[21, "plotting"], [27, "plotting"], [40, "plotting"], [302, "plotting"]], "Plotting API Overview": [[379, "plotting-api-overview"]], "Plotting Cross-Validated Predictions": [[260, null]], "Plotting Functions": [[70, "plotting-functions"]], "Plotting Learning Curves and Checking Models\u2019 Scalability": [[266, null]], "Plotting ROC curves from cross-validation results": [[323, "plotting-roc-curves-from-cross-validation-results"]], "Plotting four circles": [[99, "plotting-four-circles"]], "Plotting partial dependence for one feature": [[244, "plotting-partial-dependence-for-one-feature"]], "Plotting partial dependence for two features": [[244, "plotting-partial-dependence-for-two-features"]], "Plotting partial dependence of the two models together": [[244, "plotting-partial-dependence-of-the-two-models-together"]], "Plotting polynomial regressions with std errors of the scores": [[190, "plotting-polynomial-regressions-with-std-errors-of-the-scores"]], "Plotting results": [[58, "plotting-results"]], "Plotting the ROC Curve": [[246, "plotting-the-roc-curve"]], "Plotting the Results": [[310, "plotting-the-results"]], "Plotting the decision boundaries": [[66, "plotting-the-decision-boundaries"]], "Plotting the result": [[268, "plotting-the-result"]], "Plotting the results": [[97, "plotting-the-results"], [135, "plotting-the-results"], [205, "plotting-the-results"]], "Plotting trained Coefficients and Mean Squared Errors": [[211, "plotting-trained-coefficients-and-mean-squared-errors"]], "Plotting two circles": [[99, "plotting-two-circles"]], "Plotting with Multiple Axes": [[379, "plotting-with-multiple-axes"]], "Poisson regression and non-normal loss": [[207, null]], "PoissonRegressor": [[669, null]], "Polars output in set_output": [[320, "polars-output-in-set-output"]], "Polynomial Kernel Approximation via Tensor Sketch": [[991, "polynomial-kernel-approximation-via-tensor-sketch"]], "Polynomial and Spline interpolation": [[208, null]], "Polynomial features": [[1009, "polynomial-features"]], "Polynomial kernel": [[340, "polynomial-kernel"], [997, "polynomial-kernel"]], "Polynomial regression: extending linear models with basis functions": [[995, "polynomial-regression-extending-linear-models-with-basis-functions"]], "PolynomialCountSketch": [[640, null]], "PolynomialFeatures": [[879, null]], "Possible solutions": [[90, "possible-solutions"]], "Post pruning decision trees with cost complexity pruning": [[351, null]], "Post-fit model tuning": [[29, "post-fit-model-tuning"]], "Post-hoc tuning the cut-off point of decision function": [[278, null]], "Post-tuning the decision threshold": [[403, "post-tuning-the-decision-threshold"]], "Post-tuning the decision threshold for cost-sensitive learning": [[258, null]], "PowerTransformer": [[304, "powertransformer"], [880, null]], "Pre-test vs. post-test analysis": [[267, "pre-test-vs-post-test-analysis"]], "Precision, recall and F-measures": [[999, "precision-recall-and-f-measures"]], "Precision-Recall": [[271, null]], "PrecisionRecallDisplay": [[700, null]], "Precomputed sparse nearest neighbors graph": [[313, "precomputed-sparse-nearest-neighbors-graph"]], "Predefined fold-splits / Validation-sets": [[408, "predefined-fold-splits-validation-sets"]], "PredefinedSplit": [[813, null]], "Predict": [[353, "predict"], [353, "id2"]], "Prediction Intervals for Gradient Boosting Regression": [[146, null]], "Prediction Latency": [[49, null], [359, "prediction-latency"]], "Prediction Throughput": [[359, "prediction-throughput"]], "PredictionErrorDisplay": [[701, null]], "Preparing the data": [[135, "preparing-the-data"], [149, "preparing-the-data"], [188, "preparing-the-data"]], "Preprocessing": [[180, "preprocessing"], [303, null]], "Preprocessing data": [[1009, null]], "Preprocessing numerical variables": [[183, "preprocessing-numerical-variables"]], "Preprocessor for machine-learning models": [[184, "preprocessor-for-machine-learning-models"]], "Preprocessor for the gradient boosting model": [[184, "preprocessor-for-the-gradient-boosting-model"]], "Preprocessor for the neural network model": [[184, "preprocessor-for-the-neural-network-model"]], "Principal Component Analysis (PCA) on Iris Dataset": [[126, null]], "Principal Component Regression vs Partial Least Squares Regression": [[116, null]], "Principal component analysis (PCA)": [[409, "principal-component-analysis-pca"]], "Print the results": [[263, "print-the-results"]], "Private Loss Function Module": [[1046, "private-loss-function-module"]], "Probabilistic classifiers": [[66, "probabilistic-classifiers"]], "Probabilistic predictions with GPC": [[414, "probabilistic-predictions-with-gpc"]], "Probabilistic predictions with Gaussian process classification (GPC)": [[168, null]], "Probability Calibration curves": [[62, null]], "Probability Calibration for 3-class classification": [[63, null]], "Probability calibration": [[402, null]], "Probability calibration of classifiers": [[61, null]], "Processing the dataset": [[183, "processing-the-dataset"]], "Product": [[621, null]], "Productivity and sanity-preserving tips": [[380, "productivity-and-sanity-preserving-tips"]], "Profiling Python code": [[378, "profiling-python-code"]], "Profiling compiled extensions": [[378, "profiling-compiled-extensions"]], "Project template:": [[374, null]], "Projecting data: PCA vs. KernelPCA": [[125, "projecting-data-pca-vs-kernelpca"]], "Projecting into the original feature space": [[125, "projecting-into-the-original-feature-space"]], "Projection on one component and predictive power": [[116, "projection-on-one-component-and-predictive-power"]], "Proper next hour forecasting evaluation": [[52, "proper-next-hour-forecasting-evaluation"]], "Provide a failing code example with minimal comments": [[377, "provide-a-failing-code-example-with-minimal-comments"]], "Pull request checklist": [[372, "pull-request-checklist"]], "Pure Premium Modeling via a Product Model vs single TweedieRegressor": [[224, "pure-premium-modeling-via-a-product-model-vs-single-tweedieregressor"]], "Purpose of this document": [[1019, "purpose-of-this-document"]], "Purpose of this example": [[211, "purpose-of-this-example"]], "PyTorch Support": [[400, "pytorch-support"]], "Python API": [[360, "python-api"]], "Python package and dataset imports, load dataset": [[238, "python-package-and-dataset-imports-load-dataset"]], "Python, Cython or C/C++?": [[378, "python-cython-or-c-c"]], "QDA": [[993, "qda"]], "QuadraticDiscriminantAnalysis": [[548, null]], "Qualitative analysis of the impact of features on linear model predictions": [[43, "qualitative-analysis-of-the-impact-of-features-on-linear-model-predictions"]], "Quantifying the quality of clustering results": [[348, "quantifying-the-quality-of-clustering-results"]], "Quantile Regression": [[995, "quantile-regression"]], "Quantile Regressor": [[316, "quantile-regressor"]], "Quantile loss in HistGradientBoostingRegressor": [[317, "quantile-loss-in-histgradientboostingregressor"]], "Quantile regression": [[209, null]], "QuantileRegressor": [[670, null]], "QuantileTransformer": [[881, null]], "QuantileTransformer (Gaussian output)": [[304, "quantiletransformer-gaussian-output"]], "QuantileTransformer (uniform output)": [[304, "quantiletransformer-uniform-output"]], "Quantitative evaluation": [[66, "quantitative-evaluation"]], "RANSAC: RANdom SAmple Consensus": [[995, "ransac-random-sample-consensus"]], "RANSACRegressor": [[671, null]], "RBF": [[622, null]], "RBF SVM parameters": [[336, null]], "RBF kernel": [[340, "rbf-kernel"], [997, "rbf-kernel"]], "RBFSampler": [[641, null]], "RCV1 dataset": [[367, "rcv1-dataset"]], "RFE": [[592, null]], "RFECV": [[593, null]], "ROC AUC now supports multiclass classification": [[313, "roc-auc-now-supports-multiclass-classification"]], "ROC Curve with Visualization API": [[246, null]], "ROC curve showing a specific class": [[273, "roc-curve-showing-a-specific-class"]], "ROC curve using micro-averaged OvR": [[273, "roc-curve-using-micro-averaged-ovr"]], "ROC curve using the OvO macro-average": [[273, "roc-curve-using-the-ovo-macro-average"]], "ROC curve using the OvR macro-average": [[273, "roc-curve-using-the-ovr-macro-average"]], "Radial Basis Function Kernel": [[991, "radial-basis-function-kernel"]], "Radial Basis Function kernel": [[176, "radial-basis-function-kernel"]], "Radial basis function (RBF) kernel": [[414, "radial-basis-function-rbf-kernel"]], "RadiusNeighborsClassifier": [[854, null]], "RadiusNeighborsRegressor": [[855, null]], "RadiusNeighborsTransformer": [[856, null]], "Rand index": [[404, "rand-index"]], "Random Forest Feature Importance on Breast Cancer Data": [[186, "random-forest-feature-importance-on-breast-cancer-data"]], "Random Forests": [[411, "random-forests"]], "Random Numbers": [[374, "random-numbers"]], "Random Projection": [[1011, null]], "Random data": [[270, "random-data"]], "Random forests and other randomized tree ensembles": [[411, "random-forests-and-other-randomized-tree-ensembles"]], "Random permutations cross-validation a.k.a. Shuffle & Split": [[408, "random-permutations-cross-validation-a-k-a-shuffle-split"]], "Random projections": [[1016, "random-projections"]], "Random sampling": [[41, "module-sklearn.utils.random"]], "RandomForestClassifier": [[562, null]], "RandomForestRegressor": [[563, null]], "RandomTreesEmbedding": [[564, null]], "Randomized Parameter Optimization": [[988, "randomized-parameter-optimization"]], "RandomizedSearchCV": [[814, null]], "Rangespan": [[1023, "id11"]], "Ranking loss": [[999, "ranking-loss"]], "Rational Quadratic kernel": [[176, "rational-quadratic-kernel"]], "Rational quadratic kernel": [[414, "rational-quadratic-kernel"]], "RationalQuadratic": [[623, null]], "Reading the existing code base": [[372, "reading-the-existing-code-base"]], "Real world datasets": [[367, null]], "Real-world data set": [[107, "real-world-data-set"]], "Receiver Operating Characteristic (ROC) with cross validation": [[274, null]], "Receiver operating characteristic (ROC)": [[999, "receiver-operating-characteristic-roc"]], "Recognizing hand-written digits": [[68, null]], "Recommendation Engine packages": [[1018, "recommendation-engine-packages"]], "Reconstruct and denoise test images": [[44, "reconstruct-and-denoise-test-images"]], "Recursive feature elimination": [[161, null], [413, "recursive-feature-elimination"]], "Recursive feature elimination with cross-validation": [[162, null]], "Reference Steps": [[376, "reference-steps"]], "References": [[50, "references"], [62, "references"], [64, "references"], [112, "references"], [137, "references"], [188, "references"], [194, "references"], [281, "references"], [297, "references"], [414, "references"]], "Region of Practical Equivalence": [[264, "region-of-practical-equivalence"]], "Regression": [[175, "regression"], [995, "regression"], [1003, "regression"], [1013, "regression"], [1014, "regression"], [1015, "regression"]], "Regression criteria": [[1015, "regression-criteria"]], "Regression metrics": [[27, "regression-metrics"], [999, "regression-metrics"]], "RegressorChain": [[838, null], [1000, "regressorchain"]], "RegressorMixin": [[427, null]], "RegressorTags": [[922, null]], "Regressors with variable selection": [[25, "regressors-with-variable-selection"]], "Regularization": [[1003, "regularization"]], "Regularization path of L1- Logistic Regression": [[202, null]], "Related Projects": [[1018, null]], "Related changes": [[1036, "related-changes"]], "Relation to impurity-based importance in trees": [[1007, "relation-to-impurity-based-importance-in-trees"]], "Release Highlights": [[180, "release-highlights"], [312, null]], "Release Highlights for scikit-learn 0.22": [[313, null]], "Release Highlights for scikit-learn 0.23": [[314, null]], "Release Highlights for scikit-learn 0.24": [[315, null]], "Release Highlights for scikit-learn 1.0": [[316, null]], "Release Highlights for scikit-learn 1.1": [[317, null]], "Release Highlights for scikit-learn 1.2": [[318, null]], "Release Highlights for scikit-learn 1.3": [[319, null]], "Release Highlights for scikit-learn 1.4": [[320, null]], "Release Highlights for scikit-learn 1.5": [[321, null]], "Release Highlights for scikit-learn 1.6": [[322, null]], "Release Highlights for scikit-learn 1.7": [[323, null]], "Release History": [[1027, null]], "Releasing": [[376, "releasing"]], "Remarks": [[237, "remarks"]], "Removed modules": [[1029, "removed-modules"]], "Removing features with low variance": [[413, "removing-features-with-low-variance"]], "Repeated K-Fold": [[408, "repeated-k-fold"]], "RepeatedKFold": [[815, null]], "RepeatedStratifiedKFold": [[816, null]], "Replace missing values by 0": [[179, "replace-missing-values-by-0"]], "Replicating the training environment in production": [[398, "replicating-the-training-environment-in-production"]], "Resolve conflicts in lock files": [[372, "resolve-conflicts-in-lock-files"]], "Restricted Boltzmann Machine features for digit classification": [[302, null]], "Restricted Boltzmann machines": [[1004, "restricted-boltzmann-machines"]], "Results interpretation": [[283, "results-interpretation"]], "Retrieve dataframes from OpenML": [[313, "retrieve-dataframes-from-openml"]], "Retrieve the data from Internet": [[51, "retrieve-the-data-from-internet"]], "Reuters Dataset related routines": [[47, "reuters-dataset-related-routines"]], "Rich HTML representation": [[235, "rich-html-representation"]], "Rich visual representation of estimators": [[314, "rich-visual-representation-of-estimators"]], "Ridge": [[672, null]], "Ridge Complexity": [[995, "ridge-complexity"]], "Ridge coefficients as a function of the L2 Regularization": [[211, null]], "Ridge regression and classification": [[995, "ridge-regression-and-classification"]], "RidgeCV": [[673, null]], "RidgeClassifier": [[674, null]], "RidgeClassifierCV": [[675, null]], "Roadmap": [[1019, null]], "Robust Covariance Estimation": [[406, "robust-covariance-estimation"]], "Robust covariance estimation and Mahalanobis distances relevance": [[111, null]], "Robust linear estimator fitting": [[213, null]], "Robust linear model estimation using RANSAC": [[210, null]], "Robust vs Empirical covariance estimate": [[112, null]], "RobustScaler": [[304, "robustscaler"], [882, null]], "Robustness of cross-validation results": [[355, "robustness-of-cross-validation-results"]], "Robustness regression: outliers and modeling errors": [[995, "robustness-regression-outliers-and-modeling-errors"]], "Robustness to failure": [[988, "robustness-to-failure"]], "RocCurveDisplay": [[702, null]], "Roles And Responsibilities": [[387, "roles-and-responsibilities"]], "Rolling your own estimator": [[374, "rolling-your-own-estimator"]], "Routing Meta-Estimator": [[240, "routing-meta-estimator"]], "Run the benchmark": [[91, "run-the-benchmark"]], "Run the code and plot the results": [[46, "run-the-code-and-plot-the-results"]], "Running GridSearchCV using multiple evaluation metrics": [[268, "running-gridsearchcv-using-multiple-evaluation-metrics"]], "R\u00b2 score, the coefficient of determination": [[999, "r2-score-the-coefficient-of-determination"]], "SGD": [[1013, "id5"]], "SGD: Maximum margin separating hyperplane": [[218, null]], "SGD: Penalties": [[217, null]], "SGD: Weighted samples": [[219, null]], "SGD: convex loss functions": [[216, null]], "SGDClassifier": [[676, null]], "SGDOneClassSVM": [[677, null]], "SGDRegressor": [[678, null]], "SKLEARN_ASSUME_FINITE": [[360, "sklearn-assume-finite"]], "SKLEARN_BUILD_ENABLE_DEBUG_SYMBOLS": [[360, "sklearn-build-enable-debug-symbols"]], "SKLEARN_ENABLE_DEBUG_CYTHON_DIRECTIVES": [[360, "sklearn-enable-debug-cython-directives"]], "SKLEARN_PAIRWISE_DIST_CHUNK_SIZE": [[360, "sklearn-pairwise-dist-chunk-size"]], "SKLEARN_RUN_FLOAT32_TESTS": [[360, "sklearn-run-float32-tests"]], "SKLEARN_SEED": [[360, "sklearn-seed"]], "SKLEARN_SKIP_NETWORK_TESTS": [[360, "sklearn-skip-network-tests"]], "SKLEARN_TESTS_GLOBAL_RANDOM_SEED": [[360, "sklearn-tests-global-random-seed"]], "SKLEARN_WARNINGS_AS_ERRORS": [[360, "sklearn-warnings-as-errors"]], "SKLEARN_WORKING_MEMORY": [[360, "sklearn-working-memory"]], "SVC": [[909, null], [1014, "svc"]], "SVM Margins Example": [[341, null]], "SVM Tie Breaking Example": [[344, null]], "SVM with custom kernel": [[332, null]], "SVM-Anova: SVM with univariate feature selection": [[339, null]], "SVM: Maximum margin separating hyperplane": [[337, null]], "SVM: Separating hyperplane for unbalanced classes": [[338, null]], "SVM: Weighted samples": [[345, null]], "SVR": [[910, null], [1014, "svr"]], "Sample generators": [[9, "sample-generators"]], "Sample images": [[366, "sample-images"]], "Sample pipeline for text feature extraction and evaluation": [[265, null]], "Sample weight support": [[411, "sample-weight-support"]], "Sample-weight support for Lasso and ElasticNet": [[314, "sample-weight-support-for-lasso-and-elasticnet"]], "Scalability and stability improvements to KMeans": [[314, "scalability-and-stability-improvements-to-kmeans"]], "Scalable learning with polynomial kernel approximation": [[188, null]], "Scale Invariance": [[88, "scale-invariance"]], "Scaling data with outliers": [[1009, "scaling-data-with-outliers"]], "Scaling features to a range": [[1009, "scaling-features-to-a-range"]], "Scaling sparse data": [[1009, "scaling-sparse-data"]], "Scaling the regularization parameter for SVCs": [[343, null]], "Scaling up the One-Class SVM": [[1005, "scaling-up-the-one-class-svm"]], "Scaling with instances using out-of-core learning": [[361, "scaling-with-instances-using-out-of-core-learning"]], "Scatter plot of scores": [[115, "scatter-plot-of-scores"]], "Scikit-learn governance and decision-making": [[387, null]], "Scores and probabilities": [[1014, "scores-and-probabilities"]], "Scoring API overview": [[999, "scoring-api-overview"]], "Scoring functions": [[400, "scoring-functions"]], "Searching for optimal parameters with successive halving": [[988, "searching-for-optimal-parameters-with-successive-halving"]], "Second example": [[48, "second-example"]], "Second experiment: varying number of classes and clusters": [[72, "second-experiment-varying-number-of-classes-and-clusters"]], "Security": [[1047, "security"]], "Security & Maintainability Limitations": [[398, "security-maintainability-limitations"]], "Segmenting the picture of greek coins in regions": [[80, null]], "SelectFdr": [[594, null]], "SelectFpr": [[595, null]], "SelectFromModel": [[596, null]], "SelectFwe": [[597, null]], "SelectKBest": [[598, null]], "SelectPercentile": [[599, null]], "Selecting Lasso via an information criterion": [[198, "selecting-lasso-via-an-information-criterion"]], "Selecting Lasso via cross-validation": [[198, "selecting-lasso-via-cross-validation"]], "Selecting dimensionality reduction with Pipeline and GridSearchCV": [[104, null]], "Selecting features based on importance": [[163, "selecting-features-based-on-importance"]], "Selecting features with Sequential Feature Selection": [[163, "selecting-features-with-sequential-feature-selection"]], "Selecting the number of clusters with silhouette analysis on KMeans clustering": [[93, null]], "SelectorMixin": [[600, null]], "Self Training": [[1012, "self-training"]], "SelfTrainingClassifier": [[901, null]], "Semi Supervised Classification": [[180, "semi-supervised-classification"], [324, null]], "Semi-supervised Classification on a Text Dataset": [[329, null]], "Semi-supervised learning": [[325, "semi-supervised-learning"], [1012, null]], "Sequence similarity matrix under the kernel": [[175, "sequence-similarity-matrix-under-the-kernel"]], "Sequential Feature Selection": [[413, "sequential-feature-selection"]], "SequentialFeatureSelector": [[601, null]], "Serving the model artifact": [[398, "serving-the-model-artifact"]], "Set up the pipeline and parameter grid": [[263, "set-up-the-pipeline-and-parameter-grid"]], "Setting a decision threshold for a pre-fitted classifier": [[165, "setting-a-decision-threshold-for-a-pre-fitted-classifier"]], "Setting regularization parameter": [[995, "setting-regularization-parameter"]], "Setting the regularization parameter: leave-one-out Cross-Validation": [[995, "setting-the-regularization-parameter-leave-one-out-cross-validation"]], "Severity Model -  Gamma distribution": [[224, "severity-model-gamma-distribution"]], "Shrinkage and Covariance Estimator": [[993, "shrinkage-and-covariance-estimator"]], "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood": [[109, null]], "Shrinkage via learning rate": [[411, "shrinkage-via-learning-rate"]], "Shrunk Covariance": [[406, "shrunk-covariance"]], "ShrunkCovariance": [[473, null]], "ShuffleSplit": [[817, null]], "Sigmoid": [[402, "sigmoid"]], "Sigmoid kernel": [[340, "sigmoid-kernel"], [997, "sigmoid-kernel"]], "Silhouette Coefficient": [[404, "silhouette-coefficient"]], "Simple 1D Kernel Density Estimation": [[289, null]], "Simple Pipeline": [[240, "simple-pipeline"]], "SimpleImputer": [[630, null]], "Single estimator versus bagging: bias-variance decomposition": [[137, null]], "Single label": [[368, "single-label"]], "Skewed Chi Squared Kernel": [[991, "skewed-chi-squared-kernel"]], "SkewedChi2Sampler": [[642, null]], "Social Media": [[1022, "social-media"]], "Solvers": [[995, "solvers"]], "Sparse coding with a precomputed dictionary": [[129, null], [409, "sparse-coding-with-a-precomputed-dictionary"]], "Sparse components - MiniBatchSparsePCA": [[120, "sparse-components-minibatchsparsepca"]], "Sparse input": [[1009, null]], "Sparse inverse covariance": [[406, "sparse-inverse-covariance"]], "Sparse inverse covariance estimation": [[113, null]], "Sparse principal components analysis (SparsePCA and MiniBatchSparsePCA)": [[409, "sparse-principal-components-analysis-sparsepca-and-minibatchsparsepca"]], "Sparse random projection": [[1011, "sparse-random-projection"]], "SparseCoder": [[540, null]], "SparsePCA": [[541, null]], "SparseRandomProjection": [[897, null]], "Sparsity": [[412, "sparsity"]], "Species distribution dataset": [[367, "species-distribution-dataset"]], "Species distribution modeling": [[50, null]], "Specifying an objective metric": [[988, "specifying-an-objective-metric"]], "Specifying multiple metrics for evaluation": [[988, "specifying-multiple-metrics-for-evaluation"]], "Spectral Biclustering": [[401, "spectral-biclustering"]], "Spectral Clustering Graphs": [[404, "spectral-clustering-graphs"]], "Spectral Co-Clustering": [[401, "spectral-co-clustering"]], "Spectral Embedding": [[996, "spectral-embedding"]], "Spectral clustering": [[404, "spectral-clustering"]], "Spectral clustering for image segmentation": [[99, null]], "Spectral embedding for non-linear dimensionality reduction": [[226, "spectral-embedding-for-non-linear-dimensionality-reduction"]], "SpectralBiclustering": [[448, null]], "SpectralClustering": [[449, null]], "SpectralCoclustering": [[450, null]], "SpectralEmbedding": [[691, null]], "Sphinx version": [[372, null]], "Spline Transformers": [[316, "spline-transformers"]], "Spline transformer": [[1009, "spline-transformer"]], "SplineTransformer": [[883, null]], "Splitters": [[29, "splitters"]], "Spotify": [[1023, "id2"]], "Stack of predictors on a single data set": [[154, "stack-of-predictors-on-a-single-data-set"]], "Stacked generalization": [[411, "stacked-generalization"]], "Stacking Classifier and Regressor": [[313, "stacking-classifier-and-regressor"]], "StackingClassifier": [[565, null]], "StackingRegressor": [[566, null]], "Stalled and Unclaimed Issues": [[372, "stalled-and-unclaimed-issues"]], "Stalled pull requests": [[372, "stalled-pull-requests"]], "Standard replies for reviewing": [[380, "standard-replies-for-reviewing"]], "StandardScaler": [[304, "standardscaler"], [884, null]], "Standardization, or mean removal and variance scaling": [[1009, "standardization-or-mean-removal-and-variance-scaling"]], "Statement of purpose: Scikit-learn in 2018": [[1019, "statement-of-purpose-scikit-learn-in-2018"]], "Statistical comparison of models using grid search": [[264, null]], "Statistical learning with Python": [[1018, "statistical-learning-with-python"]], "Stochastic Gradient Descent": [[1013, null]], "Stochastic Gradient Descent - SGD": [[995, "stochastic-gradient-descent-sgd"]], "Stochastic Gradient Descent for sparse data": [[1013, "stochastic-gradient-descent-for-sparse-data"]], "Stochastic Maximum Likelihood learning": [[1004, "stochastic-maximum-likelihood-learning"]], "Stopping criterion": [[1013, "stopping-criterion"]], "Strategies comparison": [[281, "strategies-comparison"]], "Strategies to scale computationally: bigger data": [[361, null]], "Stratified K-fold": [[408, "stratified-k-fold"]], "Stratified Shuffle Split": [[408, "stratified-shuffle-split"]], "StratifiedGroupKFold": [[408, "stratifiedgroupkfold"], [818, null]], "StratifiedKFold": [[819, null]], "StratifiedShuffleSplit": [[820, null]], "Streaming instances": [[361, "streaming-instances"]], "String name scorers": [[999, "string-name-scorers"]], "Submitting a bug report or a feature request": [[372, "submitting-a-bug-report-or-a-feature-request"]], "Subsampling": [[411, "subsampling"]], "Successive Halving Iterations": [[276, null]], "Successive Halving estimators for tuning hyper-parameters": [[315, "successive-halving-estimators-for-tuning-hyper-parameters"]], "Sum": [[624, null]], "Summarizing the key points": [[398, "summarizing-the-key-points"]], "Summary": [[62, "summary"], [144, "summary"], [349, "summary"]], "Summary of cross-validation approach": [[198, "summary-of-cross-validation-approach"]], "Summary of model persistence methods": [[398, "id2"]], "Supervised learning": [[1021, null]], "Support": [[1022, null]], "Support Vector Machines": [[180, "support-vector-machines"], [331, null], [1014, null]], "Support Vector Regression (SVR) using linear and non-linear kernels": [[342, null]], "Support for Array API": [[1046, "support-for-array-api"], [1047, "support-for-array-api"], [1048, "support-for-array-api"], [1049, "support-for-array-api"]], "Support for Array API-compatible inputs": [[400, "support-for-array-api-compatible-inputs"]], "Support for SciPy sparse arrays": [[1046, "support-for-scipy-sparse-arrays"]], "Support for building with Meson": [[1047, "support-for-building-with-meson"]], "Support for missing values": [[149, "support-for-missing-values"]], "Support for quantile loss": [[149, "support-for-quantile-loss"]], "Swiss Roll": [[230, "swiss-roll"]], "Swiss Roll And Swiss-Hole Reduction": [[230, null]], "Swiss-Hole": [[230, "swiss-hole"]], "Synthetic dataset": [[377, "synthetic-dataset"]], "Synthetic example": [[107, "synthetic-example"]], "T-distributed Stochastic Neighbor Embedding": [[226, "t-distributed-stochastic-neighbor-embedding"]], "TSNE": [[692, null]], "Table of Contents": [[384, "table-of-contents"]], "Tags": [[923, null]], "Take-home messages": [[264, "take-home-messages"]], "Target Encoder": [[1009, "target-encoder"]], "Target Encoder\u2019s Internal Cross fitting": [[311, null]], "Target Types": [[386, "target-types"]], "Target format": [[1000, "target-format"], [1000, "id5"], [1000, "id8"], [1000, "id10"]], "TargetEncoder": [[885, null]], "TargetEncoder: a new category encoding strategy": [[319, "targetencoder-a-new-category-encoding-strategy"]], "TargetTags": [[924, null]], "Technical Committee": [[387, "technical-committee"]], "Test with permutations the significance of a classification score": [[270, null]], "Testing Functions": [[381, "testing-functions"]], "Testing and improving test coverage": [[372, "testing-and-improving-test-coverage"]], "Text feature extraction": [[412, "text-feature-extraction"]], "TfidfTransformer": [[589, null]], "TfidfVectorizer": [[349, "tfidfvectorizer"], [590, null]], "Tf\u2013idf term weighting": [[412, "tfidf-term-weighting"]], "The 20 newsgroups text dataset": [[367, "the-20-newsgroups-text-dataset"]], "The Bag of Words representation": [[412, "the-bag-of-words-representation"]], "The Dirichlet Process": [[998, "the-dirichlet-process"]], "The French Motor Third-Party Liability Claims dataset": [[207, "the-french-motor-third-party-liability-claims-dataset"]], "The Johnson-Lindenstrauss bound for embedding with random projections": [[237, null]], "The Johnson-Lindenstrauss lemma": [[1011, "the-johnson-lindenstrauss-lemma"]], "The Labeled Faces in the Wild face recognition dataset": [[367, "the-labeled-faces-in-the-wild-face-recognition-dataset"]], "The Meson Build Backend": [[380, "the-meson-build-backend"]], "The Olivetti faces dataset": [[367, "the-olivetti-faces-dataset"]], "The Yeast UCI dataset": [[281, "the-yeast-uci-dataset"]], "The average precision score in multi-label settings": [[271, "the-average-precision-score-in-multi-label-settings"]], "The credit card dataset": [[258, "the-credit-card-dataset"]], "The cross_validate function and multiple metric evaluation": [[408, "the-cross-validate-function-and-multiple-metric-evaluation"]], "The data": [[116, "the-data"]], "The dataset": [[262, "the-dataset"]], "The dataset: simulated hourly wages": [[182, "the-dataset-simulated-hourly-wages"]], "The dataset: wages": [[183, "the-dataset-wages"]], "The diabetes dataset": [[278, "the-diabetes-dataset"]], "The importance of hyperparameters search": [[281, "the-importance-of-hyperparameters-search"]], "The machine-learning pipeline": [[183, "the-machine-learning-pipeline"]], "The people behind scikit-learn": [[0, "the-people-behind-scikit-learn"]], "The problem of correlated variables": [[183, "the-problem-of-correlated-variables"]], "The scikit-learn MOOC": [[1017, "the-scikit-learn-mooc"]], "The scikit-learn.org Website": [[376, "the-scikit-learn-org-website"]], "The scoring parameter: defining model evaluation rules": [[999, "the-scoring-parameter-defining-model-evaluation-rules"]], "Theil-Sen Regression": [[223, null]], "Theil-Sen estimator: generalized-median-based estimator": [[995, "theil-sen-estimator-generalized-median-based-estimator"]], "TheilSenRegressor": [[679, null]], "Theoretical bounds": [[237, "theoretical-bounds"]], "Third Party Development and scikit-learn Dependency": [[240, "third-party-development-and-scikit-learn-dependency"]], "Third party distributions of scikit-learn": [[390, "third-party-distributions-of-scikit-learn"]], "Time Series Split": [[408, "time-series-split"]], "Time-based cross-validation": [[43, "time-based-cross-validation"]], "Time-related feature engineering": [[43, null]], "Time-steps as categories": [[43, "time-steps-as-categories"]], "TimeSeriesSplit": [[821, null]], "Timing and accuracy plots": [[238, "timing-and-accuracy-plots"]], "Tips and Tricks": [[359, "tips-and-tricks"]], "Tips for developing with Cython in scikit-learn": [[373, "tips-for-developing-with-cython-in-scikit-learn"]], "Tips for parameter search": [[988, "tips-for-parameter-search"]], "Tips for performance": [[373, "tips-for-performance"]], "Tips on Practical Use": [[1003, "tips-on-practical-use"], [1013, "tips-on-practical-use"], [1014, "tips-on-practical-use"]], "Tips on practical use": [[996, "tips-on-practical-use"], [1015, "tips-on-practical-use"]], "Tips to ease development": [[373, "tips-to-ease-development"]], "Tools": [[400, "tools"]], "Top terms per cluster": [[348, "top-terms-per-cluster"]], "Top-k accuracy score": [[999, "top-k-accuracy-score"]], "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation": [[54, null]], "Total impurity of leaves vs effective alphas of pruned tree": [[351, "total-impurity-of-leaves-vs-effective-alphas-of-pruned-tree"]], "Totally Random Trees Embedding": [[411, "totally-random-trees-embedding"]], "Toy datasets": [[369, null]], "Tracking feature names in a pipeline": [[405, "tracking-feature-names-in-a-pipeline"]], "Trade-offs: which estimator ?": [[995, null]], "Train and Persist the Model": [[398, "train-and-persist-the-model"]], "Train classifiers": [[336, "train-classifiers"]], "Train models on the diabetes dataset": [[244, "train-models-on-the-diabetes-dataset"]], "Train tree classifier": [[354, "train-tree-classifier"]], "Training": [[302, "training"], [1002, "training"]], "Training SVC model and plotting decision boundaries": [[340, "training-svc-model-and-plotting-decision-boundaries"]], "Training a Random Forest and Plotting the ROC Curve": [[246, "training-a-random-forest-and-plotting-the-roc-curve"]], "Training a Ridge Regressor": [[311, "training-a-ridge-regressor"]], "Training and Evaluating Pipelines with Different Encoders": [[310, "training-and-evaluating-pipelines-with-different-encoders"]], "Training and prediction with DecisionTree and AdaBoost Regressors": [[135, "training-and-prediction-with-decisiontree-and-adaboost-regressors"]], "Training classifiers": [[156, "training-classifiers"]], "Training of the model": [[150, "training-of-the-model"]], "Training the AdaBoostClassifier": [[134, "training-the-adaboostclassifier"]], "Training the Ridge Regressor": [[211, "training-the-ridge-regressor"]], "Transform": [[1002, "transform"]], "Transform data": [[115, "transform-data"]], "TransformedTargetRegressor": [[462, null]], "TransformerMixin": [[428, null]], "TransformerTags": [[925, null]], "Transformers and pre-processors": [[385, "transformers-and-pre-processors"]], "Transforming data other than X in a Pipeline": [[322, "transforming-data-other-than-x-in-a-pipeline"]], "Transforming target in regression": [[405, "transforming-target-in-regression"]], "Transforming the prediction target (y)": [[1010, null]], "Translations of scikit-learn documentation": [[1018, "translations-of-scikit-learn-documentation"]], "Tree algorithms: ID3, C4.5, C5.0 and CART": [[1015, "tree-algorithms-id3-c4-5-c5-0-and-cart"]], "Tree pruning": [[313, "tree-pruning"]], "Tree structure": [[354, "tree-structure"]], "Tree-based feature selection": [[413, "tree-based-feature-selection"]], "Tree\u2019s Feature Importance from Mean Decrease in Impurity (MDI)": [[185, "tree-s-feature-importance-from-mean-decrease-in-impurity-mdi"]], "Triaging operations for members of the core and contributor experience teams": [[371, "triaging-operations-for-members-of-the-core-and-contributor-experience-teams"]], "Trigonometric features": [[43, "trigonometric-features"]], "Troubleshooting": [[390, "troubleshooting"]], "Truncated singular value decomposition and latent semantic analysis": [[409, "truncated-singular-value-decomposition-and-latent-semantic-analysis"]], "TruncatedSVD": [[542, null]], "TunedThresholdClassifierCV": [[822, null]], "TunedThresholdClassifierCV: Tuning the decision threshold of a binary classifier": [[321, "tunedthresholdclassifiercv-tuning-the-decision-threshold-of-a-binary-classifier"]], "Tuning hyper-parameters": [[262, "tuning-hyper-parameters"]], "Tuning the cut-off point": [[258, "tuning-the-cut-off-point"]], "Tuning the decision threshold": [[258, "tuning-the-decision-threshold"], [278, "tuning-the-decision-threshold"]], "Tuning the decision threshold for class prediction": [[403, null]], "Tuning the hyper-parameters of an estimator": [[988, null]], "Tuning the hyper-parameters of the quantile regressors": [[146, "tuning-the-hyper-parameters-of-the-quantile-regressors"]], "Tweedie regression on insurance claims": [[224, null]], "TweedieRegressor": [[680, null]], "Two-class AdaBoost": [[136, null]], "Types": [[373, "types"]], "T\u00e9l\u00e9com ParisTech": [[1023, "id7"]], "Unbalanced problems": [[1014, "unbalanced-problems"]], "UndefinedMetricWarning": [[577, null]], "Underfitting vs. Overfitting": [[279, null]], "Understanding the decision tree structure": [[354, null]], "Univariate Feature Selection": [[159, null]], "Univariate feature imputation": [[989, "univariate-feature-imputation"]], "Univariate feature selection": [[159, "id1"], [413, "univariate-feature-selection"]], "Univariate vs. Multivariate Imputation": [[989, "univariate-vs-multivariate-imputation"]], "Universal attributes": [[374, "universal-attributes"]], "Unlabeled entries in y": [[1012, null]], "Unsupervised Nearest Neighbors": [[1002, "unsupervised-nearest-neighbors"]], "Unsupervised dimensionality reduction": [[1016, null]], "Unsupervised learning": [[1024, null]], "Unweighted feature selection": [[395, "unweighted-feature-selection"]], "Updating Authors List": [[376, "updating-authors-list"]], "Usage": [[402, "usage"], [405, "usage"], [405, "id1"], [411, "usage"], [411, "id24"], [411, "id25"], [411, "id27"], [411, "id35"], [995, "usage"]], "Usage Examples": [[395, "usage-examples"]], "Use markdown formatting": [[377, "use-markdown-formatting"]], "Useful pytest aliases and flags": [[380, "useful-pytest-aliases-and-flags"]], "User Guide": [[1025, null]], "User Questions": [[1022, "user-questions"]], "Using Cython": [[378, "using-cython"]], "Using KBinsDiscretizer to discretize continuous features": [[305, null]], "Using None or RandomState instances, and repeated calls to fit and split": [[355, "using-none-or-randomstate-instances-and-repeated-calls-to-fit-and-split"]], "Using OpenMP": [[373, "using-openmp"]], "Using a debugger, gdb": [[378, "using-a-debugger-gdb"]], "Using a lock-file to get an environment close to the CI": [[380, "using-a-lock-file-to-get-an-environment-close-to-the-ci"]], "Using cross-validation": [[995, "using-cross-validation"]], "Using cross-validation iterators to split train and test": [[408, "using-cross-validation-iterators-to-split-train-and-test"]], "Using feature names to specify monotonic constraints": [[151, "using-feature-names-to-specify-monotonic-constraints"]], "Using gprof": [[378, "using-gprof"]], "Using multiple metric evaluation": [[999, "using-multiple-metric-evaluation"]], "Using negative tolerance values": [[163, "using-negative-tolerance-values"]], "Using scikit-learn": [[384, "using-scikit-learn"]], "Using stop words": [[412, "using-stop-words"]], "Using valgrind / callgrind / kcachegrind": [[378, "using-valgrind-callgrind-kcachegrind"]], "Using yep and gperftools": [[378, "using-yep-and-gperftools"]], "Utilities for Developers": [[381, null]], "Validation Tools": [[381, "validation-tools"]], "Validation curve": [[994, "validation-curve"]], "Validation curves: plotting scores to evaluate models": [[994, null]], "ValidationCurveDisplay": [[823, null]], "Vanilla predictive model": [[258, "vanilla-predictive-model"]], "VarianceThreshold": [[602, null]], "Variational Bayesian Gaussian Mixture": [[998, "variational-bayesian-gaussian-mixture"]], "Various Agglomerative Clustering on a 2D embedding of digits": [[85, null]], "Varying regularization in Multi-layer Perceptron": [[299, null]], "Varying the metric": [[404, "varying-the-metric"]], "Vector Quantization Example": [[86, null]], "Vectorizing a large text corpus with the hashing trick": [[412, "vectorizing-a-large-text-corpus-with-the-hashing-trick"]], "Version 0.10": [[1029, "version-0-10"]], "Version 0.11": [[1029, "version-0-11"]], "Version 0.12": [[1029, "version-0-12"]], "Version 0.12.1": [[1029, "version-0-12-1"]], "Version 0.13": [[1030, null], [1030, "changes-0-13"]], "Version 0.13.1": [[1030, "version-0-13-1"]], "Version 0.14": [[1031, null], [1031, "changes-0-14"]], "Version 0.15": [[1032, null], [1032, "changes-0-15"]], "Version 0.15.1": [[1032, "version-0-15-1"]], "Version 0.15.2": [[1032, "version-0-15-2"]], "Version 0.16": [[1033, null], [1033, "changes-0-16"]], "Version 0.16.1": [[1033, "version-0-16-1"]], "Version 0.17": [[1034, null], [1034, "changes-0-17"]], "Version 0.17.1": [[1034, "version-0-17-1"]], "Version 0.18": [[1035, null], [1035, "changes-0-18"]], "Version 0.18.1": [[1035, "version-0-18-1"]], "Version 0.18.2": [[1035, "version-0-18-2"]], "Version 0.19": [[1036, null], [1036, "id1"]], "Version 0.19.1": [[1036, "version-0-19-1"]], "Version 0.19.2": [[1036, "version-0-19-2"]], "Version 0.20": [[1037, null]], "Version 0.20.0": [[1037, "version-0-20-0"]], "Version 0.20.1": [[1037, "version-0-20-1"]], "Version 0.20.2": [[1037, "version-0-20-2"]], "Version 0.20.3": [[1037, "version-0-20-3"]], "Version 0.20.4": [[1037, "version-0-20-4"]], "Version 0.21": [[1038, null]], "Version 0.21.0": [[1038, "version-0-21-0"]], "Version 0.21.1": [[1038, "version-0-21-1"]], "Version 0.21.2": [[1038, "version-0-21-2"]], "Version 0.21.3": [[1038, "version-0-21-3"]], "Version 0.22": [[1039, null]], "Version 0.22.0": [[1039, "version-0-22-0"]], "Version 0.22.1": [[1039, "version-0-22-1"]], "Version 0.22.2.post1": [[1039, "version-0-22-2-post1"]], "Version 0.23": [[1040, null]], "Version 0.23.0": [[1040, "version-0-23-0"]], "Version 0.23.1": [[1040, "version-0-23-1"]], "Version 0.23.2": [[1040, "version-0-23-2"]], "Version 0.24": [[1041, null]], "Version 0.24.0": [[1041, "version-0-24-0"]], "Version 0.24.1": [[1041, "version-0-24-1"]], "Version 0.24.2": [[1041, "version-0-24-2"]], "Version 0.4": [[1029, "version-0-4"]], "Version 0.5": [[1029, "version-0-5"]], "Version 0.6": [[1029, "version-0-6"]], "Version 0.7": [[1029, "version-0-7"]], "Version 0.8": [[1029, "version-0-8"]], "Version 0.9": [[1029, "version-0-9"]], "Version 1.0": [[1042, null]], "Version 1.0.0": [[1042, "version-1-0-0"]], "Version 1.0.1": [[1042, "version-1-0-1"]], "Version 1.0.2": [[1042, "version-1-0-2"]], "Version 1.1": [[1043, null]], "Version 1.1.0": [[1043, "version-1-1-0"]], "Version 1.1.1": [[1043, "version-1-1-1"]], "Version 1.1.2": [[1043, "version-1-1-2"]], "Version 1.1.3": [[1043, "version-1-1-3"]], "Version 1.2": [[1044, null]], "Version 1.2.0": [[1044, "version-1-2-0"]], "Version 1.2.1": [[1044, "version-1-2-1"]], "Version 1.2.2": [[1044, "version-1-2-2"]], "Version 1.3": [[1045, null]], "Version 1.3.0": [[1045, "version-1-3-0"]], "Version 1.3.1": [[1045, "version-1-3-1"]], "Version 1.3.2": [[1045, "version-1-3-2"]], "Version 1.4": [[1046, null]], "Version 1.4.0": [[1046, "version-1-4-0"]], "Version 1.4.1": [[1046, "version-1-4-1"]], "Version 1.4.2": [[1046, "version-1-4-2"]], "Version 1.5": [[1047, null]], "Version 1.5.0": [[1047, "version-1-5-0"]], "Version 1.5.1": [[1047, "version-1-5-1"]], "Version 1.5.2": [[1047, "version-1-5-2"]], "Version 1.6": [[1048, null]], "Version 1.6.0": [[1048, "version-1-6-0"]], "Version 1.6.1": [[1048, "version-1-6-1"]], "Version 1.7": [[1049, null]], "Version 1.7.0": [[1049, "version-1-7-0"]], "Version 1.7.1": [[1049, "version-1-7-1"]], "Video resources": [[372, "video-resources"]], "Videos": [[1017, "videos"]], "Visual evaluation of regression models": [[999, "visual-evaluation-of-regression-models"]], "Visualization": [[4, "visualization"], [29, "visualization"], [51, "visualization"], [336, "visualization"]], "Visualization of MLP weights on MNIST": [[301, null]], "Visualization of cluster hierarchy": [[404, "visualization-of-cluster-hierarchy"]], "Visualizations": [[1026, null]], "Visualizations with Display Objects": [[234, null]], "Visualize Comparison": [[144, "visualize-comparison"]], "Visualize cross-validation indices for many CV objects": [[259, "visualize-cross-validation-indices-for-many-cv-objects"]], "Visualize our data": [[259, "visualize-our-data"]], "Visualize the learning curves": [[239, "visualize-the-learning-curves"]], "Visualize the results": [[263, "visualize-the-results"]], "Visualize the results on PCA-reduced data": [[91, "visualize-the-results-on-pca-reduced-data"]], "Visualize training and prediction times": [[239, "visualize-training-and-prediction-times"]], "Visualizing Composite Estimators": [[405, "visualizing-composite-estimators"]], "Visualizing cross-validation behavior in scikit-learn": [[259, null]], "Visualizing the probabilistic predictions of a VotingClassifier": [[155, null]], "Visualizing the stock market structure": [[51, null]], "Voting Classifier": [[411, "voting-classifier"]], "Voting Regressor": [[411, "voting-regressor"]], "VotingClassifier": [[567, null]], "VotingRegressor": [[568, null]], "Warnings and Exceptions": [[381, "warnings-and-exceptions"]], "Ways to contribute": [[372, "ways-to-contribute"]], "We are defining k-Nearest Neighbors with 10 neighbors": [[100, "we-are-defining-k-nearest-neighbors-with-10-neighbors"]], "Website update": [[1039, "website-update"]], "Weight handling based on class labels": [[41, "module-sklearn.utils.class_weight"]], "Weighted Average Probabilities (Soft Voting)": [[411, "weighted-average-probabilities-soft-voting"]], "Weighted scoring and fitting": [[395, "weighted-scoring-and-fitting"]], "Weighted scoring and unweighted fitting": [[395, "weighted-scoring-and-unweighted-fitting"]], "What are the inclusion criteria for new algorithms?": [[384, "what-are-the-inclusion-criteria-for-new-algorithms"]], "What is the project name (a lot of people get it wrong)?": [[384, "what-is-the-project-name-a-lot-of-people-get-it-wrong"]], "What is the values array used here?": [[354, "what-is-the-values-array-used-here"]], "What\u2019s the best way to get help on scikit-learn usage?": [[384, "what-s-the-best-way-to-get-help-on-scikit-learn-usage"]], "Which scoring function should I use?": [[999, "which-scoring-function-should-i-use"]], "WhiteKernel": [[625, null]], "Who is using scikit-learn?": [[1023, null]], "Why are there so many different estimators for linear models?": [[384, "why-are-there-so-many-different-estimators-for-linear-models"]], "Why are you so selective on what algorithms you include in scikit-learn?": [[384, "why-are-you-so-selective-on-what-algorithms-you-include-in-scikit-learn"]], "Why did you remove HMMs from scikit-learn?": [[384, "why-did-you-remove-hmms-from-scikit-learn"]], "Why do I sometimes get a crash/freeze with n_jobs > 1 under OSX or Linux?": [[384, "why-do-i-sometimes-get-a-crash-freeze-with-n-jobs-1-under-osx-or-linux"]], "Why do categorical variables need preprocessing in scikit-learn, compared to other tools?": [[384, "why-do-categorical-variables-need-preprocessing-in-scikit-learn-compared-to-other-tools"]], "Why does my job use more cores than specified with n_jobs?": [[384, "why-does-my-job-use-more-cores-than-specified-with-n-jobs"]], "Why is my pull request not getting any attention?": [[384, "why-is-my-pull-request-not-getting-any-attention"]], "Why is there no support for deep or reinforcement learning? Will there be such support in the future?": [[384, "why-is-there-no-support-for-deep-or-reinforcement-learning-will-there-be-such-support-in-the-future"]], "Why it\u2019s faster": [[411, "why-it-s-faster"]], "Why scikit?": [[384, "why-scikit"]], "Wikipedia principal eigenvector": [[55, null]], "Will you add GPU support?": [[384, "will-you-add-gpu-support"]], "Will you add graphical models or sequence prediction to scikit-learn?": [[384, "will-you-add-graphical-models-or-sequence-prediction-to-scikit-learn"]], "WinPython for Windows": [[390, "winpython-for-windows"]], "Windows": [[370, "windows"]], "Wine recognition dataset": [[369, "wine-recognition-dataset"]], "Workflow Overview": [[398, "workflow-overview"]], "Working on PRs to help review": [[371, "working-on-prs-to-help-review"]], "Working on issues to improve them": [[371, "working-on-issues-to-improve-them"]], "Working with graphs": [[41, "module-sklearn.utils.graph"]], "Working with sparse matrices and arrays": [[41, "module-sklearn.utils.sparsefuncs"]], "Working with text documents": [[180, "working-with-text-documents"], [346, null]], "Wrong causal interpretation": [[183, "wrong-causal-interpretation"]], "XOR dataset": [[340, "xor-dataset"]], "Yhat": [[1023, "id10"]], "Zero one loss": [[999, "zero-one-loss"]], "Zopa": [[1023, "id27"]], "__sklearn_is_fitted__ as Developer API": [[132, null]], "_safe_indexing": [[926, null]], "accuracy_score": [[703, null]], "add_dummy_feature": [[886, null]], "additive_chi2_kernel": [[758, null]], "adjusted_mutual_info_score": [[704, null]], "adjusted_rand_score": [[705, null]], "affinity_propagation": [[451, null]], "all_displays": [[938, null]], "all_estimators": [[939, null]], "all_functions": [[940, null]], "as_float_array": [[928, null]], "assert_all_finite": [[929, null]], "auc": [[706, null]], "available_if": [[961, null]], "average_precision_score": [[707, null]], "balanced_accuracy_score": [[708, null]], "base.BaseEstimator and mixins:": [[374, null]], "betaworks": [[1023, "id4"]], "binarize": [[887, null]], "brier_score_loss": [[709, null]], "calibration_curve": [[436, null]], "calinski_harabasz_score": [[710, null]], "check_X_y": [[930, null]], "check_array": [[931, null]], "check_consistent_length": [[932, null]], "check_cv": [[824, null]], "check_estimator": [[941, null]], "check_increasing": [[636, null]], "check_is_fitted": [[982, null]], "check_memory": [[983, null]], "check_random_state": [[933, null]], "check_scalar": [[934, null]], "check_scoring": [[711, null]], "check_symmetric": [[984, null]], "chi2": [[603, null]], "chi2_kernel": [[759, null]], "class_likelihood_ratios": [[712, null]], "classification_report": [[713, null]], "clear_data_home": [[483, null]], "clone": [[429, null]], "cluster_optics_dbscan": [[452, null]], "cluster_optics_xi": [[453, null]], "cohen_kappa_score": [[716, null]], "column_or_1d": [[985, null]], "completeness_score": [[717, null]], "compute_class_weight": [[935, null]], "compute_optics_graph": [[454, null]], "compute_sample_weight": [[936, null]], "config_context": [[465, null]], "confusion_matrix": [[718, null]], "consensus_score": [[719, null]], "contingency_matrix": [[714, null]], "cosine_distances": [[760, null]], "cosine_similarity": [[761, null]], "coverage_error": [[720, null]], "cross_val_predict": [[825, null]], "cross_val_score": [[826, null]], "cross_validate": [[827, null]], "d2_absolute_error_score": [[721, null]], "d2_log_loss_score": [[722, null]], "d2_pinball_score": [[723, null]], "d2_tweedie_score": [[724, null]], "davies_bouldin_score": [[725, null]], "dbscan": [[415, null]], "dbscan_clustering": [[88, "dbscan-clustering"]], "dcg_score": [[726, null]], "delayed": [[967, null]], "density": [[945, null]], "deprecated": [[937, null]], "det_curve": [[727, null]], "dict_learning": [[543, null]], "dict_learning_online": [[544, null]], "distance_metrics": [[762, null]], "dump_svmlight_file": [[484, null]], "empirical_covariance": [[474, null]], "enable_halving_search_cv": [[578, null]], "enable_iterative_imputer": [[579, null]], "enet_path": [[681, null]], "estimate_bandwidth": [[455, null]], "estimator_checks_generator": [[942, null]], "estimator_html_repr": [[944, null]], "euclidean_distances": [[763, null]], "explained_variance_score": [[728, null]], "export_graphviz": [[916, null]], "export_text": [[917, null]], "extract_patches_2d": [[583, null]], "f1_score": [[729, null]], "f_classif": [[604, null]], "f_regression": [[605, null]], "fast_logdet": [[946, null]], "fastica": [[416, null]], "fbeta_score": [[730, null]], "fetch_20newsgroups": [[485, null]], "fetch_20newsgroups_vectorized": [[486, null]], "fetch_california_housing": [[487, null]], "fetch_covtype": [[488, null]], "fetch_file": [[489, null]], "fetch_kddcup99": [[490, null]], "fetch_lfw_pairs": [[491, null]], "fetch_lfw_people": [[492, null]], "fetch_olivetti_faces": [[493, null]], "fetch_openml": [[494, null]], "fetch_rcv1": [[495, null]], "fetch_species_distributions": [[496, null]], "fowlkes_mallows_score": [[731, null]], "gen_batches": [[951, null]], "gen_even_slices": [[952, null]], "get_config": [[626, null]], "get_data_home": [[497, null]], "get_feature_names_out Available in all Transformers": [[317, "get-feature-names-out-available-in-all-transformers"]], "get_params and set_params": [[374, "get-params-and-set-params"]], "get_routing_for_object": [[959, null]], "get_scorer": [[732, null]], "get_scorer_names": [[733, null]], "get_tags": [[953, null]], "graphical_lasso": [[475, null]], "grid_to_graph": [[584, null]], "hamming_loss": [[734, null]], "has_fit_parameter": [[986, null]], "haversine_distances": [[764, null]], "hinge_loss": [[735, null]], "homogeneity_completeness_v_measure": [[736, null]], "homogeneity_score": [[737, null]], "img_to_graph": [[585, null]], "incr_mean_variance_axis": [[973, null]], "indexable": [[955, null]], "inplace_column_scale": [[974, null]], "inplace_csr_column_scale": [[975, null]], "inplace_csr_row_normalize_l1": [[980, null]], "inplace_csr_row_normalize_l2": [[981, null]], "inplace_row_scale": [[976, null]], "inplace_swap_column": [[977, null]], "inplace_swap_row": [[978, null]], "is_classifier": [[430, null]], "is_clusterer": [[431, null]], "is_multilabel": [[962, null]], "is_outlier_detector": [[432, null]], "is_regressor": [[433, null]], "isotonic_regression": [[637, null]], "jaccard_score": [[738, null]], "johnson_lindenstrauss_min_dim": [[898, null]], "kNN-imputation of the missing values": [[179, "knn-imputation-of-the-missing-values"]], "k_means": [[456, null]], "kcachegrind": [[378, "kcachegrind"]], "kernel_metrics": [[765, null]], "kmeans_plusplus": [[457, null]], "kneighbors_graph": [[857, null]], "l1_min_c": [[911, null]], "label_binarize": [[888, null]], "label_ranking_average_precision_score": [[739, null]], "label_ranking_loss": [[740, null]], "laplacian_kernel": [[766, null]], "lars_path": [[682, null]], "lars_path_gram": [[683, null]], "lasso_path": [[684, null]], "learning_curve": [[828, null]], "ledoit_wolf": [[476, null]], "ledoit_wolf_shrinkage": [[477, null]], "linear_kernel": [[767, null]], "load_breast_cancer": [[498, null]], "load_diabetes": [[499, null]], "load_digits": [[500, null]], "load_files": [[501, null]], "load_iris": [[502, null]], "load_linnerud": [[503, null]], "load_sample_image": [[504, null]], "load_sample_images": [[505, null]], "load_svmlight_file": [[506, null]], "load_svmlight_files": [[507, null]], "load_wine": [[508, null]], "locally_linear_embedding": [[693, null]], "log_loss": [[741, null]], "macOS": [[370, "macos"]], "macOS compilers from Homebrew": [[370, "macos-compilers-from-homebrew"]], "macOS compilers from conda-forge": [[370, "macos-compilers-from-conda-forge"]], "make_biclusters": [[509, null]], "make_blobs": [[377, "make-blobs"], [510, null]], "make_checkerboard": [[511, null]], "make_circles": [[512, null]], "make_classification": [[377, "make-classification"], [513, null]], "make_column_selector": [[463, null]], "make_column_transformer": [[464, null]], "make_friedman1": [[514, null]], "make_friedman2": [[515, null]], "make_friedman3": [[516, null]], "make_gaussian_quantiles": [[517, null]], "make_hastie_10_2": [[518, null]], "make_low_rank_matrix": [[519, null]], "make_moons": [[520, null]], "make_multilabel_classification": [[521, null]], "make_pipeline": [[865, null]], "make_regression": [[377, "make-regression"], [522, null]], "make_s_curve": [[523, null]], "make_scorer": [[742, null]], "make_sparse_coded_signal": [[524, null]], "make_sparse_spd_matrix": [[525, null]], "make_sparse_uncorrelated": [[526, null]], "make_spd_matrix": [[527, null]], "make_swiss_roll": [[528, null]], "make_union": [[866, null]], "manhattan_distances": [[768, null]], "matthews_corrcoef": [[743, null]], "max_error": [[744, null]], "maxabs_scale": [[889, null]], "mean_absolute_error": [[745, null]], "mean_absolute_percentage_error": [[746, null]], "mean_gamma_deviance": [[747, null]], "mean_pinball_loss": [[748, null]], "mean_poisson_deviance": [[749, null]], "mean_shift": [[458, null]], "mean_squared_error": [[750, null]], "mean_squared_log_error": [[751, null]], "mean_tweedie_deviance": [[752, null]], "mean_variance_axis": [[979, null]], "median_absolute_error": [[753, null]], "min_cluster_size": [[88, "min-cluster-size"]], "min_pos": [[927, null]], "min_samples": [[88, "min-samples"]], "minmax_scale": [[890, null]], "multilabel_confusion_matrix": [[754, null]], "murmurhash3_32": [[965, null]], "mutual_info_classif": [[606, null]], "mutual_info_regression": [[607, null]], "mutual_info_score": [[755, null]], "nan_euclidean_distances": [[769, null]], "ndcg_score": [[756, null]], "non_negative_factorization": [[545, null]], "normalize": [[891, null]], "normalized_mutual_info_score": [[757, null]], "oas": [[417, null]], "orthogonal_mp": [[685, null]], "orthogonal_mp_gram": [[686, null]], "pair_confusion_matrix": [[715, null]], "paired_cosine_distances": [[770, null]], "paired_distances": [[771, null]], "paired_euclidean_distances": [[772, null]], "paired_manhattan_distances": [[773, null]], "pairwise_distances": [[778, null]], "pairwise_distances_argmin": [[779, null]], "pairwise_distances_argmin_min": [[780, null]], "pairwise_distances_chunked": [[781, null]], "pairwise_kernels": [[774, null]], "parametrize_with_checks": [[943, null]], "partial_dependence": [[633, null]], "permutation_importance": [[634, null]], "permutation_test_score": [[829, null]], "pickle, joblib, and cloudpickle": [[398, "pickle-joblib-and-cloudpickle"]], "plot_tree": [[918, null]], "polynomial_kernel": [[775, null]], "power_transform": [[892, null]], "precision_recall_curve": [[782, null]], "precision_recall_fscore_support": [[783, null]], "precision_score": [[784, null]], "process_routing": [[960, null]], "quantile_transform": [[893, null]], "r2_score": [[785, null]], "r_regression": [[608, null]], "radius_neighbors_graph": [[858, null]], "rand_score": [[786, null]], "randomized_range_finder": [[947, null]], "randomized_svd": [[948, null]], "rbf_kernel": [[776, null]], "recall_score": [[787, null]], "reconstruct_from_patches_2d": [[586, null]], "resample": [[969, null]], "ridge_regression": [[687, null]], "robust_scale": [[894, null]], "roc_auc_score": [[788, null]], "roc_curve": [[789, null]], "root_mean_squared_error": [[790, null]], "root_mean_squared_log_error": [[791, null]], "safe_mask": [[970, null]], "safe_sparse_dot": [[949, null]], "safe_sqr": [[971, null]], "sample_without_replacement": [[968, null]], "scale": [[895, null]], "scikit-learn Swag": [[0, "scikit-learn-swag"]], "set_config": [[902, null]], "show_versions": [[903, null]], "shrunk_covariance": [[478, null]], "shuffle": [[972, null]], "sigmoid_kernel": [[777, null]], "silhouette_samples": [[792, null]], "silhouette_score": [[793, null]], "single_source_shortest_path_length": [[954, null]], "sklearn": [[2, null], [1045, "sklearn"]], "sklearn.base": [[3, null], [1038, "sklearn-base"], [1039, "sklearn-base"], [1041, "sklearn-base"], [1042, "sklearn-base"], [1043, "sklearn-base"], [1044, "sklearn-base"], [1044, "id2"], [1044, "id10"], [1045, "sklearn-base"], [1046, "sklearn-base"], [1048, "sklearn-base"], [1049, "sklearn-base"], [1049, "id1"]], "sklearn.calibration": [[4, null], [1038, "sklearn-calibration"], [1039, "sklearn-calibration"], [1041, "sklearn-calibration"], [1042, "sklearn-calibration"], [1042, "id7"], [1043, "sklearn-calibration"], [1044, "sklearn-calibration"], [1044, "id11"], [1045, "sklearn-calibration"], [1045, "id7"], [1046, "sklearn-calibration"], [1046, "id4"], [1047, "sklearn-calibration"], [1047, "id7"], [1048, "sklearn-calibration"], [1049, "sklearn-calibration"]], "sklearn.cluster": [[5, null], [1037, "sklearn-cluster"], [1037, "id2"], [1037, "id11"], [1037, "id24"], [1038, "sklearn-cluster"], [1038, "id8"], [1039, "sklearn-cluster"], [1039, "id5"], [1040, "sklearn-cluster"], [1040, "id2"], [1040, "id5"], [1041, "sklearn-cluster"], [1042, "sklearn-cluster"], [1042, "id1"], [1042, "id8"], [1043, "sklearn-cluster"], [1043, "id8"], [1044, "sklearn-cluster"], [1044, "id12"], [1045, "sklearn-cluster"], [1045, "id8"], [1046, "sklearn-cluster"], [1046, "id5"], [1047, "sklearn-cluster"], [1048, "sklearn-cluster"]], "sklearn.compose": [[6, null], [1037, "sklearn-compose"], [1037, "id3"], [1037, "id6"], [1037, "id12"], [1037, "id25"], [1038, "sklearn-compose"], [1038, "id9"], [1039, "sklearn-compose"], [1040, "sklearn-compose"], [1041, "sklearn-compose"], [1041, "id5"], [1042, "sklearn-compose"], [1043, "sklearn-compose"], [1044, "sklearn-compose"], [1045, "sklearn-compose"], [1046, "sklearn-compose"], [1046, "id6"], [1047, "sklearn-compose"], [1047, "id3"], [1047, "id8"], [1048, "sklearn-compose"], [1049, "sklearn-compose"], [1049, "id2"]], "sklearn.covariance": [[7, null], [1037, "sklearn-covariance"], [1037, "id26"], [1041, "sklearn-covariance"], [1042, "sklearn-covariance"], [1043, "sklearn-covariance"], [1045, "sklearn-covariance"], [1046, "sklearn-covariance"], [1048, "sklearn-covariance"], [1049, "sklearn-covariance"]], "sklearn.cross_decomposition": [[8, null], [1039, "sklearn-cross-decomposition"], [1041, "sklearn-cross-decomposition"], [1041, "id6"], [1043, "sklearn-cross-decomposition"], [1045, "sklearn-cross-decomposition"], [1047, "sklearn-cross-decomposition"], [1048, "sklearn-cross-decomposition"]], "sklearn.datasets": [[9, null], [1037, "sklearn-datasets"], [1037, "id13"], [1037, "id27"], [1038, "sklearn-datasets"], [1038, "id10"], [1039, "sklearn-datasets"], [1040, "sklearn-datasets"], [1041, "sklearn-datasets"], [1042, "sklearn-datasets"], [1042, "id9"], [1043, "sklearn-datasets"], [1043, "id9"], [1044, "sklearn-datasets"], [1044, "id13"], [1045, "sklearn-datasets"], [1045, "id9"], [1046, "sklearn-datasets"], [1047, "sklearn-datasets"], [1048, "sklearn-datasets"], [1049, "sklearn-datasets"], [1049, "id3"]], "sklearn.decomposition": [[10, null], [1037, "sklearn-decomposition"], [1037, "id4"], [1037, "id14"], [1037, "id28"], [1038, "sklearn-decomposition"], [1038, "id11"], [1039, "sklearn-decomposition"], [1040, "sklearn-decomposition"], [1040, "id6"], [1041, "sklearn-decomposition"], [1041, "id7"], [1042, "sklearn-decomposition"], [1042, "id10"], [1043, "sklearn-decomposition"], [1043, "id10"], [1044, "sklearn-decomposition"], [1044, "id14"], [1045, "sklearn-decomposition"], [1045, "id10"], [1046, "sklearn-decomposition"], [1047, "sklearn-decomposition"], [1047, "id9"], [1048, "sklearn-decomposition"], [1049, "sklearn-decomposition"]], "sklearn.discriminant_analysis": [[11, null], [1037, "sklearn-discriminant-analysis"], [1038, "sklearn-discriminant-analysis"], [1041, "sklearn-discriminant-analysis"], [1043, "sklearn-discriminant-analysis"], [1044, "sklearn-discriminant-analysis"], [1045, "sklearn-discriminant-analysis"], [1048, "sklearn-discriminant-analysis"]], "sklearn.dummy": [[12, null], [1037, "sklearn-dummy"], [1038, "sklearn-dummy"], [1039, "sklearn-dummy"], [1042, "sklearn-dummy"], [1043, "sklearn-dummy"], [1047, "sklearn-dummy"]], "sklearn.ensemble": [[13, null], [1037, "sklearn-ensemble"], [1037, "id29"], [1038, "sklearn-ensemble"], [1038, "id12"], [1039, "sklearn-ensemble"], [1040, "sklearn-ensemble"], [1040, "id7"], [1041, "sklearn-ensemble"], [1041, "id8"], [1042, "sklearn-ensemble"], [1042, "id2"], [1042, "id11"], [1043, "sklearn-ensemble"], [1044, "sklearn-ensemble"], [1044, "id3"], [1044, "id15"], [1045, "sklearn-ensemble"], [1045, "id11"], [1046, "sklearn-ensemble"], [1046, "id7"], [1047, "sklearn-ensemble"], [1048, "sklearn-ensemble"], [1049, "sklearn-ensemble"]], "sklearn.exceptions": [[14, null], [1041, "sklearn-exceptions"], [1045, "sklearn-exceptions"]], "sklearn.experimental": [[15, null]], "sklearn.externals": [[1038, "sklearn-externals"]], "sklearn.feature_extraction": [[16, null], [1037, "sklearn-feature-extraction"], [1037, "id15"], [1037, "id30"], [1038, "sklearn-feature-extraction"], [1039, "sklearn-feature-extraction"], [1040, "sklearn-feature-extraction"], [1040, "id8"], [1041, "sklearn-feature-extraction"], [1041, "id9"], [1042, "sklearn-feature-extraction"], [1042, "id12"], [1043, "sklearn-feature-extraction"], [1044, "sklearn-feature-extraction"], [1045, "sklearn-feature-extraction"], [1046, "sklearn-feature-extraction"], [1047, "sklearn-feature-extraction"], [1048, "sklearn-feature-extraction"]], "sklearn.feature_selection": [[17, null], [1037, "sklearn-feature-selection"], [1039, "sklearn-feature-selection"], [1040, "sklearn-feature-selection"], [1041, "sklearn-feature-selection"], [1042, "sklearn-feature-selection"], [1042, "id13"], [1043, "sklearn-feature-selection"], [1043, "id2"], [1043, "id11"], [1044, "sklearn-feature-selection"], [1044, "id16"], [1045, "sklearn-feature-selection"], [1045, "id12"], [1046, "sklearn-feature-selection"], [1047, "sklearn-feature-selection"], [1049, "sklearn-feature-selection"]], "sklearn.frozen": [[18, null], [1048, "sklearn-frozen"]], "sklearn.gaussian_process": [[19, null], [1037, "sklearn-gaussian-process"], [1039, "sklearn-gaussian-process"], [1040, "sklearn-gaussian-process"], [1041, "sklearn-gaussian-process"], [1041, "id10"], [1042, "sklearn-gaussian-process"], [1043, "sklearn-gaussian-process"], [1044, "sklearn-gaussian-process"], [1045, "sklearn-gaussian-process"], [1049, "sklearn-gaussian-process"]], "sklearn.impute": [[20, null], [1037, "sklearn-impute"], [1037, "id31"], [1038, "sklearn-impute"], [1038, "id13"], [1039, "sklearn-impute"], [1039, "id6"], [1040, "sklearn-impute"], [1041, "sklearn-impute"], [1042, "sklearn-impute"], [1043, "sklearn-impute"], [1043, "id12"], [1044, "sklearn-impute"], [1045, "sklearn-impute"], [1045, "id13"], [1046, "sklearn-impute"], [1047, "sklearn-impute"], [1048, "sklearn-impute"]], "sklearn.inspection": [[21, null], [1038, "sklearn-inspection"], [1038, "id3"], [1038, "id14"], [1039, "sklearn-inspection"], [1039, "id7"], [1040, "sklearn-inspection"], [1040, "id11"], [1041, "sklearn-inspection"], [1042, "sklearn-inspection"], [1043, "sklearn-inspection"], [1044, "sklearn-inspection"], [1044, "id17"], [1045, "sklearn-inspection"], [1046, "sklearn-inspection"], [1046, "id8"], [1047, "sklearn-inspection"], [1049, "sklearn-inspection"], [1049, "id4"]], "sklearn.isotonic": [[22, null], [1037, "sklearn-isotonic"], [1038, "sklearn-isotonic"], [1039, "sklearn-isotonic"], [1041, "sklearn-isotonic"], [1043, "sklearn-isotonic"], [1044, "sklearn-isotonic"]], "sklearn.kernel_approximation": [[23, null], [1039, "sklearn-kernel-approximation"], [1041, "sklearn-kernel-approximation"], [1042, "sklearn-kernel-approximation"], [1043, "sklearn-kernel-approximation"], [1044, "sklearn-kernel-approximation"], [1045, "sklearn-kernel-approximation"]], "sklearn.kernel_ridge": [[24, null], [1046, "sklearn-kernel-ridge"]], "sklearn.linear_model": [[25, null], [1037, "sklearn-linear-model"], [1037, "id16"], [1037, "id32"], [1038, "sklearn-linear-model"], [1038, "id15"], [1039, "sklearn-linear-model"], [1040, "sklearn-linear-model"], [1040, "id9"], [1041, "sklearn-linear-model"], [1041, "id11"], [1042, "sklearn-linear-model"], [1042, "id3"], [1042, "id14"], [1043, "sklearn-linear-model"], [1043, "id13"], [1044, "sklearn-linear-model"], [1044, "id18"], [1045, "sklearn-linear-model"], [1046, "sklearn-linear-model"], [1046, "id9"], [1047, "sklearn-linear-model"], [1048, "sklearn-linear-model"], [1049, "sklearn-linear-model"]], "sklearn.manifold": [[26, null], [1037, "sklearn-manifold"], [1038, "sklearn-manifold"], [1039, "sklearn-manifold"], [1040, "sklearn-manifold"], [1041, "sklearn-manifold"], [1042, "sklearn-manifold"], [1042, "id15"], [1043, "sklearn-manifold"], [1043, "id14"], [1044, "sklearn-manifold"], [1044, "id19"], [1045, "sklearn-manifold"], [1047, "sklearn-manifold"], [1048, "sklearn-manifold"], [1049, "sklearn-manifold"]], "sklearn.metrics": [[27, null], [1037, "sklearn-metrics"], [1037, "id17"], [1037, "id33"], [1038, "sklearn-metrics"], [1038, "id4"], [1038, "id16"], [1039, "sklearn-metrics"], [1039, "id2"], [1039, "id8"], [1040, "sklearn-metrics"], [1040, "id10"], [1041, "sklearn-metrics"], [1041, "id2"], [1041, "id12"], [1042, "sklearn-metrics"], [1042, "id16"], [1043, "sklearn-metrics"], [1043, "id3"], [1043, "id15"], [1044, "sklearn-metrics"], [1045, "sklearn-metrics"], [1045, "id2"], [1045, "id14"], [1046, "sklearn-metrics"], [1047, "sklearn-metrics"], [1047, "id4"], [1047, "id10"], [1048, "sklearn-metrics"], [1048, "id2"], [1049, "sklearn-metrics"]], "sklearn.mixture": [[28, null], [1037, "sklearn-mixture"], [1037, "id34"], [1038, "sklearn-mixture"], [1042, "sklearn-mixture"], [1043, "sklearn-mixture"], [1045, "sklearn-mixture"], [1045, "id15"], [1047, "sklearn-mixture"], [1049, "sklearn-mixture"]], "sklearn.model_selection": [[29, null], [1037, "sklearn-model-selection"], [1037, "id35"], [1038, "sklearn-model-selection"], [1039, "sklearn-model-selection"], [1039, "id9"], [1039, "id13"], [1040, "sklearn-model-selection"], [1041, "sklearn-model-selection"], [1041, "id13"], [1042, "sklearn-model-selection"], [1043, "sklearn-model-selection"], [1044, "sklearn-model-selection"], [1044, "id20"], [1045, "sklearn-model-selection"], [1046, "sklearn-model-selection"], [1047, "sklearn-model-selection"], [1047, "id11"], [1048, "sklearn-model-selection"], [1048, "id3"], [1049, "sklearn-model-selection"]], "sklearn.multiclass": [[30, null], [1038, "sklearn-multiclass"], [1041, "sklearn-multiclass"], [1042, "sklearn-multiclass"], [1043, "sklearn-multiclass"], [1049, "sklearn-multiclass"]], "sklearn.multioutput": [[31, null], [1037, "sklearn-multioutput"], [1038, "sklearn-multioutput"], [1039, "sklearn-multioutput"], [1040, "sklearn-multioutput"], [1041, "sklearn-multioutput"], [1041, "id14"], [1044, "sklearn-multioutput"], [1045, "sklearn-multioutput"], [1046, "sklearn-multioutput"], [1047, "sklearn-multioutput"], [1049, "sklearn-multioutput"]], "sklearn.naive_bayes": [[32, null], [1037, "sklearn-naive-bayes"], [1039, "sklearn-naive-bayes"], [1039, "id10"], [1040, "sklearn-naive-bayes"], [1041, "sklearn-naive-bayes"], [1042, "sklearn-naive-bayes"], [1044, "sklearn-naive-bayes"], [1045, "sklearn-naive-bayes"], [1049, "sklearn-naive-bayes"]], "sklearn.neighbors": [[33, null], [1037, "sklearn-neighbors"], [1037, "id7"], [1037, "id18"], [1037, "id36"], [1038, "sklearn-neighbors"], [1038, "id5"], [1038, "id17"], [1039, "sklearn-neighbors"], [1039, "id11"], [1041, "sklearn-neighbors"], [1042, "sklearn-neighbors"], [1042, "id4"], [1042, "id17"], [1043, "sklearn-neighbors"], [1044, "sklearn-neighbors"], [1045, "sklearn-neighbors"], [1045, "id16"], [1046, "sklearn-neighbors"], [1047, "sklearn-neighbors"], [1048, "sklearn-neighbors"]], "sklearn.neural_network": [[34, null], [1037, "sklearn-neural-network"], [1038, "sklearn-neural-network"], [1039, "sklearn-neural-network"], [1040, "sklearn-neural-network"], [1041, "sklearn-neural-network"], [1042, "sklearn-neural-network"], [1043, "sklearn-neural-network"], [1044, "sklearn-neural-network"], [1044, "id21"], [1045, "sklearn-neural-network"], [1048, "sklearn-neural-network"], [1049, "sklearn-neural-network"]], "sklearn.pipeline": [[35, null], [1037, "sklearn-pipeline"], [1038, "sklearn-pipeline"], [1039, "sklearn-pipeline"], [1040, "sklearn-pipeline"], [1041, "sklearn-pipeline"], [1042, "sklearn-pipeline"], [1042, "id18"], [1043, "sklearn-pipeline"], [1044, "sklearn-pipeline"], [1045, "sklearn-pipeline"], [1047, "sklearn-pipeline"], [1048, "sklearn-pipeline"], [1049, "sklearn-pipeline"]], "sklearn.preprocessing": [[36, null], [1037, "sklearn-preprocessing"], [1037, "id19"], [1037, "id37"], [1038, "sklearn-preprocessing"], [1038, "id18"], [1039, "sklearn-preprocessing"], [1039, "id12"], [1040, "sklearn-preprocessing"], [1041, "sklearn-preprocessing"], [1041, "id15"], [1042, "sklearn-preprocessing"], [1042, "id19"], [1043, "sklearn-preprocessing"], [1043, "id4"], [1043, "id16"], [1044, "sklearn-preprocessing"], [1044, "id4"], [1044, "id22"], [1045, "sklearn-preprocessing"], [1045, "id17"], [1046, "sklearn-preprocessing"], [1046, "id10"], [1047, "sklearn-preprocessing"], [1048, "sklearn-preprocessing"], [1049, "sklearn-preprocessing"]], "sklearn.random_projection": [[37, null], [1043, "sklearn-random-projection"]], "sklearn.semi_supervised": [[38, null], [1039, "sklearn-semi-supervised"], [1040, "sklearn-semi-supervised"], [1041, "sklearn-semi-supervised"], [1041, "id3"], [1041, "id16"], [1045, "sklearn-semi-supervised"], [1048, "sklearn-semi-supervised"]], "sklearn.svm": [[39, null], [1037, "sklearn-svm"], [1037, "id38"], [1038, "sklearn-svm"], [1039, "sklearn-svm"], [1040, "sklearn-svm"], [1041, "sklearn-svm"], [1042, "sklearn-svm"], [1042, "id20"], [1043, "sklearn-svm"], [1044, "sklearn-svm"], [1045, "sklearn-svm"], [1047, "sklearn-svm"], [1049, "sklearn-svm"]], "sklearn.tree": [[40, null], [1037, "sklearn-tree"], [1038, "sklearn-tree"], [1038, "id19"], [1039, "sklearn-tree"], [1040, "sklearn-tree"], [1041, "sklearn-tree"], [1041, "id17"], [1042, "sklearn-tree"], [1042, "id21"], [1043, "sklearn-tree"], [1043, "id5"], [1043, "id17"], [1044, "sklearn-tree"], [1044, "id5"], [1044, "id23"], [1045, "sklearn-tree"], [1045, "id3"], [1045, "id18"], [1046, "sklearn-tree"], [1046, "id11"], [1047, "sklearn-tree"], [1047, "id12"], [1048, "sklearn-tree"], [1048, "id4"]], "sklearn.utils": [[41, null], [1037, "sklearn-utils"], [1037, "id20"], [1037, "id39"], [1038, "sklearn-utils"], [1039, "sklearn-utils"], [1039, "id14"], [1040, "sklearn-utils"], [1040, "id12"], [1041, "sklearn-utils"], [1041, "id18"], [1042, "sklearn-utils"], [1042, "id5"], [1042, "id22"], [1043, "sklearn-utils"], [1043, "id18"], [1044, "sklearn-utils"], [1044, "id6"], [1044, "id24"], [1045, "sklearn-utils"], [1046, "sklearn-utils"], [1046, "id12"], [1047, "sklearn-utils"], [1047, "id13"], [1048, "sklearn-utils"], [1048, "id5"], [1049, "sklearn-utils"], [1049, "id5"]], "sklearn.utils.sparsefuncs": [[1038, "sklearn-utils-sparsefuncs"]], "skops.io": [[398, "skops-io"]], "smacof": [[694, null]], "solido": [[1023, "id23"]], "sort_graph_by_row_values": [[859, null]], "sparse_encode": [[546, null]], "spectral_clustering": [[459, null]], "spectral_embedding": [[695, null]], "t-SNE: The effect of various perplexity values on the shape": [[231, null]], "t-distributed Stochastic Neighbor Embedding (t-SNE)": [[996, "t-distributed-stochastic-neighbor-embedding-t-sne"]], "top_k_accuracy_score": [[794, null]], "train_test_split": [[830, null]], "trustworthiness": [[696, null]], "type_of_target": [[963, null]], "unique_labels": [[964, null]], "v_measure_score": [[795, null]], "validate_data": [[987, null]], "validation_curve": [[831, null]], "ward_tree": [[460, null]], "weighted_mode": [[950, null]], "zero_one_loss": [[796, null]], "\u201cStatlog\u201d German credit dataset": [[258, "statlog-german-credit-dataset"]]}, "docnames": ["about", "api/index", "api/sklearn", "api/sklearn.base", "api/sklearn.calibration", "api/sklearn.cluster", "api/sklearn.compose", "api/sklearn.covariance", "api/sklearn.cross_decomposition", "api/sklearn.datasets", "api/sklearn.decomposition", "api/sklearn.discriminant_analysis", "api/sklearn.dummy", "api/sklearn.ensemble", "api/sklearn.exceptions", "api/sklearn.experimental", "api/sklearn.feature_extraction", "api/sklearn.feature_selection", "api/sklearn.frozen", "api/sklearn.gaussian_process", "api/sklearn.impute", "api/sklearn.inspection", "api/sklearn.isotonic", "api/sklearn.kernel_approximation", "api/sklearn.kernel_ridge", "api/sklearn.linear_model", "api/sklearn.manifold", "api/sklearn.metrics", "api/sklearn.mixture", "api/sklearn.model_selection", "api/sklearn.multiclass", "api/sklearn.multioutput", "api/sklearn.naive_bayes", "api/sklearn.neighbors", "api/sklearn.neural_network", "api/sklearn.pipeline", "api/sklearn.preprocessing", "api/sklearn.random_projection", "api/sklearn.semi_supervised", "api/sklearn.svm", "api/sklearn.tree", "api/sklearn.utils", "auto_examples/applications/index", "auto_examples/applications/plot_cyclical_feature_engineering", "auto_examples/applications/plot_digits_denoising", "auto_examples/applications/plot_face_recognition", "auto_examples/applications/plot_model_complexity_influence", "auto_examples/applications/plot_out_of_core_classification", "auto_examples/applications/plot_outlier_detection_wine", "auto_examples/applications/plot_prediction_latency", "auto_examples/applications/plot_species_distribution_modeling", "auto_examples/applications/plot_stock_market", "auto_examples/applications/plot_time_series_lagged_features", "auto_examples/applications/plot_tomography_l1_reconstruction", "auto_examples/applications/plot_topics_extraction_with_nmf_lda", "auto_examples/applications/wikipedia_principal_eigenvector", "auto_examples/bicluster/index", "auto_examples/bicluster/plot_bicluster_newsgroups", "auto_examples/bicluster/plot_spectral_biclustering", "auto_examples/bicluster/plot_spectral_coclustering", "auto_examples/calibration/index", "auto_examples/calibration/plot_calibration", "auto_examples/calibration/plot_calibration_curve", "auto_examples/calibration/plot_calibration_multiclass", "auto_examples/calibration/plot_compare_calibration", "auto_examples/classification/index", "auto_examples/classification/plot_classification_probability", "auto_examples/classification/plot_classifier_comparison", "auto_examples/classification/plot_digits_classification", "auto_examples/classification/plot_lda", "auto_examples/classification/plot_lda_qda", "auto_examples/cluster/index", "auto_examples/cluster/plot_adjusted_for_chance_measures", "auto_examples/cluster/plot_affinity_propagation", "auto_examples/cluster/plot_agglomerative_clustering", "auto_examples/cluster/plot_agglomerative_clustering_metrics", "auto_examples/cluster/plot_agglomerative_dendrogram", "auto_examples/cluster/plot_birch_vs_minibatchkmeans", "auto_examples/cluster/plot_bisect_kmeans", "auto_examples/cluster/plot_cluster_comparison", "auto_examples/cluster/plot_coin_segmentation", "auto_examples/cluster/plot_coin_ward_segmentation", "auto_examples/cluster/plot_dbscan", "auto_examples/cluster/plot_dict_face_patches", "auto_examples/cluster/plot_digits_agglomeration", "auto_examples/cluster/plot_digits_linkage", "auto_examples/cluster/plot_face_compress", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection", "auto_examples/cluster/plot_hdbscan", "auto_examples/cluster/plot_inductive_clustering", "auto_examples/cluster/plot_kmeans_assumptions", "auto_examples/cluster/plot_kmeans_digits", "auto_examples/cluster/plot_kmeans_plusplus", "auto_examples/cluster/plot_kmeans_silhouette_analysis", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense", "auto_examples/cluster/plot_linkage_comparison", "auto_examples/cluster/plot_mean_shift", "auto_examples/cluster/plot_mini_batch_kmeans", "auto_examples/cluster/plot_optics", "auto_examples/cluster/plot_segmentation_toy", "auto_examples/cluster/plot_ward_structured_vs_unstructured", "auto_examples/compose/index", "auto_examples/compose/plot_column_transformer", "auto_examples/compose/plot_column_transformer_mixed_types", "auto_examples/compose/plot_compare_reduction", "auto_examples/compose/plot_digits_pipe", "auto_examples/compose/plot_feature_union", "auto_examples/compose/plot_transformed_target", "auto_examples/covariance/index", "auto_examples/covariance/plot_covariance_estimation", "auto_examples/covariance/plot_lw_vs_oas", "auto_examples/covariance/plot_mahalanobis_distances", "auto_examples/covariance/plot_robust_vs_empirical_covariance", "auto_examples/covariance/plot_sparse_cov", "auto_examples/cross_decomposition/index", "auto_examples/cross_decomposition/plot_compare_cross_decomposition", "auto_examples/cross_decomposition/plot_pcr_vs_pls", "auto_examples/datasets/index", "auto_examples/datasets/plot_random_multilabel_dataset", "auto_examples/decomposition/index", "auto_examples/decomposition/plot_faces_decomposition", "auto_examples/decomposition/plot_ica_blind_source_separation", "auto_examples/decomposition/plot_ica_vs_pca", "auto_examples/decomposition/plot_image_denoising", "auto_examples/decomposition/plot_incremental_pca", "auto_examples/decomposition/plot_kernel_pca", "auto_examples/decomposition/plot_pca_iris", "auto_examples/decomposition/plot_pca_vs_fa_model_selection", "auto_examples/decomposition/plot_pca_vs_lda", "auto_examples/decomposition/plot_sparse_coding", "auto_examples/decomposition/plot_varimax_fa", "auto_examples/developing_estimators/index", "auto_examples/developing_estimators/sklearn_is_fitted", "auto_examples/ensemble/index", "auto_examples/ensemble/plot_adaboost_multiclass", "auto_examples/ensemble/plot_adaboost_regression", "auto_examples/ensemble/plot_adaboost_twoclass", "auto_examples/ensemble/plot_bias_variance", "auto_examples/ensemble/plot_ensemble_oob", "auto_examples/ensemble/plot_feature_transformation", "auto_examples/ensemble/plot_forest_hist_grad_boosting_comparison", "auto_examples/ensemble/plot_forest_importances", "auto_examples/ensemble/plot_forest_iris", "auto_examples/ensemble/plot_gradient_boosting_categorical", "auto_examples/ensemble/plot_gradient_boosting_early_stopping", "auto_examples/ensemble/plot_gradient_boosting_oob", "auto_examples/ensemble/plot_gradient_boosting_quantile", "auto_examples/ensemble/plot_gradient_boosting_regression", "auto_examples/ensemble/plot_gradient_boosting_regularization", "auto_examples/ensemble/plot_hgbt_regression", "auto_examples/ensemble/plot_isolation_forest", "auto_examples/ensemble/plot_monotonic_constraints", "auto_examples/ensemble/plot_random_forest_embedding", "auto_examples/ensemble/plot_random_forest_regression_multioutput", "auto_examples/ensemble/plot_stack_predictors", "auto_examples/ensemble/plot_voting_decision_regions", "auto_examples/ensemble/plot_voting_regressor", "auto_examples/feature_selection/index", "auto_examples/feature_selection/plot_f_test_vs_mi", "auto_examples/feature_selection/plot_feature_selection", "auto_examples/feature_selection/plot_feature_selection_pipeline", "auto_examples/feature_selection/plot_rfe_digits", "auto_examples/feature_selection/plot_rfe_with_cross_validation", "auto_examples/feature_selection/plot_select_from_model_diabetes", "auto_examples/frozen/index", "auto_examples/frozen/plot_frozen_examples", "auto_examples/gaussian_process/index", "auto_examples/gaussian_process/plot_compare_gpr_krr", "auto_examples/gaussian_process/plot_gpc", "auto_examples/gaussian_process/plot_gpc_iris", "auto_examples/gaussian_process/plot_gpc_isoprobability", "auto_examples/gaussian_process/plot_gpc_xor", "auto_examples/gaussian_process/plot_gpr_co2", "auto_examples/gaussian_process/plot_gpr_noisy", "auto_examples/gaussian_process/plot_gpr_noisy_targets", "auto_examples/gaussian_process/plot_gpr_on_structured_data", "auto_examples/gaussian_process/plot_gpr_prior_posterior", "auto_examples/impute/index", "auto_examples/impute/plot_iterative_imputer_variants_comparison", "auto_examples/impute/plot_missing_values", "auto_examples/index", "auto_examples/inspection/index", "auto_examples/inspection/plot_causal_interpretation", "auto_examples/inspection/plot_linear_model_coefficient_interpretation", "auto_examples/inspection/plot_partial_dependence", "auto_examples/inspection/plot_permutation_importance", "auto_examples/inspection/plot_permutation_importance_multicollinear", "auto_examples/kernel_approximation/index", "auto_examples/kernel_approximation/plot_scalable_poly_kernels", "auto_examples/linear_model/index", "auto_examples/linear_model/plot_ard", "auto_examples/linear_model/plot_bayesian_ridge_curvefit", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples", "auto_examples/linear_model/plot_huber_vs_ridge", "auto_examples/linear_model/plot_lasso_and_elasticnet", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data", "auto_examples/linear_model/plot_lasso_lars_ic", "auto_examples/linear_model/plot_lasso_lasso_lars_elasticnet_path", "auto_examples/linear_model/plot_lasso_model_selection", "auto_examples/linear_model/plot_logistic", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity", "auto_examples/linear_model/plot_logistic_multinomial", "auto_examples/linear_model/plot_logistic_path", "auto_examples/linear_model/plot_multi_task_lasso_support", "auto_examples/linear_model/plot_nnls", "auto_examples/linear_model/plot_ols_ridge", "auto_examples/linear_model/plot_omp", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss", "auto_examples/linear_model/plot_polynomial_interpolation", "auto_examples/linear_model/plot_quantile_regression", "auto_examples/linear_model/plot_ransac", "auto_examples/linear_model/plot_ridge_coeffs", "auto_examples/linear_model/plot_ridge_path", "auto_examples/linear_model/plot_robust_fit", "auto_examples/linear_model/plot_sgd_early_stopping", "auto_examples/linear_model/plot_sgd_iris", "auto_examples/linear_model/plot_sgd_loss_functions", "auto_examples/linear_model/plot_sgd_penalties", "auto_examples/linear_model/plot_sgd_separating_hyperplane", "auto_examples/linear_model/plot_sgd_weighted_samples", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist", "auto_examples/linear_model/plot_theilsen", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims", "auto_examples/manifold/index", "auto_examples/manifold/plot_compare_methods", "auto_examples/manifold/plot_lle_digits", "auto_examples/manifold/plot_manifold_sphere", "auto_examples/manifold/plot_mds", "auto_examples/manifold/plot_swissroll", "auto_examples/manifold/plot_t_sne_perplexity", "auto_examples/miscellaneous/index", "auto_examples/miscellaneous/plot_anomaly_comparison", "auto_examples/miscellaneous/plot_display_object_visualization", "auto_examples/miscellaneous/plot_estimator_representation", "auto_examples/miscellaneous/plot_isotonic_regression", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound", "auto_examples/miscellaneous/plot_kernel_approximation", "auto_examples/miscellaneous/plot_kernel_ridge_regression", "auto_examples/miscellaneous/plot_metadata_routing", "auto_examples/miscellaneous/plot_multilabel", "auto_examples/miscellaneous/plot_multioutput_face_completion", "auto_examples/miscellaneous/plot_outlier_detection_bench", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api", "auto_examples/miscellaneous/plot_pipeline_display", "auto_examples/miscellaneous/plot_roc_curve_visualization_api", "auto_examples/miscellaneous/plot_set_output", "auto_examples/mixture/index", "auto_examples/mixture/plot_concentration_prior", "auto_examples/mixture/plot_gmm", "auto_examples/mixture/plot_gmm_covariances", "auto_examples/mixture/plot_gmm_init", "auto_examples/mixture/plot_gmm_pdf", "auto_examples/mixture/plot_gmm_selection", "auto_examples/mixture/plot_gmm_sin", "auto_examples/model_selection/index", "auto_examples/model_selection/plot_confusion_matrix", "auto_examples/model_selection/plot_cost_sensitive_learning", "auto_examples/model_selection/plot_cv_indices", "auto_examples/model_selection/plot_cv_predict", "auto_examples/model_selection/plot_det", "auto_examples/model_selection/plot_grid_search_digits", "auto_examples/model_selection/plot_grid_search_refit_callable", "auto_examples/model_selection/plot_grid_search_stats", "auto_examples/model_selection/plot_grid_search_text_feature_extraction", "auto_examples/model_selection/plot_learning_curve", "auto_examples/model_selection/plot_likelihood_ratios", "auto_examples/model_selection/plot_multi_metric_evaluation", "auto_examples/model_selection/plot_nested_cross_validation_iris", "auto_examples/model_selection/plot_permutation_tests_for_classification", "auto_examples/model_selection/plot_precision_recall", "auto_examples/model_selection/plot_randomized_search", "auto_examples/model_selection/plot_roc", "auto_examples/model_selection/plot_roc_crossval", "auto_examples/model_selection/plot_successive_halving_heatmap", "auto_examples/model_selection/plot_successive_halving_iterations", "auto_examples/model_selection/plot_train_error_vs_test_error", "auto_examples/model_selection/plot_tuned_decision_threshold", "auto_examples/model_selection/plot_underfitting_overfitting", "auto_examples/multiclass/index", "auto_examples/multiclass/plot_multiclass_overview", "auto_examples/multioutput/index", "auto_examples/multioutput/plot_classifier_chain_yeast", "auto_examples/neighbors/approximate_nearest_neighbors", "auto_examples/neighbors/index", "auto_examples/neighbors/plot_caching_nearest_neighbors", "auto_examples/neighbors/plot_classification", "auto_examples/neighbors/plot_digits_kde_sampling", "auto_examples/neighbors/plot_kde_1d", "auto_examples/neighbors/plot_lof_novelty_detection", "auto_examples/neighbors/plot_lof_outlier_detection", "auto_examples/neighbors/plot_nca_classification", "auto_examples/neighbors/plot_nca_dim_reduction", "auto_examples/neighbors/plot_nca_illustration", "auto_examples/neighbors/plot_nearest_centroid", "auto_examples/neighbors/plot_regression", "auto_examples/neighbors/plot_species_kde", "auto_examples/neural_networks/index", "auto_examples/neural_networks/plot_mlp_alpha", "auto_examples/neural_networks/plot_mlp_training_curves", "auto_examples/neural_networks/plot_mnist_filters", "auto_examples/neural_networks/plot_rbm_logistic_classification", "auto_examples/preprocessing/index", "auto_examples/preprocessing/plot_all_scaling", "auto_examples/preprocessing/plot_discretization", "auto_examples/preprocessing/plot_discretization_classification", "auto_examples/preprocessing/plot_discretization_strategies", "auto_examples/preprocessing/plot_map_data_to_normal", "auto_examples/preprocessing/plot_scaling_importance", "auto_examples/preprocessing/plot_target_encoder", "auto_examples/preprocessing/plot_target_encoder_cross_val", "auto_examples/release_highlights/index", "auto_examples/release_highlights/plot_release_highlights_0_22_0", "auto_examples/release_highlights/plot_release_highlights_0_23_0", "auto_examples/release_highlights/plot_release_highlights_0_24_0", "auto_examples/release_highlights/plot_release_highlights_1_0_0", "auto_examples/release_highlights/plot_release_highlights_1_1_0", "auto_examples/release_highlights/plot_release_highlights_1_2_0", "auto_examples/release_highlights/plot_release_highlights_1_3_0", "auto_examples/release_highlights/plot_release_highlights_1_4_0", "auto_examples/release_highlights/plot_release_highlights_1_5_0", "auto_examples/release_highlights/plot_release_highlights_1_6_0", "auto_examples/release_highlights/plot_release_highlights_1_7_0", "auto_examples/semi_supervised/index", "auto_examples/semi_supervised/plot_label_propagation_digits", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning", "auto_examples/semi_supervised/plot_label_propagation_structure", "auto_examples/semi_supervised/plot_self_training_varying_threshold", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris", "auto_examples/svm/index", "auto_examples/svm/plot_custom_kernel", "auto_examples/svm/plot_iris_svc", "auto_examples/svm/plot_linearsvc_support_vectors", "auto_examples/svm/plot_oneclass", "auto_examples/svm/plot_rbf_parameters", "auto_examples/svm/plot_separating_hyperplane", "auto_examples/svm/plot_separating_hyperplane_unbalanced", "auto_examples/svm/plot_svm_anova", "auto_examples/svm/plot_svm_kernels", "auto_examples/svm/plot_svm_margin", "auto_examples/svm/plot_svm_regression", "auto_examples/svm/plot_svm_scale_c", "auto_examples/svm/plot_svm_tie_breaking", "auto_examples/svm/plot_weighted_samples", "auto_examples/text/index", "auto_examples/text/plot_document_classification_20newsgroups", "auto_examples/text/plot_document_clustering", "auto_examples/text/plot_hashing_vs_dict_vectorizer", "auto_examples/tree/index", "auto_examples/tree/plot_cost_complexity_pruning", "auto_examples/tree/plot_iris_dtc", "auto_examples/tree/plot_tree_regression", "auto_examples/tree/plot_unveil_tree_structure", "common_pitfalls", "communication_team", "communication_team_emeritus", "computing", "computing/computational_performance", "computing/parallelism", "computing/scaling_strategies", "contributor_experience_team", "contributor_experience_team_emeritus", "data_transforms", "datasets", "datasets/loading_other_datasets", "datasets/real_world", "datasets/sample_generators", "datasets/toy_dataset", "developers/advanced_installation", "developers/bug_triaging", "developers/contributing", "developers/cython", "developers/develop", "developers/index", "developers/maintainer", "developers/minimal_reproducer", "developers/performance", "developers/plotting", "developers/tips", "developers/utilities", "dispatching", "documentation_team", "faq", "getting_started", "glossary", "governance", "index", "inspection", "install", "install_instructions_conda", "machine_learning_map", "maintainers", "maintainers_emeritus", "metadata_routing", "min_dependency_substitutions", "min_dependency_table", "model_persistence", "model_selection", "modules/array_api", "modules/biclustering", "modules/calibration", "modules/classification_threshold", "modules/clustering", "modules/compose", "modules/covariance", "modules/cross_decomposition", "modules/cross_validation", "modules/decomposition", "modules/density", "modules/ensemble", "modules/feature_extraction", "modules/feature_selection", "modules/gaussian_process", "modules/generated/dbscan-function", "modules/generated/fastica-function", "modules/generated/oas-function", "modules/generated/sklearn.base.BaseEstimator", "modules/generated/sklearn.base.BiclusterMixin", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin", "modules/generated/sklearn.base.ClassifierMixin", "modules/generated/sklearn.base.ClusterMixin", "modules/generated/sklearn.base.DensityMixin", "modules/generated/sklearn.base.MetaEstimatorMixin", "modules/generated/sklearn.base.OneToOneFeatureMixin", "modules/generated/sklearn.base.OutlierMixin", "modules/generated/sklearn.base.RegressorMixin", "modules/generated/sklearn.base.TransformerMixin", "modules/generated/sklearn.base.clone", "modules/generated/sklearn.base.is_classifier", "modules/generated/sklearn.base.is_clusterer", "modules/generated/sklearn.base.is_outlier_detector", "modules/generated/sklearn.base.is_regressor", "modules/generated/sklearn.calibration.CalibratedClassifierCV", "modules/generated/sklearn.calibration.CalibrationDisplay", "modules/generated/sklearn.calibration.calibration_curve", "modules/generated/sklearn.cluster.AffinityPropagation", "modules/generated/sklearn.cluster.AgglomerativeClustering", "modules/generated/sklearn.cluster.Birch", "modules/generated/sklearn.cluster.BisectingKMeans", "modules/generated/sklearn.cluster.DBSCAN", "modules/generated/sklearn.cluster.FeatureAgglomeration", "modules/generated/sklearn.cluster.HDBSCAN", "modules/generated/sklearn.cluster.KMeans", "modules/generated/sklearn.cluster.MeanShift", "modules/generated/sklearn.cluster.MiniBatchKMeans", "modules/generated/sklearn.cluster.OPTICS", "modules/generated/sklearn.cluster.SpectralBiclustering", "modules/generated/sklearn.cluster.SpectralClustering", "modules/generated/sklearn.cluster.SpectralCoclustering", "modules/generated/sklearn.cluster.affinity_propagation", "modules/generated/sklearn.cluster.cluster_optics_dbscan", "modules/generated/sklearn.cluster.cluster_optics_xi", "modules/generated/sklearn.cluster.compute_optics_graph", "modules/generated/sklearn.cluster.estimate_bandwidth", "modules/generated/sklearn.cluster.k_means", "modules/generated/sklearn.cluster.kmeans_plusplus", "modules/generated/sklearn.cluster.mean_shift", "modules/generated/sklearn.cluster.spectral_clustering", "modules/generated/sklearn.cluster.ward_tree", "modules/generated/sklearn.compose.ColumnTransformer", "modules/generated/sklearn.compose.TransformedTargetRegressor", "modules/generated/sklearn.compose.make_column_selector", "modules/generated/sklearn.compose.make_column_transformer", "modules/generated/sklearn.config_context", "modules/generated/sklearn.covariance.EllipticEnvelope", "modules/generated/sklearn.covariance.EmpiricalCovariance", "modules/generated/sklearn.covariance.GraphicalLasso", "modules/generated/sklearn.covariance.GraphicalLassoCV", "modules/generated/sklearn.covariance.LedoitWolf", "modules/generated/sklearn.covariance.MinCovDet", "modules/generated/sklearn.covariance.OAS", "modules/generated/sklearn.covariance.ShrunkCovariance", "modules/generated/sklearn.covariance.empirical_covariance", "modules/generated/sklearn.covariance.graphical_lasso", "modules/generated/sklearn.covariance.ledoit_wolf", "modules/generated/sklearn.covariance.ledoit_wolf_shrinkage", "modules/generated/sklearn.covariance.shrunk_covariance", "modules/generated/sklearn.cross_decomposition.CCA", "modules/generated/sklearn.cross_decomposition.PLSCanonical", "modules/generated/sklearn.cross_decomposition.PLSRegression", "modules/generated/sklearn.cross_decomposition.PLSSVD", "modules/generated/sklearn.datasets.clear_data_home", "modules/generated/sklearn.datasets.dump_svmlight_file", "modules/generated/sklearn.datasets.fetch_20newsgroups", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized", "modules/generated/sklearn.datasets.fetch_california_housing", "modules/generated/sklearn.datasets.fetch_covtype", "modules/generated/sklearn.datasets.fetch_file", "modules/generated/sklearn.datasets.fetch_kddcup99", "modules/generated/sklearn.datasets.fetch_lfw_pairs", "modules/generated/sklearn.datasets.fetch_lfw_people", "modules/generated/sklearn.datasets.fetch_olivetti_faces", "modules/generated/sklearn.datasets.fetch_openml", "modules/generated/sklearn.datasets.fetch_rcv1", "modules/generated/sklearn.datasets.fetch_species_distributions", "modules/generated/sklearn.datasets.get_data_home", "modules/generated/sklearn.datasets.load_breast_cancer", "modules/generated/sklearn.datasets.load_diabetes", "modules/generated/sklearn.datasets.load_digits", "modules/generated/sklearn.datasets.load_files", "modules/generated/sklearn.datasets.load_iris", "modules/generated/sklearn.datasets.load_linnerud", "modules/generated/sklearn.datasets.load_sample_image", "modules/generated/sklearn.datasets.load_sample_images", "modules/generated/sklearn.datasets.load_svmlight_file", "modules/generated/sklearn.datasets.load_svmlight_files", "modules/generated/sklearn.datasets.load_wine", "modules/generated/sklearn.datasets.make_biclusters", "modules/generated/sklearn.datasets.make_blobs", "modules/generated/sklearn.datasets.make_checkerboard", "modules/generated/sklearn.datasets.make_circles", "modules/generated/sklearn.datasets.make_classification", "modules/generated/sklearn.datasets.make_friedman1", "modules/generated/sklearn.datasets.make_friedman2", "modules/generated/sklearn.datasets.make_friedman3", "modules/generated/sklearn.datasets.make_gaussian_quantiles", "modules/generated/sklearn.datasets.make_hastie_10_2", "modules/generated/sklearn.datasets.make_low_rank_matrix", "modules/generated/sklearn.datasets.make_moons", "modules/generated/sklearn.datasets.make_multilabel_classification", "modules/generated/sklearn.datasets.make_regression", "modules/generated/sklearn.datasets.make_s_curve", "modules/generated/sklearn.datasets.make_sparse_coded_signal", "modules/generated/sklearn.datasets.make_sparse_spd_matrix", "modules/generated/sklearn.datasets.make_sparse_uncorrelated", "modules/generated/sklearn.datasets.make_spd_matrix", "modules/generated/sklearn.datasets.make_swiss_roll", "modules/generated/sklearn.decomposition.DictionaryLearning", "modules/generated/sklearn.decomposition.FactorAnalysis", "modules/generated/sklearn.decomposition.FastICA", "modules/generated/sklearn.decomposition.IncrementalPCA", "modules/generated/sklearn.decomposition.KernelPCA", "modules/generated/sklearn.decomposition.LatentDirichletAllocation", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning", "modules/generated/sklearn.decomposition.MiniBatchNMF", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA", "modules/generated/sklearn.decomposition.NMF", "modules/generated/sklearn.decomposition.PCA", "modules/generated/sklearn.decomposition.SparseCoder", "modules/generated/sklearn.decomposition.SparsePCA", "modules/generated/sklearn.decomposition.TruncatedSVD", "modules/generated/sklearn.decomposition.dict_learning", "modules/generated/sklearn.decomposition.dict_learning_online", "modules/generated/sklearn.decomposition.non_negative_factorization", "modules/generated/sklearn.decomposition.sparse_encode", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis", "modules/generated/sklearn.dummy.DummyClassifier", "modules/generated/sklearn.dummy.DummyRegressor", "modules/generated/sklearn.ensemble.AdaBoostClassifier", "modules/generated/sklearn.ensemble.AdaBoostRegressor", "modules/generated/sklearn.ensemble.BaggingClassifier", "modules/generated/sklearn.ensemble.BaggingRegressor", "modules/generated/sklearn.ensemble.ExtraTreesClassifier", "modules/generated/sklearn.ensemble.ExtraTreesRegressor", "modules/generated/sklearn.ensemble.GradientBoostingClassifier", "modules/generated/sklearn.ensemble.GradientBoostingRegressor", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor", "modules/generated/sklearn.ensemble.IsolationForest", "modules/generated/sklearn.ensemble.RandomForestClassifier", "modules/generated/sklearn.ensemble.RandomForestRegressor", "modules/generated/sklearn.ensemble.RandomTreesEmbedding", "modules/generated/sklearn.ensemble.StackingClassifier", "modules/generated/sklearn.ensemble.StackingRegressor", "modules/generated/sklearn.ensemble.VotingClassifier", "modules/generated/sklearn.ensemble.VotingRegressor", "modules/generated/sklearn.exceptions.ConvergenceWarning", "modules/generated/sklearn.exceptions.DataConversionWarning", "modules/generated/sklearn.exceptions.DataDimensionalityWarning", "modules/generated/sklearn.exceptions.EfficiencyWarning", "modules/generated/sklearn.exceptions.EstimatorCheckFailedWarning", "modules/generated/sklearn.exceptions.FitFailedWarning", "modules/generated/sklearn.exceptions.InconsistentVersionWarning", "modules/generated/sklearn.exceptions.NotFittedError", "modules/generated/sklearn.exceptions.UndefinedMetricWarning", "modules/generated/sklearn.experimental.enable_halving_search_cv", "modules/generated/sklearn.experimental.enable_iterative_imputer", "modules/generated/sklearn.feature_extraction.DictVectorizer", "modules/generated/sklearn.feature_extraction.FeatureHasher", "modules/generated/sklearn.feature_extraction.image.PatchExtractor", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d", "modules/generated/sklearn.feature_extraction.image.grid_to_graph", "modules/generated/sklearn.feature_extraction.image.img_to_graph", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d", "modules/generated/sklearn.feature_extraction.text.CountVectorizer", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect", "modules/generated/sklearn.feature_selection.RFE", "modules/generated/sklearn.feature_selection.RFECV", "modules/generated/sklearn.feature_selection.SelectFdr", "modules/generated/sklearn.feature_selection.SelectFpr", "modules/generated/sklearn.feature_selection.SelectFromModel", "modules/generated/sklearn.feature_selection.SelectFwe", "modules/generated/sklearn.feature_selection.SelectKBest", "modules/generated/sklearn.feature_selection.SelectPercentile", "modules/generated/sklearn.feature_selection.SelectorMixin", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector", "modules/generated/sklearn.feature_selection.VarianceThreshold", "modules/generated/sklearn.feature_selection.chi2", "modules/generated/sklearn.feature_selection.f_classif", "modules/generated/sklearn.feature_selection.f_regression", "modules/generated/sklearn.feature_selection.mutual_info_classif", "modules/generated/sklearn.feature_selection.mutual_info_regression", "modules/generated/sklearn.feature_selection.r_regression", "modules/generated/sklearn.frozen.FrozenEstimator", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel", "modules/generated/sklearn.gaussian_process.kernels.DotProduct", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter", "modules/generated/sklearn.gaussian_process.kernels.Kernel", "modules/generated/sklearn.gaussian_process.kernels.Matern", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel", "modules/generated/sklearn.gaussian_process.kernels.Product", "modules/generated/sklearn.gaussian_process.kernels.RBF", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic", "modules/generated/sklearn.gaussian_process.kernels.Sum", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel", "modules/generated/sklearn.get_config", "modules/generated/sklearn.impute.IterativeImputer", "modules/generated/sklearn.impute.KNNImputer", "modules/generated/sklearn.impute.MissingIndicator", "modules/generated/sklearn.impute.SimpleImputer", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay", "modules/generated/sklearn.inspection.PartialDependenceDisplay", "modules/generated/sklearn.inspection.partial_dependence", "modules/generated/sklearn.inspection.permutation_importance", "modules/generated/sklearn.isotonic.IsotonicRegression", "modules/generated/sklearn.isotonic.check_increasing", "modules/generated/sklearn.isotonic.isotonic_regression", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler", "modules/generated/sklearn.kernel_approximation.Nystroem", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch", "modules/generated/sklearn.kernel_approximation.RBFSampler", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler", "modules/generated/sklearn.kernel_ridge.KernelRidge", "modules/generated/sklearn.linear_model.ARDRegression", "modules/generated/sklearn.linear_model.BayesianRidge", "modules/generated/sklearn.linear_model.ElasticNet", "modules/generated/sklearn.linear_model.ElasticNetCV", "modules/generated/sklearn.linear_model.GammaRegressor", "modules/generated/sklearn.linear_model.HuberRegressor", "modules/generated/sklearn.linear_model.Lars", "modules/generated/sklearn.linear_model.LarsCV", "modules/generated/sklearn.linear_model.Lasso", "modules/generated/sklearn.linear_model.LassoCV", "modules/generated/sklearn.linear_model.LassoLars", "modules/generated/sklearn.linear_model.LassoLarsCV", "modules/generated/sklearn.linear_model.LassoLarsIC", "modules/generated/sklearn.linear_model.LinearRegression", "modules/generated/sklearn.linear_model.LogisticRegression", "modules/generated/sklearn.linear_model.LogisticRegressionCV", "modules/generated/sklearn.linear_model.MultiTaskElasticNet", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV", "modules/generated/sklearn.linear_model.MultiTaskLasso", "modules/generated/sklearn.linear_model.MultiTaskLassoCV", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor", "modules/generated/sklearn.linear_model.Perceptron", "modules/generated/sklearn.linear_model.PoissonRegressor", "modules/generated/sklearn.linear_model.QuantileRegressor", "modules/generated/sklearn.linear_model.RANSACRegressor", "modules/generated/sklearn.linear_model.Ridge", "modules/generated/sklearn.linear_model.RidgeCV", "modules/generated/sklearn.linear_model.RidgeClassifier", "modules/generated/sklearn.linear_model.RidgeClassifierCV", "modules/generated/sklearn.linear_model.SGDClassifier", "modules/generated/sklearn.linear_model.SGDOneClassSVM", "modules/generated/sklearn.linear_model.SGDRegressor", "modules/generated/sklearn.linear_model.TheilSenRegressor", "modules/generated/sklearn.linear_model.TweedieRegressor", "modules/generated/sklearn.linear_model.enet_path", "modules/generated/sklearn.linear_model.lars_path", "modules/generated/sklearn.linear_model.lars_path_gram", "modules/generated/sklearn.linear_model.lasso_path", "modules/generated/sklearn.linear_model.orthogonal_mp", "modules/generated/sklearn.linear_model.orthogonal_mp_gram", "modules/generated/sklearn.linear_model.ridge_regression", "modules/generated/sklearn.manifold.Isomap", "modules/generated/sklearn.manifold.LocallyLinearEmbedding", "modules/generated/sklearn.manifold.MDS", "modules/generated/sklearn.manifold.SpectralEmbedding", "modules/generated/sklearn.manifold.TSNE", "modules/generated/sklearn.manifold.locally_linear_embedding", "modules/generated/sklearn.manifold.smacof", "modules/generated/sklearn.manifold.spectral_embedding", "modules/generated/sklearn.manifold.trustworthiness", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay", "modules/generated/sklearn.metrics.DetCurveDisplay", "modules/generated/sklearn.metrics.DistanceMetric", "modules/generated/sklearn.metrics.PrecisionRecallDisplay", "modules/generated/sklearn.metrics.PredictionErrorDisplay", "modules/generated/sklearn.metrics.RocCurveDisplay", "modules/generated/sklearn.metrics.accuracy_score", "modules/generated/sklearn.metrics.adjusted_mutual_info_score", "modules/generated/sklearn.metrics.adjusted_rand_score", "modules/generated/sklearn.metrics.auc", "modules/generated/sklearn.metrics.average_precision_score", "modules/generated/sklearn.metrics.balanced_accuracy_score", "modules/generated/sklearn.metrics.brier_score_loss", "modules/generated/sklearn.metrics.calinski_harabasz_score", "modules/generated/sklearn.metrics.check_scoring", "modules/generated/sklearn.metrics.class_likelihood_ratios", "modules/generated/sklearn.metrics.classification_report", "modules/generated/sklearn.metrics.cluster.contingency_matrix", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix", "modules/generated/sklearn.metrics.cohen_kappa_score", "modules/generated/sklearn.metrics.completeness_score", "modules/generated/sklearn.metrics.confusion_matrix", "modules/generated/sklearn.metrics.consensus_score", "modules/generated/sklearn.metrics.coverage_error", "modules/generated/sklearn.metrics.d2_absolute_error_score", "modules/generated/sklearn.metrics.d2_log_loss_score", "modules/generated/sklearn.metrics.d2_pinball_score", "modules/generated/sklearn.metrics.d2_tweedie_score", "modules/generated/sklearn.metrics.davies_bouldin_score", "modules/generated/sklearn.metrics.dcg_score", "modules/generated/sklearn.metrics.det_curve", "modules/generated/sklearn.metrics.explained_variance_score", "modules/generated/sklearn.metrics.f1_score", "modules/generated/sklearn.metrics.fbeta_score", "modules/generated/sklearn.metrics.fowlkes_mallows_score", "modules/generated/sklearn.metrics.get_scorer", "modules/generated/sklearn.metrics.get_scorer_names", "modules/generated/sklearn.metrics.hamming_loss", "modules/generated/sklearn.metrics.hinge_loss", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure", "modules/generated/sklearn.metrics.homogeneity_score", "modules/generated/sklearn.metrics.jaccard_score", "modules/generated/sklearn.metrics.label_ranking_average_precision_score", "modules/generated/sklearn.metrics.label_ranking_loss", "modules/generated/sklearn.metrics.log_loss", "modules/generated/sklearn.metrics.make_scorer", "modules/generated/sklearn.metrics.matthews_corrcoef", "modules/generated/sklearn.metrics.max_error", "modules/generated/sklearn.metrics.mean_absolute_error", "modules/generated/sklearn.metrics.mean_absolute_percentage_error", "modules/generated/sklearn.metrics.mean_gamma_deviance", "modules/generated/sklearn.metrics.mean_pinball_loss", "modules/generated/sklearn.metrics.mean_poisson_deviance", "modules/generated/sklearn.metrics.mean_squared_error", "modules/generated/sklearn.metrics.mean_squared_log_error", "modules/generated/sklearn.metrics.mean_tweedie_deviance", "modules/generated/sklearn.metrics.median_absolute_error", "modules/generated/sklearn.metrics.multilabel_confusion_matrix", "modules/generated/sklearn.metrics.mutual_info_score", "modules/generated/sklearn.metrics.ndcg_score", "modules/generated/sklearn.metrics.normalized_mutual_info_score", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel", "modules/generated/sklearn.metrics.pairwise.chi2_kernel", "modules/generated/sklearn.metrics.pairwise.cosine_distances", "modules/generated/sklearn.metrics.pairwise.cosine_similarity", "modules/generated/sklearn.metrics.pairwise.distance_metrics", "modules/generated/sklearn.metrics.pairwise.euclidean_distances", "modules/generated/sklearn.metrics.pairwise.haversine_distances", "modules/generated/sklearn.metrics.pairwise.kernel_metrics", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel", "modules/generated/sklearn.metrics.pairwise.linear_kernel", "modules/generated/sklearn.metrics.pairwise.manhattan_distances", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances", "modules/generated/sklearn.metrics.pairwise.paired_distances", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel", "modules/generated/sklearn.metrics.pairwise.rbf_kernel", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel", "modules/generated/sklearn.metrics.pairwise_distances", "modules/generated/sklearn.metrics.pairwise_distances_argmin", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min", "modules/generated/sklearn.metrics.pairwise_distances_chunked", "modules/generated/sklearn.metrics.precision_recall_curve", "modules/generated/sklearn.metrics.precision_recall_fscore_support", "modules/generated/sklearn.metrics.precision_score", "modules/generated/sklearn.metrics.r2_score", "modules/generated/sklearn.metrics.rand_score", "modules/generated/sklearn.metrics.recall_score", "modules/generated/sklearn.metrics.roc_auc_score", "modules/generated/sklearn.metrics.roc_curve", "modules/generated/sklearn.metrics.root_mean_squared_error", "modules/generated/sklearn.metrics.root_mean_squared_log_error", "modules/generated/sklearn.metrics.silhouette_samples", "modules/generated/sklearn.metrics.silhouette_score", "modules/generated/sklearn.metrics.top_k_accuracy_score", "modules/generated/sklearn.metrics.v_measure_score", "modules/generated/sklearn.metrics.zero_one_loss", "modules/generated/sklearn.mixture.BayesianGaussianMixture", "modules/generated/sklearn.mixture.GaussianMixture", "modules/generated/sklearn.model_selection.FixedThresholdClassifier", "modules/generated/sklearn.model_selection.GridSearchCV", "modules/generated/sklearn.model_selection.GroupKFold", "modules/generated/sklearn.model_selection.GroupShuffleSplit", "modules/generated/sklearn.model_selection.HalvingGridSearchCV", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV", "modules/generated/sklearn.model_selection.KFold", "modules/generated/sklearn.model_selection.LearningCurveDisplay", "modules/generated/sklearn.model_selection.LeaveOneGroupOut", "modules/generated/sklearn.model_selection.LeaveOneOut", "modules/generated/sklearn.model_selection.LeavePGroupsOut", "modules/generated/sklearn.model_selection.LeavePOut", "modules/generated/sklearn.model_selection.ParameterGrid", "modules/generated/sklearn.model_selection.ParameterSampler", "modules/generated/sklearn.model_selection.PredefinedSplit", "modules/generated/sklearn.model_selection.RandomizedSearchCV", "modules/generated/sklearn.model_selection.RepeatedKFold", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold", "modules/generated/sklearn.model_selection.ShuffleSplit", "modules/generated/sklearn.model_selection.StratifiedGroupKFold", "modules/generated/sklearn.model_selection.StratifiedKFold", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit", "modules/generated/sklearn.model_selection.TimeSeriesSplit", "modules/generated/sklearn.model_selection.TunedThresholdClassifierCV", "modules/generated/sklearn.model_selection.ValidationCurveDisplay", "modules/generated/sklearn.model_selection.check_cv", "modules/generated/sklearn.model_selection.cross_val_predict", "modules/generated/sklearn.model_selection.cross_val_score", "modules/generated/sklearn.model_selection.cross_validate", "modules/generated/sklearn.model_selection.learning_curve", "modules/generated/sklearn.model_selection.permutation_test_score", "modules/generated/sklearn.model_selection.train_test_split", "modules/generated/sklearn.model_selection.validation_curve", "modules/generated/sklearn.multiclass.OneVsOneClassifier", "modules/generated/sklearn.multiclass.OneVsRestClassifier", "modules/generated/sklearn.multiclass.OutputCodeClassifier", "modules/generated/sklearn.multioutput.ClassifierChain", "modules/generated/sklearn.multioutput.MultiOutputClassifier", "modules/generated/sklearn.multioutput.MultiOutputRegressor", "modules/generated/sklearn.multioutput.RegressorChain", "modules/generated/sklearn.naive_bayes.BernoulliNB", "modules/generated/sklearn.naive_bayes.CategoricalNB", "modules/generated/sklearn.naive_bayes.ComplementNB", "modules/generated/sklearn.naive_bayes.GaussianNB", "modules/generated/sklearn.naive_bayes.MultinomialNB", "modules/generated/sklearn.neighbors.BallTree", "modules/generated/sklearn.neighbors.KDTree", "modules/generated/sklearn.neighbors.KNeighborsClassifier", "modules/generated/sklearn.neighbors.KNeighborsRegressor", "modules/generated/sklearn.neighbors.KNeighborsTransformer", "modules/generated/sklearn.neighbors.KernelDensity", "modules/generated/sklearn.neighbors.LocalOutlierFactor", "modules/generated/sklearn.neighbors.NearestCentroid", "modules/generated/sklearn.neighbors.NearestNeighbors", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer", "modules/generated/sklearn.neighbors.kneighbors_graph", "modules/generated/sklearn.neighbors.radius_neighbors_graph", "modules/generated/sklearn.neighbors.sort_graph_by_row_values", "modules/generated/sklearn.neural_network.BernoulliRBM", "modules/generated/sklearn.neural_network.MLPClassifier", "modules/generated/sklearn.neural_network.MLPRegressor", "modules/generated/sklearn.pipeline.FeatureUnion", "modules/generated/sklearn.pipeline.Pipeline", "modules/generated/sklearn.pipeline.make_pipeline", "modules/generated/sklearn.pipeline.make_union", "modules/generated/sklearn.preprocessing.Binarizer", "modules/generated/sklearn.preprocessing.FunctionTransformer", "modules/generated/sklearn.preprocessing.KBinsDiscretizer", "modules/generated/sklearn.preprocessing.KernelCenterer", "modules/generated/sklearn.preprocessing.LabelBinarizer", "modules/generated/sklearn.preprocessing.LabelEncoder", "modules/generated/sklearn.preprocessing.MaxAbsScaler", "modules/generated/sklearn.preprocessing.MinMaxScaler", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer", "modules/generated/sklearn.preprocessing.Normalizer", "modules/generated/sklearn.preprocessing.OneHotEncoder", "modules/generated/sklearn.preprocessing.OrdinalEncoder", "modules/generated/sklearn.preprocessing.PolynomialFeatures", "modules/generated/sklearn.preprocessing.PowerTransformer", "modules/generated/sklearn.preprocessing.QuantileTransformer", "modules/generated/sklearn.preprocessing.RobustScaler", "modules/generated/sklearn.preprocessing.SplineTransformer", "modules/generated/sklearn.preprocessing.StandardScaler", "modules/generated/sklearn.preprocessing.TargetEncoder", "modules/generated/sklearn.preprocessing.add_dummy_feature", "modules/generated/sklearn.preprocessing.binarize", "modules/generated/sklearn.preprocessing.label_binarize", "modules/generated/sklearn.preprocessing.maxabs_scale", "modules/generated/sklearn.preprocessing.minmax_scale", "modules/generated/sklearn.preprocessing.normalize", "modules/generated/sklearn.preprocessing.power_transform", "modules/generated/sklearn.preprocessing.quantile_transform", "modules/generated/sklearn.preprocessing.robust_scale", "modules/generated/sklearn.preprocessing.scale", "modules/generated/sklearn.random_projection.GaussianRandomProjection", "modules/generated/sklearn.random_projection.SparseRandomProjection", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim", "modules/generated/sklearn.semi_supervised.LabelPropagation", "modules/generated/sklearn.semi_supervised.LabelSpreading", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier", "modules/generated/sklearn.set_config", "modules/generated/sklearn.show_versions", "modules/generated/sklearn.svm.LinearSVC", "modules/generated/sklearn.svm.LinearSVR", "modules/generated/sklearn.svm.NuSVC", "modules/generated/sklearn.svm.NuSVR", "modules/generated/sklearn.svm.OneClassSVM", "modules/generated/sklearn.svm.SVC", "modules/generated/sklearn.svm.SVR", "modules/generated/sklearn.svm.l1_min_c", "modules/generated/sklearn.tree.DecisionTreeClassifier", "modules/generated/sklearn.tree.DecisionTreeRegressor", "modules/generated/sklearn.tree.ExtraTreeClassifier", "modules/generated/sklearn.tree.ExtraTreeRegressor", "modules/generated/sklearn.tree.export_graphviz", "modules/generated/sklearn.tree.export_text", "modules/generated/sklearn.tree.plot_tree", "modules/generated/sklearn.utils.Bunch", "modules/generated/sklearn.utils.ClassifierTags", "modules/generated/sklearn.utils.InputTags", "modules/generated/sklearn.utils.RegressorTags", "modules/generated/sklearn.utils.Tags", "modules/generated/sklearn.utils.TargetTags", "modules/generated/sklearn.utils.TransformerTags", "modules/generated/sklearn.utils._safe_indexing", "modules/generated/sklearn.utils.arrayfuncs.min_pos", "modules/generated/sklearn.utils.as_float_array", "modules/generated/sklearn.utils.assert_all_finite", "modules/generated/sklearn.utils.check_X_y", "modules/generated/sklearn.utils.check_array", "modules/generated/sklearn.utils.check_consistent_length", "modules/generated/sklearn.utils.check_random_state", "modules/generated/sklearn.utils.check_scalar", "modules/generated/sklearn.utils.class_weight.compute_class_weight", "modules/generated/sklearn.utils.class_weight.compute_sample_weight", "modules/generated/sklearn.utils.deprecated", "modules/generated/sklearn.utils.discovery.all_displays", "modules/generated/sklearn.utils.discovery.all_estimators", "modules/generated/sklearn.utils.discovery.all_functions", "modules/generated/sklearn.utils.estimator_checks.check_estimator", "modules/generated/sklearn.utils.estimator_checks.estimator_checks_generator", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks", "modules/generated/sklearn.utils.estimator_html_repr", "modules/generated/sklearn.utils.extmath.density", "modules/generated/sklearn.utils.extmath.fast_logdet", "modules/generated/sklearn.utils.extmath.randomized_range_finder", "modules/generated/sklearn.utils.extmath.randomized_svd", "modules/generated/sklearn.utils.extmath.safe_sparse_dot", "modules/generated/sklearn.utils.extmath.weighted_mode", "modules/generated/sklearn.utils.gen_batches", "modules/generated/sklearn.utils.gen_even_slices", "modules/generated/sklearn.utils.get_tags", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length", "modules/generated/sklearn.utils.indexable", "modules/generated/sklearn.utils.metadata_routing.MetadataRequest", "modules/generated/sklearn.utils.metadata_routing.MetadataRouter", "modules/generated/sklearn.utils.metadata_routing.MethodMapping", "modules/generated/sklearn.utils.metadata_routing.get_routing_for_object", "modules/generated/sklearn.utils.metadata_routing.process_routing", "modules/generated/sklearn.utils.metaestimators.available_if", "modules/generated/sklearn.utils.multiclass.is_multilabel", "modules/generated/sklearn.utils.multiclass.type_of_target", "modules/generated/sklearn.utils.multiclass.unique_labels", "modules/generated/sklearn.utils.murmurhash3_32", "modules/generated/sklearn.utils.parallel.Parallel", "modules/generated/sklearn.utils.parallel.delayed", "modules/generated/sklearn.utils.random.sample_without_replacement", "modules/generated/sklearn.utils.resample", "modules/generated/sklearn.utils.safe_mask", "modules/generated/sklearn.utils.safe_sqr", "modules/generated/sklearn.utils.shuffle", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2", "modules/generated/sklearn.utils.validation.check_is_fitted", "modules/generated/sklearn.utils.validation.check_memory", "modules/generated/sklearn.utils.validation.check_symmetric", "modules/generated/sklearn.utils.validation.column_or_1d", "modules/generated/sklearn.utils.validation.has_fit_parameter", "modules/generated/sklearn.utils.validation.validate_data", "modules/grid_search", "modules/impute", "modules/isotonic", "modules/kernel_approximation", "modules/kernel_ridge", "modules/lda_qda", "modules/learning_curve", "modules/linear_model", "modules/manifold", "modules/metrics", "modules/mixture", "modules/model_evaluation", "modules/multiclass", "modules/naive_bayes", "modules/neighbors", "modules/neural_networks_supervised", "modules/neural_networks_unsupervised", "modules/outlier_detection", "modules/partial_dependence", "modules/permutation_importance", "modules/pipeline", "modules/preprocessing", "modules/preprocessing_targets", "modules/random_projection", "modules/semi_supervised", "modules/sgd", "modules/svm", "modules/tree", "modules/unsupervised_reduction", "presentations", "related_projects", "roadmap", "sg_execution_times", "supervised_learning", "support", "testimonials/testimonials", "unsupervised_learning", "user_guide", "visualizations", "whats_new", "whats_new/_contributors", "whats_new/older_versions", "whats_new/v0.13", "whats_new/v0.14", "whats_new/v0.15", "whats_new/v0.16", "whats_new/v0.17", "whats_new/v0.18", "whats_new/v0.19", "whats_new/v0.20", "whats_new/v0.21", "whats_new/v0.22", "whats_new/v0.23", "whats_new/v0.24", "whats_new/v1.0", "whats_new/v1.1", "whats_new/v1.2", "whats_new/v1.3", "whats_new/v1.4", "whats_new/v1.5", "whats_new/v1.6", "whats_new/v1.7"], "envversion": {"sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinxext.opengraph": 1}, "filenames": ["about.rst", "api/index.rst", "api/sklearn.rst", "api/sklearn.base.rst", "api/sklearn.calibration.rst", "api/sklearn.cluster.rst", "api/sklearn.compose.rst", "api/sklearn.covariance.rst", "api/sklearn.cross_decomposition.rst", "api/sklearn.datasets.rst", "api/sklearn.decomposition.rst", "api/sklearn.discriminant_analysis.rst", "api/sklearn.dummy.rst", "api/sklearn.ensemble.rst", "api/sklearn.exceptions.rst", "api/sklearn.experimental.rst", "api/sklearn.feature_extraction.rst", "api/sklearn.feature_selection.rst", "api/sklearn.frozen.rst", "api/sklearn.gaussian_process.rst", "api/sklearn.impute.rst", "api/sklearn.inspection.rst", "api/sklearn.isotonic.rst", "api/sklearn.kernel_approximation.rst", "api/sklearn.kernel_ridge.rst", "api/sklearn.linear_model.rst", "api/sklearn.manifold.rst", "api/sklearn.metrics.rst", "api/sklearn.mixture.rst", "api/sklearn.model_selection.rst", "api/sklearn.multiclass.rst", "api/sklearn.multioutput.rst", "api/sklearn.naive_bayes.rst", "api/sklearn.neighbors.rst", "api/sklearn.neural_network.rst", "api/sklearn.pipeline.rst", "api/sklearn.preprocessing.rst", "api/sklearn.random_projection.rst", "api/sklearn.semi_supervised.rst", "api/sklearn.svm.rst", "api/sklearn.tree.rst", "api/sklearn.utils.rst", "auto_examples/applications/index.rst", "auto_examples/applications/plot_cyclical_feature_engineering.rst", "auto_examples/applications/plot_digits_denoising.rst", "auto_examples/applications/plot_face_recognition.rst", "auto_examples/applications/plot_model_complexity_influence.rst", "auto_examples/applications/plot_out_of_core_classification.rst", "auto_examples/applications/plot_outlier_detection_wine.rst", "auto_examples/applications/plot_prediction_latency.rst", "auto_examples/applications/plot_species_distribution_modeling.rst", "auto_examples/applications/plot_stock_market.rst", "auto_examples/applications/plot_time_series_lagged_features.rst", "auto_examples/applications/plot_tomography_l1_reconstruction.rst", "auto_examples/applications/plot_topics_extraction_with_nmf_lda.rst", "auto_examples/applications/wikipedia_principal_eigenvector.rst", "auto_examples/bicluster/index.rst", "auto_examples/bicluster/plot_bicluster_newsgroups.rst", "auto_examples/bicluster/plot_spectral_biclustering.rst", "auto_examples/bicluster/plot_spectral_coclustering.rst", "auto_examples/calibration/index.rst", "auto_examples/calibration/plot_calibration.rst", "auto_examples/calibration/plot_calibration_curve.rst", "auto_examples/calibration/plot_calibration_multiclass.rst", "auto_examples/calibration/plot_compare_calibration.rst", "auto_examples/classification/index.rst", "auto_examples/classification/plot_classification_probability.rst", "auto_examples/classification/plot_classifier_comparison.rst", "auto_examples/classification/plot_digits_classification.rst", "auto_examples/classification/plot_lda.rst", "auto_examples/classification/plot_lda_qda.rst", "auto_examples/cluster/index.rst", "auto_examples/cluster/plot_adjusted_for_chance_measures.rst", "auto_examples/cluster/plot_affinity_propagation.rst", "auto_examples/cluster/plot_agglomerative_clustering.rst", "auto_examples/cluster/plot_agglomerative_clustering_metrics.rst", "auto_examples/cluster/plot_agglomerative_dendrogram.rst", "auto_examples/cluster/plot_birch_vs_minibatchkmeans.rst", "auto_examples/cluster/plot_bisect_kmeans.rst", "auto_examples/cluster/plot_cluster_comparison.rst", "auto_examples/cluster/plot_coin_segmentation.rst", "auto_examples/cluster/plot_coin_ward_segmentation.rst", "auto_examples/cluster/plot_dbscan.rst", "auto_examples/cluster/plot_dict_face_patches.rst", "auto_examples/cluster/plot_digits_agglomeration.rst", "auto_examples/cluster/plot_digits_linkage.rst", "auto_examples/cluster/plot_face_compress.rst", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection.rst", "auto_examples/cluster/plot_hdbscan.rst", "auto_examples/cluster/plot_inductive_clustering.rst", "auto_examples/cluster/plot_kmeans_assumptions.rst", "auto_examples/cluster/plot_kmeans_digits.rst", "auto_examples/cluster/plot_kmeans_plusplus.rst", "auto_examples/cluster/plot_kmeans_silhouette_analysis.rst", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense.rst", "auto_examples/cluster/plot_linkage_comparison.rst", "auto_examples/cluster/plot_mean_shift.rst", "auto_examples/cluster/plot_mini_batch_kmeans.rst", "auto_examples/cluster/plot_optics.rst", "auto_examples/cluster/plot_segmentation_toy.rst", "auto_examples/cluster/plot_ward_structured_vs_unstructured.rst", "auto_examples/compose/index.rst", "auto_examples/compose/plot_column_transformer.rst", "auto_examples/compose/plot_column_transformer_mixed_types.rst", "auto_examples/compose/plot_compare_reduction.rst", "auto_examples/compose/plot_digits_pipe.rst", "auto_examples/compose/plot_feature_union.rst", "auto_examples/compose/plot_transformed_target.rst", "auto_examples/covariance/index.rst", "auto_examples/covariance/plot_covariance_estimation.rst", "auto_examples/covariance/plot_lw_vs_oas.rst", "auto_examples/covariance/plot_mahalanobis_distances.rst", "auto_examples/covariance/plot_robust_vs_empirical_covariance.rst", "auto_examples/covariance/plot_sparse_cov.rst", "auto_examples/cross_decomposition/index.rst", "auto_examples/cross_decomposition/plot_compare_cross_decomposition.rst", "auto_examples/cross_decomposition/plot_pcr_vs_pls.rst", "auto_examples/datasets/index.rst", "auto_examples/datasets/plot_random_multilabel_dataset.rst", "auto_examples/decomposition/index.rst", "auto_examples/decomposition/plot_faces_decomposition.rst", "auto_examples/decomposition/plot_ica_blind_source_separation.rst", "auto_examples/decomposition/plot_ica_vs_pca.rst", "auto_examples/decomposition/plot_image_denoising.rst", "auto_examples/decomposition/plot_incremental_pca.rst", "auto_examples/decomposition/plot_kernel_pca.rst", "auto_examples/decomposition/plot_pca_iris.rst", "auto_examples/decomposition/plot_pca_vs_fa_model_selection.rst", "auto_examples/decomposition/plot_pca_vs_lda.rst", "auto_examples/decomposition/plot_sparse_coding.rst", "auto_examples/decomposition/plot_varimax_fa.rst", "auto_examples/developing_estimators/index.rst", "auto_examples/developing_estimators/sklearn_is_fitted.rst", "auto_examples/ensemble/index.rst", "auto_examples/ensemble/plot_adaboost_multiclass.rst", "auto_examples/ensemble/plot_adaboost_regression.rst", "auto_examples/ensemble/plot_adaboost_twoclass.rst", "auto_examples/ensemble/plot_bias_variance.rst", "auto_examples/ensemble/plot_ensemble_oob.rst", "auto_examples/ensemble/plot_feature_transformation.rst", "auto_examples/ensemble/plot_forest_hist_grad_boosting_comparison.rst", "auto_examples/ensemble/plot_forest_importances.rst", "auto_examples/ensemble/plot_forest_iris.rst", "auto_examples/ensemble/plot_gradient_boosting_categorical.rst", "auto_examples/ensemble/plot_gradient_boosting_early_stopping.rst", "auto_examples/ensemble/plot_gradient_boosting_oob.rst", "auto_examples/ensemble/plot_gradient_boosting_quantile.rst", "auto_examples/ensemble/plot_gradient_boosting_regression.rst", "auto_examples/ensemble/plot_gradient_boosting_regularization.rst", "auto_examples/ensemble/plot_hgbt_regression.rst", "auto_examples/ensemble/plot_isolation_forest.rst", "auto_examples/ensemble/plot_monotonic_constraints.rst", "auto_examples/ensemble/plot_random_forest_embedding.rst", "auto_examples/ensemble/plot_random_forest_regression_multioutput.rst", "auto_examples/ensemble/plot_stack_predictors.rst", "auto_examples/ensemble/plot_voting_decision_regions.rst", "auto_examples/ensemble/plot_voting_regressor.rst", "auto_examples/feature_selection/index.rst", "auto_examples/feature_selection/plot_f_test_vs_mi.rst", "auto_examples/feature_selection/plot_feature_selection.rst", "auto_examples/feature_selection/plot_feature_selection_pipeline.rst", "auto_examples/feature_selection/plot_rfe_digits.rst", "auto_examples/feature_selection/plot_rfe_with_cross_validation.rst", "auto_examples/feature_selection/plot_select_from_model_diabetes.rst", "auto_examples/frozen/index.rst", "auto_examples/frozen/plot_frozen_examples.rst", "auto_examples/gaussian_process/index.rst", "auto_examples/gaussian_process/plot_compare_gpr_krr.rst", "auto_examples/gaussian_process/plot_gpc.rst", "auto_examples/gaussian_process/plot_gpc_iris.rst", "auto_examples/gaussian_process/plot_gpc_isoprobability.rst", "auto_examples/gaussian_process/plot_gpc_xor.rst", "auto_examples/gaussian_process/plot_gpr_co2.rst", "auto_examples/gaussian_process/plot_gpr_noisy.rst", "auto_examples/gaussian_process/plot_gpr_noisy_targets.rst", "auto_examples/gaussian_process/plot_gpr_on_structured_data.rst", "auto_examples/gaussian_process/plot_gpr_prior_posterior.rst", "auto_examples/impute/index.rst", "auto_examples/impute/plot_iterative_imputer_variants_comparison.rst", "auto_examples/impute/plot_missing_values.rst", "auto_examples/index.rst", "auto_examples/inspection/index.rst", "auto_examples/inspection/plot_causal_interpretation.rst", "auto_examples/inspection/plot_linear_model_coefficient_interpretation.rst", "auto_examples/inspection/plot_partial_dependence.rst", "auto_examples/inspection/plot_permutation_importance.rst", "auto_examples/inspection/plot_permutation_importance_multicollinear.rst", "auto_examples/kernel_approximation/index.rst", "auto_examples/kernel_approximation/plot_scalable_poly_kernels.rst", "auto_examples/linear_model/index.rst", "auto_examples/linear_model/plot_ard.rst", "auto_examples/linear_model/plot_bayesian_ridge_curvefit.rst", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples.rst", "auto_examples/linear_model/plot_huber_vs_ridge.rst", "auto_examples/linear_model/plot_lasso_and_elasticnet.rst", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data.rst", "auto_examples/linear_model/plot_lasso_lars_ic.rst", "auto_examples/linear_model/plot_lasso_lasso_lars_elasticnet_path.rst", "auto_examples/linear_model/plot_lasso_model_selection.rst", "auto_examples/linear_model/plot_logistic.rst", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity.rst", "auto_examples/linear_model/plot_logistic_multinomial.rst", "auto_examples/linear_model/plot_logistic_path.rst", "auto_examples/linear_model/plot_multi_task_lasso_support.rst", "auto_examples/linear_model/plot_nnls.rst", "auto_examples/linear_model/plot_ols_ridge.rst", "auto_examples/linear_model/plot_omp.rst", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss.rst", "auto_examples/linear_model/plot_polynomial_interpolation.rst", "auto_examples/linear_model/plot_quantile_regression.rst", "auto_examples/linear_model/plot_ransac.rst", "auto_examples/linear_model/plot_ridge_coeffs.rst", "auto_examples/linear_model/plot_ridge_path.rst", "auto_examples/linear_model/plot_robust_fit.rst", "auto_examples/linear_model/plot_sgd_early_stopping.rst", "auto_examples/linear_model/plot_sgd_iris.rst", "auto_examples/linear_model/plot_sgd_loss_functions.rst", "auto_examples/linear_model/plot_sgd_penalties.rst", "auto_examples/linear_model/plot_sgd_separating_hyperplane.rst", "auto_examples/linear_model/plot_sgd_weighted_samples.rst", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist.rst", "auto_examples/linear_model/plot_theilsen.rst", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims.rst", "auto_examples/manifold/index.rst", "auto_examples/manifold/plot_compare_methods.rst", "auto_examples/manifold/plot_lle_digits.rst", "auto_examples/manifold/plot_manifold_sphere.rst", "auto_examples/manifold/plot_mds.rst", "auto_examples/manifold/plot_swissroll.rst", "auto_examples/manifold/plot_t_sne_perplexity.rst", "auto_examples/miscellaneous/index.rst", "auto_examples/miscellaneous/plot_anomaly_comparison.rst", "auto_examples/miscellaneous/plot_display_object_visualization.rst", "auto_examples/miscellaneous/plot_estimator_representation.rst", "auto_examples/miscellaneous/plot_isotonic_regression.rst", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound.rst", "auto_examples/miscellaneous/plot_kernel_approximation.rst", "auto_examples/miscellaneous/plot_kernel_ridge_regression.rst", "auto_examples/miscellaneous/plot_metadata_routing.rst", "auto_examples/miscellaneous/plot_multilabel.rst", "auto_examples/miscellaneous/plot_multioutput_face_completion.rst", "auto_examples/miscellaneous/plot_outlier_detection_bench.rst", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api.rst", "auto_examples/miscellaneous/plot_pipeline_display.rst", "auto_examples/miscellaneous/plot_roc_curve_visualization_api.rst", "auto_examples/miscellaneous/plot_set_output.rst", "auto_examples/mixture/index.rst", "auto_examples/mixture/plot_concentration_prior.rst", "auto_examples/mixture/plot_gmm.rst", "auto_examples/mixture/plot_gmm_covariances.rst", "auto_examples/mixture/plot_gmm_init.rst", "auto_examples/mixture/plot_gmm_pdf.rst", "auto_examples/mixture/plot_gmm_selection.rst", "auto_examples/mixture/plot_gmm_sin.rst", "auto_examples/model_selection/index.rst", "auto_examples/model_selection/plot_confusion_matrix.rst", "auto_examples/model_selection/plot_cost_sensitive_learning.rst", "auto_examples/model_selection/plot_cv_indices.rst", "auto_examples/model_selection/plot_cv_predict.rst", "auto_examples/model_selection/plot_det.rst", "auto_examples/model_selection/plot_grid_search_digits.rst", "auto_examples/model_selection/plot_grid_search_refit_callable.rst", "auto_examples/model_selection/plot_grid_search_stats.rst", "auto_examples/model_selection/plot_grid_search_text_feature_extraction.rst", "auto_examples/model_selection/plot_learning_curve.rst", "auto_examples/model_selection/plot_likelihood_ratios.rst", "auto_examples/model_selection/plot_multi_metric_evaluation.rst", "auto_examples/model_selection/plot_nested_cross_validation_iris.rst", "auto_examples/model_selection/plot_permutation_tests_for_classification.rst", "auto_examples/model_selection/plot_precision_recall.rst", "auto_examples/model_selection/plot_randomized_search.rst", "auto_examples/model_selection/plot_roc.rst", "auto_examples/model_selection/plot_roc_crossval.rst", "auto_examples/model_selection/plot_successive_halving_heatmap.rst", "auto_examples/model_selection/plot_successive_halving_iterations.rst", "auto_examples/model_selection/plot_train_error_vs_test_error.rst", "auto_examples/model_selection/plot_tuned_decision_threshold.rst", "auto_examples/model_selection/plot_underfitting_overfitting.rst", "auto_examples/multiclass/index.rst", "auto_examples/multiclass/plot_multiclass_overview.rst", "auto_examples/multioutput/index.rst", "auto_examples/multioutput/plot_classifier_chain_yeast.rst", "auto_examples/neighbors/approximate_nearest_neighbors.rst", "auto_examples/neighbors/index.rst", "auto_examples/neighbors/plot_caching_nearest_neighbors.rst", "auto_examples/neighbors/plot_classification.rst", "auto_examples/neighbors/plot_digits_kde_sampling.rst", "auto_examples/neighbors/plot_kde_1d.rst", "auto_examples/neighbors/plot_lof_novelty_detection.rst", "auto_examples/neighbors/plot_lof_outlier_detection.rst", "auto_examples/neighbors/plot_nca_classification.rst", "auto_examples/neighbors/plot_nca_dim_reduction.rst", "auto_examples/neighbors/plot_nca_illustration.rst", "auto_examples/neighbors/plot_nearest_centroid.rst", "auto_examples/neighbors/plot_regression.rst", "auto_examples/neighbors/plot_species_kde.rst", "auto_examples/neural_networks/index.rst", "auto_examples/neural_networks/plot_mlp_alpha.rst", "auto_examples/neural_networks/plot_mlp_training_curves.rst", "auto_examples/neural_networks/plot_mnist_filters.rst", "auto_examples/neural_networks/plot_rbm_logistic_classification.rst", "auto_examples/preprocessing/index.rst", "auto_examples/preprocessing/plot_all_scaling.rst", "auto_examples/preprocessing/plot_discretization.rst", "auto_examples/preprocessing/plot_discretization_classification.rst", "auto_examples/preprocessing/plot_discretization_strategies.rst", "auto_examples/preprocessing/plot_map_data_to_normal.rst", "auto_examples/preprocessing/plot_scaling_importance.rst", "auto_examples/preprocessing/plot_target_encoder.rst", "auto_examples/preprocessing/plot_target_encoder_cross_val.rst", "auto_examples/release_highlights/index.rst", "auto_examples/release_highlights/plot_release_highlights_0_22_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_23_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_24_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_0_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_1_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_2_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_3_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_4_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_5_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_6_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_7_0.rst", "auto_examples/semi_supervised/index.rst", "auto_examples/semi_supervised/plot_label_propagation_digits.rst", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning.rst", "auto_examples/semi_supervised/plot_label_propagation_structure.rst", "auto_examples/semi_supervised/plot_self_training_varying_threshold.rst", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups.rst", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris.rst", "auto_examples/svm/index.rst", "auto_examples/svm/plot_custom_kernel.rst", "auto_examples/svm/plot_iris_svc.rst", "auto_examples/svm/plot_linearsvc_support_vectors.rst", "auto_examples/svm/plot_oneclass.rst", "auto_examples/svm/plot_rbf_parameters.rst", "auto_examples/svm/plot_separating_hyperplane.rst", "auto_examples/svm/plot_separating_hyperplane_unbalanced.rst", "auto_examples/svm/plot_svm_anova.rst", "auto_examples/svm/plot_svm_kernels.rst", "auto_examples/svm/plot_svm_margin.rst", "auto_examples/svm/plot_svm_regression.rst", "auto_examples/svm/plot_svm_scale_c.rst", "auto_examples/svm/plot_svm_tie_breaking.rst", "auto_examples/svm/plot_weighted_samples.rst", "auto_examples/text/index.rst", "auto_examples/text/plot_document_classification_20newsgroups.rst", "auto_examples/text/plot_document_clustering.rst", "auto_examples/text/plot_hashing_vs_dict_vectorizer.rst", "auto_examples/tree/index.rst", "auto_examples/tree/plot_cost_complexity_pruning.rst", "auto_examples/tree/plot_iris_dtc.rst", "auto_examples/tree/plot_tree_regression.rst", "auto_examples/tree/plot_unveil_tree_structure.rst", "common_pitfalls.rst", "communication_team.rst", "communication_team_emeritus.rst", "computing.rst", "computing/computational_performance.rst", "computing/parallelism.rst", "computing/scaling_strategies.rst", "contributor_experience_team.rst", "contributor_experience_team_emeritus.rst", "data_transforms.rst", "datasets.rst", "datasets/loading_other_datasets.rst", "datasets/real_world.rst", "datasets/sample_generators.rst", "datasets/toy_dataset.rst", "developers/advanced_installation.rst", "developers/bug_triaging.rst", "developers/contributing.rst", "developers/cython.rst", "developers/develop.rst", "developers/index.rst", "developers/maintainer.rst", "developers/minimal_reproducer.rst", "developers/performance.rst", "developers/plotting.rst", "developers/tips.rst", "developers/utilities.rst", "dispatching.rst", "documentation_team.rst", "faq.rst", "getting_started.rst", "glossary.rst", "governance.rst", "index.rst", "inspection.rst", "install.rst", "install_instructions_conda.rst", "machine_learning_map.rst", "maintainers.rst", "maintainers_emeritus.rst", "metadata_routing.rst", "min_dependency_substitutions.rst", "min_dependency_table.rst", "model_persistence.rst", "model_selection.rst", "modules/array_api.rst", "modules/biclustering.rst", "modules/calibration.rst", "modules/classification_threshold.rst", "modules/clustering.rst", "modules/compose.rst", "modules/covariance.rst", "modules/cross_decomposition.rst", "modules/cross_validation.rst", "modules/decomposition.rst", "modules/density.rst", "modules/ensemble.rst", "modules/feature_extraction.rst", "modules/feature_selection.rst", "modules/gaussian_process.rst", "modules/generated/dbscan-function.rst", "modules/generated/fastica-function.rst", "modules/generated/oas-function.rst", "modules/generated/sklearn.base.BaseEstimator.rst", "modules/generated/sklearn.base.BiclusterMixin.rst", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin.rst", "modules/generated/sklearn.base.ClassifierMixin.rst", "modules/generated/sklearn.base.ClusterMixin.rst", "modules/generated/sklearn.base.DensityMixin.rst", "modules/generated/sklearn.base.MetaEstimatorMixin.rst", "modules/generated/sklearn.base.OneToOneFeatureMixin.rst", "modules/generated/sklearn.base.OutlierMixin.rst", "modules/generated/sklearn.base.RegressorMixin.rst", "modules/generated/sklearn.base.TransformerMixin.rst", "modules/generated/sklearn.base.clone.rst", "modules/generated/sklearn.base.is_classifier.rst", "modules/generated/sklearn.base.is_clusterer.rst", "modules/generated/sklearn.base.is_outlier_detector.rst", "modules/generated/sklearn.base.is_regressor.rst", "modules/generated/sklearn.calibration.CalibratedClassifierCV.rst", "modules/generated/sklearn.calibration.CalibrationDisplay.rst", "modules/generated/sklearn.calibration.calibration_curve.rst", "modules/generated/sklearn.cluster.AffinityPropagation.rst", "modules/generated/sklearn.cluster.AgglomerativeClustering.rst", "modules/generated/sklearn.cluster.Birch.rst", "modules/generated/sklearn.cluster.BisectingKMeans.rst", "modules/generated/sklearn.cluster.DBSCAN.rst", "modules/generated/sklearn.cluster.FeatureAgglomeration.rst", "modules/generated/sklearn.cluster.HDBSCAN.rst", "modules/generated/sklearn.cluster.KMeans.rst", "modules/generated/sklearn.cluster.MeanShift.rst", "modules/generated/sklearn.cluster.MiniBatchKMeans.rst", "modules/generated/sklearn.cluster.OPTICS.rst", "modules/generated/sklearn.cluster.SpectralBiclustering.rst", "modules/generated/sklearn.cluster.SpectralClustering.rst", "modules/generated/sklearn.cluster.SpectralCoclustering.rst", "modules/generated/sklearn.cluster.affinity_propagation.rst", "modules/generated/sklearn.cluster.cluster_optics_dbscan.rst", "modules/generated/sklearn.cluster.cluster_optics_xi.rst", "modules/generated/sklearn.cluster.compute_optics_graph.rst", "modules/generated/sklearn.cluster.estimate_bandwidth.rst", "modules/generated/sklearn.cluster.k_means.rst", "modules/generated/sklearn.cluster.kmeans_plusplus.rst", "modules/generated/sklearn.cluster.mean_shift.rst", "modules/generated/sklearn.cluster.spectral_clustering.rst", "modules/generated/sklearn.cluster.ward_tree.rst", "modules/generated/sklearn.compose.ColumnTransformer.rst", "modules/generated/sklearn.compose.TransformedTargetRegressor.rst", "modules/generated/sklearn.compose.make_column_selector.rst", "modules/generated/sklearn.compose.make_column_transformer.rst", "modules/generated/sklearn.config_context.rst", "modules/generated/sklearn.covariance.EllipticEnvelope.rst", "modules/generated/sklearn.covariance.EmpiricalCovariance.rst", "modules/generated/sklearn.covariance.GraphicalLasso.rst", "modules/generated/sklearn.covariance.GraphicalLassoCV.rst", "modules/generated/sklearn.covariance.LedoitWolf.rst", "modules/generated/sklearn.covariance.MinCovDet.rst", "modules/generated/sklearn.covariance.OAS.rst", "modules/generated/sklearn.covariance.ShrunkCovariance.rst", "modules/generated/sklearn.covariance.empirical_covariance.rst", "modules/generated/sklearn.covariance.graphical_lasso.rst", "modules/generated/sklearn.covariance.ledoit_wolf.rst", "modules/generated/sklearn.covariance.ledoit_wolf_shrinkage.rst", "modules/generated/sklearn.covariance.shrunk_covariance.rst", "modules/generated/sklearn.cross_decomposition.CCA.rst", "modules/generated/sklearn.cross_decomposition.PLSCanonical.rst", "modules/generated/sklearn.cross_decomposition.PLSRegression.rst", "modules/generated/sklearn.cross_decomposition.PLSSVD.rst", "modules/generated/sklearn.datasets.clear_data_home.rst", "modules/generated/sklearn.datasets.dump_svmlight_file.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized.rst", "modules/generated/sklearn.datasets.fetch_california_housing.rst", "modules/generated/sklearn.datasets.fetch_covtype.rst", "modules/generated/sklearn.datasets.fetch_file.rst", "modules/generated/sklearn.datasets.fetch_kddcup99.rst", "modules/generated/sklearn.datasets.fetch_lfw_pairs.rst", "modules/generated/sklearn.datasets.fetch_lfw_people.rst", "modules/generated/sklearn.datasets.fetch_olivetti_faces.rst", "modules/generated/sklearn.datasets.fetch_openml.rst", "modules/generated/sklearn.datasets.fetch_rcv1.rst", "modules/generated/sklearn.datasets.fetch_species_distributions.rst", "modules/generated/sklearn.datasets.get_data_home.rst", "modules/generated/sklearn.datasets.load_breast_cancer.rst", "modules/generated/sklearn.datasets.load_diabetes.rst", "modules/generated/sklearn.datasets.load_digits.rst", "modules/generated/sklearn.datasets.load_files.rst", "modules/generated/sklearn.datasets.load_iris.rst", "modules/generated/sklearn.datasets.load_linnerud.rst", "modules/generated/sklearn.datasets.load_sample_image.rst", "modules/generated/sklearn.datasets.load_sample_images.rst", "modules/generated/sklearn.datasets.load_svmlight_file.rst", "modules/generated/sklearn.datasets.load_svmlight_files.rst", "modules/generated/sklearn.datasets.load_wine.rst", "modules/generated/sklearn.datasets.make_biclusters.rst", "modules/generated/sklearn.datasets.make_blobs.rst", "modules/generated/sklearn.datasets.make_checkerboard.rst", "modules/generated/sklearn.datasets.make_circles.rst", "modules/generated/sklearn.datasets.make_classification.rst", "modules/generated/sklearn.datasets.make_friedman1.rst", "modules/generated/sklearn.datasets.make_friedman2.rst", "modules/generated/sklearn.datasets.make_friedman3.rst", "modules/generated/sklearn.datasets.make_gaussian_quantiles.rst", "modules/generated/sklearn.datasets.make_hastie_10_2.rst", "modules/generated/sklearn.datasets.make_low_rank_matrix.rst", "modules/generated/sklearn.datasets.make_moons.rst", "modules/generated/sklearn.datasets.make_multilabel_classification.rst", "modules/generated/sklearn.datasets.make_regression.rst", "modules/generated/sklearn.datasets.make_s_curve.rst", "modules/generated/sklearn.datasets.make_sparse_coded_signal.rst", "modules/generated/sklearn.datasets.make_sparse_spd_matrix.rst", "modules/generated/sklearn.datasets.make_sparse_uncorrelated.rst", "modules/generated/sklearn.datasets.make_spd_matrix.rst", "modules/generated/sklearn.datasets.make_swiss_roll.rst", "modules/generated/sklearn.decomposition.DictionaryLearning.rst", "modules/generated/sklearn.decomposition.FactorAnalysis.rst", "modules/generated/sklearn.decomposition.FastICA.rst", "modules/generated/sklearn.decomposition.IncrementalPCA.rst", "modules/generated/sklearn.decomposition.KernelPCA.rst", "modules/generated/sklearn.decomposition.LatentDirichletAllocation.rst", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning.rst", "modules/generated/sklearn.decomposition.MiniBatchNMF.rst", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA.rst", "modules/generated/sklearn.decomposition.NMF.rst", "modules/generated/sklearn.decomposition.PCA.rst", "modules/generated/sklearn.decomposition.SparseCoder.rst", "modules/generated/sklearn.decomposition.SparsePCA.rst", "modules/generated/sklearn.decomposition.TruncatedSVD.rst", "modules/generated/sklearn.decomposition.dict_learning.rst", "modules/generated/sklearn.decomposition.dict_learning_online.rst", "modules/generated/sklearn.decomposition.non_negative_factorization.rst", "modules/generated/sklearn.decomposition.sparse_encode.rst", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis.rst", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.rst", "modules/generated/sklearn.dummy.DummyClassifier.rst", "modules/generated/sklearn.dummy.DummyRegressor.rst", "modules/generated/sklearn.ensemble.AdaBoostClassifier.rst", "modules/generated/sklearn.ensemble.AdaBoostRegressor.rst", "modules/generated/sklearn.ensemble.BaggingClassifier.rst", "modules/generated/sklearn.ensemble.BaggingRegressor.rst", "modules/generated/sklearn.ensemble.ExtraTreesClassifier.rst", "modules/generated/sklearn.ensemble.ExtraTreesRegressor.rst", "modules/generated/sklearn.ensemble.GradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.GradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.IsolationForest.rst", "modules/generated/sklearn.ensemble.RandomForestClassifier.rst", "modules/generated/sklearn.ensemble.RandomForestRegressor.rst", "modules/generated/sklearn.ensemble.RandomTreesEmbedding.rst", "modules/generated/sklearn.ensemble.StackingClassifier.rst", "modules/generated/sklearn.ensemble.StackingRegressor.rst", "modules/generated/sklearn.ensemble.VotingClassifier.rst", "modules/generated/sklearn.ensemble.VotingRegressor.rst", "modules/generated/sklearn.exceptions.ConvergenceWarning.rst", "modules/generated/sklearn.exceptions.DataConversionWarning.rst", "modules/generated/sklearn.exceptions.DataDimensionalityWarning.rst", "modules/generated/sklearn.exceptions.EfficiencyWarning.rst", "modules/generated/sklearn.exceptions.EstimatorCheckFailedWarning.rst", "modules/generated/sklearn.exceptions.FitFailedWarning.rst", "modules/generated/sklearn.exceptions.InconsistentVersionWarning.rst", "modules/generated/sklearn.exceptions.NotFittedError.rst", "modules/generated/sklearn.exceptions.UndefinedMetricWarning.rst", "modules/generated/sklearn.experimental.enable_halving_search_cv.rst", "modules/generated/sklearn.experimental.enable_iterative_imputer.rst", "modules/generated/sklearn.feature_extraction.DictVectorizer.rst", "modules/generated/sklearn.feature_extraction.FeatureHasher.rst", "modules/generated/sklearn.feature_extraction.image.PatchExtractor.rst", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d.rst", "modules/generated/sklearn.feature_extraction.image.grid_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.img_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d.rst", "modules/generated/sklearn.feature_extraction.text.CountVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer.rst", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect.rst", "modules/generated/sklearn.feature_selection.RFE.rst", "modules/generated/sklearn.feature_selection.RFECV.rst", "modules/generated/sklearn.feature_selection.SelectFdr.rst", "modules/generated/sklearn.feature_selection.SelectFpr.rst", "modules/generated/sklearn.feature_selection.SelectFromModel.rst", "modules/generated/sklearn.feature_selection.SelectFwe.rst", "modules/generated/sklearn.feature_selection.SelectKBest.rst", "modules/generated/sklearn.feature_selection.SelectPercentile.rst", "modules/generated/sklearn.feature_selection.SelectorMixin.rst", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector.rst", "modules/generated/sklearn.feature_selection.VarianceThreshold.rst", "modules/generated/sklearn.feature_selection.chi2.rst", "modules/generated/sklearn.feature_selection.f_classif.rst", "modules/generated/sklearn.feature_selection.f_regression.rst", "modules/generated/sklearn.feature_selection.mutual_info_classif.rst", "modules/generated/sklearn.feature_selection.mutual_info_regression.rst", "modules/generated/sklearn.feature_selection.r_regression.rst", "modules/generated/sklearn.frozen.FrozenEstimator.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor.rst", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.DotProduct.rst", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared.rst", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation.rst", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter.rst", "modules/generated/sklearn.gaussian_process.kernels.Kernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Matern.rst", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Product.rst", "modules/generated/sklearn.gaussian_process.kernels.RBF.rst", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic.rst", "modules/generated/sklearn.gaussian_process.kernels.Sum.rst", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel.rst", "modules/generated/sklearn.get_config.rst", "modules/generated/sklearn.impute.IterativeImputer.rst", "modules/generated/sklearn.impute.KNNImputer.rst", "modules/generated/sklearn.impute.MissingIndicator.rst", "modules/generated/sklearn.impute.SimpleImputer.rst", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay.rst", "modules/generated/sklearn.inspection.PartialDependenceDisplay.rst", "modules/generated/sklearn.inspection.partial_dependence.rst", "modules/generated/sklearn.inspection.permutation_importance.rst", "modules/generated/sklearn.isotonic.IsotonicRegression.rst", "modules/generated/sklearn.isotonic.check_increasing.rst", "modules/generated/sklearn.isotonic.isotonic_regression.rst", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler.rst", "modules/generated/sklearn.kernel_approximation.Nystroem.rst", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch.rst", "modules/generated/sklearn.kernel_approximation.RBFSampler.rst", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler.rst", "modules/generated/sklearn.kernel_ridge.KernelRidge.rst", "modules/generated/sklearn.linear_model.ARDRegression.rst", "modules/generated/sklearn.linear_model.BayesianRidge.rst", "modules/generated/sklearn.linear_model.ElasticNet.rst", "modules/generated/sklearn.linear_model.ElasticNetCV.rst", "modules/generated/sklearn.linear_model.GammaRegressor.rst", "modules/generated/sklearn.linear_model.HuberRegressor.rst", "modules/generated/sklearn.linear_model.Lars.rst", "modules/generated/sklearn.linear_model.LarsCV.rst", "modules/generated/sklearn.linear_model.Lasso.rst", "modules/generated/sklearn.linear_model.LassoCV.rst", "modules/generated/sklearn.linear_model.LassoLars.rst", "modules/generated/sklearn.linear_model.LassoLarsCV.rst", "modules/generated/sklearn.linear_model.LassoLarsIC.rst", "modules/generated/sklearn.linear_model.LinearRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegressionCV.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNet.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV.rst", "modules/generated/sklearn.linear_model.MultiTaskLasso.rst", "modules/generated/sklearn.linear_model.MultiTaskLassoCV.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor.rst", "modules/generated/sklearn.linear_model.Perceptron.rst", "modules/generated/sklearn.linear_model.PoissonRegressor.rst", "modules/generated/sklearn.linear_model.QuantileRegressor.rst", "modules/generated/sklearn.linear_model.RANSACRegressor.rst", "modules/generated/sklearn.linear_model.Ridge.rst", "modules/generated/sklearn.linear_model.RidgeCV.rst", "modules/generated/sklearn.linear_model.RidgeClassifier.rst", "modules/generated/sklearn.linear_model.RidgeClassifierCV.rst", "modules/generated/sklearn.linear_model.SGDClassifier.rst", "modules/generated/sklearn.linear_model.SGDOneClassSVM.rst", "modules/generated/sklearn.linear_model.SGDRegressor.rst", "modules/generated/sklearn.linear_model.TheilSenRegressor.rst", "modules/generated/sklearn.linear_model.TweedieRegressor.rst", "modules/generated/sklearn.linear_model.enet_path.rst", "modules/generated/sklearn.linear_model.lars_path.rst", "modules/generated/sklearn.linear_model.lars_path_gram.rst", "modules/generated/sklearn.linear_model.lasso_path.rst", "modules/generated/sklearn.linear_model.orthogonal_mp.rst", "modules/generated/sklearn.linear_model.orthogonal_mp_gram.rst", "modules/generated/sklearn.linear_model.ridge_regression.rst", "modules/generated/sklearn.manifold.Isomap.rst", "modules/generated/sklearn.manifold.LocallyLinearEmbedding.rst", "modules/generated/sklearn.manifold.MDS.rst", "modules/generated/sklearn.manifold.SpectralEmbedding.rst", "modules/generated/sklearn.manifold.TSNE.rst", "modules/generated/sklearn.manifold.locally_linear_embedding.rst", "modules/generated/sklearn.manifold.smacof.rst", "modules/generated/sklearn.manifold.spectral_embedding.rst", "modules/generated/sklearn.manifold.trustworthiness.rst", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay.rst", "modules/generated/sklearn.metrics.DetCurveDisplay.rst", "modules/generated/sklearn.metrics.DistanceMetric.rst", "modules/generated/sklearn.metrics.PrecisionRecallDisplay.rst", "modules/generated/sklearn.metrics.PredictionErrorDisplay.rst", "modules/generated/sklearn.metrics.RocCurveDisplay.rst", "modules/generated/sklearn.metrics.accuracy_score.rst", "modules/generated/sklearn.metrics.adjusted_mutual_info_score.rst", "modules/generated/sklearn.metrics.adjusted_rand_score.rst", "modules/generated/sklearn.metrics.auc.rst", "modules/generated/sklearn.metrics.average_precision_score.rst", "modules/generated/sklearn.metrics.balanced_accuracy_score.rst", "modules/generated/sklearn.metrics.brier_score_loss.rst", "modules/generated/sklearn.metrics.calinski_harabasz_score.rst", "modules/generated/sklearn.metrics.check_scoring.rst", "modules/generated/sklearn.metrics.class_likelihood_ratios.rst", "modules/generated/sklearn.metrics.classification_report.rst", "modules/generated/sklearn.metrics.cluster.contingency_matrix.rst", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix.rst", "modules/generated/sklearn.metrics.cohen_kappa_score.rst", "modules/generated/sklearn.metrics.completeness_score.rst", "modules/generated/sklearn.metrics.confusion_matrix.rst", "modules/generated/sklearn.metrics.consensus_score.rst", "modules/generated/sklearn.metrics.coverage_error.rst", "modules/generated/sklearn.metrics.d2_absolute_error_score.rst", "modules/generated/sklearn.metrics.d2_log_loss_score.rst", "modules/generated/sklearn.metrics.d2_pinball_score.rst", "modules/generated/sklearn.metrics.d2_tweedie_score.rst", "modules/generated/sklearn.metrics.davies_bouldin_score.rst", "modules/generated/sklearn.metrics.dcg_score.rst", "modules/generated/sklearn.metrics.det_curve.rst", "modules/generated/sklearn.metrics.explained_variance_score.rst", "modules/generated/sklearn.metrics.f1_score.rst", "modules/generated/sklearn.metrics.fbeta_score.rst", "modules/generated/sklearn.metrics.fowlkes_mallows_score.rst", "modules/generated/sklearn.metrics.get_scorer.rst", "modules/generated/sklearn.metrics.get_scorer_names.rst", "modules/generated/sklearn.metrics.hamming_loss.rst", "modules/generated/sklearn.metrics.hinge_loss.rst", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure.rst", "modules/generated/sklearn.metrics.homogeneity_score.rst", "modules/generated/sklearn.metrics.jaccard_score.rst", "modules/generated/sklearn.metrics.label_ranking_average_precision_score.rst", "modules/generated/sklearn.metrics.label_ranking_loss.rst", "modules/generated/sklearn.metrics.log_loss.rst", "modules/generated/sklearn.metrics.make_scorer.rst", "modules/generated/sklearn.metrics.matthews_corrcoef.rst", "modules/generated/sklearn.metrics.max_error.rst", "modules/generated/sklearn.metrics.mean_absolute_error.rst", "modules/generated/sklearn.metrics.mean_absolute_percentage_error.rst", "modules/generated/sklearn.metrics.mean_gamma_deviance.rst", "modules/generated/sklearn.metrics.mean_pinball_loss.rst", "modules/generated/sklearn.metrics.mean_poisson_deviance.rst", "modules/generated/sklearn.metrics.mean_squared_error.rst", "modules/generated/sklearn.metrics.mean_squared_log_error.rst", "modules/generated/sklearn.metrics.mean_tweedie_deviance.rst", "modules/generated/sklearn.metrics.median_absolute_error.rst", "modules/generated/sklearn.metrics.multilabel_confusion_matrix.rst", "modules/generated/sklearn.metrics.mutual_info_score.rst", "modules/generated/sklearn.metrics.ndcg_score.rst", "modules/generated/sklearn.metrics.normalized_mutual_info_score.rst", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.cosine_similarity.rst", "modules/generated/sklearn.metrics.pairwise.distance_metrics.rst", "modules/generated/sklearn.metrics.pairwise.euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.haversine_distances.rst", "modules/generated/sklearn.metrics.pairwise.kernel_metrics.rst", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel.rst", "modules/generated/sklearn.metrics.pairwise.linear_kernel.rst", "modules/generated/sklearn.metrics.pairwise.manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels.rst", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel.rst", "modules/generated/sklearn.metrics.pairwise.rbf_kernel.rst", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel.rst", "modules/generated/sklearn.metrics.pairwise_distances.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min.rst", "modules/generated/sklearn.metrics.pairwise_distances_chunked.rst", "modules/generated/sklearn.metrics.precision_recall_curve.rst", "modules/generated/sklearn.metrics.precision_recall_fscore_support.rst", "modules/generated/sklearn.metrics.precision_score.rst", "modules/generated/sklearn.metrics.r2_score.rst", "modules/generated/sklearn.metrics.rand_score.rst", "modules/generated/sklearn.metrics.recall_score.rst", "modules/generated/sklearn.metrics.roc_auc_score.rst", "modules/generated/sklearn.metrics.roc_curve.rst", "modules/generated/sklearn.metrics.root_mean_squared_error.rst", "modules/generated/sklearn.metrics.root_mean_squared_log_error.rst", "modules/generated/sklearn.metrics.silhouette_samples.rst", "modules/generated/sklearn.metrics.silhouette_score.rst", "modules/generated/sklearn.metrics.top_k_accuracy_score.rst", "modules/generated/sklearn.metrics.v_measure_score.rst", "modules/generated/sklearn.metrics.zero_one_loss.rst", "modules/generated/sklearn.mixture.BayesianGaussianMixture.rst", "modules/generated/sklearn.mixture.GaussianMixture.rst", "modules/generated/sklearn.model_selection.FixedThresholdClassifier.rst", "modules/generated/sklearn.model_selection.GridSearchCV.rst", "modules/generated/sklearn.model_selection.GroupKFold.rst", "modules/generated/sklearn.model_selection.GroupShuffleSplit.rst", "modules/generated/sklearn.model_selection.HalvingGridSearchCV.rst", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV.rst", "modules/generated/sklearn.model_selection.KFold.rst", "modules/generated/sklearn.model_selection.LearningCurveDisplay.rst", "modules/generated/sklearn.model_selection.LeaveOneGroupOut.rst", "modules/generated/sklearn.model_selection.LeaveOneOut.rst", "modules/generated/sklearn.model_selection.LeavePGroupsOut.rst", "modules/generated/sklearn.model_selection.LeavePOut.rst", "modules/generated/sklearn.model_selection.ParameterGrid.rst", "modules/generated/sklearn.model_selection.ParameterSampler.rst", "modules/generated/sklearn.model_selection.PredefinedSplit.rst", "modules/generated/sklearn.model_selection.RandomizedSearchCV.rst", "modules/generated/sklearn.model_selection.RepeatedKFold.rst", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold.rst", "modules/generated/sklearn.model_selection.ShuffleSplit.rst", "modules/generated/sklearn.model_selection.StratifiedGroupKFold.rst", "modules/generated/sklearn.model_selection.StratifiedKFold.rst", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit.rst", "modules/generated/sklearn.model_selection.TimeSeriesSplit.rst", "modules/generated/sklearn.model_selection.TunedThresholdClassifierCV.rst", "modules/generated/sklearn.model_selection.ValidationCurveDisplay.rst", "modules/generated/sklearn.model_selection.check_cv.rst", "modules/generated/sklearn.model_selection.cross_val_predict.rst", "modules/generated/sklearn.model_selection.cross_val_score.rst", "modules/generated/sklearn.model_selection.cross_validate.rst", "modules/generated/sklearn.model_selection.learning_curve.rst", "modules/generated/sklearn.model_selection.permutation_test_score.rst", "modules/generated/sklearn.model_selection.train_test_split.rst", "modules/generated/sklearn.model_selection.validation_curve.rst", "modules/generated/sklearn.multiclass.OneVsOneClassifier.rst", "modules/generated/sklearn.multiclass.OneVsRestClassifier.rst", "modules/generated/sklearn.multiclass.OutputCodeClassifier.rst", "modules/generated/sklearn.multioutput.ClassifierChain.rst", "modules/generated/sklearn.multioutput.MultiOutputClassifier.rst", "modules/generated/sklearn.multioutput.MultiOutputRegressor.rst", "modules/generated/sklearn.multioutput.RegressorChain.rst", "modules/generated/sklearn.naive_bayes.BernoulliNB.rst", "modules/generated/sklearn.naive_bayes.CategoricalNB.rst", "modules/generated/sklearn.naive_bayes.ComplementNB.rst", "modules/generated/sklearn.naive_bayes.GaussianNB.rst", "modules/generated/sklearn.naive_bayes.MultinomialNB.rst", "modules/generated/sklearn.neighbors.BallTree.rst", "modules/generated/sklearn.neighbors.KDTree.rst", "modules/generated/sklearn.neighbors.KNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.KNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.KNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.KernelDensity.rst", "modules/generated/sklearn.neighbors.LocalOutlierFactor.rst", "modules/generated/sklearn.neighbors.NearestCentroid.rst", "modules/generated/sklearn.neighbors.NearestNeighbors.rst", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.kneighbors_graph.rst", "modules/generated/sklearn.neighbors.radius_neighbors_graph.rst", "modules/generated/sklearn.neighbors.sort_graph_by_row_values.rst", "modules/generated/sklearn.neural_network.BernoulliRBM.rst", "modules/generated/sklearn.neural_network.MLPClassifier.rst", "modules/generated/sklearn.neural_network.MLPRegressor.rst", "modules/generated/sklearn.pipeline.FeatureUnion.rst", "modules/generated/sklearn.pipeline.Pipeline.rst", "modules/generated/sklearn.pipeline.make_pipeline.rst", "modules/generated/sklearn.pipeline.make_union.rst", "modules/generated/sklearn.preprocessing.Binarizer.rst", "modules/generated/sklearn.preprocessing.FunctionTransformer.rst", "modules/generated/sklearn.preprocessing.KBinsDiscretizer.rst", "modules/generated/sklearn.preprocessing.KernelCenterer.rst", "modules/generated/sklearn.preprocessing.LabelBinarizer.rst", "modules/generated/sklearn.preprocessing.LabelEncoder.rst", "modules/generated/sklearn.preprocessing.MaxAbsScaler.rst", "modules/generated/sklearn.preprocessing.MinMaxScaler.rst", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer.rst", "modules/generated/sklearn.preprocessing.Normalizer.rst", "modules/generated/sklearn.preprocessing.OneHotEncoder.rst", "modules/generated/sklearn.preprocessing.OrdinalEncoder.rst", "modules/generated/sklearn.preprocessing.PolynomialFeatures.rst", "modules/generated/sklearn.preprocessing.PowerTransformer.rst", "modules/generated/sklearn.preprocessing.QuantileTransformer.rst", "modules/generated/sklearn.preprocessing.RobustScaler.rst", "modules/generated/sklearn.preprocessing.SplineTransformer.rst", "modules/generated/sklearn.preprocessing.StandardScaler.rst", "modules/generated/sklearn.preprocessing.TargetEncoder.rst", "modules/generated/sklearn.preprocessing.add_dummy_feature.rst", "modules/generated/sklearn.preprocessing.binarize.rst", "modules/generated/sklearn.preprocessing.label_binarize.rst", "modules/generated/sklearn.preprocessing.maxabs_scale.rst", "modules/generated/sklearn.preprocessing.minmax_scale.rst", "modules/generated/sklearn.preprocessing.normalize.rst", "modules/generated/sklearn.preprocessing.power_transform.rst", "modules/generated/sklearn.preprocessing.quantile_transform.rst", "modules/generated/sklearn.preprocessing.robust_scale.rst", "modules/generated/sklearn.preprocessing.scale.rst", "modules/generated/sklearn.random_projection.GaussianRandomProjection.rst", "modules/generated/sklearn.random_projection.SparseRandomProjection.rst", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim.rst", "modules/generated/sklearn.semi_supervised.LabelPropagation.rst", "modules/generated/sklearn.semi_supervised.LabelSpreading.rst", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier.rst", "modules/generated/sklearn.set_config.rst", "modules/generated/sklearn.show_versions.rst", "modules/generated/sklearn.svm.LinearSVC.rst", "modules/generated/sklearn.svm.LinearSVR.rst", "modules/generated/sklearn.svm.NuSVC.rst", "modules/generated/sklearn.svm.NuSVR.rst", "modules/generated/sklearn.svm.OneClassSVM.rst", "modules/generated/sklearn.svm.SVC.rst", "modules/generated/sklearn.svm.SVR.rst", "modules/generated/sklearn.svm.l1_min_c.rst", "modules/generated/sklearn.tree.DecisionTreeClassifier.rst", "modules/generated/sklearn.tree.DecisionTreeRegressor.rst", "modules/generated/sklearn.tree.ExtraTreeClassifier.rst", "modules/generated/sklearn.tree.ExtraTreeRegressor.rst", "modules/generated/sklearn.tree.export_graphviz.rst", "modules/generated/sklearn.tree.export_text.rst", "modules/generated/sklearn.tree.plot_tree.rst", "modules/generated/sklearn.utils.Bunch.rst", "modules/generated/sklearn.utils.ClassifierTags.rst", "modules/generated/sklearn.utils.InputTags.rst", "modules/generated/sklearn.utils.RegressorTags.rst", "modules/generated/sklearn.utils.Tags.rst", "modules/generated/sklearn.utils.TargetTags.rst", "modules/generated/sklearn.utils.TransformerTags.rst", "modules/generated/sklearn.utils._safe_indexing.rst", "modules/generated/sklearn.utils.arrayfuncs.min_pos.rst", "modules/generated/sklearn.utils.as_float_array.rst", "modules/generated/sklearn.utils.assert_all_finite.rst", "modules/generated/sklearn.utils.check_X_y.rst", "modules/generated/sklearn.utils.check_array.rst", "modules/generated/sklearn.utils.check_consistent_length.rst", "modules/generated/sklearn.utils.check_random_state.rst", "modules/generated/sklearn.utils.check_scalar.rst", "modules/generated/sklearn.utils.class_weight.compute_class_weight.rst", "modules/generated/sklearn.utils.class_weight.compute_sample_weight.rst", "modules/generated/sklearn.utils.deprecated.rst", "modules/generated/sklearn.utils.discovery.all_displays.rst", "modules/generated/sklearn.utils.discovery.all_estimators.rst", "modules/generated/sklearn.utils.discovery.all_functions.rst", "modules/generated/sklearn.utils.estimator_checks.check_estimator.rst", "modules/generated/sklearn.utils.estimator_checks.estimator_checks_generator.rst", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks.rst", "modules/generated/sklearn.utils.estimator_html_repr.rst", "modules/generated/sklearn.utils.extmath.density.rst", "modules/generated/sklearn.utils.extmath.fast_logdet.rst", "modules/generated/sklearn.utils.extmath.randomized_range_finder.rst", "modules/generated/sklearn.utils.extmath.randomized_svd.rst", "modules/generated/sklearn.utils.extmath.safe_sparse_dot.rst", "modules/generated/sklearn.utils.extmath.weighted_mode.rst", "modules/generated/sklearn.utils.gen_batches.rst", "modules/generated/sklearn.utils.gen_even_slices.rst", "modules/generated/sklearn.utils.get_tags.rst", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length.rst", "modules/generated/sklearn.utils.indexable.rst", "modules/generated/sklearn.utils.metadata_routing.MetadataRequest.rst", "modules/generated/sklearn.utils.metadata_routing.MetadataRouter.rst", "modules/generated/sklearn.utils.metadata_routing.MethodMapping.rst", "modules/generated/sklearn.utils.metadata_routing.get_routing_for_object.rst", "modules/generated/sklearn.utils.metadata_routing.process_routing.rst", "modules/generated/sklearn.utils.metaestimators.available_if.rst", "modules/generated/sklearn.utils.multiclass.is_multilabel.rst", "modules/generated/sklearn.utils.multiclass.type_of_target.rst", "modules/generated/sklearn.utils.multiclass.unique_labels.rst", "modules/generated/sklearn.utils.murmurhash3_32.rst", "modules/generated/sklearn.utils.parallel.Parallel.rst", "modules/generated/sklearn.utils.parallel.delayed.rst", "modules/generated/sklearn.utils.random.sample_without_replacement.rst", "modules/generated/sklearn.utils.resample.rst", "modules/generated/sklearn.utils.safe_mask.rst", "modules/generated/sklearn.utils.safe_sqr.rst", "modules/generated/sklearn.utils.shuffle.rst", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row.rst", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2.rst", "modules/generated/sklearn.utils.validation.check_is_fitted.rst", "modules/generated/sklearn.utils.validation.check_memory.rst", "modules/generated/sklearn.utils.validation.check_symmetric.rst", "modules/generated/sklearn.utils.validation.column_or_1d.rst", "modules/generated/sklearn.utils.validation.has_fit_parameter.rst", "modules/generated/sklearn.utils.validation.validate_data.rst", "modules/grid_search.rst", "modules/impute.rst", "modules/isotonic.rst", "modules/kernel_approximation.rst", "modules/kernel_ridge.rst", "modules/lda_qda.rst", "modules/learning_curve.rst", "modules/linear_model.rst", "modules/manifold.rst", "modules/metrics.rst", "modules/mixture.rst", "modules/model_evaluation.rst", "modules/multiclass.rst", "modules/naive_bayes.rst", "modules/neighbors.rst", "modules/neural_networks_supervised.rst", "modules/neural_networks_unsupervised.rst", "modules/outlier_detection.rst", "modules/partial_dependence.rst", "modules/permutation_importance.rst", "modules/pipeline.rst", "modules/preprocessing.rst", "modules/preprocessing_targets.rst", "modules/random_projection.rst", "modules/semi_supervised.rst", "modules/sgd.rst", "modules/svm.rst", "modules/tree.rst", "modules/unsupervised_reduction.rst", "presentations.rst", "related_projects.rst", "roadmap.rst", "sg_execution_times.rst", "supervised_learning.rst", "support.rst", "testimonials/testimonials.rst", "unsupervised_learning.rst", "user_guide.rst", "visualizations.rst", "whats_new.rst", "whats_new/_contributors.rst", "whats_new/older_versions.rst", "whats_new/v0.13.rst", "whats_new/v0.14.rst", "whats_new/v0.15.rst", "whats_new/v0.16.rst", "whats_new/v0.17.rst", "whats_new/v0.18.rst", "whats_new/v0.19.rst", "whats_new/v0.20.rst", "whats_new/v0.21.rst", "whats_new/v0.22.rst", "whats_new/v0.23.rst", "whats_new/v0.24.rst", "whats_new/v1.0.rst", "whats_new/v1.1.rst", "whats_new/v1.2.rst", "whats_new/v1.3.rst", "whats_new/v1.4.rst", "whats_new/v1.5.rst", "whats_new/v1.6.rst", "whats_new/v1.7.rst"], "indexentries": {"1d": [[386, "term-1d", true]], "1d array": [[386, "term-1d-array", true]], "2d": [[386, "term-2d", true]], "2d array": [[386, "term-2d-array", true]], "__call__() (sklearn.compose.make_column_selector method)": [[463, "sklearn.compose.make_column_selector.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.compoundkernel method)": [[612, "sklearn.gaussian_process.kernels.CompoundKernel.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.constantkernel method)": [[613, "sklearn.gaussian_process.kernels.ConstantKernel.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.dotproduct method)": [[614, "sklearn.gaussian_process.kernels.DotProduct.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.exponentiation method)": [[616, "sklearn.gaussian_process.kernels.Exponentiation.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.expsinesquared method)": [[615, "sklearn.gaussian_process.kernels.ExpSineSquared.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.kernel method)": [[618, "sklearn.gaussian_process.kernels.Kernel.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.matern method)": [[619, "sklearn.gaussian_process.kernels.Matern.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[620, "sklearn.gaussian_process.kernels.PairwiseKernel.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.product method)": [[621, "sklearn.gaussian_process.kernels.Product.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[623, "sklearn.gaussian_process.kernels.RationalQuadratic.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.rbf method)": [[622, "sklearn.gaussian_process.kernels.RBF.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.sum method)": [[624, "sklearn.gaussian_process.kernels.Sum.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.whitekernel method)": [[625, "sklearn.gaussian_process.kernels.WhiteKernel.__call__", false]], "__call__() (sklearn.utils.deprecated method)": [[937, "sklearn.utils.deprecated.__call__", false]], "__call__() (sklearn.utils.parallel.parallel method)": [[966, "sklearn.utils.parallel.Parallel.__call__", false]], "_safe_indexing() (in module sklearn.utils)": [[926, "sklearn.utils._safe_indexing", false]], "accuracy_score() (in module sklearn.metrics)": [[703, "sklearn.metrics.accuracy_score", false]], "adaboostclassifier (class in sklearn.ensemble)": [[551, "sklearn.ensemble.AdaBoostClassifier", false]], "adaboostregressor (class in sklearn.ensemble)": [[552, "sklearn.ensemble.AdaBoostRegressor", false]], "add() (sklearn.utils.metadata_routing.metadatarouter method)": [[957, "sklearn.utils.metadata_routing.MetadataRouter.add", false]], "add() (sklearn.utils.metadata_routing.methodmapping method)": [[958, "sklearn.utils.metadata_routing.MethodMapping.add", false]], "add_dummy_feature() (in module sklearn.preprocessing)": [[886, "sklearn.preprocessing.add_dummy_feature", false]], "add_self_request() (sklearn.utils.metadata_routing.metadatarouter method)": [[957, "sklearn.utils.metadata_routing.MetadataRouter.add_self_request", false]], "additive_chi2_kernel() (in module sklearn.metrics.pairwise)": [[758, "sklearn.metrics.pairwise.additive_chi2_kernel", false]], "additivechi2sampler (class in sklearn.kernel_approximation)": [[638, "sklearn.kernel_approximation.AdditiveChi2Sampler", false]], "adjusted_mutual_info_score() (in module sklearn.metrics)": [[704, "sklearn.metrics.adjusted_mutual_info_score", false]], "adjusted_rand_score() (in module sklearn.metrics)": [[705, "sklearn.metrics.adjusted_rand_score", false]], "affinity_propagation() (in module sklearn.cluster)": [[451, "sklearn.cluster.affinity_propagation", false]], "affinitypropagation (class in sklearn.cluster)": [[437, "sklearn.cluster.AffinityPropagation", false]], "agglomerativeclustering (class in sklearn.cluster)": [[438, "sklearn.cluster.AgglomerativeClustering", false]], "aic() (sklearn.mixture.gaussianmixture method)": [[798, "sklearn.mixture.GaussianMixture.aic", false]], "all_displays() (in module sklearn.utils.discovery)": [[938, "sklearn.utils.discovery.all_displays", false]], "all_estimators() (in module sklearn.utils.discovery)": [[939, "sklearn.utils.discovery.all_estimators", false]], "all_functions() (in module sklearn.utils.discovery)": [[940, "sklearn.utils.discovery.all_functions", false]], "api": [[386, "term-API", true]], "apply() (sklearn.ensemble.extratreesclassifier method)": [[555, "sklearn.ensemble.ExtraTreesClassifier.apply", false]], "apply() (sklearn.ensemble.extratreesregressor method)": [[556, "sklearn.ensemble.ExtraTreesRegressor.apply", false]], "apply() (sklearn.ensemble.gradientboostingclassifier method)": [[557, "sklearn.ensemble.GradientBoostingClassifier.apply", false]], "apply() (sklearn.ensemble.gradientboostingregressor method)": [[558, "sklearn.ensemble.GradientBoostingRegressor.apply", false]], "apply() (sklearn.ensemble.randomforestclassifier method)": [[562, "sklearn.ensemble.RandomForestClassifier.apply", false]], "apply() (sklearn.ensemble.randomforestregressor method)": [[563, "sklearn.ensemble.RandomForestRegressor.apply", false]], "apply() (sklearn.ensemble.randomtreesembedding method)": [[564, "sklearn.ensemble.RandomTreesEmbedding.apply", false]], "apply() (sklearn.tree.decisiontreeclassifier method)": [[912, "sklearn.tree.DecisionTreeClassifier.apply", false]], "apply() (sklearn.tree.decisiontreeregressor method)": [[913, "sklearn.tree.DecisionTreeRegressor.apply", false]], "apply() (sklearn.tree.extratreeclassifier method)": [[914, "sklearn.tree.ExtraTreeClassifier.apply", false]], "apply() (sklearn.tree.extratreeregressor method)": [[915, "sklearn.tree.ExtraTreeRegressor.apply", false]], "ardregression (class in sklearn.linear_model)": [[644, "sklearn.linear_model.ARDRegression", false]], "array-like": [[386, "term-array-like", true]], "as_float_array() (in module sklearn.utils)": [[928, "sklearn.utils.as_float_array", false]], "assert_all_finite() (in module sklearn.utils)": [[929, "sklearn.utils.assert_all_finite", false]], "attribute": [[386, "term-attribute", true]], "attributes": [[386, "term-attributes", true]], "auc() (in module sklearn.metrics)": [[706, "sklearn.metrics.auc", false]], "available_if() (in module sklearn.utils.metaestimators)": [[961, "sklearn.utils.metaestimators.available_if", false]], "average_precision_score() (in module sklearn.metrics)": [[707, "sklearn.metrics.average_precision_score", false]], "backwards compatibility": [[386, "term-backwards-compatibility", true]], "baggingclassifier (class in sklearn.ensemble)": [[553, "sklearn.ensemble.BaggingClassifier", false]], "baggingregressor (class in sklearn.ensemble)": [[554, "sklearn.ensemble.BaggingRegressor", false]], "balanced_accuracy_score() (in module sklearn.metrics)": [[708, "sklearn.metrics.balanced_accuracy_score", false]], "balltree (class in sklearn.neighbors)": [[844, "sklearn.neighbors.BallTree", false]], "baseestimator (class in sklearn.base)": [[418, "sklearn.base.BaseEstimator", false]], "bayesiangaussianmixture (class in sklearn.mixture)": [[797, "sklearn.mixture.BayesianGaussianMixture", false]], "bayesianridge (class in sklearn.linear_model)": [[645, "sklearn.linear_model.BayesianRidge", false]], "bernoullinb (class in sklearn.naive_bayes)": [[839, "sklearn.naive_bayes.BernoulliNB", false]], "bernoullirbm (class in sklearn.neural_network)": [[860, "sklearn.neural_network.BernoulliRBM", false]], "bic() (sklearn.mixture.gaussianmixture method)": [[798, "sklearn.mixture.GaussianMixture.bic", false]], "biclustermixin (class in sklearn.base)": [[419, "sklearn.base.BiclusterMixin", false]], "binarize() (in module sklearn.preprocessing)": [[887, "sklearn.preprocessing.binarize", false]], "binarizer (class in sklearn.preprocessing)": [[867, "sklearn.preprocessing.Binarizer", false]], "binary": [[386, "term-binary", true]], "birch (class in sklearn.cluster)": [[439, "sklearn.cluster.Birch", false]], "bisectingkmeans (class in sklearn.cluster)": [[440, "sklearn.cluster.BisectingKMeans", false]], "bounds (sklearn.gaussian_process.kernels.compoundkernel property)": [[612, "sklearn.gaussian_process.kernels.CompoundKernel.bounds", false]], "bounds (sklearn.gaussian_process.kernels.constantkernel property)": [[613, "sklearn.gaussian_process.kernels.ConstantKernel.bounds", false]], "bounds (sklearn.gaussian_process.kernels.dotproduct property)": [[614, "sklearn.gaussian_process.kernels.DotProduct.bounds", false]], "bounds (sklearn.gaussian_process.kernels.exponentiation property)": [[616, "sklearn.gaussian_process.kernels.Exponentiation.bounds", false]], "bounds (sklearn.gaussian_process.kernels.expsinesquared property)": [[615, "sklearn.gaussian_process.kernels.ExpSineSquared.bounds", false]], "bounds (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[617, "sklearn.gaussian_process.kernels.Hyperparameter.bounds", false]], "bounds (sklearn.gaussian_process.kernels.kernel property)": [[618, "sklearn.gaussian_process.kernels.Kernel.bounds", false]], "bounds (sklearn.gaussian_process.kernels.matern property)": [[619, "sklearn.gaussian_process.kernels.Matern.bounds", false]], "bounds (sklearn.gaussian_process.kernels.pairwisekernel property)": [[620, "sklearn.gaussian_process.kernels.PairwiseKernel.bounds", false]], "bounds (sklearn.gaussian_process.kernels.product property)": [[621, "sklearn.gaussian_process.kernels.Product.bounds", false]], "bounds (sklearn.gaussian_process.kernels.rationalquadratic property)": [[623, "sklearn.gaussian_process.kernels.RationalQuadratic.bounds", false]], "bounds (sklearn.gaussian_process.kernels.rbf property)": [[622, "sklearn.gaussian_process.kernels.RBF.bounds", false]], "bounds (sklearn.gaussian_process.kernels.sum property)": [[624, "sklearn.gaussian_process.kernels.Sum.bounds", false]], "bounds (sklearn.gaussian_process.kernels.whitekernel property)": [[625, "sklearn.gaussian_process.kernels.WhiteKernel.bounds", false]], "brier_score_loss() (in module sklearn.metrics)": [[709, "sklearn.metrics.brier_score_loss", false]], "build_analyzer() (sklearn.feature_extraction.text.countvectorizer method)": [[587, "sklearn.feature_extraction.text.CountVectorizer.build_analyzer", false]], "build_analyzer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[588, "sklearn.feature_extraction.text.HashingVectorizer.build_analyzer", false]], "build_analyzer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[590, "sklearn.feature_extraction.text.TfidfVectorizer.build_analyzer", false]], "build_preprocessor() (sklearn.feature_extraction.text.countvectorizer method)": [[587, "sklearn.feature_extraction.text.CountVectorizer.build_preprocessor", false]], "build_preprocessor() (sklearn.feature_extraction.text.hashingvectorizer method)": [[588, "sklearn.feature_extraction.text.HashingVectorizer.build_preprocessor", false]], "build_preprocessor() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[590, "sklearn.feature_extraction.text.TfidfVectorizer.build_preprocessor", false]], "build_tokenizer() (sklearn.feature_extraction.text.countvectorizer method)": [[587, "sklearn.feature_extraction.text.CountVectorizer.build_tokenizer", false]], "build_tokenizer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[588, "sklearn.feature_extraction.text.HashingVectorizer.build_tokenizer", false]], "build_tokenizer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[590, "sklearn.feature_extraction.text.TfidfVectorizer.build_tokenizer", false]], "bunch (class in sklearn.utils)": [[919, "sklearn.utils.Bunch", false]], "calibratedclassifiercv (class in sklearn.calibration)": [[434, "sklearn.calibration.CalibratedClassifierCV", false]], "calibration_curve() (in module sklearn.calibration)": [[436, "sklearn.calibration.calibration_curve", false]], "calibrationdisplay (class in sklearn.calibration)": [[435, "sklearn.calibration.CalibrationDisplay", false]], "calinski_harabasz_score() (in module sklearn.metrics)": [[710, "sklearn.metrics.calinski_harabasz_score", false]], "callable": [[386, "term-callable", true]], "categorical feature": [[386, "term-categorical-feature", true]], "categoricalnb (class in sklearn.naive_bayes)": [[840, "sklearn.naive_bayes.CategoricalNB", false]], "cca (class in sklearn.cross_decomposition)": [[479, "sklearn.cross_decomposition.CCA", false]], "check_array() (in module sklearn.utils)": [[931, "sklearn.utils.check_array", false]], "check_consistent_length() (in module sklearn.utils)": [[932, "sklearn.utils.check_consistent_length", false]], "check_cv() (in module sklearn.model_selection)": [[824, "sklearn.model_selection.check_cv", false]], "check_estimator() (in module sklearn.utils.estimator_checks)": [[941, "sklearn.utils.estimator_checks.check_estimator", false]], "check_increasing() (in module sklearn.isotonic)": [[636, "sklearn.isotonic.check_increasing", false]], "check_is_fitted() (in module sklearn.utils.validation)": [[982, "sklearn.utils.validation.check_is_fitted", false]], "check_memory() (in module sklearn.utils.validation)": [[983, "sklearn.utils.validation.check_memory", false]], "check_random_state() (in module sklearn.utils)": [[933, "sklearn.utils.check_random_state", false]], "check_scalar() (in module sklearn.utils)": [[934, "sklearn.utils.check_scalar", false]], "check_scoring() (in module sklearn.metrics)": [[711, "sklearn.metrics.check_scoring", false]], "check_symmetric() (in module sklearn.utils.validation)": [[984, "sklearn.utils.validation.check_symmetric", false]], "check_x_y() (in module sklearn.utils)": [[930, "sklearn.utils.check_X_y", false]], "chi2() (in module sklearn.feature_selection)": [[603, "sklearn.feature_selection.chi2", false]], "chi2_kernel() (in module sklearn.metrics.pairwise)": [[759, "sklearn.metrics.pairwise.chi2_kernel", false]], "class_likelihood_ratios() (in module sklearn.metrics)": [[712, "sklearn.metrics.class_likelihood_ratios", false]], "class_weight": [[386, "term-class_weight", true]], "classes_": [[386, "term-classes_", true]], "classification_report() (in module sklearn.metrics)": [[713, "sklearn.metrics.classification_report", false]], "classifier": [[386, "term-classifier", true]], "classifierchain (class in sklearn.multioutput)": [[835, "sklearn.multioutput.ClassifierChain", false]], "classifiermixin (class in sklearn.base)": [[421, "sklearn.base.ClassifierMixin", false]], "classifiers": [[386, "term-classifiers", true]], "classifiertags (class in sklearn.utils)": [[920, "sklearn.utils.ClassifierTags", false]], "classnameprefixfeaturesoutmixin (class in sklearn.base)": [[420, "sklearn.base.ClassNamePrefixFeaturesOutMixin", false]], "clear() (sklearn.utils.bunch method)": [[919, "sklearn.utils.Bunch.clear", false]], "clear_data_home() (in module sklearn.datasets)": [[483, "sklearn.datasets.clear_data_home", false]], "clone": [[386, "term-clone", true]], "clone() (in module sklearn.base)": [[429, "sklearn.base.clone", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.compoundkernel method)": [[612, "sklearn.gaussian_process.kernels.CompoundKernel.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.constantkernel method)": [[613, "sklearn.gaussian_process.kernels.ConstantKernel.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.dotproduct method)": [[614, "sklearn.gaussian_process.kernels.DotProduct.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.exponentiation method)": [[616, "sklearn.gaussian_process.kernels.Exponentiation.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.expsinesquared method)": [[615, "sklearn.gaussian_process.kernels.ExpSineSquared.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.kernel method)": [[618, "sklearn.gaussian_process.kernels.Kernel.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.matern method)": [[619, "sklearn.gaussian_process.kernels.Matern.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[620, "sklearn.gaussian_process.kernels.PairwiseKernel.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.product method)": [[621, "sklearn.gaussian_process.kernels.Product.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[623, "sklearn.gaussian_process.kernels.RationalQuadratic.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.rbf method)": [[622, "sklearn.gaussian_process.kernels.RBF.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.sum method)": [[624, "sklearn.gaussian_process.kernels.Sum.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.whitekernel method)": [[625, "sklearn.gaussian_process.kernels.WhiteKernel.clone_with_theta", false]], "cloned": [[386, "term-cloned", true]], "cluster_optics_dbscan() (in module sklearn.cluster)": [[452, "sklearn.cluster.cluster_optics_dbscan", false]], "cluster_optics_xi() (in module sklearn.cluster)": [[453, "sklearn.cluster.cluster_optics_xi", false]], "clusterer": [[386, "term-clusterer", true]], "clusterers": [[386, "term-clusterers", true]], "clustermixin (class in sklearn.base)": [[422, "sklearn.base.ClusterMixin", false]], "coef_": [[386, "term-coef_", true]], "cohen_kappa_score() (in module sklearn.metrics)": [[716, "sklearn.metrics.cohen_kappa_score", false]], "column_or_1d() (in module sklearn.utils.validation)": [[985, "sklearn.utils.validation.column_or_1d", false]], "columntransformer (class in sklearn.compose)": [[461, "sklearn.compose.ColumnTransformer", false]], "common tests": [[386, "term-common-tests", true]], "complementnb (class in sklearn.naive_bayes)": [[841, "sklearn.naive_bayes.ComplementNB", false]], "completeness_score() (in module sklearn.metrics)": [[717, "sklearn.metrics.completeness_score", false]], "components_": [[386, "term-components_", true]], "compoundkernel (class in sklearn.gaussian_process.kernels)": [[612, "sklearn.gaussian_process.kernels.CompoundKernel", false]], "compute_class_weight() (in module sklearn.utils.class_weight)": [[935, "sklearn.utils.class_weight.compute_class_weight", false]], "compute_optics_graph() (in module sklearn.cluster)": [[454, "sklearn.cluster.compute_optics_graph", false]], "compute_sample_weight() (in module sklearn.utils.class_weight)": [[936, "sklearn.utils.class_weight.compute_sample_weight", false]], "config_context() (in module sklearn)": [[465, "sklearn.config_context", false]], "confusion_matrix() (in module sklearn.metrics)": [[718, "sklearn.metrics.confusion_matrix", false]], "confusionmatrixdisplay (class in sklearn.metrics)": [[697, "sklearn.metrics.ConfusionMatrixDisplay", false]], "consensus_score() (in module sklearn.metrics)": [[719, "sklearn.metrics.consensus_score", false]], "constantkernel (class in sklearn.gaussian_process.kernels)": [[613, "sklearn.gaussian_process.kernels.ConstantKernel", false]], "consumer": [[386, "term-consumer", true]], "consumes() (sklearn.utils.metadata_routing.metadatarequest method)": [[956, "sklearn.utils.metadata_routing.MetadataRequest.consumes", false]], "consumes() (sklearn.utils.metadata_routing.metadatarouter method)": [[957, "sklearn.utils.metadata_routing.MetadataRouter.consumes", false]], "contingency_matrix() (in module sklearn.metrics.cluster)": [[714, "sklearn.metrics.cluster.contingency_matrix", false]], "continuous": [[386, "term-continuous", true]], "continuous multi-output": [[386, "term-continuous-multi-output", true]], "continuous multioutput": [[386, "term-continuous-multioutput", true]], "convergencewarning": [[569, "sklearn.exceptions.ConvergenceWarning", false]], "copy() (sklearn.utils.bunch method)": [[919, "sklearn.utils.Bunch.copy", false]], "correct_covariance() (sklearn.covariance.ellipticenvelope method)": [[466, "sklearn.covariance.EllipticEnvelope.correct_covariance", false]], "correct_covariance() (sklearn.covariance.mincovdet method)": [[471, "sklearn.covariance.MinCovDet.correct_covariance", false]], "cosine_distances() (in module sklearn.metrics.pairwise)": [[760, "sklearn.metrics.pairwise.cosine_distances", false]], "cosine_similarity() (in module sklearn.metrics.pairwise)": [[761, "sklearn.metrics.pairwise.cosine_similarity", false]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeclassifier method)": [[912, "sklearn.tree.DecisionTreeClassifier.cost_complexity_pruning_path", false]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeregressor method)": [[913, "sklearn.tree.DecisionTreeRegressor.cost_complexity_pruning_path", false]], "cost_complexity_pruning_path() (sklearn.tree.extratreeclassifier method)": [[914, "sklearn.tree.ExtraTreeClassifier.cost_complexity_pruning_path", false]], "cost_complexity_pruning_path() (sklearn.tree.extratreeregressor method)": [[915, "sklearn.tree.ExtraTreeRegressor.cost_complexity_pruning_path", false]], "count() (sklearn.gaussian_process.kernels.hyperparameter method)": [[617, "sklearn.gaussian_process.kernels.Hyperparameter.count", false]], "countvectorizer (class in sklearn.feature_extraction.text)": [[587, "sklearn.feature_extraction.text.CountVectorizer", false]], "coverage_error() (in module sklearn.metrics)": [[720, "sklearn.metrics.coverage_error", false]], "cross fitting": [[386, "term-0", true]], "cross validation": [[386, "term-1", true]], "cross-fitting": [[386, "term-cross-fitting", true]], "cross-validation": [[386, "term-cross-validation", true]], "cross-validation estimator": [[386, "term-cross-validation-estimator", true]], "cross-validation generator": [[386, "term-cross-validation-generator", true]], "cross-validation splitter": [[386, "term-cross-validation-splitter", true]], "cross_val_predict() (in module sklearn.model_selection)": [[825, "sklearn.model_selection.cross_val_predict", false]], "cross_val_score() (in module sklearn.model_selection)": [[826, "sklearn.model_selection.cross_val_score", false]], "cross_validate() (in module sklearn.model_selection)": [[827, "sklearn.model_selection.cross_validate", false]], "cv": [[386, "term-cv", true]], "cv splitter": [[386, "term-CV-splitter", true]], "d2_absolute_error_score() (in module sklearn.metrics)": [[721, "sklearn.metrics.d2_absolute_error_score", false]], "d2_log_loss_score() (in module sklearn.metrics)": [[722, "sklearn.metrics.d2_log_loss_score", false]], "d2_pinball_score() (in module sklearn.metrics)": [[723, "sklearn.metrics.d2_pinball_score", false]], "d2_tweedie_score() (in module sklearn.metrics)": [[724, "sklearn.metrics.d2_tweedie_score", false]], "data leakage": [[386, "term-data-leakage", true]], "data type": [[386, "term-data-type", true]], "dataconversionwarning": [[570, "sklearn.exceptions.DataConversionWarning", false]], "datadimensionalitywarning": [[571, "sklearn.exceptions.DataDimensionalityWarning", false]], "davies_bouldin_score() (in module sklearn.metrics)": [[725, "sklearn.metrics.davies_bouldin_score", false]], "dbscan (class in sklearn.cluster)": [[441, "sklearn.cluster.DBSCAN", false]], "dbscan() (in module sklearn.cluster)": [[415, "sklearn.cluster.dbscan", false]], "dbscan_clustering() (sklearn.cluster.hdbscan method)": [[443, "sklearn.cluster.HDBSCAN.dbscan_clustering", false]], "dcg_score() (in module sklearn.metrics)": [[726, "sklearn.metrics.dcg_score", false]], "decision_function": [[386, "term-decision_function", true]], "decision_function() (sklearn.covariance.ellipticenvelope method)": [[466, "sklearn.covariance.EllipticEnvelope.decision_function", false]], "decision_function() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[547, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.decision_function", false]], "decision_function() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[548, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.decision_function", false]], "decision_function() (sklearn.ensemble.adaboostclassifier method)": [[551, "sklearn.ensemble.AdaBoostClassifier.decision_function", false]], "decision_function() (sklearn.ensemble.baggingclassifier method)": [[553, "sklearn.ensemble.BaggingClassifier.decision_function", false]], "decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[557, "sklearn.ensemble.GradientBoostingClassifier.decision_function", false]], "decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[559, "sklearn.ensemble.HistGradientBoostingClassifier.decision_function", false]], "decision_function() (sklearn.ensemble.isolationforest method)": [[561, "sklearn.ensemble.IsolationForest.decision_function", false]], "decision_function() (sklearn.ensemble.stackingclassifier method)": [[565, "sklearn.ensemble.StackingClassifier.decision_function", false]], "decision_function() (sklearn.feature_selection.rfe method)": [[592, "sklearn.feature_selection.RFE.decision_function", false]], "decision_function() (sklearn.feature_selection.rfecv method)": [[593, "sklearn.feature_selection.RFECV.decision_function", false]], "decision_function() (sklearn.linear_model.logisticregression method)": [[658, "sklearn.linear_model.LogisticRegression.decision_function", false]], "decision_function() (sklearn.linear_model.logisticregressioncv method)": [[659, "sklearn.linear_model.LogisticRegressionCV.decision_function", false]], "decision_function() (sklearn.linear_model.passiveaggressiveclassifier method)": [[666, "sklearn.linear_model.PassiveAggressiveClassifier.decision_function", false]], "decision_function() (sklearn.linear_model.perceptron method)": [[668, "sklearn.linear_model.Perceptron.decision_function", false]], "decision_function() (sklearn.linear_model.ridgeclassifier method)": [[674, "sklearn.linear_model.RidgeClassifier.decision_function", false]], "decision_function() (sklearn.linear_model.ridgeclassifiercv method)": [[675, "sklearn.linear_model.RidgeClassifierCV.decision_function", false]], "decision_function() (sklearn.linear_model.sgdclassifier method)": [[676, "sklearn.linear_model.SGDClassifier.decision_function", false]], "decision_function() (sklearn.linear_model.sgdoneclasssvm method)": [[677, "sklearn.linear_model.SGDOneClassSVM.decision_function", false]], "decision_function() (sklearn.model_selection.fixedthresholdclassifier method)": [[799, "sklearn.model_selection.FixedThresholdClassifier.decision_function", false]], "decision_function() (sklearn.model_selection.gridsearchcv method)": [[800, "sklearn.model_selection.GridSearchCV.decision_function", false]], "decision_function() (sklearn.model_selection.halvinggridsearchcv method)": [[803, "sklearn.model_selection.HalvingGridSearchCV.decision_function", false]], "decision_function() (sklearn.model_selection.halvingrandomsearchcv method)": [[804, "sklearn.model_selection.HalvingRandomSearchCV.decision_function", false]], "decision_function() (sklearn.model_selection.randomizedsearchcv method)": [[814, "sklearn.model_selection.RandomizedSearchCV.decision_function", false]], "decision_function() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[822, "sklearn.model_selection.TunedThresholdClassifierCV.decision_function", false]], "decision_function() (sklearn.multiclass.onevsoneclassifier method)": [[832, "sklearn.multiclass.OneVsOneClassifier.decision_function", false]], "decision_function() (sklearn.multiclass.onevsrestclassifier method)": [[833, "sklearn.multiclass.OneVsRestClassifier.decision_function", false]], "decision_function() (sklearn.multioutput.classifierchain method)": [[835, "sklearn.multioutput.ClassifierChain.decision_function", false]], "decision_function() (sklearn.neighbors.localoutlierfactor method)": [[850, "sklearn.neighbors.LocalOutlierFactor.decision_function", false]], "decision_function() (sklearn.neighbors.nearestcentroid method)": [[851, "sklearn.neighbors.NearestCentroid.decision_function", false]], "decision_function() (sklearn.pipeline.pipeline method)": [[864, "sklearn.pipeline.Pipeline.decision_function", false]], "decision_function() (sklearn.semi_supervised.selftrainingclassifier method)": [[901, "sklearn.semi_supervised.SelfTrainingClassifier.decision_function", false]], "decision_function() (sklearn.svm.linearsvc method)": [[904, "sklearn.svm.LinearSVC.decision_function", false]], "decision_function() (sklearn.svm.nusvc method)": [[906, "sklearn.svm.NuSVC.decision_function", false]], "decision_function() (sklearn.svm.oneclasssvm method)": [[908, "sklearn.svm.OneClassSVM.decision_function", false]], "decision_function() (sklearn.svm.svc method)": [[909, "sklearn.svm.SVC.decision_function", false]], "decision_path() (sklearn.ensemble.extratreesclassifier method)": [[555, "sklearn.ensemble.ExtraTreesClassifier.decision_path", false]], "decision_path() (sklearn.ensemble.extratreesregressor method)": [[556, "sklearn.ensemble.ExtraTreesRegressor.decision_path", false]], "decision_path() (sklearn.ensemble.randomforestclassifier method)": [[562, "sklearn.ensemble.RandomForestClassifier.decision_path", false]], "decision_path() (sklearn.ensemble.randomforestregressor method)": [[563, "sklearn.ensemble.RandomForestRegressor.decision_path", false]], "decision_path() (sklearn.ensemble.randomtreesembedding method)": [[564, "sklearn.ensemble.RandomTreesEmbedding.decision_path", false]], "decision_path() (sklearn.tree.decisiontreeclassifier method)": [[912, "sklearn.tree.DecisionTreeClassifier.decision_path", false]], "decision_path() (sklearn.tree.decisiontreeregressor method)": [[913, "sklearn.tree.DecisionTreeRegressor.decision_path", false]], "decision_path() (sklearn.tree.extratreeclassifier method)": [[914, "sklearn.tree.ExtraTreeClassifier.decision_path", false]], "decision_path() (sklearn.tree.extratreeregressor method)": [[915, "sklearn.tree.ExtraTreeRegressor.decision_path", false]], "decisionboundarydisplay (class in sklearn.inspection)": [[631, "sklearn.inspection.DecisionBoundaryDisplay", false]], "decisiontreeclassifier (class in sklearn.tree)": [[912, "sklearn.tree.DecisionTreeClassifier", false]], "decisiontreeregressor (class in sklearn.tree)": [[913, "sklearn.tree.DecisionTreeRegressor", false]], "decode() (sklearn.feature_extraction.text.countvectorizer method)": [[587, "sklearn.feature_extraction.text.CountVectorizer.decode", false]], "decode() (sklearn.feature_extraction.text.hashingvectorizer method)": [[588, "sklearn.feature_extraction.text.HashingVectorizer.decode", false]], "decode() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[590, "sklearn.feature_extraction.text.TfidfVectorizer.decode", false]], "delayed() (in module sklearn.utils.parallel)": [[967, "sklearn.utils.parallel.delayed", false]], "densify() (sklearn.linear_model.logisticregression method)": [[658, "sklearn.linear_model.LogisticRegression.densify", false]], "densify() (sklearn.linear_model.logisticregressioncv method)": [[659, "sklearn.linear_model.LogisticRegressionCV.densify", false]], "densify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[666, "sklearn.linear_model.PassiveAggressiveClassifier.densify", false]], "densify() (sklearn.linear_model.passiveaggressiveregressor method)": [[667, "sklearn.linear_model.PassiveAggressiveRegressor.densify", false]], "densify() (sklearn.linear_model.perceptron method)": [[668, "sklearn.linear_model.Perceptron.densify", false]], "densify() (sklearn.linear_model.sgdclassifier method)": [[676, "sklearn.linear_model.SGDClassifier.densify", false]], "densify() (sklearn.linear_model.sgdoneclasssvm method)": [[677, "sklearn.linear_model.SGDOneClassSVM.densify", false]], "densify() (sklearn.linear_model.sgdregressor method)": [[678, "sklearn.linear_model.SGDRegressor.densify", false]], "densify() (sklearn.svm.linearsvc method)": [[904, "sklearn.svm.LinearSVC.densify", false]], "density estimator": [[386, "term-density-estimator", true]], "density() (in module sklearn.utils.extmath)": [[945, "sklearn.utils.extmath.density", false]], "densitymixin (class in sklearn.base)": [[423, "sklearn.base.DensityMixin", false]], "deprecated (class in sklearn.utils)": [[937, "sklearn.utils.deprecated", false]], "deprecation": [[386, "term-deprecation", true]], "det_curve() (in module sklearn.metrics)": [[727, "sklearn.metrics.det_curve", false]], "detcurvedisplay (class in sklearn.metrics)": [[698, "sklearn.metrics.DetCurveDisplay", false]], "diag() (sklearn.gaussian_process.kernels.compoundkernel method)": [[612, "sklearn.gaussian_process.kernels.CompoundKernel.diag", false]], "diag() (sklearn.gaussian_process.kernels.constantkernel method)": [[613, "sklearn.gaussian_process.kernels.ConstantKernel.diag", false]], "diag() (sklearn.gaussian_process.kernels.dotproduct method)": [[614, "sklearn.gaussian_process.kernels.DotProduct.diag", false]], "diag() (sklearn.gaussian_process.kernels.exponentiation method)": [[616, "sklearn.gaussian_process.kernels.Exponentiation.diag", false]], "diag() (sklearn.gaussian_process.kernels.expsinesquared method)": [[615, "sklearn.gaussian_process.kernels.ExpSineSquared.diag", false]], "diag() (sklearn.gaussian_process.kernels.kernel method)": [[618, "sklearn.gaussian_process.kernels.Kernel.diag", false]], "diag() (sklearn.gaussian_process.kernels.matern method)": [[619, "sklearn.gaussian_process.kernels.Matern.diag", false]], "diag() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[620, "sklearn.gaussian_process.kernels.PairwiseKernel.diag", false]], "diag() (sklearn.gaussian_process.kernels.product method)": [[621, "sklearn.gaussian_process.kernels.Product.diag", false]], "diag() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[623, "sklearn.gaussian_process.kernels.RationalQuadratic.diag", false]], "diag() (sklearn.gaussian_process.kernels.rbf method)": [[622, "sklearn.gaussian_process.kernels.RBF.diag", false]], "diag() (sklearn.gaussian_process.kernels.sum method)": [[624, "sklearn.gaussian_process.kernels.Sum.diag", false]], "diag() (sklearn.gaussian_process.kernels.whitekernel method)": [[625, "sklearn.gaussian_process.kernels.WhiteKernel.diag", false]], "dict_learning() (in module sklearn.decomposition)": [[543, "sklearn.decomposition.dict_learning", false]], "dict_learning_online() (in module sklearn.decomposition)": [[544, "sklearn.decomposition.dict_learning_online", false]], "dictionarylearning (class in sklearn.decomposition)": [[529, "sklearn.decomposition.DictionaryLearning", false]], "dictvectorizer (class in sklearn.feature_extraction)": [[580, "sklearn.feature_extraction.DictVectorizer", false]], "dimensionality": [[386, "term-dimensionality", true]], "dispatch_next() (sklearn.utils.parallel.parallel method)": [[966, "sklearn.utils.parallel.Parallel.dispatch_next", false]], "dispatch_one_batch() (sklearn.utils.parallel.parallel method)": [[966, "sklearn.utils.parallel.Parallel.dispatch_one_batch", false]], "distance_metrics() (in module sklearn.metrics.pairwise)": [[762, "sklearn.metrics.pairwise.distance_metrics", false]], "distancemetric (class in sklearn.metrics)": [[699, "sklearn.metrics.DistanceMetric", false]], "docstring": [[386, "term-docstring", true]], "dotproduct (class in sklearn.gaussian_process.kernels)": [[614, "sklearn.gaussian_process.kernels.DotProduct", false]], "double underscore": [[386, "term-double-underscore", true]], "double underscore notation": [[386, "term-double-underscore-notation", true]], "dtype": [[386, "term-dtype", true]], "duck typing": [[386, "term-duck-typing", true]], "dummyclassifier (class in sklearn.dummy)": [[549, "sklearn.dummy.DummyClassifier", false]], "dummyregressor (class in sklearn.dummy)": [[550, "sklearn.dummy.DummyRegressor", false]], "dump_svmlight_file() (in module sklearn.datasets)": [[484, "sklearn.datasets.dump_svmlight_file", false]], "early stopping": [[386, "term-early-stopping", true]], "efficiencywarning": [[572, "sklearn.exceptions.EfficiencyWarning", false]], "elasticnet (class in sklearn.linear_model)": [[646, "sklearn.linear_model.ElasticNet", false]], "elasticnetcv (class in sklearn.linear_model)": [[647, "sklearn.linear_model.ElasticNetCV", false]], "ellipticenvelope (class in sklearn.covariance)": [[466, "sklearn.covariance.EllipticEnvelope", false]], "embedding_": [[386, "term-embedding_", true]], "empirical_covariance() (in module sklearn.covariance)": [[474, "sklearn.covariance.empirical_covariance", false]], "empiricalcovariance (class in sklearn.covariance)": [[467, "sklearn.covariance.EmpiricalCovariance", false]], "enet_path() (in module sklearn.linear_model)": [[681, "sklearn.linear_model.enet_path", false]], "error_norm() (sklearn.covariance.ellipticenvelope method)": [[466, "sklearn.covariance.EllipticEnvelope.error_norm", false]], "error_norm() (sklearn.covariance.empiricalcovariance method)": [[467, "sklearn.covariance.EmpiricalCovariance.error_norm", false]], "error_norm() (sklearn.covariance.graphicallasso method)": [[468, "sklearn.covariance.GraphicalLasso.error_norm", false]], "error_norm() (sklearn.covariance.graphicallassocv method)": [[469, "sklearn.covariance.GraphicalLassoCV.error_norm", false]], "error_norm() (sklearn.covariance.ledoitwolf method)": [[470, "sklearn.covariance.LedoitWolf.error_norm", false]], "error_norm() (sklearn.covariance.mincovdet method)": [[471, "sklearn.covariance.MinCovDet.error_norm", false]], "error_norm() (sklearn.covariance.oas method)": [[472, "sklearn.covariance.OAS.error_norm", false]], "error_norm() (sklearn.covariance.shrunkcovariance method)": [[473, "sklearn.covariance.ShrunkCovariance.error_norm", false]], "estimate_bandwidth() (in module sklearn.cluster)": [[455, "sklearn.cluster.estimate_bandwidth", false]], "estimator": [[386, "term-estimator", true]], "estimator instance": [[386, "term-estimator-instance", true]], "estimator tags": [[386, "term-estimator-tags", true]], "estimator_checks_generator() (in module sklearn.utils.estimator_checks)": [[942, "sklearn.utils.estimator_checks.estimator_checks_generator", false]], "estimator_html_repr() (in module sklearn.utils)": [[944, "sklearn.utils.estimator_html_repr", false]], "estimatorcheckfailedwarning": [[573, "sklearn.exceptions.EstimatorCheckFailedWarning", false]], "estimators": [[386, "term-estimators", true]], "euclidean_distances() (in module sklearn.metrics.pairwise)": [[763, "sklearn.metrics.pairwise.euclidean_distances", false]], "evaluation metric": [[386, "term-evaluation-metric", true]], "evaluation metrics": [[386, "term-evaluation-metrics", true]], "examples": [[386, "term-examples", true]], "experimental": [[386, "term-experimental", true]], "explained_variance_score() (in module sklearn.metrics)": [[728, "sklearn.metrics.explained_variance_score", false]], "exponentiation (class in sklearn.gaussian_process.kernels)": [[616, "sklearn.gaussian_process.kernels.Exponentiation", false]], "export_graphviz() (in module sklearn.tree)": [[916, "sklearn.tree.export_graphviz", false]], "export_text() (in module sklearn.tree)": [[917, "sklearn.tree.export_text", false]], "expsinesquared (class in sklearn.gaussian_process.kernels)": [[615, "sklearn.gaussian_process.kernels.ExpSineSquared", false]], "extract_patches_2d() (in module sklearn.feature_extraction.image)": [[583, "sklearn.feature_extraction.image.extract_patches_2d", false]], "extratreeclassifier (class in sklearn.tree)": [[914, "sklearn.tree.ExtraTreeClassifier", false]], "extratreeregressor (class in sklearn.tree)": [[915, "sklearn.tree.ExtraTreeRegressor", false]], "extratreesclassifier (class in sklearn.ensemble)": [[555, "sklearn.ensemble.ExtraTreesClassifier", false]], "extratreesregressor (class in sklearn.ensemble)": [[556, "sklearn.ensemble.ExtraTreesRegressor", false]], "f1_score() (in module sklearn.metrics)": [[729, "sklearn.metrics.f1_score", false]], "f_classif() (in module sklearn.feature_selection)": [[604, "sklearn.feature_selection.f_classif", false]], "f_regression() (in module sklearn.feature_selection)": [[605, "sklearn.feature_selection.f_regression", false]], "factoranalysis (class in sklearn.decomposition)": [[530, "sklearn.decomposition.FactorAnalysis", false]], "fast_logdet() (in module sklearn.utils.extmath)": [[946, "sklearn.utils.extmath.fast_logdet", false]], "fastica (class in sklearn.decomposition)": [[531, "sklearn.decomposition.FastICA", false]], "fastica() (in module sklearn.decomposition)": [[416, "sklearn.decomposition.fastica", false]], "fbeta_score() (in module sklearn.metrics)": [[730, "sklearn.metrics.fbeta_score", false]], "feature": [[386, "term-feature", true]], "feature extractor": [[386, "term-feature-extractor", true]], "feature extractors": [[386, "term-feature-extractors", true]], "feature vector": [[386, "term-feature-vector", true]], "feature_importances_": [[386, "term-feature_importances_", true]], "featureagglomeration (class in sklearn.cluster)": [[442, "sklearn.cluster.FeatureAgglomeration", false]], "featurehasher (class in sklearn.feature_extraction)": [[581, "sklearn.feature_extraction.FeatureHasher", false]], "features": [[386, "term-features", true]], "featureunion (class in sklearn.pipeline)": [[863, "sklearn.pipeline.FeatureUnion", false]], "fetch_20newsgroups() (in module sklearn.datasets)": [[485, "sklearn.datasets.fetch_20newsgroups", false]], "fetch_20newsgroups_vectorized() (in module sklearn.datasets)": [[486, "sklearn.datasets.fetch_20newsgroups_vectorized", false]], "fetch_california_housing() (in module sklearn.datasets)": [[487, "sklearn.datasets.fetch_california_housing", false]], "fetch_covtype() (in module sklearn.datasets)": [[488, "sklearn.datasets.fetch_covtype", false]], "fetch_file() (in module sklearn.datasets)": [[489, "sklearn.datasets.fetch_file", false]], "fetch_kddcup99() (in module sklearn.datasets)": [[490, "sklearn.datasets.fetch_kddcup99", false]], "fetch_lfw_pairs() (in module sklearn.datasets)": [[491, "sklearn.datasets.fetch_lfw_pairs", false]], "fetch_lfw_people() (in module sklearn.datasets)": [[492, "sklearn.datasets.fetch_lfw_people", false]], "fetch_olivetti_faces() (in module sklearn.datasets)": [[493, "sklearn.datasets.fetch_olivetti_faces", false]], "fetch_openml() (in module sklearn.datasets)": [[494, "sklearn.datasets.fetch_openml", false]], "fetch_rcv1() (in module sklearn.datasets)": [[495, "sklearn.datasets.fetch_rcv1", false]], "fetch_species_distributions() (in module sklearn.datasets)": [[496, "sklearn.datasets.fetch_species_distributions", false]], "fit": [[386, "term-fit", true]], "fit() (sklearn.calibration.calibratedclassifiercv method)": [[434, "sklearn.calibration.CalibratedClassifierCV.fit", false]], "fit() (sklearn.cluster.affinitypropagation method)": [[437, "sklearn.cluster.AffinityPropagation.fit", false]], "fit() (sklearn.cluster.agglomerativeclustering method)": [[438, "sklearn.cluster.AgglomerativeClustering.fit", false]], "fit() (sklearn.cluster.birch method)": [[439, "sklearn.cluster.Birch.fit", false]], "fit() (sklearn.cluster.bisectingkmeans method)": [[440, "sklearn.cluster.BisectingKMeans.fit", false]], "fit() (sklearn.cluster.dbscan method)": [[441, "sklearn.cluster.DBSCAN.fit", false]], "fit() (sklearn.cluster.featureagglomeration method)": [[442, "sklearn.cluster.FeatureAgglomeration.fit", false]], "fit() (sklearn.cluster.hdbscan method)": [[443, "sklearn.cluster.HDBSCAN.fit", false]], "fit() (sklearn.cluster.kmeans method)": [[444, "sklearn.cluster.KMeans.fit", false]], "fit() (sklearn.cluster.meanshift method)": [[445, "sklearn.cluster.MeanShift.fit", false]], "fit() (sklearn.cluster.minibatchkmeans method)": [[446, "sklearn.cluster.MiniBatchKMeans.fit", false]], "fit() (sklearn.cluster.optics method)": [[447, "sklearn.cluster.OPTICS.fit", false]], "fit() (sklearn.cluster.spectralbiclustering method)": [[448, "sklearn.cluster.SpectralBiclustering.fit", false]], "fit() (sklearn.cluster.spectralclustering method)": [[449, "sklearn.cluster.SpectralClustering.fit", false]], "fit() (sklearn.cluster.spectralcoclustering method)": [[450, "sklearn.cluster.SpectralCoclustering.fit", false]], "fit() (sklearn.compose.columntransformer method)": [[461, "sklearn.compose.ColumnTransformer.fit", false]], "fit() (sklearn.compose.transformedtargetregressor method)": [[462, "sklearn.compose.TransformedTargetRegressor.fit", false]], "fit() (sklearn.covariance.ellipticenvelope method)": [[466, "sklearn.covariance.EllipticEnvelope.fit", false]], "fit() (sklearn.covariance.empiricalcovariance method)": [[467, "sklearn.covariance.EmpiricalCovariance.fit", false]], "fit() (sklearn.covariance.graphicallasso method)": [[468, "sklearn.covariance.GraphicalLasso.fit", false]], "fit() (sklearn.covariance.graphicallassocv method)": [[469, "sklearn.covariance.GraphicalLassoCV.fit", false]], "fit() (sklearn.covariance.ledoitwolf method)": [[470, "sklearn.covariance.LedoitWolf.fit", false]], "fit() (sklearn.covariance.mincovdet method)": [[471, "sklearn.covariance.MinCovDet.fit", false]], "fit() (sklearn.covariance.oas method)": [[472, "sklearn.covariance.OAS.fit", false]], "fit() (sklearn.covariance.shrunkcovariance method)": [[473, "sklearn.covariance.ShrunkCovariance.fit", false]], "fit() (sklearn.cross_decomposition.cca method)": [[479, "sklearn.cross_decomposition.CCA.fit", false]], "fit() (sklearn.cross_decomposition.plscanonical method)": [[480, "sklearn.cross_decomposition.PLSCanonical.fit", false]], "fit() (sklearn.cross_decomposition.plsregression method)": [[481, "sklearn.cross_decomposition.PLSRegression.fit", false]], "fit() (sklearn.cross_decomposition.plssvd method)": [[482, "sklearn.cross_decomposition.PLSSVD.fit", false]], "fit() (sklearn.decomposition.dictionarylearning method)": [[529, "sklearn.decomposition.DictionaryLearning.fit", false]], "fit() (sklearn.decomposition.factoranalysis method)": [[530, "sklearn.decomposition.FactorAnalysis.fit", false]], "fit() (sklearn.decomposition.fastica method)": [[531, "sklearn.decomposition.FastICA.fit", false]], "fit() (sklearn.decomposition.incrementalpca method)": [[532, "sklearn.decomposition.IncrementalPCA.fit", false]], "fit() (sklearn.decomposition.kernelpca method)": [[533, "sklearn.decomposition.KernelPCA.fit", false]], "fit() (sklearn.decomposition.latentdirichletallocation method)": [[534, "sklearn.decomposition.LatentDirichletAllocation.fit", false]], "fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[535, "sklearn.decomposition.MiniBatchDictionaryLearning.fit", false]], "fit() (sklearn.decomposition.minibatchnmf method)": [[536, "sklearn.decomposition.MiniBatchNMF.fit", false]], "fit() (sklearn.decomposition.minibatchsparsepca method)": [[537, "sklearn.decomposition.MiniBatchSparsePCA.fit", false]], "fit() (sklearn.decomposition.nmf method)": [[538, "sklearn.decomposition.NMF.fit", false]], "fit() (sklearn.decomposition.pca method)": [[539, "sklearn.decomposition.PCA.fit", false]], "fit() (sklearn.decomposition.sparsecoder method)": [[540, "sklearn.decomposition.SparseCoder.fit", false]], "fit() (sklearn.decomposition.sparsepca method)": [[541, "sklearn.decomposition.SparsePCA.fit", false]], "fit() (sklearn.decomposition.truncatedsvd method)": [[542, "sklearn.decomposition.TruncatedSVD.fit", false]], "fit() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[547, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit", false]], "fit() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[548, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit", false]], "fit() (sklearn.dummy.dummyclassifier method)": [[549, "sklearn.dummy.DummyClassifier.fit", false]], "fit() (sklearn.dummy.dummyregressor method)": [[550, "sklearn.dummy.DummyRegressor.fit", false]], "fit() (sklearn.ensemble.adaboostclassifier method)": [[551, "sklearn.ensemble.AdaBoostClassifier.fit", false]], "fit() (sklearn.ensemble.adaboostregressor method)": [[552, "sklearn.ensemble.AdaBoostRegressor.fit", false]], "fit() (sklearn.ensemble.baggingclassifier method)": [[553, "sklearn.ensemble.BaggingClassifier.fit", false]], "fit() (sklearn.ensemble.baggingregressor method)": [[554, "sklearn.ensemble.BaggingRegressor.fit", false]], "fit() (sklearn.ensemble.extratreesclassifier method)": [[555, "sklearn.ensemble.ExtraTreesClassifier.fit", false]], "fit() (sklearn.ensemble.extratreesregressor method)": [[556, "sklearn.ensemble.ExtraTreesRegressor.fit", false]], "fit() (sklearn.ensemble.gradientboostingclassifier method)": [[557, "sklearn.ensemble.GradientBoostingClassifier.fit", false]], "fit() (sklearn.ensemble.gradientboostingregressor method)": [[558, "sklearn.ensemble.GradientBoostingRegressor.fit", false]], "fit() (sklearn.ensemble.histgradientboostingclassifier method)": [[559, "sklearn.ensemble.HistGradientBoostingClassifier.fit", false]], "fit() (sklearn.ensemble.histgradientboostingregressor method)": [[560, "sklearn.ensemble.HistGradientBoostingRegressor.fit", false]], "fit() (sklearn.ensemble.isolationforest method)": [[561, "sklearn.ensemble.IsolationForest.fit", false]], "fit() (sklearn.ensemble.randomforestclassifier method)": [[562, "sklearn.ensemble.RandomForestClassifier.fit", false]], "fit() (sklearn.ensemble.randomforestregressor method)": [[563, "sklearn.ensemble.RandomForestRegressor.fit", false]], "fit() (sklearn.ensemble.randomtreesembedding method)": [[564, "sklearn.ensemble.RandomTreesEmbedding.fit", false]], "fit() (sklearn.ensemble.stackingclassifier method)": [[565, "sklearn.ensemble.StackingClassifier.fit", false]], "fit() (sklearn.ensemble.stackingregressor method)": [[566, "sklearn.ensemble.StackingRegressor.fit", false]], "fit() (sklearn.ensemble.votingclassifier method)": [[567, "sklearn.ensemble.VotingClassifier.fit", false]], "fit() (sklearn.ensemble.votingregressor method)": [[568, "sklearn.ensemble.VotingRegressor.fit", false]], "fit() (sklearn.feature_extraction.dictvectorizer method)": [[580, "sklearn.feature_extraction.DictVectorizer.fit", false]], "fit() (sklearn.feature_extraction.featurehasher method)": [[581, "sklearn.feature_extraction.FeatureHasher.fit", false]], "fit() (sklearn.feature_extraction.image.patchextractor method)": [[582, "sklearn.feature_extraction.image.PatchExtractor.fit", false]], "fit() (sklearn.feature_extraction.text.countvectorizer method)": [[587, "sklearn.feature_extraction.text.CountVectorizer.fit", false]], "fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[588, "sklearn.feature_extraction.text.HashingVectorizer.fit", false]], "fit() (sklearn.feature_extraction.text.tfidftransformer method)": [[589, "sklearn.feature_extraction.text.TfidfTransformer.fit", false]], "fit() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[590, "sklearn.feature_extraction.text.TfidfVectorizer.fit", false]], "fit() (sklearn.feature_selection.genericunivariateselect method)": [[591, "sklearn.feature_selection.GenericUnivariateSelect.fit", false]], "fit() (sklearn.feature_selection.rfe method)": [[592, "sklearn.feature_selection.RFE.fit", false]], "fit() (sklearn.feature_selection.rfecv method)": [[593, "sklearn.feature_selection.RFECV.fit", false]], "fit() (sklearn.feature_selection.selectfdr method)": [[594, "sklearn.feature_selection.SelectFdr.fit", false]], "fit() (sklearn.feature_selection.selectfpr method)": [[595, "sklearn.feature_selection.SelectFpr.fit", false]], "fit() (sklearn.feature_selection.selectfrommodel method)": [[596, "sklearn.feature_selection.SelectFromModel.fit", false]], "fit() (sklearn.feature_selection.selectfwe method)": [[597, "sklearn.feature_selection.SelectFwe.fit", false]], "fit() (sklearn.feature_selection.selectkbest method)": [[598, "sklearn.feature_selection.SelectKBest.fit", false]], "fit() (sklearn.feature_selection.selectpercentile method)": [[599, "sklearn.feature_selection.SelectPercentile.fit", false]], "fit() (sklearn.feature_selection.sequentialfeatureselector method)": [[601, "sklearn.feature_selection.SequentialFeatureSelector.fit", false]], "fit() (sklearn.feature_selection.variancethreshold method)": [[602, "sklearn.feature_selection.VarianceThreshold.fit", false]], "fit() (sklearn.frozen.frozenestimator method)": [[609, "sklearn.frozen.FrozenEstimator.fit", false]], "fit() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[610, "sklearn.gaussian_process.GaussianProcessClassifier.fit", false]], "fit() (sklearn.gaussian_process.gaussianprocessregressor method)": [[611, "sklearn.gaussian_process.GaussianProcessRegressor.fit", false]], "fit() (sklearn.impute.iterativeimputer method)": [[627, "sklearn.impute.IterativeImputer.fit", false]], "fit() (sklearn.impute.knnimputer method)": [[628, "sklearn.impute.KNNImputer.fit", false]], "fit() (sklearn.impute.missingindicator method)": [[629, "sklearn.impute.MissingIndicator.fit", false]], "fit() (sklearn.impute.simpleimputer method)": [[630, "sklearn.impute.SimpleImputer.fit", false]], "fit() (sklearn.isotonic.isotonicregression method)": [[635, "sklearn.isotonic.IsotonicRegression.fit", false]], "fit() (sklearn.kernel_approximation.additivechi2sampler method)": [[638, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit", false]], "fit() (sklearn.kernel_approximation.nystroem method)": [[639, "sklearn.kernel_approximation.Nystroem.fit", false]], "fit() (sklearn.kernel_approximation.polynomialcountsketch method)": [[640, "sklearn.kernel_approximation.PolynomialCountSketch.fit", false]], "fit() (sklearn.kernel_approximation.rbfsampler method)": [[641, "sklearn.kernel_approximation.RBFSampler.fit", false]], "fit() (sklearn.kernel_approximation.skewedchi2sampler method)": [[642, "sklearn.kernel_approximation.SkewedChi2Sampler.fit", false]], "fit() (sklearn.kernel_ridge.kernelridge method)": [[643, "sklearn.kernel_ridge.KernelRidge.fit", false]], "fit() (sklearn.linear_model.ardregression method)": [[644, "sklearn.linear_model.ARDRegression.fit", false]], "fit() (sklearn.linear_model.bayesianridge method)": [[645, "sklearn.linear_model.BayesianRidge.fit", false]], "fit() (sklearn.linear_model.elasticnet method)": [[646, "sklearn.linear_model.ElasticNet.fit", false]], "fit() (sklearn.linear_model.elasticnetcv method)": [[647, "sklearn.linear_model.ElasticNetCV.fit", false]], "fit() (sklearn.linear_model.gammaregressor method)": [[648, "sklearn.linear_model.GammaRegressor.fit", false]], "fit() (sklearn.linear_model.huberregressor method)": [[649, "sklearn.linear_model.HuberRegressor.fit", false]], "fit() (sklearn.linear_model.lars method)": [[650, "sklearn.linear_model.Lars.fit", false]], "fit() (sklearn.linear_model.larscv method)": [[651, "sklearn.linear_model.LarsCV.fit", false]], "fit() (sklearn.linear_model.lasso method)": [[652, "sklearn.linear_model.Lasso.fit", false]], "fit() (sklearn.linear_model.lassocv method)": [[653, "sklearn.linear_model.LassoCV.fit", false]], "fit() (sklearn.linear_model.lassolars method)": [[654, "sklearn.linear_model.LassoLars.fit", false]], "fit() (sklearn.linear_model.lassolarscv method)": [[655, "sklearn.linear_model.LassoLarsCV.fit", false]], "fit() (sklearn.linear_model.lassolarsic method)": [[656, "sklearn.linear_model.LassoLarsIC.fit", false]], "fit() (sklearn.linear_model.linearregression method)": [[657, "sklearn.linear_model.LinearRegression.fit", false]], "fit() (sklearn.linear_model.logisticregression method)": [[658, "sklearn.linear_model.LogisticRegression.fit", false]], "fit() (sklearn.linear_model.logisticregressioncv method)": [[659, "sklearn.linear_model.LogisticRegressionCV.fit", false]], "fit() (sklearn.linear_model.multitaskelasticnet method)": [[660, "sklearn.linear_model.MultiTaskElasticNet.fit", false]], "fit() (sklearn.linear_model.multitaskelasticnetcv method)": [[661, "sklearn.linear_model.MultiTaskElasticNetCV.fit", false]], "fit() (sklearn.linear_model.multitasklasso method)": [[662, "sklearn.linear_model.MultiTaskLasso.fit", false]], "fit() (sklearn.linear_model.multitasklassocv method)": [[663, "sklearn.linear_model.MultiTaskLassoCV.fit", false]], "fit() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[664, "sklearn.linear_model.OrthogonalMatchingPursuit.fit", false]], "fit() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[665, "sklearn.linear_model.OrthogonalMatchingPursuitCV.fit", false]], "fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[666, "sklearn.linear_model.PassiveAggressiveClassifier.fit", false]], "fit() (sklearn.linear_model.passiveaggressiveregressor method)": [[667, "sklearn.linear_model.PassiveAggressiveRegressor.fit", false]], "fit() (sklearn.linear_model.perceptron method)": [[668, "sklearn.linear_model.Perceptron.fit", false]], "fit() (sklearn.linear_model.poissonregressor method)": [[669, "sklearn.linear_model.PoissonRegressor.fit", false]], "fit() (sklearn.linear_model.quantileregressor method)": [[670, "sklearn.linear_model.QuantileRegressor.fit", false]], "fit() (sklearn.linear_model.ransacregressor method)": [[671, "sklearn.linear_model.RANSACRegressor.fit", false]], "fit() (sklearn.linear_model.ridge method)": [[672, "sklearn.linear_model.Ridge.fit", false]], "fit() (sklearn.linear_model.ridgeclassifier method)": [[674, "sklearn.linear_model.RidgeClassifier.fit", false]], "fit() (sklearn.linear_model.ridgeclassifiercv method)": [[675, "sklearn.linear_model.RidgeClassifierCV.fit", false]], "fit() (sklearn.linear_model.ridgecv method)": [[673, "sklearn.linear_model.RidgeCV.fit", false]], "fit() (sklearn.linear_model.sgdclassifier method)": [[676, "sklearn.linear_model.SGDClassifier.fit", false]], "fit() (sklearn.linear_model.sgdoneclasssvm method)": [[677, "sklearn.linear_model.SGDOneClassSVM.fit", false]], "fit() (sklearn.linear_model.sgdregressor method)": [[678, "sklearn.linear_model.SGDRegressor.fit", false]], "fit() (sklearn.linear_model.theilsenregressor method)": [[679, "sklearn.linear_model.TheilSenRegressor.fit", false]], "fit() (sklearn.linear_model.tweedieregressor method)": [[680, "sklearn.linear_model.TweedieRegressor.fit", false]], "fit() (sklearn.manifold.isomap method)": [[688, "sklearn.manifold.Isomap.fit", false]], "fit() (sklearn.manifold.locallylinearembedding method)": [[689, "sklearn.manifold.LocallyLinearEmbedding.fit", false]], "fit() (sklearn.manifold.mds method)": [[690, "sklearn.manifold.MDS.fit", false]], "fit() (sklearn.manifold.spectralembedding method)": [[691, "sklearn.manifold.SpectralEmbedding.fit", false]], "fit() (sklearn.manifold.tsne method)": [[692, "sklearn.manifold.TSNE.fit", false]], "fit() (sklearn.mixture.bayesiangaussianmixture method)": [[797, "sklearn.mixture.BayesianGaussianMixture.fit", false]], "fit() (sklearn.mixture.gaussianmixture method)": [[798, "sklearn.mixture.GaussianMixture.fit", false]], "fit() (sklearn.model_selection.fixedthresholdclassifier method)": [[799, "sklearn.model_selection.FixedThresholdClassifier.fit", false]], "fit() (sklearn.model_selection.gridsearchcv method)": [[800, "sklearn.model_selection.GridSearchCV.fit", false]], "fit() (sklearn.model_selection.halvinggridsearchcv method)": [[803, "sklearn.model_selection.HalvingGridSearchCV.fit", false]], "fit() (sklearn.model_selection.halvingrandomsearchcv method)": [[804, "sklearn.model_selection.HalvingRandomSearchCV.fit", false]], "fit() (sklearn.model_selection.randomizedsearchcv method)": [[814, "sklearn.model_selection.RandomizedSearchCV.fit", false]], "fit() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[822, "sklearn.model_selection.TunedThresholdClassifierCV.fit", false]], "fit() (sklearn.multiclass.onevsoneclassifier method)": [[832, "sklearn.multiclass.OneVsOneClassifier.fit", false]], "fit() (sklearn.multiclass.onevsrestclassifier method)": [[833, "sklearn.multiclass.OneVsRestClassifier.fit", false]], "fit() (sklearn.multiclass.outputcodeclassifier method)": [[834, "sklearn.multiclass.OutputCodeClassifier.fit", false]], "fit() (sklearn.multioutput.classifierchain method)": [[835, "sklearn.multioutput.ClassifierChain.fit", false]], "fit() (sklearn.multioutput.multioutputclassifier method)": [[836, "sklearn.multioutput.MultiOutputClassifier.fit", false]], "fit() (sklearn.multioutput.multioutputregressor method)": [[837, "sklearn.multioutput.MultiOutputRegressor.fit", false]], "fit() (sklearn.multioutput.regressorchain method)": [[838, "sklearn.multioutput.RegressorChain.fit", false]], "fit() (sklearn.naive_bayes.bernoullinb method)": [[839, "sklearn.naive_bayes.BernoulliNB.fit", false]], "fit() (sklearn.naive_bayes.categoricalnb method)": [[840, "sklearn.naive_bayes.CategoricalNB.fit", false]], "fit() (sklearn.naive_bayes.complementnb method)": [[841, "sklearn.naive_bayes.ComplementNB.fit", false]], "fit() (sklearn.naive_bayes.gaussiannb method)": [[842, "sklearn.naive_bayes.GaussianNB.fit", false]], "fit() (sklearn.naive_bayes.multinomialnb method)": [[843, "sklearn.naive_bayes.MultinomialNB.fit", false]], "fit() (sklearn.neighbors.kerneldensity method)": [[849, "sklearn.neighbors.KernelDensity.fit", false]], "fit() (sklearn.neighbors.kneighborsclassifier method)": [[846, "sklearn.neighbors.KNeighborsClassifier.fit", false]], "fit() (sklearn.neighbors.kneighborsregressor method)": [[847, "sklearn.neighbors.KNeighborsRegressor.fit", false]], "fit() (sklearn.neighbors.kneighborstransformer method)": [[848, "sklearn.neighbors.KNeighborsTransformer.fit", false]], "fit() (sklearn.neighbors.localoutlierfactor method)": [[850, "sklearn.neighbors.LocalOutlierFactor.fit", false]], "fit() (sklearn.neighbors.nearestcentroid method)": [[851, "sklearn.neighbors.NearestCentroid.fit", false]], "fit() (sklearn.neighbors.nearestneighbors method)": [[852, "sklearn.neighbors.NearestNeighbors.fit", false]], "fit() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[853, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit", false]], "fit() (sklearn.neighbors.radiusneighborsclassifier method)": [[854, "sklearn.neighbors.RadiusNeighborsClassifier.fit", false]], "fit() (sklearn.neighbors.radiusneighborsregressor method)": [[855, "sklearn.neighbors.RadiusNeighborsRegressor.fit", false]], "fit() (sklearn.neighbors.radiusneighborstransformer method)": [[856, "sklearn.neighbors.RadiusNeighborsTransformer.fit", false]], "fit() (sklearn.neural_network.bernoullirbm method)": [[860, "sklearn.neural_network.BernoulliRBM.fit", false]], "fit() (sklearn.neural_network.mlpclassifier method)": [[861, "sklearn.neural_network.MLPClassifier.fit", false]], "fit() (sklearn.neural_network.mlpregressor method)": [[862, "sklearn.neural_network.MLPRegressor.fit", false]], "fit() (sklearn.pipeline.featureunion method)": [[863, "sklearn.pipeline.FeatureUnion.fit", false]], "fit() (sklearn.pipeline.pipeline method)": [[864, "sklearn.pipeline.Pipeline.fit", false]], "fit() (sklearn.preprocessing.binarizer method)": [[867, "sklearn.preprocessing.Binarizer.fit", false]], "fit() (sklearn.preprocessing.functiontransformer method)": [[868, "sklearn.preprocessing.FunctionTransformer.fit", false]], "fit() (sklearn.preprocessing.kbinsdiscretizer method)": [[869, "sklearn.preprocessing.KBinsDiscretizer.fit", false]], "fit() (sklearn.preprocessing.kernelcenterer method)": [[870, "sklearn.preprocessing.KernelCenterer.fit", false]], "fit() (sklearn.preprocessing.labelbinarizer method)": [[871, "sklearn.preprocessing.LabelBinarizer.fit", false]], "fit() (sklearn.preprocessing.labelencoder method)": [[872, "sklearn.preprocessing.LabelEncoder.fit", false]], "fit() (sklearn.preprocessing.maxabsscaler method)": [[873, "sklearn.preprocessing.MaxAbsScaler.fit", false]], "fit() (sklearn.preprocessing.minmaxscaler method)": [[874, "sklearn.preprocessing.MinMaxScaler.fit", false]], "fit() (sklearn.preprocessing.multilabelbinarizer method)": [[875, "sklearn.preprocessing.MultiLabelBinarizer.fit", false]], "fit() (sklearn.preprocessing.normalizer method)": [[876, "sklearn.preprocessing.Normalizer.fit", false]], "fit() (sklearn.preprocessing.onehotencoder method)": [[877, "sklearn.preprocessing.OneHotEncoder.fit", false]], "fit() (sklearn.preprocessing.ordinalencoder method)": [[878, "sklearn.preprocessing.OrdinalEncoder.fit", false]], "fit() (sklearn.preprocessing.polynomialfeatures method)": [[879, "sklearn.preprocessing.PolynomialFeatures.fit", false]], "fit() (sklearn.preprocessing.powertransformer method)": [[880, "sklearn.preprocessing.PowerTransformer.fit", false]], "fit() (sklearn.preprocessing.quantiletransformer method)": [[881, "sklearn.preprocessing.QuantileTransformer.fit", false]], "fit() (sklearn.preprocessing.robustscaler method)": [[882, "sklearn.preprocessing.RobustScaler.fit", false]], "fit() (sklearn.preprocessing.splinetransformer method)": [[883, "sklearn.preprocessing.SplineTransformer.fit", false]], "fit() (sklearn.preprocessing.standardscaler method)": [[884, "sklearn.preprocessing.StandardScaler.fit", false]], "fit() (sklearn.preprocessing.targetencoder method)": [[885, "sklearn.preprocessing.TargetEncoder.fit", false]], "fit() (sklearn.random_projection.gaussianrandomprojection method)": [[896, "sklearn.random_projection.GaussianRandomProjection.fit", false]], "fit() (sklearn.random_projection.sparserandomprojection method)": [[897, "sklearn.random_projection.SparseRandomProjection.fit", false]], "fit() (sklearn.semi_supervised.labelpropagation method)": [[899, "sklearn.semi_supervised.LabelPropagation.fit", false]], "fit() (sklearn.semi_supervised.labelspreading method)": [[900, "sklearn.semi_supervised.LabelSpreading.fit", false]], "fit() (sklearn.semi_supervised.selftrainingclassifier method)": [[901, "sklearn.semi_supervised.SelfTrainingClassifier.fit", false]], "fit() (sklearn.svm.linearsvc method)": [[904, "sklearn.svm.LinearSVC.fit", false]], "fit() (sklearn.svm.linearsvr method)": [[905, "sklearn.svm.LinearSVR.fit", false]], "fit() (sklearn.svm.nusvc method)": [[906, "sklearn.svm.NuSVC.fit", false]], "fit() (sklearn.svm.nusvr method)": [[907, "sklearn.svm.NuSVR.fit", false]], "fit() (sklearn.svm.oneclasssvm method)": [[908, "sklearn.svm.OneClassSVM.fit", false]], "fit() (sklearn.svm.svc method)": [[909, "sklearn.svm.SVC.fit", false]], "fit() (sklearn.svm.svr method)": [[910, "sklearn.svm.SVR.fit", false]], "fit() (sklearn.tree.decisiontreeclassifier method)": [[912, "sklearn.tree.DecisionTreeClassifier.fit", false]], "fit() (sklearn.tree.decisiontreeregressor method)": [[913, "sklearn.tree.DecisionTreeRegressor.fit", false]], "fit() (sklearn.tree.extratreeclassifier method)": [[914, "sklearn.tree.ExtraTreeClassifier.fit", false]], "fit() (sklearn.tree.extratreeregressor method)": [[915, "sklearn.tree.ExtraTreeRegressor.fit", false]], "fit_predict": [[386, "term-fit_predict", true]], "fit_predict (sklearn.cluster.featureagglomeration property)": [[442, "sklearn.cluster.FeatureAgglomeration.fit_predict", false]], "fit_predict() (sklearn.base.clustermixin method)": [[422, "sklearn.base.ClusterMixin.fit_predict", false]], "fit_predict() (sklearn.base.outliermixin method)": [[426, "sklearn.base.OutlierMixin.fit_predict", false]], "fit_predict() (sklearn.cluster.affinitypropagation method)": [[437, "sklearn.cluster.AffinityPropagation.fit_predict", false]], "fit_predict() (sklearn.cluster.agglomerativeclustering method)": [[438, "sklearn.cluster.AgglomerativeClustering.fit_predict", false]], "fit_predict() (sklearn.cluster.birch method)": [[439, "sklearn.cluster.Birch.fit_predict", false]], "fit_predict() (sklearn.cluster.bisectingkmeans method)": [[440, "sklearn.cluster.BisectingKMeans.fit_predict", false]], "fit_predict() (sklearn.cluster.dbscan method)": [[441, "sklearn.cluster.DBSCAN.fit_predict", false]], "fit_predict() (sklearn.cluster.hdbscan method)": [[443, "sklearn.cluster.HDBSCAN.fit_predict", false]], "fit_predict() (sklearn.cluster.kmeans method)": [[444, "sklearn.cluster.KMeans.fit_predict", false]], "fit_predict() (sklearn.cluster.meanshift method)": [[445, "sklearn.cluster.MeanShift.fit_predict", false]], "fit_predict() (sklearn.cluster.minibatchkmeans method)": [[446, "sklearn.cluster.MiniBatchKMeans.fit_predict", false]], "fit_predict() (sklearn.cluster.optics method)": [[447, "sklearn.cluster.OPTICS.fit_predict", false]], "fit_predict() (sklearn.cluster.spectralclustering method)": [[449, "sklearn.cluster.SpectralClustering.fit_predict", false]], "fit_predict() (sklearn.covariance.ellipticenvelope method)": [[466, "sklearn.covariance.EllipticEnvelope.fit_predict", false]], "fit_predict() (sklearn.ensemble.isolationforest method)": [[561, "sklearn.ensemble.IsolationForest.fit_predict", false]], "fit_predict() (sklearn.linear_model.sgdoneclasssvm method)": [[677, "sklearn.linear_model.SGDOneClassSVM.fit_predict", false]], "fit_predict() (sklearn.mixture.bayesiangaussianmixture method)": [[797, "sklearn.mixture.BayesianGaussianMixture.fit_predict", false]], "fit_predict() (sklearn.mixture.gaussianmixture method)": [[798, "sklearn.mixture.GaussianMixture.fit_predict", false]], "fit_predict() (sklearn.neighbors.localoutlierfactor method)": [[850, "sklearn.neighbors.LocalOutlierFactor.fit_predict", false]], "fit_predict() (sklearn.pipeline.pipeline method)": [[864, "sklearn.pipeline.Pipeline.fit_predict", false]], "fit_predict() (sklearn.svm.oneclasssvm method)": [[908, "sklearn.svm.OneClassSVM.fit_predict", false]], "fit_transform": [[386, "term-fit_transform", true]], "fit_transform() (sklearn.base.transformermixin method)": [[428, "sklearn.base.TransformerMixin.fit_transform", false]], "fit_transform() (sklearn.cluster.birch method)": [[439, "sklearn.cluster.Birch.fit_transform", false]], "fit_transform() (sklearn.cluster.bisectingkmeans method)": [[440, "sklearn.cluster.BisectingKMeans.fit_transform", false]], "fit_transform() (sklearn.cluster.featureagglomeration method)": [[442, "sklearn.cluster.FeatureAgglomeration.fit_transform", false]], "fit_transform() (sklearn.cluster.kmeans method)": [[444, "sklearn.cluster.KMeans.fit_transform", false]], "fit_transform() (sklearn.cluster.minibatchkmeans method)": [[446, "sklearn.cluster.MiniBatchKMeans.fit_transform", false]], "fit_transform() (sklearn.compose.columntransformer method)": [[461, "sklearn.compose.ColumnTransformer.fit_transform", false]], "fit_transform() (sklearn.cross_decomposition.cca method)": [[479, "sklearn.cross_decomposition.CCA.fit_transform", false]], "fit_transform() (sklearn.cross_decomposition.plscanonical method)": [[480, "sklearn.cross_decomposition.PLSCanonical.fit_transform", false]], "fit_transform() (sklearn.cross_decomposition.plsregression method)": [[481, "sklearn.cross_decomposition.PLSRegression.fit_transform", false]], "fit_transform() (sklearn.cross_decomposition.plssvd method)": [[482, "sklearn.cross_decomposition.PLSSVD.fit_transform", false]], "fit_transform() (sklearn.decomposition.dictionarylearning method)": [[529, "sklearn.decomposition.DictionaryLearning.fit_transform", false]], "fit_transform() (sklearn.decomposition.factoranalysis method)": [[530, "sklearn.decomposition.FactorAnalysis.fit_transform", false]], "fit_transform() (sklearn.decomposition.fastica method)": [[531, "sklearn.decomposition.FastICA.fit_transform", false]], "fit_transform() (sklearn.decomposition.incrementalpca method)": [[532, "sklearn.decomposition.IncrementalPCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.kernelpca method)": [[533, "sklearn.decomposition.KernelPCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.latentdirichletallocation method)": [[534, "sklearn.decomposition.LatentDirichletAllocation.fit_transform", false]], "fit_transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[535, "sklearn.decomposition.MiniBatchDictionaryLearning.fit_transform", false]], "fit_transform() (sklearn.decomposition.minibatchnmf method)": [[536, "sklearn.decomposition.MiniBatchNMF.fit_transform", false]], "fit_transform() (sklearn.decomposition.minibatchsparsepca method)": [[537, "sklearn.decomposition.MiniBatchSparsePCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.nmf method)": [[538, "sklearn.decomposition.NMF.fit_transform", false]], "fit_transform() (sklearn.decomposition.pca method)": [[539, "sklearn.decomposition.PCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.sparsecoder method)": [[540, "sklearn.decomposition.SparseCoder.fit_transform", false]], "fit_transform() (sklearn.decomposition.sparsepca method)": [[541, "sklearn.decomposition.SparsePCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.truncatedsvd method)": [[542, "sklearn.decomposition.TruncatedSVD.fit_transform", false]], "fit_transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[547, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit_transform", false]], "fit_transform() (sklearn.ensemble.randomtreesembedding method)": [[564, "sklearn.ensemble.RandomTreesEmbedding.fit_transform", false]], "fit_transform() (sklearn.ensemble.stackingclassifier method)": [[565, "sklearn.ensemble.StackingClassifier.fit_transform", false]], "fit_transform() (sklearn.ensemble.stackingregressor method)": [[566, "sklearn.ensemble.StackingRegressor.fit_transform", false]], "fit_transform() (sklearn.ensemble.votingclassifier method)": [[567, "sklearn.ensemble.VotingClassifier.fit_transform", false]], "fit_transform() (sklearn.ensemble.votingregressor method)": [[568, "sklearn.ensemble.VotingRegressor.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.dictvectorizer method)": [[580, "sklearn.feature_extraction.DictVectorizer.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.featurehasher method)": [[581, "sklearn.feature_extraction.FeatureHasher.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.image.patchextractor method)": [[582, "sklearn.feature_extraction.image.PatchExtractor.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[587, "sklearn.feature_extraction.text.CountVectorizer.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[588, "sklearn.feature_extraction.text.HashingVectorizer.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[589, "sklearn.feature_extraction.text.TfidfTransformer.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[590, "sklearn.feature_extraction.text.TfidfVectorizer.fit_transform", false]], "fit_transform() (sklearn.feature_selection.genericunivariateselect method)": [[591, "sklearn.feature_selection.GenericUnivariateSelect.fit_transform", false]], "fit_transform() (sklearn.feature_selection.rfe method)": [[592, "sklearn.feature_selection.RFE.fit_transform", false]], "fit_transform() (sklearn.feature_selection.rfecv method)": [[593, "sklearn.feature_selection.RFECV.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectfdr method)": [[594, "sklearn.feature_selection.SelectFdr.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectfpr method)": [[595, "sklearn.feature_selection.SelectFpr.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectfrommodel method)": [[596, "sklearn.feature_selection.SelectFromModel.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectfwe method)": [[597, "sklearn.feature_selection.SelectFwe.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectkbest method)": [[598, "sklearn.feature_selection.SelectKBest.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectormixin method)": [[600, "sklearn.feature_selection.SelectorMixin.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectpercentile method)": [[599, "sklearn.feature_selection.SelectPercentile.fit_transform", false]], "fit_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[601, "sklearn.feature_selection.SequentialFeatureSelector.fit_transform", false]], "fit_transform() (sklearn.feature_selection.variancethreshold method)": [[602, "sklearn.feature_selection.VarianceThreshold.fit_transform", false]], "fit_transform() (sklearn.impute.iterativeimputer method)": [[627, "sklearn.impute.IterativeImputer.fit_transform", false]], "fit_transform() (sklearn.impute.knnimputer method)": [[628, "sklearn.impute.KNNImputer.fit_transform", false]], "fit_transform() (sklearn.impute.missingindicator method)": [[629, "sklearn.impute.MissingIndicator.fit_transform", false]], "fit_transform() (sklearn.impute.simpleimputer method)": [[630, "sklearn.impute.SimpleImputer.fit_transform", false]], "fit_transform() (sklearn.isotonic.isotonicregression method)": [[635, "sklearn.isotonic.IsotonicRegression.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[638, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.nystroem method)": [[639, "sklearn.kernel_approximation.Nystroem.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[640, "sklearn.kernel_approximation.PolynomialCountSketch.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.rbfsampler method)": [[641, "sklearn.kernel_approximation.RBFSampler.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[642, "sklearn.kernel_approximation.SkewedChi2Sampler.fit_transform", false]], "fit_transform() (sklearn.manifold.isomap method)": [[688, "sklearn.manifold.Isomap.fit_transform", false]], "fit_transform() (sklearn.manifold.locallylinearembedding method)": [[689, "sklearn.manifold.LocallyLinearEmbedding.fit_transform", false]], "fit_transform() (sklearn.manifold.mds method)": [[690, "sklearn.manifold.MDS.fit_transform", false]], "fit_transform() (sklearn.manifold.spectralembedding method)": [[691, "sklearn.manifold.SpectralEmbedding.fit_transform", false]], "fit_transform() (sklearn.manifold.tsne method)": [[692, "sklearn.manifold.TSNE.fit_transform", false]], "fit_transform() (sklearn.neighbors.kneighborstransformer method)": [[848, "sklearn.neighbors.KNeighborsTransformer.fit_transform", false]], "fit_transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[853, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit_transform", false]], "fit_transform() (sklearn.neighbors.radiusneighborstransformer method)": [[856, "sklearn.neighbors.RadiusNeighborsTransformer.fit_transform", false]], "fit_transform() (sklearn.neural_network.bernoullirbm method)": [[860, "sklearn.neural_network.BernoulliRBM.fit_transform", false]], "fit_transform() (sklearn.pipeline.featureunion method)": [[863, "sklearn.pipeline.FeatureUnion.fit_transform", false]], "fit_transform() (sklearn.pipeline.pipeline method)": [[864, "sklearn.pipeline.Pipeline.fit_transform", false]], "fit_transform() (sklearn.preprocessing.binarizer method)": [[867, "sklearn.preprocessing.Binarizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.functiontransformer method)": [[868, "sklearn.preprocessing.FunctionTransformer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[869, "sklearn.preprocessing.KBinsDiscretizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.kernelcenterer method)": [[870, "sklearn.preprocessing.KernelCenterer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.labelbinarizer method)": [[871, "sklearn.preprocessing.LabelBinarizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.labelencoder method)": [[872, "sklearn.preprocessing.LabelEncoder.fit_transform", false]], "fit_transform() (sklearn.preprocessing.maxabsscaler method)": [[873, "sklearn.preprocessing.MaxAbsScaler.fit_transform", false]], "fit_transform() (sklearn.preprocessing.minmaxscaler method)": [[874, "sklearn.preprocessing.MinMaxScaler.fit_transform", false]], "fit_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[875, "sklearn.preprocessing.MultiLabelBinarizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.normalizer method)": [[876, "sklearn.preprocessing.Normalizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.onehotencoder method)": [[877, "sklearn.preprocessing.OneHotEncoder.fit_transform", false]], "fit_transform() (sklearn.preprocessing.ordinalencoder method)": [[878, "sklearn.preprocessing.OrdinalEncoder.fit_transform", false]], "fit_transform() (sklearn.preprocessing.polynomialfeatures method)": [[879, "sklearn.preprocessing.PolynomialFeatures.fit_transform", false]], "fit_transform() (sklearn.preprocessing.powertransformer method)": [[880, "sklearn.preprocessing.PowerTransformer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.quantiletransformer method)": [[881, "sklearn.preprocessing.QuantileTransformer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.robustscaler method)": [[882, "sklearn.preprocessing.RobustScaler.fit_transform", false]], "fit_transform() (sklearn.preprocessing.splinetransformer method)": [[883, "sklearn.preprocessing.SplineTransformer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.standardscaler method)": [[884, "sklearn.preprocessing.StandardScaler.fit_transform", false]], "fit_transform() (sklearn.preprocessing.targetencoder method)": [[885, "sklearn.preprocessing.TargetEncoder.fit_transform", false]], "fit_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[896, "sklearn.random_projection.GaussianRandomProjection.fit_transform", false]], "fit_transform() (sklearn.random_projection.sparserandomprojection method)": [[897, "sklearn.random_projection.SparseRandomProjection.fit_transform", false]], "fitfailedwarning": [[574, "sklearn.exceptions.FitFailedWarning", false]], "fitted": [[386, "term-fitted", true]], "fitting": [[386, "term-fitting", true]], "fixed (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[617, "sklearn.gaussian_process.kernels.Hyperparameter.fixed", false]], "fixedthresholdclassifier (class in sklearn.model_selection)": [[799, "sklearn.model_selection.FixedThresholdClassifier", false]], "format() (sklearn.utils.parallel.parallel method)": [[966, "sklearn.utils.parallel.Parallel.format", false]], "fowlkes_mallows_score() (in module sklearn.metrics)": [[731, "sklearn.metrics.fowlkes_mallows_score", false]], "from_cv_results() (sklearn.metrics.roccurvedisplay class method)": [[702, "sklearn.metrics.RocCurveDisplay.from_cv_results", false]], "from_estimator() (sklearn.calibration.calibrationdisplay class method)": [[435, "sklearn.calibration.CalibrationDisplay.from_estimator", false]], "from_estimator() (sklearn.inspection.decisionboundarydisplay class method)": [[631, "sklearn.inspection.DecisionBoundaryDisplay.from_estimator", false]], "from_estimator() (sklearn.inspection.partialdependencedisplay class method)": [[632, "sklearn.inspection.PartialDependenceDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.confusionmatrixdisplay class method)": [[697, "sklearn.metrics.ConfusionMatrixDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.detcurvedisplay class method)": [[698, "sklearn.metrics.DetCurveDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.precisionrecalldisplay class method)": [[700, "sklearn.metrics.PrecisionRecallDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.predictionerrordisplay class method)": [[701, "sklearn.metrics.PredictionErrorDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.roccurvedisplay class method)": [[702, "sklearn.metrics.RocCurveDisplay.from_estimator", false]], "from_estimator() (sklearn.model_selection.learningcurvedisplay class method)": [[806, "sklearn.model_selection.LearningCurveDisplay.from_estimator", false]], "from_estimator() (sklearn.model_selection.validationcurvedisplay class method)": [[823, "sklearn.model_selection.ValidationCurveDisplay.from_estimator", false]], "from_predictions() (sklearn.calibration.calibrationdisplay class method)": [[435, "sklearn.calibration.CalibrationDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.confusionmatrixdisplay class method)": [[697, "sklearn.metrics.ConfusionMatrixDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.detcurvedisplay class method)": [[698, "sklearn.metrics.DetCurveDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.precisionrecalldisplay class method)": [[700, "sklearn.metrics.PrecisionRecallDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.predictionerrordisplay class method)": [[701, "sklearn.metrics.PredictionErrorDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.roccurvedisplay class method)": [[702, "sklearn.metrics.RocCurveDisplay.from_predictions", false]], "fromkeys() (sklearn.utils.bunch method)": [[919, "sklearn.utils.Bunch.fromkeys", false]], "frozenestimator (class in sklearn.frozen)": [[609, "sklearn.frozen.FrozenEstimator", false]], "function": [[386, "term-function", true]], "functiontransformer (class in sklearn.preprocessing)": [[868, "sklearn.preprocessing.FunctionTransformer", false]], "gallery": [[386, "term-gallery", true]], "gammaregressor (class in sklearn.linear_model)": [[648, "sklearn.linear_model.GammaRegressor", false]], "gaussianmixture (class in sklearn.mixture)": [[798, "sklearn.mixture.GaussianMixture", false]], "gaussiannb (class in sklearn.naive_bayes)": [[842, "sklearn.naive_bayes.GaussianNB", false]], "gaussianprocessclassifier (class in sklearn.gaussian_process)": [[610, "sklearn.gaussian_process.GaussianProcessClassifier", false]], "gaussianprocessregressor (class in sklearn.gaussian_process)": [[611, "sklearn.gaussian_process.GaussianProcessRegressor", false]], "gaussianrandomprojection (class in sklearn.random_projection)": [[896, "sklearn.random_projection.GaussianRandomProjection", false]], "gen_batches() (in module sklearn.utils)": [[951, "sklearn.utils.gen_batches", false]], "gen_even_slices() (in module sklearn.utils)": [[952, "sklearn.utils.gen_even_slices", false]], "genericunivariateselect (class in sklearn.feature_selection)": [[591, "sklearn.feature_selection.GenericUnivariateSelect", false]], "get() (sklearn.utils.bunch method)": [[919, "sklearn.utils.Bunch.get", false]], "get_arrays() (sklearn.neighbors.balltree method)": [[844, "sklearn.neighbors.BallTree.get_arrays", false]], "get_arrays() (sklearn.neighbors.kdtree method)": [[845, "sklearn.neighbors.KDTree.get_arrays", false]], "get_config() (in module sklearn)": [[626, "sklearn.get_config", false]], "get_covariance() (sklearn.decomposition.factoranalysis method)": [[530, "sklearn.decomposition.FactorAnalysis.get_covariance", false]], "get_covariance() (sklearn.decomposition.incrementalpca method)": [[532, "sklearn.decomposition.IncrementalPCA.get_covariance", false]], "get_covariance() (sklearn.decomposition.pca method)": [[539, "sklearn.decomposition.PCA.get_covariance", false]], "get_data_home() (in module sklearn.datasets)": [[497, "sklearn.datasets.get_data_home", false]], "get_depth() (sklearn.tree.decisiontreeclassifier method)": [[912, "sklearn.tree.DecisionTreeClassifier.get_depth", false]], "get_depth() (sklearn.tree.decisiontreeregressor method)": [[913, "sklearn.tree.DecisionTreeRegressor.get_depth", false]], "get_depth() (sklearn.tree.extratreeclassifier method)": [[914, "sklearn.tree.ExtraTreeClassifier.get_depth", false]], "get_depth() (sklearn.tree.extratreeregressor method)": [[915, "sklearn.tree.ExtraTreeRegressor.get_depth", false]], "get_feature_names_out": [[386, "term-get_feature_names_out", true]], "get_feature_names_out() (sklearn.base.classnameprefixfeaturesoutmixin method)": [[420, "sklearn.base.ClassNamePrefixFeaturesOutMixin.get_feature_names_out", false]], "get_feature_names_out() (sklearn.base.onetoonefeaturemixin method)": [[425, "sklearn.base.OneToOneFeatureMixin.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.birch method)": [[439, "sklearn.cluster.Birch.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.bisectingkmeans method)": [[440, "sklearn.cluster.BisectingKMeans.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.featureagglomeration method)": [[442, "sklearn.cluster.FeatureAgglomeration.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.kmeans method)": [[444, "sklearn.cluster.KMeans.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.minibatchkmeans method)": [[446, "sklearn.cluster.MiniBatchKMeans.get_feature_names_out", false]], "get_feature_names_out() (sklearn.compose.columntransformer method)": [[461, "sklearn.compose.ColumnTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cross_decomposition.cca method)": [[479, "sklearn.cross_decomposition.CCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cross_decomposition.plscanonical method)": [[480, "sklearn.cross_decomposition.PLSCanonical.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cross_decomposition.plsregression method)": [[481, "sklearn.cross_decomposition.PLSRegression.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cross_decomposition.plssvd method)": [[482, "sklearn.cross_decomposition.PLSSVD.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.dictionarylearning method)": [[529, "sklearn.decomposition.DictionaryLearning.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.factoranalysis method)": [[530, "sklearn.decomposition.FactorAnalysis.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.fastica method)": [[531, "sklearn.decomposition.FastICA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.incrementalpca method)": [[532, "sklearn.decomposition.IncrementalPCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.kernelpca method)": [[533, "sklearn.decomposition.KernelPCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.latentdirichletallocation method)": [[534, "sklearn.decomposition.LatentDirichletAllocation.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.minibatchdictionarylearning method)": [[535, "sklearn.decomposition.MiniBatchDictionaryLearning.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.minibatchnmf method)": [[536, "sklearn.decomposition.MiniBatchNMF.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.minibatchsparsepca method)": [[537, "sklearn.decomposition.MiniBatchSparsePCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.nmf method)": [[538, "sklearn.decomposition.NMF.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.pca method)": [[539, "sklearn.decomposition.PCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.sparsecoder method)": [[540, "sklearn.decomposition.SparseCoder.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.sparsepca method)": [[541, "sklearn.decomposition.SparsePCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.truncatedsvd method)": [[542, "sklearn.decomposition.TruncatedSVD.get_feature_names_out", false]], "get_feature_names_out() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[547, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.randomtreesembedding method)": [[564, "sklearn.ensemble.RandomTreesEmbedding.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.stackingclassifier method)": [[565, "sklearn.ensemble.StackingClassifier.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.stackingregressor method)": [[566, "sklearn.ensemble.StackingRegressor.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.votingclassifier method)": [[567, "sklearn.ensemble.VotingClassifier.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.votingregressor method)": [[568, "sklearn.ensemble.VotingRegressor.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_extraction.dictvectorizer method)": [[580, "sklearn.feature_extraction.DictVectorizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_extraction.text.countvectorizer method)": [[587, "sklearn.feature_extraction.text.CountVectorizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidftransformer method)": [[589, "sklearn.feature_extraction.text.TfidfTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[590, "sklearn.feature_extraction.text.TfidfVectorizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.genericunivariateselect method)": [[591, "sklearn.feature_selection.GenericUnivariateSelect.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.rfe method)": [[592, "sklearn.feature_selection.RFE.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.rfecv method)": [[593, "sklearn.feature_selection.RFECV.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectfdr method)": [[594, "sklearn.feature_selection.SelectFdr.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectfpr method)": [[595, "sklearn.feature_selection.SelectFpr.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectfrommodel method)": [[596, "sklearn.feature_selection.SelectFromModel.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectfwe method)": [[597, "sklearn.feature_selection.SelectFwe.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectkbest method)": [[598, "sklearn.feature_selection.SelectKBest.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectormixin method)": [[600, "sklearn.feature_selection.SelectorMixin.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectpercentile method)": [[599, "sklearn.feature_selection.SelectPercentile.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.sequentialfeatureselector method)": [[601, "sklearn.feature_selection.SequentialFeatureSelector.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.variancethreshold method)": [[602, "sklearn.feature_selection.VarianceThreshold.get_feature_names_out", false]], "get_feature_names_out() (sklearn.impute.iterativeimputer method)": [[627, "sklearn.impute.IterativeImputer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.impute.knnimputer method)": [[628, "sklearn.impute.KNNImputer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.impute.missingindicator method)": [[629, "sklearn.impute.MissingIndicator.get_feature_names_out", false]], "get_feature_names_out() (sklearn.impute.simpleimputer method)": [[630, "sklearn.impute.SimpleImputer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.isotonic.isotonicregression method)": [[635, "sklearn.isotonic.IsotonicRegression.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.additivechi2sampler method)": [[638, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.nystroem method)": [[639, "sklearn.kernel_approximation.Nystroem.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.polynomialcountsketch method)": [[640, "sklearn.kernel_approximation.PolynomialCountSketch.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.rbfsampler method)": [[641, "sklearn.kernel_approximation.RBFSampler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.skewedchi2sampler method)": [[642, "sklearn.kernel_approximation.SkewedChi2Sampler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.manifold.isomap method)": [[688, "sklearn.manifold.Isomap.get_feature_names_out", false]], "get_feature_names_out() (sklearn.manifold.locallylinearembedding method)": [[689, "sklearn.manifold.LocallyLinearEmbedding.get_feature_names_out", false]], "get_feature_names_out() (sklearn.manifold.tsne method)": [[692, "sklearn.manifold.TSNE.get_feature_names_out", false]], "get_feature_names_out() (sklearn.neighbors.kneighborstransformer method)": [[848, "sklearn.neighbors.KNeighborsTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[853, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_feature_names_out", false]], "get_feature_names_out() (sklearn.neighbors.radiusneighborstransformer method)": [[856, "sklearn.neighbors.RadiusNeighborsTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.neural_network.bernoullirbm method)": [[860, "sklearn.neural_network.BernoulliRBM.get_feature_names_out", false]], "get_feature_names_out() (sklearn.pipeline.featureunion method)": [[863, "sklearn.pipeline.FeatureUnion.get_feature_names_out", false]], "get_feature_names_out() (sklearn.pipeline.pipeline method)": [[864, "sklearn.pipeline.Pipeline.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.binarizer method)": [[867, "sklearn.preprocessing.Binarizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.functiontransformer method)": [[868, "sklearn.preprocessing.FunctionTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.kbinsdiscretizer method)": [[869, "sklearn.preprocessing.KBinsDiscretizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.kernelcenterer method)": [[870, "sklearn.preprocessing.KernelCenterer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.maxabsscaler method)": [[873, "sklearn.preprocessing.MaxAbsScaler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.minmaxscaler method)": [[874, "sklearn.preprocessing.MinMaxScaler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.normalizer method)": [[876, "sklearn.preprocessing.Normalizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.onehotencoder method)": [[877, "sklearn.preprocessing.OneHotEncoder.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.ordinalencoder method)": [[878, "sklearn.preprocessing.OrdinalEncoder.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.polynomialfeatures method)": [[879, "sklearn.preprocessing.PolynomialFeatures.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.powertransformer method)": [[880, "sklearn.preprocessing.PowerTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.quantiletransformer method)": [[881, "sklearn.preprocessing.QuantileTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.robustscaler method)": [[882, "sklearn.preprocessing.RobustScaler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.splinetransformer method)": [[883, "sklearn.preprocessing.SplineTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.standardscaler method)": [[884, "sklearn.preprocessing.StandardScaler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.targetencoder method)": [[885, "sklearn.preprocessing.TargetEncoder.get_feature_names_out", false]], "get_feature_names_out() (sklearn.random_projection.gaussianrandomprojection method)": [[896, "sklearn.random_projection.GaussianRandomProjection.get_feature_names_out", false]], "get_feature_names_out() (sklearn.random_projection.sparserandomprojection method)": [[897, "sklearn.random_projection.SparseRandomProjection.get_feature_names_out", false]], "get_indices() (sklearn.base.biclustermixin method)": [[419, "sklearn.base.BiclusterMixin.get_indices", false]], "get_indices() (sklearn.cluster.spectralbiclustering method)": [[448, "sklearn.cluster.SpectralBiclustering.get_indices", false]], "get_indices() (sklearn.cluster.spectralcoclustering method)": [[450, "sklearn.cluster.SpectralCoclustering.get_indices", false]], "get_metadata_routing() (sklearn.base.baseestimator method)": [[418, "sklearn.base.BaseEstimator.get_metadata_routing", false]], "get_metadata_routing() (sklearn.calibration.calibratedclassifiercv method)": [[434, "sklearn.calibration.CalibratedClassifierCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.affinitypropagation method)": [[437, "sklearn.cluster.AffinityPropagation.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.agglomerativeclustering method)": [[438, "sklearn.cluster.AgglomerativeClustering.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.birch method)": [[439, "sklearn.cluster.Birch.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.bisectingkmeans method)": [[440, "sklearn.cluster.BisectingKMeans.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.dbscan method)": [[441, "sklearn.cluster.DBSCAN.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.featureagglomeration method)": [[442, "sklearn.cluster.FeatureAgglomeration.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.hdbscan method)": [[443, "sklearn.cluster.HDBSCAN.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.kmeans method)": [[444, "sklearn.cluster.KMeans.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.meanshift method)": [[445, "sklearn.cluster.MeanShift.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.minibatchkmeans method)": [[446, "sklearn.cluster.MiniBatchKMeans.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.optics method)": [[447, "sklearn.cluster.OPTICS.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.spectralbiclustering method)": [[448, "sklearn.cluster.SpectralBiclustering.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.spectralclustering method)": [[449, "sklearn.cluster.SpectralClustering.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.spectralcoclustering method)": [[450, "sklearn.cluster.SpectralCoclustering.get_metadata_routing", false]], "get_metadata_routing() (sklearn.compose.columntransformer method)": [[461, "sklearn.compose.ColumnTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.compose.transformedtargetregressor method)": [[462, "sklearn.compose.TransformedTargetRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.ellipticenvelope method)": [[466, "sklearn.covariance.EllipticEnvelope.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.empiricalcovariance method)": [[467, "sklearn.covariance.EmpiricalCovariance.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.graphicallasso method)": [[468, "sklearn.covariance.GraphicalLasso.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.graphicallassocv method)": [[469, "sklearn.covariance.GraphicalLassoCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.ledoitwolf method)": [[470, "sklearn.covariance.LedoitWolf.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.mincovdet method)": [[471, "sklearn.covariance.MinCovDet.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.oas method)": [[472, "sklearn.covariance.OAS.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.shrunkcovariance method)": [[473, "sklearn.covariance.ShrunkCovariance.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cross_decomposition.cca method)": [[479, "sklearn.cross_decomposition.CCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cross_decomposition.plscanonical method)": [[480, "sklearn.cross_decomposition.PLSCanonical.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cross_decomposition.plsregression method)": [[481, "sklearn.cross_decomposition.PLSRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cross_decomposition.plssvd method)": [[482, "sklearn.cross_decomposition.PLSSVD.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.dictionarylearning method)": [[529, "sklearn.decomposition.DictionaryLearning.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.factoranalysis method)": [[530, "sklearn.decomposition.FactorAnalysis.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.fastica method)": [[531, "sklearn.decomposition.FastICA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.incrementalpca method)": [[532, "sklearn.decomposition.IncrementalPCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.kernelpca method)": [[533, "sklearn.decomposition.KernelPCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.latentdirichletallocation method)": [[534, "sklearn.decomposition.LatentDirichletAllocation.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.minibatchdictionarylearning method)": [[535, "sklearn.decomposition.MiniBatchDictionaryLearning.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.minibatchnmf method)": [[536, "sklearn.decomposition.MiniBatchNMF.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.minibatchsparsepca method)": [[537, "sklearn.decomposition.MiniBatchSparsePCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.nmf method)": [[538, "sklearn.decomposition.NMF.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.pca method)": [[539, "sklearn.decomposition.PCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.sparsecoder method)": [[540, "sklearn.decomposition.SparseCoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.sparsepca method)": [[541, "sklearn.decomposition.SparsePCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.truncatedsvd method)": [[542, "sklearn.decomposition.TruncatedSVD.get_metadata_routing", false]], "get_metadata_routing() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[547, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_metadata_routing", false]], "get_metadata_routing() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[548, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.get_metadata_routing", false]], "get_metadata_routing() (sklearn.dummy.dummyclassifier method)": [[549, "sklearn.dummy.DummyClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.dummy.dummyregressor method)": [[550, "sklearn.dummy.DummyRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.adaboostclassifier method)": [[551, "sklearn.ensemble.AdaBoostClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.adaboostregressor method)": [[552, "sklearn.ensemble.AdaBoostRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.baggingclassifier method)": [[553, "sklearn.ensemble.BaggingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.baggingregressor method)": [[554, "sklearn.ensemble.BaggingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.extratreesclassifier method)": [[555, "sklearn.ensemble.ExtraTreesClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.extratreesregressor method)": [[556, "sklearn.ensemble.ExtraTreesRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.gradientboostingclassifier method)": [[557, "sklearn.ensemble.GradientBoostingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.gradientboostingregressor method)": [[558, "sklearn.ensemble.GradientBoostingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.histgradientboostingclassifier method)": [[559, "sklearn.ensemble.HistGradientBoostingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.histgradientboostingregressor method)": [[560, "sklearn.ensemble.HistGradientBoostingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.isolationforest method)": [[561, "sklearn.ensemble.IsolationForest.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.randomforestclassifier method)": [[562, "sklearn.ensemble.RandomForestClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.randomforestregressor method)": [[563, "sklearn.ensemble.RandomForestRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.randomtreesembedding method)": [[564, "sklearn.ensemble.RandomTreesEmbedding.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.stackingclassifier method)": [[565, "sklearn.ensemble.StackingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.stackingregressor method)": [[566, "sklearn.ensemble.StackingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.votingclassifier method)": [[567, "sklearn.ensemble.VotingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.votingregressor method)": [[568, "sklearn.ensemble.VotingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.dictvectorizer method)": [[580, "sklearn.feature_extraction.DictVectorizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.featurehasher method)": [[581, "sklearn.feature_extraction.FeatureHasher.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.image.patchextractor method)": [[582, "sklearn.feature_extraction.image.PatchExtractor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.text.countvectorizer method)": [[587, "sklearn.feature_extraction.text.CountVectorizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.text.hashingvectorizer method)": [[588, "sklearn.feature_extraction.text.HashingVectorizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.text.tfidftransformer method)": [[589, "sklearn.feature_extraction.text.TfidfTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[590, "sklearn.feature_extraction.text.TfidfVectorizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.genericunivariateselect method)": [[591, "sklearn.feature_selection.GenericUnivariateSelect.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.rfe method)": [[592, "sklearn.feature_selection.RFE.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.rfecv method)": [[593, "sklearn.feature_selection.RFECV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectfdr method)": [[594, "sklearn.feature_selection.SelectFdr.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectfpr method)": [[595, "sklearn.feature_selection.SelectFpr.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectfrommodel method)": [[596, "sklearn.feature_selection.SelectFromModel.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectfwe method)": [[597, "sklearn.feature_selection.SelectFwe.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectkbest method)": [[598, "sklearn.feature_selection.SelectKBest.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectpercentile method)": [[599, "sklearn.feature_selection.SelectPercentile.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.sequentialfeatureselector method)": [[601, "sklearn.feature_selection.SequentialFeatureSelector.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.variancethreshold method)": [[602, "sklearn.feature_selection.VarianceThreshold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.frozen.frozenestimator method)": [[609, "sklearn.frozen.FrozenEstimator.get_metadata_routing", false]], "get_metadata_routing() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[610, "sklearn.gaussian_process.GaussianProcessClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.gaussian_process.gaussianprocessregressor method)": [[611, "sklearn.gaussian_process.GaussianProcessRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.impute.iterativeimputer method)": [[627, "sklearn.impute.IterativeImputer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.impute.knnimputer method)": [[628, "sklearn.impute.KNNImputer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.impute.missingindicator method)": [[629, "sklearn.impute.MissingIndicator.get_metadata_routing", false]], "get_metadata_routing() (sklearn.impute.simpleimputer method)": [[630, "sklearn.impute.SimpleImputer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.isotonic.isotonicregression method)": [[635, "sklearn.isotonic.IsotonicRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.additivechi2sampler method)": [[638, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.nystroem method)": [[639, "sklearn.kernel_approximation.Nystroem.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.polynomialcountsketch method)": [[640, "sklearn.kernel_approximation.PolynomialCountSketch.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.rbfsampler method)": [[641, "sklearn.kernel_approximation.RBFSampler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.skewedchi2sampler method)": [[642, "sklearn.kernel_approximation.SkewedChi2Sampler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_ridge.kernelridge method)": [[643, "sklearn.kernel_ridge.KernelRidge.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ardregression method)": [[644, "sklearn.linear_model.ARDRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.bayesianridge method)": [[645, "sklearn.linear_model.BayesianRidge.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.elasticnet method)": [[646, "sklearn.linear_model.ElasticNet.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.elasticnetcv method)": [[647, "sklearn.linear_model.ElasticNetCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.gammaregressor method)": [[648, "sklearn.linear_model.GammaRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.huberregressor method)": [[649, "sklearn.linear_model.HuberRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lars method)": [[650, "sklearn.linear_model.Lars.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.larscv method)": [[651, "sklearn.linear_model.LarsCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lasso method)": [[652, "sklearn.linear_model.Lasso.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lassocv method)": [[653, "sklearn.linear_model.LassoCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lassolars method)": [[654, "sklearn.linear_model.LassoLars.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lassolarscv method)": [[655, "sklearn.linear_model.LassoLarsCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lassolarsic method)": [[656, "sklearn.linear_model.LassoLarsIC.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.linearregression method)": [[657, "sklearn.linear_model.LinearRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.logisticregression method)": [[658, "sklearn.linear_model.LogisticRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.logisticregressioncv method)": [[659, "sklearn.linear_model.LogisticRegressionCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.multitaskelasticnet method)": [[660, "sklearn.linear_model.MultiTaskElasticNet.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.multitaskelasticnetcv method)": [[661, "sklearn.linear_model.MultiTaskElasticNetCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.multitasklasso method)": [[662, "sklearn.linear_model.MultiTaskLasso.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.multitasklassocv method)": [[663, "sklearn.linear_model.MultiTaskLassoCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[664, "sklearn.linear_model.OrthogonalMatchingPursuit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[665, "sklearn.linear_model.OrthogonalMatchingPursuitCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.passiveaggressiveclassifier method)": [[666, "sklearn.linear_model.PassiveAggressiveClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.passiveaggressiveregressor method)": [[667, "sklearn.linear_model.PassiveAggressiveRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.perceptron method)": [[668, "sklearn.linear_model.Perceptron.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.poissonregressor method)": [[669, "sklearn.linear_model.PoissonRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.quantileregressor method)": [[670, "sklearn.linear_model.QuantileRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ransacregressor method)": [[671, "sklearn.linear_model.RANSACRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ridge method)": [[672, "sklearn.linear_model.Ridge.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ridgeclassifier method)": [[674, "sklearn.linear_model.RidgeClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ridgeclassifiercv method)": [[675, "sklearn.linear_model.RidgeClassifierCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ridgecv method)": [[673, "sklearn.linear_model.RidgeCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.sgdclassifier method)": [[676, "sklearn.linear_model.SGDClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.sgdoneclasssvm method)": [[677, "sklearn.linear_model.SGDOneClassSVM.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.sgdregressor method)": [[678, "sklearn.linear_model.SGDRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.theilsenregressor method)": [[679, "sklearn.linear_model.TheilSenRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.tweedieregressor method)": [[680, "sklearn.linear_model.TweedieRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.isomap method)": [[688, "sklearn.manifold.Isomap.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.locallylinearembedding method)": [[689, "sklearn.manifold.LocallyLinearEmbedding.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.mds method)": [[690, "sklearn.manifold.MDS.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.spectralembedding method)": [[691, "sklearn.manifold.SpectralEmbedding.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.tsne method)": [[692, "sklearn.manifold.TSNE.get_metadata_routing", false]], "get_metadata_routing() (sklearn.mixture.bayesiangaussianmixture method)": [[797, "sklearn.mixture.BayesianGaussianMixture.get_metadata_routing", false]], "get_metadata_routing() (sklearn.mixture.gaussianmixture method)": [[798, "sklearn.mixture.GaussianMixture.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.fixedthresholdclassifier method)": [[799, "sklearn.model_selection.FixedThresholdClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.gridsearchcv method)": [[800, "sklearn.model_selection.GridSearchCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.groupkfold method)": [[801, "sklearn.model_selection.GroupKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.groupshufflesplit method)": [[802, "sklearn.model_selection.GroupShuffleSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.halvinggridsearchcv method)": [[803, "sklearn.model_selection.HalvingGridSearchCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.halvingrandomsearchcv method)": [[804, "sklearn.model_selection.HalvingRandomSearchCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.kfold method)": [[805, "sklearn.model_selection.KFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.leaveonegroupout method)": [[807, "sklearn.model_selection.LeaveOneGroupOut.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.leaveoneout method)": [[808, "sklearn.model_selection.LeaveOneOut.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.leavepgroupsout method)": [[809, "sklearn.model_selection.LeavePGroupsOut.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.leavepout method)": [[810, "sklearn.model_selection.LeavePOut.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.predefinedsplit method)": [[813, "sklearn.model_selection.PredefinedSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.randomizedsearchcv method)": [[814, "sklearn.model_selection.RandomizedSearchCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.repeatedkfold method)": [[815, "sklearn.model_selection.RepeatedKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.repeatedstratifiedkfold method)": [[816, "sklearn.model_selection.RepeatedStratifiedKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.shufflesplit method)": [[817, "sklearn.model_selection.ShuffleSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.stratifiedgroupkfold method)": [[818, "sklearn.model_selection.StratifiedGroupKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.stratifiedkfold method)": [[819, "sklearn.model_selection.StratifiedKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.stratifiedshufflesplit method)": [[820, "sklearn.model_selection.StratifiedShuffleSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.timeseriessplit method)": [[821, "sklearn.model_selection.TimeSeriesSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[822, "sklearn.model_selection.TunedThresholdClassifierCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multiclass.onevsoneclassifier method)": [[832, "sklearn.multiclass.OneVsOneClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multiclass.onevsrestclassifier method)": [[833, "sklearn.multiclass.OneVsRestClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multiclass.outputcodeclassifier method)": [[834, "sklearn.multiclass.OutputCodeClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multioutput.classifierchain method)": [[835, "sklearn.multioutput.ClassifierChain.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multioutput.multioutputclassifier method)": [[836, "sklearn.multioutput.MultiOutputClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multioutput.multioutputregressor method)": [[837, "sklearn.multioutput.MultiOutputRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multioutput.regressorchain method)": [[838, "sklearn.multioutput.RegressorChain.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.bernoullinb method)": [[839, "sklearn.naive_bayes.BernoulliNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.categoricalnb method)": [[840, "sklearn.naive_bayes.CategoricalNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.complementnb method)": [[841, "sklearn.naive_bayes.ComplementNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.gaussiannb method)": [[842, "sklearn.naive_bayes.GaussianNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.multinomialnb method)": [[843, "sklearn.naive_bayes.MultinomialNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.kerneldensity method)": [[849, "sklearn.neighbors.KernelDensity.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.kneighborsclassifier method)": [[846, "sklearn.neighbors.KNeighborsClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.kneighborsregressor method)": [[847, "sklearn.neighbors.KNeighborsRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.kneighborstransformer method)": [[848, "sklearn.neighbors.KNeighborsTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.localoutlierfactor method)": [[850, "sklearn.neighbors.LocalOutlierFactor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.nearestcentroid method)": [[851, "sklearn.neighbors.NearestCentroid.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.nearestneighbors method)": [[852, "sklearn.neighbors.NearestNeighbors.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[853, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.radiusneighborsclassifier method)": [[854, "sklearn.neighbors.RadiusNeighborsClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.radiusneighborsregressor method)": [[855, "sklearn.neighbors.RadiusNeighborsRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.radiusneighborstransformer method)": [[856, "sklearn.neighbors.RadiusNeighborsTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neural_network.bernoullirbm method)": [[860, "sklearn.neural_network.BernoulliRBM.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neural_network.mlpclassifier method)": [[861, "sklearn.neural_network.MLPClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neural_network.mlpregressor method)": [[862, "sklearn.neural_network.MLPRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.pipeline.featureunion method)": [[863, "sklearn.pipeline.FeatureUnion.get_metadata_routing", false]], "get_metadata_routing() (sklearn.pipeline.pipeline method)": [[864, "sklearn.pipeline.Pipeline.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.binarizer method)": [[867, "sklearn.preprocessing.Binarizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.functiontransformer method)": [[868, "sklearn.preprocessing.FunctionTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.kbinsdiscretizer method)": [[869, "sklearn.preprocessing.KBinsDiscretizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.kernelcenterer method)": [[870, "sklearn.preprocessing.KernelCenterer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.labelbinarizer method)": [[871, "sklearn.preprocessing.LabelBinarizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.labelencoder method)": [[872, "sklearn.preprocessing.LabelEncoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.maxabsscaler method)": [[873, "sklearn.preprocessing.MaxAbsScaler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.minmaxscaler method)": [[874, "sklearn.preprocessing.MinMaxScaler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.multilabelbinarizer method)": [[875, "sklearn.preprocessing.MultiLabelBinarizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.normalizer method)": [[876, "sklearn.preprocessing.Normalizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.onehotencoder method)": [[877, "sklearn.preprocessing.OneHotEncoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.ordinalencoder method)": [[878, "sklearn.preprocessing.OrdinalEncoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.polynomialfeatures method)": [[879, "sklearn.preprocessing.PolynomialFeatures.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.powertransformer method)": [[880, "sklearn.preprocessing.PowerTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.quantiletransformer method)": [[881, "sklearn.preprocessing.QuantileTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.robustscaler method)": [[882, "sklearn.preprocessing.RobustScaler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.splinetransformer method)": [[883, "sklearn.preprocessing.SplineTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.standardscaler method)": [[884, "sklearn.preprocessing.StandardScaler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.targetencoder method)": [[885, "sklearn.preprocessing.TargetEncoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.random_projection.gaussianrandomprojection method)": [[896, "sklearn.random_projection.GaussianRandomProjection.get_metadata_routing", false]], "get_metadata_routing() (sklearn.random_projection.sparserandomprojection method)": [[897, "sklearn.random_projection.SparseRandomProjection.get_metadata_routing", false]], "get_metadata_routing() (sklearn.semi_supervised.labelpropagation method)": [[899, "sklearn.semi_supervised.LabelPropagation.get_metadata_routing", false]], "get_metadata_routing() (sklearn.semi_supervised.labelspreading method)": [[900, "sklearn.semi_supervised.LabelSpreading.get_metadata_routing", false]], "get_metadata_routing() (sklearn.semi_supervised.selftrainingclassifier method)": [[901, "sklearn.semi_supervised.SelfTrainingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.linearsvc method)": [[904, "sklearn.svm.LinearSVC.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.linearsvr method)": [[905, "sklearn.svm.LinearSVR.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.nusvc method)": [[906, "sklearn.svm.NuSVC.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.nusvr method)": [[907, "sklearn.svm.NuSVR.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.oneclasssvm method)": [[908, "sklearn.svm.OneClassSVM.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.svc method)": [[909, "sklearn.svm.SVC.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.svr method)": [[910, "sklearn.svm.SVR.get_metadata_routing", false]], "get_metadata_routing() (sklearn.tree.decisiontreeclassifier method)": [[912, "sklearn.tree.DecisionTreeClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.tree.decisiontreeregressor method)": [[913, "sklearn.tree.DecisionTreeRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.tree.extratreeclassifier method)": [[914, "sklearn.tree.ExtraTreeClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.tree.extratreeregressor method)": [[915, "sklearn.tree.ExtraTreeRegressor.get_metadata_routing", false]], "get_metric() (sklearn.metrics.distancemetric class method)": [[699, "sklearn.metrics.DistanceMetric.get_metric", false]], "get_n_calls() (sklearn.neighbors.balltree method)": [[844, "sklearn.neighbors.BallTree.get_n_calls", false]], "get_n_calls() (sklearn.neighbors.kdtree method)": [[845, "sklearn.neighbors.KDTree.get_n_calls", false]], "get_n_leaves() (sklearn.tree.decisiontreeclassifier method)": [[912, "sklearn.tree.DecisionTreeClassifier.get_n_leaves", false]], "get_n_leaves() (sklearn.tree.decisiontreeregressor method)": [[913, "sklearn.tree.DecisionTreeRegressor.get_n_leaves", false]], "get_n_leaves() (sklearn.tree.extratreeclassifier method)": [[914, "sklearn.tree.ExtraTreeClassifier.get_n_leaves", false]], "get_n_leaves() (sklearn.tree.extratreeregressor method)": [[915, "sklearn.tree.ExtraTreeRegressor.get_n_leaves", false]], "get_n_splits": [[386, "term-get_n_splits", true]], "get_n_splits() (sklearn.model_selection.groupkfold method)": [[801, "sklearn.model_selection.GroupKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.groupshufflesplit method)": [[802, "sklearn.model_selection.GroupShuffleSplit.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.kfold method)": [[805, "sklearn.model_selection.KFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.leaveonegroupout method)": [[807, "sklearn.model_selection.LeaveOneGroupOut.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.leaveoneout method)": [[808, "sklearn.model_selection.LeaveOneOut.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.leavepgroupsout method)": [[809, "sklearn.model_selection.LeavePGroupsOut.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.leavepout method)": [[810, "sklearn.model_selection.LeavePOut.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.predefinedsplit method)": [[813, "sklearn.model_selection.PredefinedSplit.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.repeatedkfold method)": [[815, "sklearn.model_selection.RepeatedKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.repeatedstratifiedkfold method)": [[816, "sklearn.model_selection.RepeatedStratifiedKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.shufflesplit method)": [[817, "sklearn.model_selection.ShuffleSplit.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.stratifiedgroupkfold method)": [[818, "sklearn.model_selection.StratifiedGroupKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.stratifiedkfold method)": [[819, "sklearn.model_selection.StratifiedKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.stratifiedshufflesplit method)": [[820, "sklearn.model_selection.StratifiedShuffleSplit.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.timeseriessplit method)": [[821, "sklearn.model_selection.TimeSeriesSplit.get_n_splits", false]], "get_params": [[386, "term-get_params", true]], "get_params() (sklearn.base.baseestimator method)": [[418, "sklearn.base.BaseEstimator.get_params", false]], "get_params() (sklearn.calibration.calibratedclassifiercv method)": [[434, "sklearn.calibration.CalibratedClassifierCV.get_params", false]], "get_params() (sklearn.cluster.affinitypropagation method)": [[437, "sklearn.cluster.AffinityPropagation.get_params", false]], "get_params() (sklearn.cluster.agglomerativeclustering method)": [[438, "sklearn.cluster.AgglomerativeClustering.get_params", false]], "get_params() (sklearn.cluster.birch method)": [[439, "sklearn.cluster.Birch.get_params", false]], "get_params() (sklearn.cluster.bisectingkmeans method)": [[440, "sklearn.cluster.BisectingKMeans.get_params", false]], "get_params() (sklearn.cluster.dbscan method)": [[441, "sklearn.cluster.DBSCAN.get_params", false]], "get_params() (sklearn.cluster.featureagglomeration method)": [[442, "sklearn.cluster.FeatureAgglomeration.get_params", false]], "get_params() (sklearn.cluster.hdbscan method)": [[443, "sklearn.cluster.HDBSCAN.get_params", false]], "get_params() (sklearn.cluster.kmeans method)": [[444, "sklearn.cluster.KMeans.get_params", false]], "get_params() (sklearn.cluster.meanshift method)": [[445, "sklearn.cluster.MeanShift.get_params", false]], "get_params() (sklearn.cluster.minibatchkmeans method)": [[446, "sklearn.cluster.MiniBatchKMeans.get_params", false]], "get_params() (sklearn.cluster.optics method)": [[447, "sklearn.cluster.OPTICS.get_params", false]], "get_params() (sklearn.cluster.spectralbiclustering method)": [[448, "sklearn.cluster.SpectralBiclustering.get_params", false]], "get_params() (sklearn.cluster.spectralclustering method)": [[449, "sklearn.cluster.SpectralClustering.get_params", false]], "get_params() (sklearn.cluster.spectralcoclustering method)": [[450, "sklearn.cluster.SpectralCoclustering.get_params", false]], "get_params() (sklearn.compose.columntransformer method)": [[461, "sklearn.compose.ColumnTransformer.get_params", false]], "get_params() (sklearn.compose.transformedtargetregressor method)": [[462, "sklearn.compose.TransformedTargetRegressor.get_params", false]], "get_params() (sklearn.covariance.ellipticenvelope method)": [[466, "sklearn.covariance.EllipticEnvelope.get_params", false]], "get_params() (sklearn.covariance.empiricalcovariance method)": [[467, "sklearn.covariance.EmpiricalCovariance.get_params", false]], "get_params() (sklearn.covariance.graphicallasso method)": [[468, "sklearn.covariance.GraphicalLasso.get_params", false]], "get_params() (sklearn.covariance.graphicallassocv method)": [[469, "sklearn.covariance.GraphicalLassoCV.get_params", false]], "get_params() (sklearn.covariance.ledoitwolf method)": [[470, "sklearn.covariance.LedoitWolf.get_params", false]], "get_params() (sklearn.covariance.mincovdet method)": [[471, "sklearn.covariance.MinCovDet.get_params", false]], "get_params() (sklearn.covariance.oas method)": [[472, "sklearn.covariance.OAS.get_params", false]], "get_params() (sklearn.covariance.shrunkcovariance method)": [[473, "sklearn.covariance.ShrunkCovariance.get_params", false]], "get_params() (sklearn.cross_decomposition.cca method)": [[479, "sklearn.cross_decomposition.CCA.get_params", false]], "get_params() (sklearn.cross_decomposition.plscanonical method)": [[480, "sklearn.cross_decomposition.PLSCanonical.get_params", false]], "get_params() (sklearn.cross_decomposition.plsregression method)": [[481, "sklearn.cross_decomposition.PLSRegression.get_params", false]], "get_params() (sklearn.cross_decomposition.plssvd method)": [[482, "sklearn.cross_decomposition.PLSSVD.get_params", false]], "get_params() (sklearn.decomposition.dictionarylearning method)": [[529, "sklearn.decomposition.DictionaryLearning.get_params", false]], "get_params() (sklearn.decomposition.factoranalysis method)": [[530, "sklearn.decomposition.FactorAnalysis.get_params", false]], "get_params() (sklearn.decomposition.fastica method)": [[531, "sklearn.decomposition.FastICA.get_params", false]], "get_params() (sklearn.decomposition.incrementalpca method)": [[532, "sklearn.decomposition.IncrementalPCA.get_params", false]], "get_params() (sklearn.decomposition.kernelpca method)": [[533, "sklearn.decomposition.KernelPCA.get_params", false]], "get_params() (sklearn.decomposition.latentdirichletallocation method)": [[534, "sklearn.decomposition.LatentDirichletAllocation.get_params", false]], "get_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[535, "sklearn.decomposition.MiniBatchDictionaryLearning.get_params", false]], "get_params() (sklearn.decomposition.minibatchnmf method)": [[536, "sklearn.decomposition.MiniBatchNMF.get_params", false]], "get_params() (sklearn.decomposition.minibatchsparsepca method)": [[537, "sklearn.decomposition.MiniBatchSparsePCA.get_params", false]], "get_params() (sklearn.decomposition.nmf method)": [[538, "sklearn.decomposition.NMF.get_params", false]], "get_params() (sklearn.decomposition.pca method)": [[539, "sklearn.decomposition.PCA.get_params", false]], "get_params() (sklearn.decomposition.sparsecoder method)": [[540, "sklearn.decomposition.SparseCoder.get_params", false]], "get_params() (sklearn.decomposition.sparsepca method)": [[541, "sklearn.decomposition.SparsePCA.get_params", false]], "get_params() (sklearn.decomposition.truncatedsvd method)": [[542, "sklearn.decomposition.TruncatedSVD.get_params", false]], "get_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[547, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_params", false]], "get_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[548, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.get_params", false]], "get_params() (sklearn.dummy.dummyclassifier method)": [[549, "sklearn.dummy.DummyClassifier.get_params", false]], "get_params() (sklearn.dummy.dummyregressor method)": [[550, "sklearn.dummy.DummyRegressor.get_params", false]], "get_params() (sklearn.ensemble.adaboostclassifier method)": [[551, "sklearn.ensemble.AdaBoostClassifier.get_params", false]], "get_params() (sklearn.ensemble.adaboostregressor method)": [[552, "sklearn.ensemble.AdaBoostRegressor.get_params", false]], "get_params() (sklearn.ensemble.baggingclassifier method)": [[553, "sklearn.ensemble.BaggingClassifier.get_params", false]], "get_params() (sklearn.ensemble.baggingregressor method)": [[554, "sklearn.ensemble.BaggingRegressor.get_params", false]], "get_params() (sklearn.ensemble.extratreesclassifier method)": [[555, "sklearn.ensemble.ExtraTreesClassifier.get_params", false]], "get_params() (sklearn.ensemble.extratreesregressor method)": [[556, "sklearn.ensemble.ExtraTreesRegressor.get_params", false]], "get_params() (sklearn.ensemble.gradientboostingclassifier method)": [[557, "sklearn.ensemble.GradientBoostingClassifier.get_params", false]], "get_params() (sklearn.ensemble.gradientboostingregressor method)": [[558, "sklearn.ensemble.GradientBoostingRegressor.get_params", false]], "get_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[559, "sklearn.ensemble.HistGradientBoostingClassifier.get_params", false]], "get_params() (sklearn.ensemble.histgradientboostingregressor method)": [[560, "sklearn.ensemble.HistGradientBoostingRegressor.get_params", false]], "get_params() (sklearn.ensemble.isolationforest method)": [[561, "sklearn.ensemble.IsolationForest.get_params", false]], "get_params() (sklearn.ensemble.randomforestclassifier method)": [[562, "sklearn.ensemble.RandomForestClassifier.get_params", false]], "get_params() (sklearn.ensemble.randomforestregressor method)": [[563, "sklearn.ensemble.RandomForestRegressor.get_params", false]], "get_params() (sklearn.ensemble.randomtreesembedding method)": [[564, "sklearn.ensemble.RandomTreesEmbedding.get_params", false]], "get_params() (sklearn.ensemble.stackingclassifier method)": [[565, "sklearn.ensemble.StackingClassifier.get_params", false]], "get_params() (sklearn.ensemble.stackingregressor method)": [[566, "sklearn.ensemble.StackingRegressor.get_params", false]], "get_params() (sklearn.ensemble.votingclassifier method)": [[567, "sklearn.ensemble.VotingClassifier.get_params", false]], "get_params() (sklearn.ensemble.votingregressor method)": [[568, "sklearn.ensemble.VotingRegressor.get_params", false]], "get_params() (sklearn.feature_extraction.dictvectorizer method)": [[580, "sklearn.feature_extraction.DictVectorizer.get_params", false]], "get_params() (sklearn.feature_extraction.featurehasher method)": [[581, "sklearn.feature_extraction.FeatureHasher.get_params", false]], "get_params() (sklearn.feature_extraction.image.patchextractor method)": [[582, "sklearn.feature_extraction.image.PatchExtractor.get_params", false]], "get_params() (sklearn.feature_extraction.text.countvectorizer method)": [[587, "sklearn.feature_extraction.text.CountVectorizer.get_params", false]], "get_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[588, "sklearn.feature_extraction.text.HashingVectorizer.get_params", false]], "get_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[589, "sklearn.feature_extraction.text.TfidfTransformer.get_params", false]], "get_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[590, "sklearn.feature_extraction.text.TfidfVectorizer.get_params", false]], "get_params() (sklearn.feature_selection.genericunivariateselect method)": [[591, "sklearn.feature_selection.GenericUnivariateSelect.get_params", false]], "get_params() (sklearn.feature_selection.rfe method)": [[592, "sklearn.feature_selection.RFE.get_params", false]], "get_params() (sklearn.feature_selection.rfecv method)": [[593, "sklearn.feature_selection.RFECV.get_params", false]], "get_params() (sklearn.feature_selection.selectfdr method)": [[594, "sklearn.feature_selection.SelectFdr.get_params", false]], "get_params() (sklearn.feature_selection.selectfpr method)": [[595, "sklearn.feature_selection.SelectFpr.get_params", false]], "get_params() (sklearn.feature_selection.selectfrommodel method)": [[596, "sklearn.feature_selection.SelectFromModel.get_params", false]], "get_params() (sklearn.feature_selection.selectfwe method)": [[597, "sklearn.feature_selection.SelectFwe.get_params", false]], "get_params() (sklearn.feature_selection.selectkbest method)": [[598, "sklearn.feature_selection.SelectKBest.get_params", false]], "get_params() (sklearn.feature_selection.selectpercentile method)": [[599, "sklearn.feature_selection.SelectPercentile.get_params", false]], "get_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[601, "sklearn.feature_selection.SequentialFeatureSelector.get_params", false]], "get_params() (sklearn.feature_selection.variancethreshold method)": [[602, "sklearn.feature_selection.VarianceThreshold.get_params", false]], "get_params() (sklearn.frozen.frozenestimator method)": [[609, "sklearn.frozen.FrozenEstimator.get_params", false]], "get_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[610, "sklearn.gaussian_process.GaussianProcessClassifier.get_params", false]], "get_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[611, "sklearn.gaussian_process.GaussianProcessRegressor.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[612, "sklearn.gaussian_process.kernels.CompoundKernel.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[613, "sklearn.gaussian_process.kernels.ConstantKernel.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[614, "sklearn.gaussian_process.kernels.DotProduct.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[616, "sklearn.gaussian_process.kernels.Exponentiation.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[615, "sklearn.gaussian_process.kernels.ExpSineSquared.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.kernel method)": [[618, "sklearn.gaussian_process.kernels.Kernel.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.matern method)": [[619, "sklearn.gaussian_process.kernels.Matern.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[620, "sklearn.gaussian_process.kernels.PairwiseKernel.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.product method)": [[621, "sklearn.gaussian_process.kernels.Product.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[623, "sklearn.gaussian_process.kernels.RationalQuadratic.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.rbf method)": [[622, "sklearn.gaussian_process.kernels.RBF.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.sum method)": [[624, "sklearn.gaussian_process.kernels.Sum.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[625, "sklearn.gaussian_process.kernels.WhiteKernel.get_params", false]], "get_params() (sklearn.impute.iterativeimputer method)": [[627, "sklearn.impute.IterativeImputer.get_params", false]], "get_params() (sklearn.impute.knnimputer method)": [[628, "sklearn.impute.KNNImputer.get_params", false]], "get_params() (sklearn.impute.missingindicator method)": [[629, "sklearn.impute.MissingIndicator.get_params", false]], "get_params() (sklearn.impute.simpleimputer method)": [[630, "sklearn.impute.SimpleImputer.get_params", false]], "get_params() (sklearn.isotonic.isotonicregression method)": [[635, "sklearn.isotonic.IsotonicRegression.get_params", false]], "get_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[638, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_params", false]], "get_params() (sklearn.kernel_approximation.nystroem method)": [[639, "sklearn.kernel_approximation.Nystroem.get_params", false]], "get_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[640, "sklearn.kernel_approximation.PolynomialCountSketch.get_params", false]], "get_params() (sklearn.kernel_approximation.rbfsampler method)": [[641, "sklearn.kernel_approximation.RBFSampler.get_params", false]], "get_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[642, "sklearn.kernel_approximation.SkewedChi2Sampler.get_params", false]], "get_params() (sklearn.kernel_ridge.kernelridge method)": [[643, "sklearn.kernel_ridge.KernelRidge.get_params", false]], "get_params() (sklearn.linear_model.ardregression method)": [[644, "sklearn.linear_model.ARDRegression.get_params", false]], "get_params() (sklearn.linear_model.bayesianridge method)": [[645, "sklearn.linear_model.BayesianRidge.get_params", false]], "get_params() (sklearn.linear_model.elasticnet method)": [[646, "sklearn.linear_model.ElasticNet.get_params", false]], "get_params() (sklearn.linear_model.elasticnetcv method)": [[647, "sklearn.linear_model.ElasticNetCV.get_params", false]], "get_params() (sklearn.linear_model.gammaregressor method)": [[648, "sklearn.linear_model.GammaRegressor.get_params", false]], "get_params() (sklearn.linear_model.huberregressor method)": [[649, "sklearn.linear_model.HuberRegressor.get_params", false]], "get_params() (sklearn.linear_model.lars method)": [[650, "sklearn.linear_model.Lars.get_params", false]], "get_params() (sklearn.linear_model.larscv method)": [[651, "sklearn.linear_model.LarsCV.get_params", false]], "get_params() (sklearn.linear_model.lasso method)": [[652, "sklearn.linear_model.Lasso.get_params", false]], "get_params() (sklearn.linear_model.lassocv method)": [[653, "sklearn.linear_model.LassoCV.get_params", false]], "get_params() (sklearn.linear_model.lassolars method)": [[654, "sklearn.linear_model.LassoLars.get_params", false]], "get_params() (sklearn.linear_model.lassolarscv method)": [[655, "sklearn.linear_model.LassoLarsCV.get_params", false]], "get_params() (sklearn.linear_model.lassolarsic method)": [[656, "sklearn.linear_model.LassoLarsIC.get_params", false]], "get_params() (sklearn.linear_model.linearregression method)": [[657, "sklearn.linear_model.LinearRegression.get_params", false]], "get_params() (sklearn.linear_model.logisticregression method)": [[658, "sklearn.linear_model.LogisticRegression.get_params", false]], "get_params() (sklearn.linear_model.logisticregressioncv method)": [[659, "sklearn.linear_model.LogisticRegressionCV.get_params", false]], "get_params() (sklearn.linear_model.multitaskelasticnet method)": [[660, "sklearn.linear_model.MultiTaskElasticNet.get_params", false]], "get_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[661, "sklearn.linear_model.MultiTaskElasticNetCV.get_params", false]], "get_params() (sklearn.linear_model.multitasklasso method)": [[662, "sklearn.linear_model.MultiTaskLasso.get_params", false]], "get_params() (sklearn.linear_model.multitasklassocv method)": [[663, "sklearn.linear_model.MultiTaskLassoCV.get_params", false]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[664, "sklearn.linear_model.OrthogonalMatchingPursuit.get_params", false]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[665, "sklearn.linear_model.OrthogonalMatchingPursuitCV.get_params", false]], "get_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[666, "sklearn.linear_model.PassiveAggressiveClassifier.get_params", false]], "get_params() (sklearn.linear_model.passiveaggressiveregressor method)": [[667, "sklearn.linear_model.PassiveAggressiveRegressor.get_params", false]], "get_params() (sklearn.linear_model.perceptron method)": [[668, "sklearn.linear_model.Perceptron.get_params", false]], "get_params() (sklearn.linear_model.poissonregressor method)": [[669, "sklearn.linear_model.PoissonRegressor.get_params", false]], "get_params() (sklearn.linear_model.quantileregressor method)": [[670, "sklearn.linear_model.QuantileRegressor.get_params", false]], "get_params() (sklearn.linear_model.ransacregressor method)": [[671, "sklearn.linear_model.RANSACRegressor.get_params", false]], "get_params() (sklearn.linear_model.ridge method)": [[672, "sklearn.linear_model.Ridge.get_params", false]], "get_params() (sklearn.linear_model.ridgeclassifier method)": [[674, "sklearn.linear_model.RidgeClassifier.get_params", false]], "get_params() (sklearn.linear_model.ridgeclassifiercv method)": [[675, "sklearn.linear_model.RidgeClassifierCV.get_params", false]], "get_params() (sklearn.linear_model.ridgecv method)": [[673, "sklearn.linear_model.RidgeCV.get_params", false]], "get_params() (sklearn.linear_model.sgdclassifier method)": [[676, "sklearn.linear_model.SGDClassifier.get_params", false]], "get_params() (sklearn.linear_model.sgdoneclasssvm method)": [[677, "sklearn.linear_model.SGDOneClassSVM.get_params", false]], "get_params() (sklearn.linear_model.sgdregressor method)": [[678, "sklearn.linear_model.SGDRegressor.get_params", false]], "get_params() (sklearn.linear_model.theilsenregressor method)": [[679, "sklearn.linear_model.TheilSenRegressor.get_params", false]], "get_params() (sklearn.linear_model.tweedieregressor method)": [[680, "sklearn.linear_model.TweedieRegressor.get_params", false]], "get_params() (sklearn.manifold.isomap method)": [[688, "sklearn.manifold.Isomap.get_params", false]], "get_params() (sklearn.manifold.locallylinearembedding method)": [[689, "sklearn.manifold.LocallyLinearEmbedding.get_params", false]], "get_params() (sklearn.manifold.mds method)": [[690, "sklearn.manifold.MDS.get_params", false]], "get_params() (sklearn.manifold.spectralembedding method)": [[691, "sklearn.manifold.SpectralEmbedding.get_params", false]], "get_params() (sklearn.manifold.tsne method)": [[692, "sklearn.manifold.TSNE.get_params", false]], "get_params() (sklearn.mixture.bayesiangaussianmixture method)": [[797, "sklearn.mixture.BayesianGaussianMixture.get_params", false]], "get_params() (sklearn.mixture.gaussianmixture method)": [[798, "sklearn.mixture.GaussianMixture.get_params", false]], "get_params() (sklearn.model_selection.fixedthresholdclassifier method)": [[799, "sklearn.model_selection.FixedThresholdClassifier.get_params", false]], "get_params() (sklearn.model_selection.gridsearchcv method)": [[800, "sklearn.model_selection.GridSearchCV.get_params", false]], "get_params() (sklearn.model_selection.halvinggridsearchcv method)": [[803, "sklearn.model_selection.HalvingGridSearchCV.get_params", false]], "get_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[804, "sklearn.model_selection.HalvingRandomSearchCV.get_params", false]], "get_params() (sklearn.model_selection.randomizedsearchcv method)": [[814, "sklearn.model_selection.RandomizedSearchCV.get_params", false]], "get_params() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[822, "sklearn.model_selection.TunedThresholdClassifierCV.get_params", false]], "get_params() (sklearn.multiclass.onevsoneclassifier method)": [[832, "sklearn.multiclass.OneVsOneClassifier.get_params", false]], "get_params() (sklearn.multiclass.onevsrestclassifier method)": [[833, "sklearn.multiclass.OneVsRestClassifier.get_params", false]], "get_params() (sklearn.multiclass.outputcodeclassifier method)": [[834, "sklearn.multiclass.OutputCodeClassifier.get_params", false]], "get_params() (sklearn.multioutput.classifierchain method)": [[835, "sklearn.multioutput.ClassifierChain.get_params", false]], "get_params() (sklearn.multioutput.multioutputclassifier method)": [[836, "sklearn.multioutput.MultiOutputClassifier.get_params", false]], "get_params() (sklearn.multioutput.multioutputregressor method)": [[837, "sklearn.multioutput.MultiOutputRegressor.get_params", false]], "get_params() (sklearn.multioutput.regressorchain method)": [[838, "sklearn.multioutput.RegressorChain.get_params", false]], "get_params() (sklearn.naive_bayes.bernoullinb method)": [[839, "sklearn.naive_bayes.BernoulliNB.get_params", false]], "get_params() (sklearn.naive_bayes.categoricalnb method)": [[840, "sklearn.naive_bayes.CategoricalNB.get_params", false]], "get_params() (sklearn.naive_bayes.complementnb method)": [[841, "sklearn.naive_bayes.ComplementNB.get_params", false]], "get_params() (sklearn.naive_bayes.gaussiannb method)": [[842, "sklearn.naive_bayes.GaussianNB.get_params", false]], "get_params() (sklearn.naive_bayes.multinomialnb method)": [[843, "sklearn.naive_bayes.MultinomialNB.get_params", false]], "get_params() (sklearn.neighbors.kerneldensity method)": [[849, "sklearn.neighbors.KernelDensity.get_params", false]], "get_params() (sklearn.neighbors.kneighborsclassifier method)": [[846, "sklearn.neighbors.KNeighborsClassifier.get_params", false]], "get_params() (sklearn.neighbors.kneighborsregressor method)": [[847, "sklearn.neighbors.KNeighborsRegressor.get_params", false]], "get_params() (sklearn.neighbors.kneighborstransformer method)": [[848, "sklearn.neighbors.KNeighborsTransformer.get_params", false]], "get_params() (sklearn.neighbors.localoutlierfactor method)": [[850, "sklearn.neighbors.LocalOutlierFactor.get_params", false]], "get_params() (sklearn.neighbors.nearestcentroid method)": [[851, "sklearn.neighbors.NearestCentroid.get_params", false]], "get_params() (sklearn.neighbors.nearestneighbors method)": [[852, "sklearn.neighbors.NearestNeighbors.get_params", false]], "get_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[853, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_params", false]], "get_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[854, "sklearn.neighbors.RadiusNeighborsClassifier.get_params", false]], "get_params() (sklearn.neighbors.radiusneighborsregressor method)": [[855, "sklearn.neighbors.RadiusNeighborsRegressor.get_params", false]], "get_params() (sklearn.neighbors.radiusneighborstransformer method)": [[856, "sklearn.neighbors.RadiusNeighborsTransformer.get_params", false]], "get_params() (sklearn.neural_network.bernoullirbm method)": [[860, "sklearn.neural_network.BernoulliRBM.get_params", false]], "get_params() (sklearn.neural_network.mlpclassifier method)": [[861, "sklearn.neural_network.MLPClassifier.get_params", false]], "get_params() (sklearn.neural_network.mlpregressor method)": [[862, "sklearn.neural_network.MLPRegressor.get_params", false]], "get_params() (sklearn.pipeline.featureunion method)": [[863, "sklearn.pipeline.FeatureUnion.get_params", false]], "get_params() (sklearn.pipeline.pipeline method)": [[864, "sklearn.pipeline.Pipeline.get_params", false]], "get_params() (sklearn.preprocessing.binarizer method)": [[867, "sklearn.preprocessing.Binarizer.get_params", false]], "get_params() (sklearn.preprocessing.functiontransformer method)": [[868, "sklearn.preprocessing.FunctionTransformer.get_params", false]], "get_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[869, "sklearn.preprocessing.KBinsDiscretizer.get_params", false]], "get_params() (sklearn.preprocessing.kernelcenterer method)": [[870, "sklearn.preprocessing.KernelCenterer.get_params", false]], "get_params() (sklearn.preprocessing.labelbinarizer method)": [[871, "sklearn.preprocessing.LabelBinarizer.get_params", false]], "get_params() (sklearn.preprocessing.labelencoder method)": [[872, "sklearn.preprocessing.LabelEncoder.get_params", false]], "get_params() (sklearn.preprocessing.maxabsscaler method)": [[873, "sklearn.preprocessing.MaxAbsScaler.get_params", false]], "get_params() (sklearn.preprocessing.minmaxscaler method)": [[874, "sklearn.preprocessing.MinMaxScaler.get_params", false]], "get_params() (sklearn.preprocessing.multilabelbinarizer method)": [[875, "sklearn.preprocessing.MultiLabelBinarizer.get_params", false]], "get_params() (sklearn.preprocessing.normalizer method)": [[876, "sklearn.preprocessing.Normalizer.get_params", false]], "get_params() (sklearn.preprocessing.onehotencoder method)": [[877, "sklearn.preprocessing.OneHotEncoder.get_params", false]], "get_params() (sklearn.preprocessing.ordinalencoder method)": [[878, "sklearn.preprocessing.OrdinalEncoder.get_params", false]], "get_params() (sklearn.preprocessing.polynomialfeatures method)": [[879, "sklearn.preprocessing.PolynomialFeatures.get_params", false]], "get_params() (sklearn.preprocessing.powertransformer method)": [[880, "sklearn.preprocessing.PowerTransformer.get_params", false]], "get_params() (sklearn.preprocessing.quantiletransformer method)": [[881, "sklearn.preprocessing.QuantileTransformer.get_params", false]], "get_params() (sklearn.preprocessing.robustscaler method)": [[882, "sklearn.preprocessing.RobustScaler.get_params", false]], "get_params() (sklearn.preprocessing.splinetransformer method)": [[883, "sklearn.preprocessing.SplineTransformer.get_params", false]], "get_params() (sklearn.preprocessing.standardscaler method)": [[884, "sklearn.preprocessing.StandardScaler.get_params", false]], "get_params() (sklearn.preprocessing.targetencoder method)": [[885, "sklearn.preprocessing.TargetEncoder.get_params", false]], "get_params() (sklearn.random_projection.gaussianrandomprojection method)": [[896, "sklearn.random_projection.GaussianRandomProjection.get_params", false]], "get_params() (sklearn.random_projection.sparserandomprojection method)": [[897, "sklearn.random_projection.SparseRandomProjection.get_params", false]], "get_params() (sklearn.semi_supervised.labelpropagation method)": [[899, "sklearn.semi_supervised.LabelPropagation.get_params", false]], "get_params() (sklearn.semi_supervised.labelspreading method)": [[900, "sklearn.semi_supervised.LabelSpreading.get_params", false]], "get_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[901, "sklearn.semi_supervised.SelfTrainingClassifier.get_params", false]], "get_params() (sklearn.svm.linearsvc method)": [[904, "sklearn.svm.LinearSVC.get_params", false]], "get_params() (sklearn.svm.linearsvr method)": [[905, "sklearn.svm.LinearSVR.get_params", false]], "get_params() (sklearn.svm.nusvc method)": [[906, "sklearn.svm.NuSVC.get_params", false]], "get_params() (sklearn.svm.nusvr method)": [[907, "sklearn.svm.NuSVR.get_params", false]], "get_params() (sklearn.svm.oneclasssvm method)": [[908, "sklearn.svm.OneClassSVM.get_params", false]], "get_params() (sklearn.svm.svc method)": [[909, "sklearn.svm.SVC.get_params", false]], "get_params() (sklearn.svm.svr method)": [[910, "sklearn.svm.SVR.get_params", false]], "get_params() (sklearn.tree.decisiontreeclassifier method)": [[912, "sklearn.tree.DecisionTreeClassifier.get_params", false]], "get_params() (sklearn.tree.decisiontreeregressor method)": [[913, "sklearn.tree.DecisionTreeRegressor.get_params", false]], "get_params() (sklearn.tree.extratreeclassifier method)": [[914, "sklearn.tree.ExtraTreeClassifier.get_params", false]], "get_params() (sklearn.tree.extratreeregressor method)": [[915, "sklearn.tree.ExtraTreeRegressor.get_params", false]], "get_precision() (sklearn.covariance.ellipticenvelope method)": [[466, "sklearn.covariance.EllipticEnvelope.get_precision", false]], "get_precision() (sklearn.covariance.empiricalcovariance method)": [[467, "sklearn.covariance.EmpiricalCovariance.get_precision", false]], "get_precision() (sklearn.covariance.graphicallasso method)": [[468, "sklearn.covariance.GraphicalLasso.get_precision", false]], "get_precision() (sklearn.covariance.graphicallassocv method)": [[469, "sklearn.covariance.GraphicalLassoCV.get_precision", false]], "get_precision() (sklearn.covariance.ledoitwolf method)": [[470, "sklearn.covariance.LedoitWolf.get_precision", false]], "get_precision() (sklearn.covariance.mincovdet method)": [[471, "sklearn.covariance.MinCovDet.get_precision", false]], "get_precision() (sklearn.covariance.oas method)": [[472, "sklearn.covariance.OAS.get_precision", false]], "get_precision() (sklearn.covariance.shrunkcovariance method)": [[473, "sklearn.covariance.ShrunkCovariance.get_precision", false]], "get_precision() (sklearn.decomposition.factoranalysis method)": [[530, "sklearn.decomposition.FactorAnalysis.get_precision", false]], "get_precision() (sklearn.decomposition.incrementalpca method)": [[532, "sklearn.decomposition.IncrementalPCA.get_precision", false]], "get_precision() (sklearn.decomposition.pca method)": [[539, "sklearn.decomposition.PCA.get_precision", false]], "get_routing_for_object() (in module sklearn.utils.metadata_routing)": [[959, "sklearn.utils.metadata_routing.get_routing_for_object", false]], "get_scorer() (in module sklearn.metrics)": [[732, "sklearn.metrics.get_scorer", false]], "get_scorer_names() (in module sklearn.metrics)": [[733, "sklearn.metrics.get_scorer_names", false]], "get_shape() (sklearn.base.biclustermixin method)": [[419, "sklearn.base.BiclusterMixin.get_shape", false]], "get_shape() (sklearn.cluster.spectralbiclustering method)": [[448, "sklearn.cluster.SpectralBiclustering.get_shape", false]], "get_shape() (sklearn.cluster.spectralcoclustering method)": [[450, "sklearn.cluster.SpectralCoclustering.get_shape", false]], "get_stop_words() (sklearn.feature_extraction.text.countvectorizer method)": [[587, "sklearn.feature_extraction.text.CountVectorizer.get_stop_words", false]], "get_stop_words() (sklearn.feature_extraction.text.hashingvectorizer method)": [[588, "sklearn.feature_extraction.text.HashingVectorizer.get_stop_words", false]], "get_stop_words() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[590, "sklearn.feature_extraction.text.TfidfVectorizer.get_stop_words", false]], "get_submatrix() (sklearn.base.biclustermixin method)": [[419, "sklearn.base.BiclusterMixin.get_submatrix", false]], "get_submatrix() (sklearn.cluster.spectralbiclustering method)": [[448, "sklearn.cluster.SpectralBiclustering.get_submatrix", false]], "get_submatrix() (sklearn.cluster.spectralcoclustering method)": [[450, "sklearn.cluster.SpectralCoclustering.get_submatrix", false]], "get_support() (sklearn.feature_selection.genericunivariateselect method)": [[591, "sklearn.feature_selection.GenericUnivariateSelect.get_support", false]], "get_support() (sklearn.feature_selection.rfe method)": [[592, "sklearn.feature_selection.RFE.get_support", false]], "get_support() (sklearn.feature_selection.rfecv method)": [[593, "sklearn.feature_selection.RFECV.get_support", false]], "get_support() (sklearn.feature_selection.selectfdr method)": [[594, "sklearn.feature_selection.SelectFdr.get_support", false]], "get_support() (sklearn.feature_selection.selectfpr method)": [[595, "sklearn.feature_selection.SelectFpr.get_support", false]], "get_support() (sklearn.feature_selection.selectfrommodel method)": [[596, "sklearn.feature_selection.SelectFromModel.get_support", false]], "get_support() (sklearn.feature_selection.selectfwe method)": [[597, "sklearn.feature_selection.SelectFwe.get_support", false]], "get_support() (sklearn.feature_selection.selectkbest method)": [[598, "sklearn.feature_selection.SelectKBest.get_support", false]], "get_support() (sklearn.feature_selection.selectormixin method)": [[600, "sklearn.feature_selection.SelectorMixin.get_support", false]], "get_support() (sklearn.feature_selection.selectpercentile method)": [[599, "sklearn.feature_selection.SelectPercentile.get_support", false]], "get_support() (sklearn.feature_selection.sequentialfeatureselector method)": [[601, "sklearn.feature_selection.SequentialFeatureSelector.get_support", false]], "get_support() (sklearn.feature_selection.variancethreshold method)": [[602, "sklearn.feature_selection.VarianceThreshold.get_support", false]], "get_tags() (in module sklearn.utils)": [[953, "sklearn.utils.get_tags", false]], "get_tree_stats() (sklearn.neighbors.balltree method)": [[844, "sklearn.neighbors.BallTree.get_tree_stats", false]], "get_tree_stats() (sklearn.neighbors.kdtree method)": [[845, "sklearn.neighbors.KDTree.get_tree_stats", false]], "gibbs() (sklearn.neural_network.bernoullirbm method)": [[860, "sklearn.neural_network.BernoulliRBM.gibbs", false]], "gradientboostingclassifier (class in sklearn.ensemble)": [[557, "sklearn.ensemble.GradientBoostingClassifier", false]], "gradientboostingregressor (class in sklearn.ensemble)": [[558, "sklearn.ensemble.GradientBoostingRegressor", false]], "graphical_lasso() (in module sklearn.covariance)": [[475, "sklearn.covariance.graphical_lasso", false]], "graphicallasso (class in sklearn.covariance)": [[468, "sklearn.covariance.GraphicalLasso", false]], "graphicallassocv (class in sklearn.covariance)": [[469, "sklearn.covariance.GraphicalLassoCV", false]], "grid_to_graph() (in module sklearn.feature_extraction.image)": [[584, "sklearn.feature_extraction.image.grid_to_graph", false]], "gridsearchcv (class in sklearn.model_selection)": [[800, "sklearn.model_selection.GridSearchCV", false]], "groupkfold (class in sklearn.model_selection)": [[801, "sklearn.model_selection.GroupKFold", false]], "groups": [[386, "term-groups", true]], "groupshufflesplit (class in sklearn.model_selection)": [[802, "sklearn.model_selection.GroupShuffleSplit", false]], "halvinggridsearchcv (class in sklearn.model_selection)": [[803, "sklearn.model_selection.HalvingGridSearchCV", false]], "halvingrandomsearchcv (class in sklearn.model_selection)": [[804, "sklearn.model_selection.HalvingRandomSearchCV", false]], "hamming_loss() (in module sklearn.metrics)": [[734, "sklearn.metrics.hamming_loss", false]], "has_fit_parameter() (in module sklearn.utils.validation)": [[986, "sklearn.utils.validation.has_fit_parameter", false]], "hashingvectorizer (class in sklearn.feature_extraction.text)": [[588, "sklearn.feature_extraction.text.HashingVectorizer", false]], "haversine_distances() (in module sklearn.metrics.pairwise)": [[764, "sklearn.metrics.pairwise.haversine_distances", false]], "hdbscan (class in sklearn.cluster)": [[443, "sklearn.cluster.HDBSCAN", false]], "hinge_loss() (in module sklearn.metrics)": [[735, "sklearn.metrics.hinge_loss", false]], "histgradientboostingclassifier (class in sklearn.ensemble)": [[559, "sklearn.ensemble.HistGradientBoostingClassifier", false]], "histgradientboostingregressor (class in sklearn.ensemble)": [[560, "sklearn.ensemble.HistGradientBoostingRegressor", false]], "homogeneity_completeness_v_measure() (in module sklearn.metrics)": [[736, "sklearn.metrics.homogeneity_completeness_v_measure", false]], "homogeneity_score() (in module sklearn.metrics)": [[737, "sklearn.metrics.homogeneity_score", false]], "huberregressor (class in sklearn.linear_model)": [[649, "sklearn.linear_model.HuberRegressor", false]], "hyper-parameter": [[386, "term-hyper-parameter", true]], "hyperparameter": [[386, "term-hyperparameter", true]], "hyperparameter (class in sklearn.gaussian_process.kernels)": [[617, "sklearn.gaussian_process.kernels.Hyperparameter", false]], "hyperparameter_length_scale (sklearn.gaussian_process.kernels.expsinesquared property)": [[615, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameter_length_scale", false]], "hyperparameters (sklearn.gaussian_process.kernels.compoundkernel property)": [[612, "sklearn.gaussian_process.kernels.CompoundKernel.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.constantkernel property)": [[613, "sklearn.gaussian_process.kernels.ConstantKernel.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.dotproduct property)": [[614, "sklearn.gaussian_process.kernels.DotProduct.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.exponentiation property)": [[616, "sklearn.gaussian_process.kernels.Exponentiation.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.expsinesquared property)": [[615, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.kernel property)": [[618, "sklearn.gaussian_process.kernels.Kernel.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.matern property)": [[619, "sklearn.gaussian_process.kernels.Matern.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.pairwisekernel property)": [[620, "sklearn.gaussian_process.kernels.PairwiseKernel.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.product property)": [[621, "sklearn.gaussian_process.kernels.Product.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.rationalquadratic property)": [[623, "sklearn.gaussian_process.kernels.RationalQuadratic.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.rbf property)": [[622, "sklearn.gaussian_process.kernels.RBF.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.sum property)": [[624, "sklearn.gaussian_process.kernels.Sum.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.whitekernel property)": [[625, "sklearn.gaussian_process.kernels.WhiteKernel.hyperparameters", false]], "img_to_graph() (in module sklearn.feature_extraction.image)": [[585, "sklearn.feature_extraction.image.img_to_graph", false]], "imputation": [[386, "term-imputation", true]], "impute": [[386, "term-impute", true]], "inconsistentversionwarning": [[575, "sklearn.exceptions.InconsistentVersionWarning", false]], "incr_mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[973, "sklearn.utils.sparsefuncs.incr_mean_variance_axis", false]], "incrementalpca (class in sklearn.decomposition)": [[532, "sklearn.decomposition.IncrementalPCA", false]], "index() (sklearn.gaussian_process.kernels.hyperparameter method)": [[617, "sklearn.gaussian_process.kernels.Hyperparameter.index", false]], "indexable": [[386, "term-indexable", true]], "indexable() (in module sklearn.utils)": [[955, "sklearn.utils.indexable", false]], "induction": [[386, "term-induction", true]], "inductive": [[386, "term-inductive", true]], "inplace_column_scale() (in module sklearn.utils.sparsefuncs)": [[974, "sklearn.utils.sparsefuncs.inplace_column_scale", false]], "inplace_csr_column_scale() (in module sklearn.utils.sparsefuncs)": [[975, "sklearn.utils.sparsefuncs.inplace_csr_column_scale", false]], "inplace_csr_row_normalize_l1() (in module sklearn.utils.sparsefuncs_fast)": [[980, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1", false]], "inplace_csr_row_normalize_l2() (in module sklearn.utils.sparsefuncs_fast)": [[981, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2", false]], "inplace_row_scale() (in module sklearn.utils.sparsefuncs)": [[976, "sklearn.utils.sparsefuncs.inplace_row_scale", false]], "inplace_swap_column() (in module sklearn.utils.sparsefuncs)": [[977, "sklearn.utils.sparsefuncs.inplace_swap_column", false]], "inplace_swap_row() (in module sklearn.utils.sparsefuncs)": [[978, "sklearn.utils.sparsefuncs.inplace_swap_row", false]], "inputtags (class in sklearn.utils)": [[921, "sklearn.utils.InputTags", false]], "inverse_transform() (sklearn.cluster.featureagglomeration method)": [[442, "sklearn.cluster.FeatureAgglomeration.inverse_transform", false]], "inverse_transform() (sklearn.cross_decomposition.cca method)": [[479, "sklearn.cross_decomposition.CCA.inverse_transform", false]], "inverse_transform() (sklearn.cross_decomposition.plscanonical method)": [[480, "sklearn.cross_decomposition.PLSCanonical.inverse_transform", false]], "inverse_transform() (sklearn.cross_decomposition.plsregression method)": [[481, "sklearn.cross_decomposition.PLSRegression.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.dictionarylearning method)": [[529, "sklearn.decomposition.DictionaryLearning.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.fastica method)": [[531, "sklearn.decomposition.FastICA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.incrementalpca method)": [[532, "sklearn.decomposition.IncrementalPCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.kernelpca method)": [[533, "sklearn.decomposition.KernelPCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[535, "sklearn.decomposition.MiniBatchDictionaryLearning.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.minibatchnmf method)": [[536, "sklearn.decomposition.MiniBatchNMF.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.minibatchsparsepca method)": [[537, "sklearn.decomposition.MiniBatchSparsePCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.nmf method)": [[538, "sklearn.decomposition.NMF.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.pca method)": [[539, "sklearn.decomposition.PCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.sparsecoder method)": [[540, "sklearn.decomposition.SparseCoder.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.sparsepca method)": [[541, "sklearn.decomposition.SparsePCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.truncatedsvd method)": [[542, "sklearn.decomposition.TruncatedSVD.inverse_transform", false]], "inverse_transform() (sklearn.feature_extraction.dictvectorizer method)": [[580, "sklearn.feature_extraction.DictVectorizer.inverse_transform", false]], "inverse_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[587, "sklearn.feature_extraction.text.CountVectorizer.inverse_transform", false]], "inverse_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[590, "sklearn.feature_extraction.text.TfidfVectorizer.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.genericunivariateselect method)": [[591, "sklearn.feature_selection.GenericUnivariateSelect.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.rfe method)": [[592, "sklearn.feature_selection.RFE.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.rfecv method)": [[593, "sklearn.feature_selection.RFECV.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectfdr method)": [[594, "sklearn.feature_selection.SelectFdr.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectfpr method)": [[595, "sklearn.feature_selection.SelectFpr.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectfrommodel method)": [[596, "sklearn.feature_selection.SelectFromModel.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectfwe method)": [[597, "sklearn.feature_selection.SelectFwe.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectkbest method)": [[598, "sklearn.feature_selection.SelectKBest.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectormixin method)": [[600, "sklearn.feature_selection.SelectorMixin.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectpercentile method)": [[599, "sklearn.feature_selection.SelectPercentile.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[601, "sklearn.feature_selection.SequentialFeatureSelector.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.variancethreshold method)": [[602, "sklearn.feature_selection.VarianceThreshold.inverse_transform", false]], "inverse_transform() (sklearn.impute.simpleimputer method)": [[630, "sklearn.impute.SimpleImputer.inverse_transform", false]], "inverse_transform() (sklearn.model_selection.gridsearchcv method)": [[800, "sklearn.model_selection.GridSearchCV.inverse_transform", false]], "inverse_transform() (sklearn.model_selection.halvinggridsearchcv method)": [[803, "sklearn.model_selection.HalvingGridSearchCV.inverse_transform", false]], "inverse_transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[804, "sklearn.model_selection.HalvingRandomSearchCV.inverse_transform", false]], "inverse_transform() (sklearn.model_selection.randomizedsearchcv method)": [[814, "sklearn.model_selection.RandomizedSearchCV.inverse_transform", false]], "inverse_transform() (sklearn.pipeline.pipeline method)": [[864, "sklearn.pipeline.Pipeline.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.functiontransformer method)": [[868, "sklearn.preprocessing.FunctionTransformer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[869, "sklearn.preprocessing.KBinsDiscretizer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.labelbinarizer method)": [[871, "sklearn.preprocessing.LabelBinarizer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.labelencoder method)": [[872, "sklearn.preprocessing.LabelEncoder.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.maxabsscaler method)": [[873, "sklearn.preprocessing.MaxAbsScaler.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.minmaxscaler method)": [[874, "sklearn.preprocessing.MinMaxScaler.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[875, "sklearn.preprocessing.MultiLabelBinarizer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.onehotencoder method)": [[877, "sklearn.preprocessing.OneHotEncoder.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.ordinalencoder method)": [[878, "sklearn.preprocessing.OrdinalEncoder.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.powertransformer method)": [[880, "sklearn.preprocessing.PowerTransformer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.quantiletransformer method)": [[881, "sklearn.preprocessing.QuantileTransformer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.robustscaler method)": [[882, "sklearn.preprocessing.RobustScaler.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.standardscaler method)": [[884, "sklearn.preprocessing.StandardScaler.inverse_transform", false]], "inverse_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[896, "sklearn.random_projection.GaussianRandomProjection.inverse_transform", false]], "inverse_transform() (sklearn.random_projection.sparserandomprojection method)": [[897, "sklearn.random_projection.SparseRandomProjection.inverse_transform", false]], "is_classifier() (in module sklearn.base)": [[430, "sklearn.base.is_classifier", false]], "is_clusterer() (in module sklearn.base)": [[431, "sklearn.base.is_clusterer", false]], "is_multilabel() (in module sklearn.utils.multiclass)": [[962, "sklearn.utils.multiclass.is_multilabel", false]], "is_outlier_detector() (in module sklearn.base)": [[432, "sklearn.base.is_outlier_detector", false]], "is_regressor() (in module sklearn.base)": [[433, "sklearn.base.is_regressor", false]], "is_stationary() (sklearn.gaussian_process.kernels.compoundkernel method)": [[612, "sklearn.gaussian_process.kernels.CompoundKernel.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.constantkernel method)": [[613, "sklearn.gaussian_process.kernels.ConstantKernel.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.dotproduct method)": [[614, "sklearn.gaussian_process.kernels.DotProduct.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.exponentiation method)": [[616, "sklearn.gaussian_process.kernels.Exponentiation.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.expsinesquared method)": [[615, "sklearn.gaussian_process.kernels.ExpSineSquared.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.kernel method)": [[618, "sklearn.gaussian_process.kernels.Kernel.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.matern method)": [[619, "sklearn.gaussian_process.kernels.Matern.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[620, "sklearn.gaussian_process.kernels.PairwiseKernel.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.product method)": [[621, "sklearn.gaussian_process.kernels.Product.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[623, "sklearn.gaussian_process.kernels.RationalQuadratic.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.rbf method)": [[622, "sklearn.gaussian_process.kernels.RBF.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.sum method)": [[624, "sklearn.gaussian_process.kernels.Sum.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.whitekernel method)": [[625, "sklearn.gaussian_process.kernels.WhiteKernel.is_stationary", false]], "isolationforest (class in sklearn.ensemble)": [[561, "sklearn.ensemble.IsolationForest", false]], "isomap (class in sklearn.manifold)": [[688, "sklearn.manifold.Isomap", false]], "isotonic_regression() (in module sklearn.isotonic)": [[637, "sklearn.isotonic.isotonic_regression", false]], "isotonicregression (class in sklearn.isotonic)": [[635, "sklearn.isotonic.IsotonicRegression", false]], "items() (sklearn.utils.bunch method)": [[919, "sklearn.utils.Bunch.items", false]], "iterativeimputer (class in sklearn.impute)": [[627, "sklearn.impute.IterativeImputer", false]], "jaccard_score() (in module sklearn.metrics)": [[738, "sklearn.metrics.jaccard_score", false]], "joblib": [[386, "term-joblib", true]], "johnson_lindenstrauss_min_dim() (in module sklearn.random_projection)": [[898, "sklearn.random_projection.johnson_lindenstrauss_min_dim", false]], "k_means() (in module sklearn.cluster)": [[456, "sklearn.cluster.k_means", false]], "kbinsdiscretizer (class in sklearn.preprocessing)": [[869, "sklearn.preprocessing.KBinsDiscretizer", false]], "kdtree (class in sklearn.neighbors)": [[845, "sklearn.neighbors.KDTree", false]], "kernel": [[386, "term-kernel", true]], "kernel (class in sklearn.gaussian_process.kernels)": [[618, "sklearn.gaussian_process.kernels.Kernel", false]], "kernel_density() (sklearn.neighbors.balltree method)": [[844, "sklearn.neighbors.BallTree.kernel_density", false]], "kernel_density() (sklearn.neighbors.kdtree method)": [[845, "sklearn.neighbors.KDTree.kernel_density", false]], "kernel_metrics() (in module sklearn.metrics.pairwise)": [[765, "sklearn.metrics.pairwise.kernel_metrics", false]], "kernelcenterer (class in sklearn.preprocessing)": [[870, "sklearn.preprocessing.KernelCenterer", false]], "kerneldensity (class in sklearn.neighbors)": [[849, "sklearn.neighbors.KernelDensity", false]], "kernelpca (class in sklearn.decomposition)": [[533, "sklearn.decomposition.KernelPCA", false]], "kernelridge (class in sklearn.kernel_ridge)": [[643, "sklearn.kernel_ridge.KernelRidge", false]], "keys() (sklearn.utils.bunch method)": [[919, "sklearn.utils.Bunch.keys", false]], "kfold (class in sklearn.model_selection)": [[805, "sklearn.model_selection.KFold", false]], "kmeans (class in sklearn.cluster)": [[444, "sklearn.cluster.KMeans", false]], "kmeans_plusplus() (in module sklearn.cluster)": [[457, "sklearn.cluster.kmeans_plusplus", false]], "kneighbors() (sklearn.neighbors.kneighborsclassifier method)": [[846, "sklearn.neighbors.KNeighborsClassifier.kneighbors", false]], "kneighbors() (sklearn.neighbors.kneighborsregressor method)": [[847, "sklearn.neighbors.KNeighborsRegressor.kneighbors", false]], "kneighbors() (sklearn.neighbors.kneighborstransformer method)": [[848, "sklearn.neighbors.KNeighborsTransformer.kneighbors", false]], "kneighbors() (sklearn.neighbors.localoutlierfactor method)": [[850, "sklearn.neighbors.LocalOutlierFactor.kneighbors", false]], "kneighbors() (sklearn.neighbors.nearestneighbors method)": [[852, "sklearn.neighbors.NearestNeighbors.kneighbors", false]], "kneighbors_graph() (in module sklearn.neighbors)": [[857, "sklearn.neighbors.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.kneighborsclassifier method)": [[846, "sklearn.neighbors.KNeighborsClassifier.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.kneighborsregressor method)": [[847, "sklearn.neighbors.KNeighborsRegressor.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.kneighborstransformer method)": [[848, "sklearn.neighbors.KNeighborsTransformer.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.localoutlierfactor method)": [[850, "sklearn.neighbors.LocalOutlierFactor.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[852, "sklearn.neighbors.NearestNeighbors.kneighbors_graph", false]], "kneighborsclassifier (class in sklearn.neighbors)": [[846, "sklearn.neighbors.KNeighborsClassifier", false]], "kneighborsregressor (class in sklearn.neighbors)": [[847, "sklearn.neighbors.KNeighborsRegressor", false]], "kneighborstransformer (class in sklearn.neighbors)": [[848, "sklearn.neighbors.KNeighborsTransformer", false]], "knnimputer (class in sklearn.impute)": [[628, "sklearn.impute.KNNImputer", false]], "l1_min_c() (in module sklearn.svm)": [[911, "sklearn.svm.l1_min_c", false]], "label indicator matrix": [[386, "term-label-indicator-matrix", true]], "label_binarize() (in module sklearn.preprocessing)": [[888, "sklearn.preprocessing.label_binarize", false]], "label_ranking_average_precision_score() (in module sklearn.metrics)": [[739, "sklearn.metrics.label_ranking_average_precision_score", false]], "label_ranking_loss() (in module sklearn.metrics)": [[740, "sklearn.metrics.label_ranking_loss", false]], "labelbinarizer (class in sklearn.preprocessing)": [[871, "sklearn.preprocessing.LabelBinarizer", false]], "labelencoder (class in sklearn.preprocessing)": [[872, "sklearn.preprocessing.LabelEncoder", false]], "labelpropagation (class in sklearn.semi_supervised)": [[899, "sklearn.semi_supervised.LabelPropagation", false]], "labels_": [[386, "term-labels_", true]], "labelspreading (class in sklearn.semi_supervised)": [[900, "sklearn.semi_supervised.LabelSpreading", false]], "laplacian_kernel() (in module sklearn.metrics.pairwise)": [[766, "sklearn.metrics.pairwise.laplacian_kernel", false]], "lars (class in sklearn.linear_model)": [[650, "sklearn.linear_model.Lars", false]], "lars_path() (in module sklearn.linear_model)": [[682, "sklearn.linear_model.lars_path", false]], "lars_path_gram() (in module sklearn.linear_model)": [[683, "sklearn.linear_model.lars_path_gram", false]], "larscv (class in sklearn.linear_model)": [[651, "sklearn.linear_model.LarsCV", false]], "lasso (class in sklearn.linear_model)": [[652, "sklearn.linear_model.Lasso", false]], "lasso_path() (in module sklearn.linear_model)": [[684, "sklearn.linear_model.lasso_path", false]], "lassocv (class in sklearn.linear_model)": [[653, "sklearn.linear_model.LassoCV", false]], "lassolars (class in sklearn.linear_model)": [[654, "sklearn.linear_model.LassoLars", false]], "lassolarscv (class in sklearn.linear_model)": [[655, "sklearn.linear_model.LassoLarsCV", false]], "lassolarsic (class in sklearn.linear_model)": [[656, "sklearn.linear_model.LassoLarsIC", false]], "latent_mean_and_variance() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[610, "sklearn.gaussian_process.GaussianProcessClassifier.latent_mean_and_variance", false]], "latentdirichletallocation (class in sklearn.decomposition)": [[534, "sklearn.decomposition.LatentDirichletAllocation", false]], "leakage": [[386, "term-leakage", true]], "learning_curve() (in module sklearn.model_selection)": [[828, "sklearn.model_selection.learning_curve", false]], "learningcurvedisplay (class in sklearn.model_selection)": [[806, "sklearn.model_selection.LearningCurveDisplay", false]], "leaveonegroupout (class in sklearn.model_selection)": [[807, "sklearn.model_selection.LeaveOneGroupOut", false]], "leaveoneout (class in sklearn.model_selection)": [[808, "sklearn.model_selection.LeaveOneOut", false]], "leavepgroupsout (class in sklearn.model_selection)": [[809, "sklearn.model_selection.LeavePGroupsOut", false]], "leavepout (class in sklearn.model_selection)": [[810, "sklearn.model_selection.LeavePOut", false]], "ledoit_wolf() (in module sklearn.covariance)": [[476, "sklearn.covariance.ledoit_wolf", false]], "ledoit_wolf_shrinkage() (in module sklearn.covariance)": [[477, "sklearn.covariance.ledoit_wolf_shrinkage", false]], "ledoitwolf (class in sklearn.covariance)": [[470, "sklearn.covariance.LedoitWolf", false]], "linear_kernel() (in module sklearn.metrics.pairwise)": [[767, "sklearn.metrics.pairwise.linear_kernel", false]], "lineardiscriminantanalysis (class in sklearn.discriminant_analysis)": [[547, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis", false]], "linearregression (class in sklearn.linear_model)": [[657, "sklearn.linear_model.LinearRegression", false]], "linearsvc (class in sklearn.svm)": [[904, "sklearn.svm.LinearSVC", false]], "linearsvr (class in sklearn.svm)": [[905, "sklearn.svm.LinearSVR", false]], "load_breast_cancer() (in module sklearn.datasets)": [[498, "sklearn.datasets.load_breast_cancer", false]], "load_diabetes() (in module sklearn.datasets)": [[499, "sklearn.datasets.load_diabetes", false]], "load_digits() (in module sklearn.datasets)": [[500, "sklearn.datasets.load_digits", false]], "load_files() (in module sklearn.datasets)": [[501, "sklearn.datasets.load_files", false]], "load_iris() (in module sklearn.datasets)": [[502, "sklearn.datasets.load_iris", false]], "load_linnerud() (in module sklearn.datasets)": [[503, "sklearn.datasets.load_linnerud", false]], "load_sample_image() (in module sklearn.datasets)": [[504, "sklearn.datasets.load_sample_image", false]], "load_sample_images() (in module sklearn.datasets)": [[505, "sklearn.datasets.load_sample_images", false]], "load_svmlight_file() (in module sklearn.datasets)": [[506, "sklearn.datasets.load_svmlight_file", false]], "load_svmlight_files() (in module sklearn.datasets)": [[507, "sklearn.datasets.load_svmlight_files", false]], "load_wine() (in module sklearn.datasets)": [[508, "sklearn.datasets.load_wine", false]], "locally_linear_embedding() (in module sklearn.manifold)": [[693, "sklearn.manifold.locally_linear_embedding", false]], "locallylinearembedding (class in sklearn.manifold)": [[689, "sklearn.manifold.LocallyLinearEmbedding", false]], "localoutlierfactor (class in sklearn.neighbors)": [[850, "sklearn.neighbors.LocalOutlierFactor", false]], "log_loss() (in module sklearn.metrics)": [[741, "sklearn.metrics.log_loss", false]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[610, "sklearn.gaussian_process.GaussianProcessClassifier.log_marginal_likelihood", false]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessregressor method)": [[611, "sklearn.gaussian_process.GaussianProcessRegressor.log_marginal_likelihood", false]], "logisticregression (class in sklearn.linear_model)": [[658, "sklearn.linear_model.LogisticRegression", false]], "logisticregressioncv (class in sklearn.linear_model)": [[659, "sklearn.linear_model.LogisticRegressionCV", false]], "mahalanobis() (sklearn.covariance.ellipticenvelope method)": [[466, "sklearn.covariance.EllipticEnvelope.mahalanobis", false]], "mahalanobis() (sklearn.covariance.empiricalcovariance method)": [[467, "sklearn.covariance.EmpiricalCovariance.mahalanobis", false]], "mahalanobis() (sklearn.covariance.graphicallasso method)": [[468, "sklearn.covariance.GraphicalLasso.mahalanobis", false]], "mahalanobis() (sklearn.covariance.graphicallassocv method)": [[469, "sklearn.covariance.GraphicalLassoCV.mahalanobis", false]], "mahalanobis() (sklearn.covariance.ledoitwolf method)": [[470, "sklearn.covariance.LedoitWolf.mahalanobis", false]], "mahalanobis() (sklearn.covariance.mincovdet method)": [[471, "sklearn.covariance.MinCovDet.mahalanobis", false]], "mahalanobis() (sklearn.covariance.oas method)": [[472, "sklearn.covariance.OAS.mahalanobis", false]], "mahalanobis() (sklearn.covariance.shrunkcovariance method)": [[473, "sklearn.covariance.ShrunkCovariance.mahalanobis", false]], "make_biclusters() (in module sklearn.datasets)": [[509, "sklearn.datasets.make_biclusters", false]], "make_blobs() (in module sklearn.datasets)": [[510, "sklearn.datasets.make_blobs", false]], "make_checkerboard() (in module sklearn.datasets)": [[511, "sklearn.datasets.make_checkerboard", false]], "make_circles() (in module sklearn.datasets)": [[512, "sklearn.datasets.make_circles", false]], "make_classification() (in module sklearn.datasets)": [[513, "sklearn.datasets.make_classification", false]], "make_column_selector (class in sklearn.compose)": [[463, "sklearn.compose.make_column_selector", false]], "make_column_transformer() (in module sklearn.compose)": [[464, "sklearn.compose.make_column_transformer", false]], "make_friedman1() (in module sklearn.datasets)": [[514, "sklearn.datasets.make_friedman1", false]], "make_friedman2() (in module sklearn.datasets)": [[515, "sklearn.datasets.make_friedman2", false]], "make_friedman3() (in module sklearn.datasets)": [[516, "sklearn.datasets.make_friedman3", false]], "make_gaussian_quantiles() (in module sklearn.datasets)": [[517, "sklearn.datasets.make_gaussian_quantiles", false]], "make_hastie_10_2() (in module sklearn.datasets)": [[518, "sklearn.datasets.make_hastie_10_2", false]], "make_low_rank_matrix() (in module sklearn.datasets)": [[519, "sklearn.datasets.make_low_rank_matrix", false]], "make_moons() (in module sklearn.datasets)": [[520, "sklearn.datasets.make_moons", false]], "make_multilabel_classification() (in module sklearn.datasets)": [[521, "sklearn.datasets.make_multilabel_classification", false]], "make_pipeline() (in module sklearn.pipeline)": [[865, "sklearn.pipeline.make_pipeline", false]], "make_regression() (in module sklearn.datasets)": [[522, "sklearn.datasets.make_regression", false]], "make_s_curve() (in module sklearn.datasets)": [[523, "sklearn.datasets.make_s_curve", false]], "make_scorer() (in module sklearn.metrics)": [[742, "sklearn.metrics.make_scorer", false]], "make_sparse_coded_signal() (in module sklearn.datasets)": [[524, "sklearn.datasets.make_sparse_coded_signal", false]], "make_sparse_spd_matrix() (in module sklearn.datasets)": [[525, "sklearn.datasets.make_sparse_spd_matrix", false]], "make_sparse_uncorrelated() (in module sklearn.datasets)": [[526, "sklearn.datasets.make_sparse_uncorrelated", false]], "make_spd_matrix() (in module sklearn.datasets)": [[527, "sklearn.datasets.make_spd_matrix", false]], "make_swiss_roll() (in module sklearn.datasets)": [[528, "sklearn.datasets.make_swiss_roll", false]], "make_union() (in module sklearn.pipeline)": [[866, "sklearn.pipeline.make_union", false]], "manhattan_distances() (in module sklearn.metrics.pairwise)": [[768, "sklearn.metrics.pairwise.manhattan_distances", false]], "matern (class in sklearn.gaussian_process.kernels)": [[619, "sklearn.gaussian_process.kernels.Matern", false]], "matthews_corrcoef() (in module sklearn.metrics)": [[743, "sklearn.metrics.matthews_corrcoef", false]], "max_error() (in module sklearn.metrics)": [[744, "sklearn.metrics.max_error", false]], "max_iter": [[386, "term-max_iter", true]], "maxabs_scale() (in module sklearn.preprocessing)": [[889, "sklearn.preprocessing.maxabs_scale", false]], "maxabsscaler (class in sklearn.preprocessing)": [[873, "sklearn.preprocessing.MaxAbsScaler", false]], "mds (class in sklearn.manifold)": [[690, "sklearn.manifold.MDS", false]], "mean_absolute_error() (in module sklearn.metrics)": [[745, "sklearn.metrics.mean_absolute_error", false]], "mean_absolute_percentage_error() (in module sklearn.metrics)": [[746, "sklearn.metrics.mean_absolute_percentage_error", false]], "mean_gamma_deviance() (in module sklearn.metrics)": [[747, "sklearn.metrics.mean_gamma_deviance", false]], "mean_pinball_loss() (in module sklearn.metrics)": [[748, "sklearn.metrics.mean_pinball_loss", false]], "mean_poisson_deviance() (in module sklearn.metrics)": [[749, "sklearn.metrics.mean_poisson_deviance", false]], "mean_shift() (in module sklearn.cluster)": [[458, "sklearn.cluster.mean_shift", false]], "mean_squared_error() (in module sklearn.metrics)": [[750, "sklearn.metrics.mean_squared_error", false]], "mean_squared_log_error() (in module sklearn.metrics)": [[751, "sklearn.metrics.mean_squared_log_error", false]], "mean_tweedie_deviance() (in module sklearn.metrics)": [[752, "sklearn.metrics.mean_tweedie_deviance", false]], "mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[979, "sklearn.utils.sparsefuncs.mean_variance_axis", false]], "meanshift (class in sklearn.cluster)": [[445, "sklearn.cluster.MeanShift", false]], "median_absolute_error() (in module sklearn.metrics)": [[753, "sklearn.metrics.median_absolute_error", false]], "memmapping": [[386, "term-memmapping", true]], "memory": [[386, "term-memory", true]], "memory map": [[386, "term-memory-map", true]], "memory mapping": [[386, "term-memory-mapping", true]], "meta-estimator": [[386, "term-meta-estimator", true]], "meta-estimators": [[386, "term-meta-estimators", true]], "metadata": [[386, "term-metadata", true]], "metadatarequest (class in sklearn.utils.metadata_routing)": [[956, "sklearn.utils.metadata_routing.MetadataRequest", false]], "metadatarouter (class in sklearn.utils.metadata_routing)": [[957, "sklearn.utils.metadata_routing.MetadataRouter", false]], "metaestimator": [[386, "term-metaestimator", true]], "metaestimatormixin (class in sklearn.base)": [[424, "sklearn.base.MetaEstimatorMixin", false]], "metaestimators": [[386, "term-metaestimators", true]], "methodmapping (class in sklearn.utils.metadata_routing)": [[958, "sklearn.utils.metadata_routing.MethodMapping", false]], "metric": [[386, "term-metric", true]], "min_pos() (in module sklearn.utils.arrayfuncs)": [[927, "sklearn.utils.arrayfuncs.min_pos", false]], "mincovdet (class in sklearn.covariance)": [[471, "sklearn.covariance.MinCovDet", false]], "minibatchdictionarylearning (class in sklearn.decomposition)": [[535, "sklearn.decomposition.MiniBatchDictionaryLearning", false]], "minibatchkmeans (class in sklearn.cluster)": [[446, "sklearn.cluster.MiniBatchKMeans", false]], "minibatchnmf (class in sklearn.decomposition)": [[536, "sklearn.decomposition.MiniBatchNMF", false]], "minibatchsparsepca (class in sklearn.decomposition)": [[537, "sklearn.decomposition.MiniBatchSparsePCA", false]], "minmax_scale() (in module sklearn.preprocessing)": [[890, "sklearn.preprocessing.minmax_scale", false]], "minmaxscaler (class in sklearn.preprocessing)": [[874, "sklearn.preprocessing.MinMaxScaler", false]], "missing values": [[386, "term-missing-values", true]], "missingindicator (class in sklearn.impute)": [[629, "sklearn.impute.MissingIndicator", false]], "mlpclassifier (class in sklearn.neural_network)": [[861, "sklearn.neural_network.MLPClassifier", false]], "mlpregressor (class in sklearn.neural_network)": [[862, "sklearn.neural_network.MLPRegressor", false]], "module": [[2, "module-sklearn", false], [3, "module-sklearn.base", false], [4, "module-sklearn.calibration", false], [5, "module-sklearn.cluster", false], [6, "module-sklearn.compose", false], [7, "module-sklearn.covariance", false], [8, "module-sklearn.cross_decomposition", false], [9, "module-sklearn.datasets", false], [10, "module-sklearn.decomposition", false], [11, "module-sklearn.discriminant_analysis", false], [12, "module-sklearn.dummy", false], [13, "module-sklearn.ensemble", false], [14, "module-sklearn.exceptions", false], [15, "module-sklearn.experimental", false], [16, "module-sklearn.feature_extraction", false], [16, "module-sklearn.feature_extraction.image", false], [16, "module-sklearn.feature_extraction.text", false], [17, "module-sklearn.feature_selection", false], [18, "module-sklearn.frozen", false], [19, "module-sklearn.gaussian_process", false], [19, "module-sklearn.gaussian_process.kernels", false], [20, "module-sklearn.impute", false], [21, "module-sklearn.inspection", false], [22, "module-sklearn.isotonic", false], [23, "module-sklearn.kernel_approximation", false], [24, "module-sklearn.kernel_ridge", false], [25, "module-sklearn.linear_model", false], [26, "module-sklearn.manifold", false], [27, "module-sklearn.metrics", false], [27, "module-sklearn.metrics.cluster", false], [27, "module-sklearn.metrics.pairwise", false], [28, "module-sklearn.mixture", false], [29, "module-sklearn.model_selection", false], [30, "module-sklearn.multiclass", false], [31, "module-sklearn.multioutput", false], [32, "module-sklearn.naive_bayes", false], [33, "module-sklearn.neighbors", false], [34, "module-sklearn.neural_network", false], [35, "module-sklearn.pipeline", false], [36, "module-sklearn.preprocessing", false], [37, "module-sklearn.random_projection", false], [38, "module-sklearn.semi_supervised", false], [39, "module-sklearn.svm", false], [40, "module-sklearn.tree", false], [41, "module-sklearn.utils", false], [41, "module-sklearn.utils.arrayfuncs", false], [41, "module-sklearn.utils.class_weight", false], [41, "module-sklearn.utils.discovery", false], [41, "module-sklearn.utils.estimator_checks", false], [41, "module-sklearn.utils.extmath", false], [41, "module-sklearn.utils.graph", false], [41, "module-sklearn.utils.metadata_routing", false], [41, "module-sklearn.utils.metaestimators", false], [41, "module-sklearn.utils.multiclass", false], [41, "module-sklearn.utils.parallel", false], [41, "module-sklearn.utils.random", false], [41, "module-sklearn.utils.sparsefuncs", false], [41, "module-sklearn.utils.sparsefuncs_fast", false], [41, "module-sklearn.utils.validation", false], [578, "module-sklearn.experimental.enable_halving_search_cv", false], [579, "module-sklearn.experimental.enable_iterative_imputer", false]], "multi-class": [[386, "term-multi-class", true]], "multi-class multi-output": [[386, "term-multi-class-multi-output", true]], "multi-label": [[386, "term-multi-label", true]], "multi-output": [[386, "term-multi-output", true]], "multi-output continuous": [[386, "term-multi-output-continuous", true]], "multi-output multi-class": [[386, "term-multi-output-multi-class", true]], "multiclass": [[386, "term-multiclass", true]], "multiclass multioutput": [[386, "term-multiclass-multioutput", true]], "multilabel": [[386, "term-multilabel", true]], "multilabel indicator matrices": [[386, "term-multilabel-indicator-matrices", true]], "multilabel indicator matrix": [[386, "term-multilabel-indicator-matrix", true]], "multilabel_confusion_matrix() (in module sklearn.metrics)": [[754, "sklearn.metrics.multilabel_confusion_matrix", false]], "multilabelbinarizer (class in sklearn.preprocessing)": [[875, "sklearn.preprocessing.MultiLabelBinarizer", false]], "multinomialnb (class in sklearn.naive_bayes)": [[843, "sklearn.naive_bayes.MultinomialNB", false]], "multioutput": [[386, "term-multioutput", true]], "multioutput continuous": [[386, "term-multioutput-continuous", true]], "multioutput multiclass": [[386, "term-multioutput-multiclass", true]], "multioutputclassifier (class in sklearn.multioutput)": [[836, "sklearn.multioutput.MultiOutputClassifier", false]], "multioutputregressor (class in sklearn.multioutput)": [[837, "sklearn.multioutput.MultiOutputRegressor", false]], "multitaskelasticnet (class in sklearn.linear_model)": [[660, "sklearn.linear_model.MultiTaskElasticNet", false]], "multitaskelasticnetcv (class in sklearn.linear_model)": [[661, "sklearn.linear_model.MultiTaskElasticNetCV", false]], "multitasklasso (class in sklearn.linear_model)": [[662, "sklearn.linear_model.MultiTaskLasso", false]], "multitasklassocv (class in sklearn.linear_model)": [[663, "sklearn.linear_model.MultiTaskLassoCV", false]], "murmurhash3_32() (in module sklearn.utils)": [[965, "sklearn.utils.murmurhash3_32", false]], "mutual_info_classif() (in module sklearn.feature_selection)": [[606, "sklearn.feature_selection.mutual_info_classif", false]], "mutual_info_regression() (in module sklearn.feature_selection)": [[607, "sklearn.feature_selection.mutual_info_regression", false]], "mutual_info_score() (in module sklearn.metrics)": [[755, "sklearn.metrics.mutual_info_score", false]], "n_components": [[386, "term-n_components", true]], "n_dims (sklearn.gaussian_process.kernels.compoundkernel property)": [[612, "sklearn.gaussian_process.kernels.CompoundKernel.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.constantkernel property)": [[613, "sklearn.gaussian_process.kernels.ConstantKernel.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.dotproduct property)": [[614, "sklearn.gaussian_process.kernels.DotProduct.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.exponentiation property)": [[616, "sklearn.gaussian_process.kernels.Exponentiation.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.expsinesquared property)": [[615, "sklearn.gaussian_process.kernels.ExpSineSquared.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.kernel property)": [[618, "sklearn.gaussian_process.kernels.Kernel.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.matern property)": [[619, "sklearn.gaussian_process.kernels.Matern.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.pairwisekernel property)": [[620, "sklearn.gaussian_process.kernels.PairwiseKernel.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.product property)": [[621, "sklearn.gaussian_process.kernels.Product.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.rationalquadratic property)": [[623, "sklearn.gaussian_process.kernels.RationalQuadratic.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.rbf property)": [[622, "sklearn.gaussian_process.kernels.RBF.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.sum property)": [[624, "sklearn.gaussian_process.kernels.Sum.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.whitekernel property)": [[625, "sklearn.gaussian_process.kernels.WhiteKernel.n_dims", false]], "n_elements (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[617, "sklearn.gaussian_process.kernels.Hyperparameter.n_elements", false]], "n_features": [[386, "term-n_features", true]], "n_iter_": [[386, "term-n_iter_", true]], "n_iter_no_change": [[386, "term-n_iter_no_change", true]], "n_jobs": [[386, "term-n_jobs", true]], "n_outputs": [[386, "term-n_outputs", true]], "n_samples": [[386, "term-n_samples", true]], "n_targets": [[386, "term-n_targets", true]], "name (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[617, "sklearn.gaussian_process.kernels.Hyperparameter.name", false]], "named_estimators (sklearn.ensemble.stackingclassifier property)": [[565, "sklearn.ensemble.StackingClassifier.named_estimators", false]], "named_estimators (sklearn.ensemble.stackingregressor property)": [[566, "sklearn.ensemble.StackingRegressor.named_estimators", false]], "named_estimators (sklearn.ensemble.votingclassifier property)": [[567, "sklearn.ensemble.VotingClassifier.named_estimators", false]], "named_estimators (sklearn.ensemble.votingregressor property)": [[568, "sklearn.ensemble.VotingRegressor.named_estimators", false]], "named_steps (sklearn.pipeline.pipeline property)": [[864, "sklearn.pipeline.Pipeline.named_steps", false]], "nan_euclidean_distances() (in module sklearn.metrics.pairwise)": [[769, "sklearn.metrics.pairwise.nan_euclidean_distances", false]], "narrative docs": [[386, "term-narrative-docs", true]], "narrative documentation": [[386, "term-narrative-documentation", true]], "ndcg_score() (in module sklearn.metrics)": [[756, "sklearn.metrics.ndcg_score", false]], "nearestcentroid (class in sklearn.neighbors)": [[851, "sklearn.neighbors.NearestCentroid", false]], "nearestneighbors (class in sklearn.neighbors)": [[852, "sklearn.neighbors.NearestNeighbors", false]], "neighborhoodcomponentsanalysis (class in sklearn.neighbors)": [[853, "sklearn.neighbors.NeighborhoodComponentsAnalysis", false]], "nmf (class in sklearn.decomposition)": [[538, "sklearn.decomposition.NMF", false]], "non_negative_factorization() (in module sklearn.decomposition)": [[545, "sklearn.decomposition.non_negative_factorization", false]], "normalize() (in module sklearn.preprocessing)": [[891, "sklearn.preprocessing.normalize", false]], "normalized_mutual_info_score() (in module sklearn.metrics)": [[757, "sklearn.metrics.normalized_mutual_info_score", false]], "normalizer (class in sklearn.preprocessing)": [[876, "sklearn.preprocessing.Normalizer", false]], "notfittederror": [[576, "sklearn.exceptions.NotFittedError", false]], "np": [[386, "term-np", true]], "nusvc (class in sklearn.svm)": [[906, "sklearn.svm.NuSVC", false]], "nusvr (class in sklearn.svm)": [[907, "sklearn.svm.NuSVR", false]], "nystroem (class in sklearn.kernel_approximation)": [[639, "sklearn.kernel_approximation.Nystroem", false]], "oas (class in sklearn.covariance)": [[472, "sklearn.covariance.OAS", false]], "oas() (in module sklearn.covariance)": [[417, "sklearn.covariance.oas", false]], "oneclasssvm (class in sklearn.svm)": [[908, "sklearn.svm.OneClassSVM", false]], "onehotencoder (class in sklearn.preprocessing)": [[877, "sklearn.preprocessing.OneHotEncoder", false]], "onetoonefeaturemixin (class in sklearn.base)": [[425, "sklearn.base.OneToOneFeatureMixin", false]], "onevsoneclassifier (class in sklearn.multiclass)": [[832, "sklearn.multiclass.OneVsOneClassifier", false]], "onevsrestclassifier (class in sklearn.multiclass)": [[833, "sklearn.multiclass.OneVsRestClassifier", false]], "online learning": [[386, "term-online-learning", true]], "optics (class in sklearn.cluster)": [[447, "sklearn.cluster.OPTICS", false]], "ordinalencoder (class in sklearn.preprocessing)": [[878, "sklearn.preprocessing.OrdinalEncoder", false]], "orthogonal_mp() (in module sklearn.linear_model)": [[685, "sklearn.linear_model.orthogonal_mp", false]], "orthogonal_mp_gram() (in module sklearn.linear_model)": [[686, "sklearn.linear_model.orthogonal_mp_gram", false]], "orthogonalmatchingpursuit (class in sklearn.linear_model)": [[664, "sklearn.linear_model.OrthogonalMatchingPursuit", false]], "orthogonalmatchingpursuitcv (class in sklearn.linear_model)": [[665, "sklearn.linear_model.OrthogonalMatchingPursuitCV", false]], "out-of-core": [[386, "term-out-of-core", true]], "outlier detector": [[386, "term-outlier-detector", true]], "outlier detectors": [[386, "term-outlier-detectors", true]], "outliermixin (class in sklearn.base)": [[426, "sklearn.base.OutlierMixin", false]], "outputcodeclassifier (class in sklearn.multiclass)": [[834, "sklearn.multiclass.OutputCodeClassifier", false]], "outputs": [[386, "term-outputs", true]], "pair": [[386, "term-pair", true]], "pair_confusion_matrix() (in module sklearn.metrics.cluster)": [[715, "sklearn.metrics.cluster.pair_confusion_matrix", false]], "paired_cosine_distances() (in module sklearn.metrics.pairwise)": [[770, "sklearn.metrics.pairwise.paired_cosine_distances", false]], "paired_distances() (in module sklearn.metrics.pairwise)": [[771, "sklearn.metrics.pairwise.paired_distances", false]], "paired_euclidean_distances() (in module sklearn.metrics.pairwise)": [[772, "sklearn.metrics.pairwise.paired_euclidean_distances", false]], "paired_manhattan_distances() (in module sklearn.metrics.pairwise)": [[773, "sklearn.metrics.pairwise.paired_manhattan_distances", false]], "pairwise metric": [[386, "term-pairwise-metric", true]], "pairwise metrics": [[386, "term-pairwise-metrics", true]], "pairwise_distances() (in module sklearn.metrics)": [[778, "sklearn.metrics.pairwise_distances", false]], "pairwise_distances_argmin() (in module sklearn.metrics)": [[779, "sklearn.metrics.pairwise_distances_argmin", false]], "pairwise_distances_argmin_min() (in module sklearn.metrics)": [[780, "sklearn.metrics.pairwise_distances_argmin_min", false]], "pairwise_distances_chunked() (in module sklearn.metrics)": [[781, "sklearn.metrics.pairwise_distances_chunked", false]], "pairwise_kernels() (in module sklearn.metrics.pairwise)": [[774, "sklearn.metrics.pairwise.pairwise_kernels", false]], "pairwisekernel (class in sklearn.gaussian_process.kernels)": [[620, "sklearn.gaussian_process.kernels.PairwiseKernel", false]], "parallel (class in sklearn.utils.parallel)": [[966, "sklearn.utils.parallel.Parallel", false]], "param": [[386, "term-param", true]], "parameter": [[386, "term-parameter", true]], "parametergrid (class in sklearn.model_selection)": [[811, "sklearn.model_selection.ParameterGrid", false]], "parameters": [[386, "term-parameters", true]], "parametersampler (class in sklearn.model_selection)": [[812, "sklearn.model_selection.ParameterSampler", false]], "parametrize_with_checks() (in module sklearn.utils.estimator_checks)": [[943, "sklearn.utils.estimator_checks.parametrize_with_checks", false]], "params": [[386, "term-params", true]], "partial_dependence() (in module sklearn.inspection)": [[633, "sklearn.inspection.partial_dependence", false]], "partial_fit": [[386, "term-partial_fit", true]], "partial_fit() (sklearn.cluster.birch method)": [[439, "sklearn.cluster.Birch.partial_fit", false]], "partial_fit() (sklearn.cluster.minibatchkmeans method)": [[446, "sklearn.cluster.MiniBatchKMeans.partial_fit", false]], "partial_fit() (sklearn.decomposition.incrementalpca method)": [[532, "sklearn.decomposition.IncrementalPCA.partial_fit", false]], "partial_fit() (sklearn.decomposition.latentdirichletallocation method)": [[534, "sklearn.decomposition.LatentDirichletAllocation.partial_fit", false]], "partial_fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[535, "sklearn.decomposition.MiniBatchDictionaryLearning.partial_fit", false]], "partial_fit() (sklearn.decomposition.minibatchnmf method)": [[536, "sklearn.decomposition.MiniBatchNMF.partial_fit", false]], "partial_fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[588, "sklearn.feature_extraction.text.HashingVectorizer.partial_fit", false]], "partial_fit() (sklearn.feature_selection.selectfrommodel method)": [[596, "sklearn.feature_selection.SelectFromModel.partial_fit", false]], "partial_fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[666, "sklearn.linear_model.PassiveAggressiveClassifier.partial_fit", false]], "partial_fit() (sklearn.linear_model.passiveaggressiveregressor method)": [[667, "sklearn.linear_model.PassiveAggressiveRegressor.partial_fit", false]], "partial_fit() (sklearn.linear_model.perceptron method)": [[668, "sklearn.linear_model.Perceptron.partial_fit", false]], "partial_fit() (sklearn.linear_model.sgdclassifier method)": [[676, "sklearn.linear_model.SGDClassifier.partial_fit", false]], "partial_fit() (sklearn.linear_model.sgdoneclasssvm method)": [[677, "sklearn.linear_model.SGDOneClassSVM.partial_fit", false]], "partial_fit() (sklearn.linear_model.sgdregressor method)": [[678, "sklearn.linear_model.SGDRegressor.partial_fit", false]], "partial_fit() (sklearn.multiclass.onevsoneclassifier method)": [[832, "sklearn.multiclass.OneVsOneClassifier.partial_fit", false]], "partial_fit() (sklearn.multiclass.onevsrestclassifier method)": [[833, "sklearn.multiclass.OneVsRestClassifier.partial_fit", false]], "partial_fit() (sklearn.multioutput.multioutputclassifier method)": [[836, "sklearn.multioutput.MultiOutputClassifier.partial_fit", false]], "partial_fit() (sklearn.multioutput.multioutputregressor method)": [[837, "sklearn.multioutput.MultiOutputRegressor.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.bernoullinb method)": [[839, "sklearn.naive_bayes.BernoulliNB.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.categoricalnb method)": [[840, "sklearn.naive_bayes.CategoricalNB.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.complementnb method)": [[841, "sklearn.naive_bayes.ComplementNB.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.gaussiannb method)": [[842, "sklearn.naive_bayes.GaussianNB.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.multinomialnb method)": [[843, "sklearn.naive_bayes.MultinomialNB.partial_fit", false]], "partial_fit() (sklearn.neural_network.bernoullirbm method)": [[860, "sklearn.neural_network.BernoulliRBM.partial_fit", false]], "partial_fit() (sklearn.neural_network.mlpclassifier method)": [[861, "sklearn.neural_network.MLPClassifier.partial_fit", false]], "partial_fit() (sklearn.neural_network.mlpregressor method)": [[862, "sklearn.neural_network.MLPRegressor.partial_fit", false]], "partial_fit() (sklearn.preprocessing.maxabsscaler method)": [[873, "sklearn.preprocessing.MaxAbsScaler.partial_fit", false]], "partial_fit() (sklearn.preprocessing.minmaxscaler method)": [[874, "sklearn.preprocessing.MinMaxScaler.partial_fit", false]], "partial_fit() (sklearn.preprocessing.standardscaler method)": [[884, "sklearn.preprocessing.StandardScaler.partial_fit", false]], "partialdependencedisplay (class in sklearn.inspection)": [[632, "sklearn.inspection.PartialDependenceDisplay", false]], "passiveaggressiveclassifier (class in sklearn.linear_model)": [[666, "sklearn.linear_model.PassiveAggressiveClassifier", false]], "passiveaggressiveregressor (class in sklearn.linear_model)": [[667, "sklearn.linear_model.PassiveAggressiveRegressor", false]], "patchextractor (class in sklearn.feature_extraction.image)": [[582, "sklearn.feature_extraction.image.PatchExtractor", false]], "path() (sklearn.linear_model.elasticnet static method)": [[646, "sklearn.linear_model.ElasticNet.path", false]], "path() (sklearn.linear_model.elasticnetcv static method)": [[647, "sklearn.linear_model.ElasticNetCV.path", false]], "path() (sklearn.linear_model.lasso static method)": [[652, "sklearn.linear_model.Lasso.path", false]], "path() (sklearn.linear_model.lassocv static method)": [[653, "sklearn.linear_model.LassoCV.path", false]], "path() (sklearn.linear_model.multitaskelasticnet static method)": [[660, "sklearn.linear_model.MultiTaskElasticNet.path", false]], "path() (sklearn.linear_model.multitaskelasticnetcv static method)": [[661, "sklearn.linear_model.MultiTaskElasticNetCV.path", false]], "path() (sklearn.linear_model.multitasklasso static method)": [[662, "sklearn.linear_model.MultiTaskLasso.path", false]], "path() (sklearn.linear_model.multitasklassocv static method)": [[663, "sklearn.linear_model.MultiTaskLassoCV.path", false]], "pca (class in sklearn.decomposition)": [[539, "sklearn.decomposition.PCA", false]], "pd": [[386, "term-pd", true]], "perceptron (class in sklearn.linear_model)": [[668, "sklearn.linear_model.Perceptron", false]], "permutation_importance() (in module sklearn.inspection)": [[634, "sklearn.inspection.permutation_importance", false]], "permutation_test_score() (in module sklearn.model_selection)": [[829, "sklearn.model_selection.permutation_test_score", false]], "perplexity() (sklearn.decomposition.latentdirichletallocation method)": [[534, "sklearn.decomposition.LatentDirichletAllocation.perplexity", false]], "pipeline (class in sklearn.pipeline)": [[864, "sklearn.pipeline.Pipeline", false]], "plot() (sklearn.calibration.calibrationdisplay method)": [[435, "sklearn.calibration.CalibrationDisplay.plot", false]], "plot() (sklearn.inspection.decisionboundarydisplay method)": [[631, "sklearn.inspection.DecisionBoundaryDisplay.plot", false]], "plot() (sklearn.inspection.partialdependencedisplay method)": [[632, "sklearn.inspection.PartialDependenceDisplay.plot", false]], "plot() (sklearn.metrics.confusionmatrixdisplay method)": [[697, "sklearn.metrics.ConfusionMatrixDisplay.plot", false]], "plot() (sklearn.metrics.detcurvedisplay method)": [[698, "sklearn.metrics.DetCurveDisplay.plot", false]], "plot() (sklearn.metrics.precisionrecalldisplay method)": [[700, "sklearn.metrics.PrecisionRecallDisplay.plot", false]], "plot() (sklearn.metrics.predictionerrordisplay method)": [[701, "sklearn.metrics.PredictionErrorDisplay.plot", false]], "plot() (sklearn.metrics.roccurvedisplay method)": [[702, "sklearn.metrics.RocCurveDisplay.plot", false]], "plot() (sklearn.model_selection.learningcurvedisplay method)": [[806, "sklearn.model_selection.LearningCurveDisplay.plot", false]], "plot() (sklearn.model_selection.validationcurvedisplay method)": [[823, "sklearn.model_selection.ValidationCurveDisplay.plot", false]], "plot_tree() (in module sklearn.tree)": [[918, "sklearn.tree.plot_tree", false]], "plscanonical (class in sklearn.cross_decomposition)": [[480, "sklearn.cross_decomposition.PLSCanonical", false]], "plsregression (class in sklearn.cross_decomposition)": [[481, "sklearn.cross_decomposition.PLSRegression", false]], "plssvd (class in sklearn.cross_decomposition)": [[482, "sklearn.cross_decomposition.PLSSVD", false]], "poissonregressor (class in sklearn.linear_model)": [[669, "sklearn.linear_model.PoissonRegressor", false]], "polynomial_kernel() (in module sklearn.metrics.pairwise)": [[775, "sklearn.metrics.pairwise.polynomial_kernel", false]], "polynomialcountsketch (class in sklearn.kernel_approximation)": [[640, "sklearn.kernel_approximation.PolynomialCountSketch", false]], "polynomialfeatures (class in sklearn.preprocessing)": [[879, "sklearn.preprocessing.PolynomialFeatures", false]], "pop() (sklearn.utils.bunch method)": [[919, "sklearn.utils.Bunch.pop", false]], "popitem() (sklearn.utils.bunch method)": [[919, "sklearn.utils.Bunch.popitem", false]], "pos_label": [[386, "term-pos_label", true]], "power_transform() (in module sklearn.preprocessing)": [[892, "sklearn.preprocessing.power_transform", false]], "powertransformer (class in sklearn.preprocessing)": [[880, "sklearn.preprocessing.PowerTransformer", false]], "precision_recall_curve() (in module sklearn.metrics)": [[782, "sklearn.metrics.precision_recall_curve", false]], "precision_recall_fscore_support() (in module sklearn.metrics)": [[783, "sklearn.metrics.precision_recall_fscore_support", false]], "precision_score() (in module sklearn.metrics)": [[784, "sklearn.metrics.precision_score", false]], "precisionrecalldisplay (class in sklearn.metrics)": [[700, "sklearn.metrics.PrecisionRecallDisplay", false]], "precomputed": [[386, "term-precomputed", true]], "predefinedsplit (class in sklearn.model_selection)": [[813, "sklearn.model_selection.PredefinedSplit", false]], "predict": [[386, "term-predict", true]], "predict() (sklearn.calibration.calibratedclassifiercv method)": [[434, "sklearn.calibration.CalibratedClassifierCV.predict", false]], "predict() (sklearn.cluster.affinitypropagation method)": [[437, "sklearn.cluster.AffinityPropagation.predict", false]], "predict() (sklearn.cluster.birch method)": [[439, "sklearn.cluster.Birch.predict", false]], "predict() (sklearn.cluster.bisectingkmeans method)": [[440, "sklearn.cluster.BisectingKMeans.predict", false]], "predict() (sklearn.cluster.kmeans method)": [[444, "sklearn.cluster.KMeans.predict", false]], "predict() (sklearn.cluster.meanshift method)": [[445, "sklearn.cluster.MeanShift.predict", false]], "predict() (sklearn.cluster.minibatchkmeans method)": [[446, "sklearn.cluster.MiniBatchKMeans.predict", false]], "predict() (sklearn.compose.transformedtargetregressor method)": [[462, "sklearn.compose.TransformedTargetRegressor.predict", false]], "predict() (sklearn.covariance.ellipticenvelope method)": [[466, "sklearn.covariance.EllipticEnvelope.predict", false]], "predict() (sklearn.cross_decomposition.cca method)": [[479, "sklearn.cross_decomposition.CCA.predict", false]], "predict() (sklearn.cross_decomposition.plscanonical method)": [[480, "sklearn.cross_decomposition.PLSCanonical.predict", false]], "predict() (sklearn.cross_decomposition.plsregression method)": [[481, "sklearn.cross_decomposition.PLSRegression.predict", false]], "predict() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[547, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict", false]], "predict() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[548, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict", false]], "predict() (sklearn.dummy.dummyclassifier method)": [[549, "sklearn.dummy.DummyClassifier.predict", false]], "predict() (sklearn.dummy.dummyregressor method)": [[550, "sklearn.dummy.DummyRegressor.predict", false]], "predict() (sklearn.ensemble.adaboostclassifier method)": [[551, "sklearn.ensemble.AdaBoostClassifier.predict", false]], "predict() (sklearn.ensemble.adaboostregressor method)": [[552, "sklearn.ensemble.AdaBoostRegressor.predict", false]], "predict() (sklearn.ensemble.baggingclassifier method)": [[553, "sklearn.ensemble.BaggingClassifier.predict", false]], "predict() (sklearn.ensemble.baggingregressor method)": [[554, "sklearn.ensemble.BaggingRegressor.predict", false]], "predict() (sklearn.ensemble.extratreesclassifier method)": [[555, "sklearn.ensemble.ExtraTreesClassifier.predict", false]], "predict() (sklearn.ensemble.extratreesregressor method)": [[556, "sklearn.ensemble.ExtraTreesRegressor.predict", false]], "predict() (sklearn.ensemble.gradientboostingclassifier method)": [[557, "sklearn.ensemble.GradientBoostingClassifier.predict", false]], "predict() (sklearn.ensemble.gradientboostingregressor method)": [[558, "sklearn.ensemble.GradientBoostingRegressor.predict", false]], "predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[559, "sklearn.ensemble.HistGradientBoostingClassifier.predict", false]], "predict() (sklearn.ensemble.histgradientboostingregressor method)": [[560, "sklearn.ensemble.HistGradientBoostingRegressor.predict", false]], "predict() (sklearn.ensemble.isolationforest method)": [[561, "sklearn.ensemble.IsolationForest.predict", false]], "predict() (sklearn.ensemble.randomforestclassifier method)": [[562, "sklearn.ensemble.RandomForestClassifier.predict", false]], "predict() (sklearn.ensemble.randomforestregressor method)": [[563, "sklearn.ensemble.RandomForestRegressor.predict", false]], "predict() (sklearn.ensemble.stackingclassifier method)": [[565, "sklearn.ensemble.StackingClassifier.predict", false]], "predict() (sklearn.ensemble.stackingregressor method)": [[566, "sklearn.ensemble.StackingRegressor.predict", false]], "predict() (sklearn.ensemble.votingclassifier method)": [[567, "sklearn.ensemble.VotingClassifier.predict", false]], "predict() (sklearn.ensemble.votingregressor method)": [[568, "sklearn.ensemble.VotingRegressor.predict", false]], "predict() (sklearn.feature_selection.rfe method)": [[592, "sklearn.feature_selection.RFE.predict", false]], "predict() (sklearn.feature_selection.rfecv method)": [[593, "sklearn.feature_selection.RFECV.predict", false]], "predict() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[610, "sklearn.gaussian_process.GaussianProcessClassifier.predict", false]], "predict() (sklearn.gaussian_process.gaussianprocessregressor method)": [[611, "sklearn.gaussian_process.GaussianProcessRegressor.predict", false]], "predict() (sklearn.isotonic.isotonicregression method)": [[635, "sklearn.isotonic.IsotonicRegression.predict", false]], "predict() (sklearn.kernel_ridge.kernelridge method)": [[643, "sklearn.kernel_ridge.KernelRidge.predict", false]], "predict() (sklearn.linear_model.ardregression method)": [[644, "sklearn.linear_model.ARDRegression.predict", false]], "predict() (sklearn.linear_model.bayesianridge method)": [[645, "sklearn.linear_model.BayesianRidge.predict", false]], "predict() (sklearn.linear_model.elasticnet method)": [[646, "sklearn.linear_model.ElasticNet.predict", false]], "predict() (sklearn.linear_model.elasticnetcv method)": [[647, "sklearn.linear_model.ElasticNetCV.predict", false]], "predict() (sklearn.linear_model.gammaregressor method)": [[648, "sklearn.linear_model.GammaRegressor.predict", false]], "predict() (sklearn.linear_model.huberregressor method)": [[649, "sklearn.linear_model.HuberRegressor.predict", false]], "predict() (sklearn.linear_model.lars method)": [[650, "sklearn.linear_model.Lars.predict", false]], "predict() (sklearn.linear_model.larscv method)": [[651, "sklearn.linear_model.LarsCV.predict", false]], "predict() (sklearn.linear_model.lasso method)": [[652, "sklearn.linear_model.Lasso.predict", false]], "predict() (sklearn.linear_model.lassocv method)": [[653, "sklearn.linear_model.LassoCV.predict", false]], "predict() (sklearn.linear_model.lassolars method)": [[654, "sklearn.linear_model.LassoLars.predict", false]], "predict() (sklearn.linear_model.lassolarscv method)": [[655, "sklearn.linear_model.LassoLarsCV.predict", false]], "predict() (sklearn.linear_model.lassolarsic method)": [[656, "sklearn.linear_model.LassoLarsIC.predict", false]], "predict() (sklearn.linear_model.linearregression method)": [[657, "sklearn.linear_model.LinearRegression.predict", false]], "predict() (sklearn.linear_model.logisticregression method)": [[658, "sklearn.linear_model.LogisticRegression.predict", false]], "predict() (sklearn.linear_model.logisticregressioncv method)": [[659, "sklearn.linear_model.LogisticRegressionCV.predict", false]], "predict() (sklearn.linear_model.multitaskelasticnet method)": [[660, "sklearn.linear_model.MultiTaskElasticNet.predict", false]], "predict() (sklearn.linear_model.multitaskelasticnetcv method)": [[661, "sklearn.linear_model.MultiTaskElasticNetCV.predict", false]], "predict() (sklearn.linear_model.multitasklasso method)": [[662, "sklearn.linear_model.MultiTaskLasso.predict", false]], "predict() (sklearn.linear_model.multitasklassocv method)": [[663, "sklearn.linear_model.MultiTaskLassoCV.predict", false]], "predict() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[664, "sklearn.linear_model.OrthogonalMatchingPursuit.predict", false]], "predict() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[665, "sklearn.linear_model.OrthogonalMatchingPursuitCV.predict", false]], "predict() (sklearn.linear_model.passiveaggressiveclassifier method)": [[666, "sklearn.linear_model.PassiveAggressiveClassifier.predict", false]], "predict() (sklearn.linear_model.passiveaggressiveregressor method)": [[667, "sklearn.linear_model.PassiveAggressiveRegressor.predict", false]], "predict() (sklearn.linear_model.perceptron method)": [[668, "sklearn.linear_model.Perceptron.predict", false]], "predict() (sklearn.linear_model.poissonregressor method)": [[669, "sklearn.linear_model.PoissonRegressor.predict", false]], "predict() (sklearn.linear_model.quantileregressor method)": [[670, "sklearn.linear_model.QuantileRegressor.predict", false]], "predict() (sklearn.linear_model.ransacregressor method)": [[671, "sklearn.linear_model.RANSACRegressor.predict", false]], "predict() (sklearn.linear_model.ridge method)": [[672, "sklearn.linear_model.Ridge.predict", false]], "predict() (sklearn.linear_model.ridgeclassifier method)": [[674, "sklearn.linear_model.RidgeClassifier.predict", false]], "predict() (sklearn.linear_model.ridgeclassifiercv method)": [[675, "sklearn.linear_model.RidgeClassifierCV.predict", false]], "predict() (sklearn.linear_model.ridgecv method)": [[673, "sklearn.linear_model.RidgeCV.predict", false]], "predict() (sklearn.linear_model.sgdclassifier method)": [[676, "sklearn.linear_model.SGDClassifier.predict", false]], "predict() (sklearn.linear_model.sgdoneclasssvm method)": [[677, "sklearn.linear_model.SGDOneClassSVM.predict", false]], "predict() (sklearn.linear_model.sgdregressor method)": [[678, "sklearn.linear_model.SGDRegressor.predict", false]], "predict() (sklearn.linear_model.theilsenregressor method)": [[679, "sklearn.linear_model.TheilSenRegressor.predict", false]], "predict() (sklearn.linear_model.tweedieregressor method)": [[680, "sklearn.linear_model.TweedieRegressor.predict", false]], "predict() (sklearn.mixture.bayesiangaussianmixture method)": [[797, "sklearn.mixture.BayesianGaussianMixture.predict", false]], "predict() (sklearn.mixture.gaussianmixture method)": [[798, "sklearn.mixture.GaussianMixture.predict", false]], "predict() (sklearn.model_selection.fixedthresholdclassifier method)": [[799, "sklearn.model_selection.FixedThresholdClassifier.predict", false]], "predict() (sklearn.model_selection.gridsearchcv method)": [[800, "sklearn.model_selection.GridSearchCV.predict", false]], "predict() (sklearn.model_selection.halvinggridsearchcv method)": [[803, "sklearn.model_selection.HalvingGridSearchCV.predict", false]], "predict() (sklearn.model_selection.halvingrandomsearchcv method)": [[804, "sklearn.model_selection.HalvingRandomSearchCV.predict", false]], "predict() (sklearn.model_selection.randomizedsearchcv method)": [[814, "sklearn.model_selection.RandomizedSearchCV.predict", false]], "predict() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[822, "sklearn.model_selection.TunedThresholdClassifierCV.predict", false]], "predict() (sklearn.multiclass.onevsoneclassifier method)": [[832, "sklearn.multiclass.OneVsOneClassifier.predict", false]], "predict() (sklearn.multiclass.onevsrestclassifier method)": [[833, "sklearn.multiclass.OneVsRestClassifier.predict", false]], "predict() (sklearn.multiclass.outputcodeclassifier method)": [[834, "sklearn.multiclass.OutputCodeClassifier.predict", false]], "predict() (sklearn.multioutput.classifierchain method)": [[835, "sklearn.multioutput.ClassifierChain.predict", false]], "predict() (sklearn.multioutput.multioutputclassifier method)": [[836, "sklearn.multioutput.MultiOutputClassifier.predict", false]], "predict() (sklearn.multioutput.multioutputregressor method)": [[837, "sklearn.multioutput.MultiOutputRegressor.predict", false]], "predict() (sklearn.multioutput.regressorchain method)": [[838, "sklearn.multioutput.RegressorChain.predict", false]], "predict() (sklearn.naive_bayes.bernoullinb method)": [[839, "sklearn.naive_bayes.BernoulliNB.predict", false]], "predict() (sklearn.naive_bayes.categoricalnb method)": [[840, "sklearn.naive_bayes.CategoricalNB.predict", false]], "predict() (sklearn.naive_bayes.complementnb method)": [[841, "sklearn.naive_bayes.ComplementNB.predict", false]], "predict() (sklearn.naive_bayes.gaussiannb method)": [[842, "sklearn.naive_bayes.GaussianNB.predict", false]], "predict() (sklearn.naive_bayes.multinomialnb method)": [[843, "sklearn.naive_bayes.MultinomialNB.predict", false]], "predict() (sklearn.neighbors.kneighborsclassifier method)": [[846, "sklearn.neighbors.KNeighborsClassifier.predict", false]], "predict() (sklearn.neighbors.kneighborsregressor method)": [[847, "sklearn.neighbors.KNeighborsRegressor.predict", false]], "predict() (sklearn.neighbors.localoutlierfactor method)": [[850, "sklearn.neighbors.LocalOutlierFactor.predict", false]], "predict() (sklearn.neighbors.nearestcentroid method)": [[851, "sklearn.neighbors.NearestCentroid.predict", false]], "predict() (sklearn.neighbors.radiusneighborsclassifier method)": [[854, "sklearn.neighbors.RadiusNeighborsClassifier.predict", false]], "predict() (sklearn.neighbors.radiusneighborsregressor method)": [[855, "sklearn.neighbors.RadiusNeighborsRegressor.predict", false]], "predict() (sklearn.neural_network.mlpclassifier method)": [[861, "sklearn.neural_network.MLPClassifier.predict", false]], "predict() (sklearn.neural_network.mlpregressor method)": [[862, "sklearn.neural_network.MLPRegressor.predict", false]], "predict() (sklearn.pipeline.pipeline method)": [[864, "sklearn.pipeline.Pipeline.predict", false]], "predict() (sklearn.semi_supervised.labelpropagation method)": [[899, "sklearn.semi_supervised.LabelPropagation.predict", false]], "predict() (sklearn.semi_supervised.labelspreading method)": [[900, "sklearn.semi_supervised.LabelSpreading.predict", false]], "predict() (sklearn.semi_supervised.selftrainingclassifier method)": [[901, "sklearn.semi_supervised.SelfTrainingClassifier.predict", false]], "predict() (sklearn.svm.linearsvc method)": [[904, "sklearn.svm.LinearSVC.predict", false]], "predict() (sklearn.svm.linearsvr method)": [[905, "sklearn.svm.LinearSVR.predict", false]], "predict() (sklearn.svm.nusvc method)": [[906, "sklearn.svm.NuSVC.predict", false]], "predict() (sklearn.svm.nusvr method)": [[907, "sklearn.svm.NuSVR.predict", false]], "predict() (sklearn.svm.oneclasssvm method)": [[908, "sklearn.svm.OneClassSVM.predict", false]], "predict() (sklearn.svm.svc method)": [[909, "sklearn.svm.SVC.predict", false]], "predict() (sklearn.svm.svr method)": [[910, "sklearn.svm.SVR.predict", false]], "predict() (sklearn.tree.decisiontreeclassifier method)": [[912, "sklearn.tree.DecisionTreeClassifier.predict", false]], "predict() (sklearn.tree.decisiontreeregressor method)": [[913, "sklearn.tree.DecisionTreeRegressor.predict", false]], "predict() (sklearn.tree.extratreeclassifier method)": [[914, "sklearn.tree.ExtraTreeClassifier.predict", false]], "predict() (sklearn.tree.extratreeregressor method)": [[915, "sklearn.tree.ExtraTreeRegressor.predict", false]], "predict_joint_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[839, "sklearn.naive_bayes.BernoulliNB.predict_joint_log_proba", false]], "predict_joint_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[840, "sklearn.naive_bayes.CategoricalNB.predict_joint_log_proba", false]], "predict_joint_log_proba() (sklearn.naive_bayes.complementnb method)": [[841, "sklearn.naive_bayes.ComplementNB.predict_joint_log_proba", false]], "predict_joint_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[842, "sklearn.naive_bayes.GaussianNB.predict_joint_log_proba", false]], "predict_joint_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[843, "sklearn.naive_bayes.MultinomialNB.predict_joint_log_proba", false]], "predict_log_proba": [[386, "term-predict_log_proba", true]], "predict_log_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[547, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_log_proba", false]], "predict_log_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[548, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_log_proba", false]], "predict_log_proba() (sklearn.dummy.dummyclassifier method)": [[549, "sklearn.dummy.DummyClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.adaboostclassifier method)": [[551, "sklearn.ensemble.AdaBoostClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.baggingclassifier method)": [[553, "sklearn.ensemble.BaggingClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.extratreesclassifier method)": [[555, "sklearn.ensemble.ExtraTreesClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[557, "sklearn.ensemble.GradientBoostingClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.randomforestclassifier method)": [[562, "sklearn.ensemble.RandomForestClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.feature_selection.rfe method)": [[592, "sklearn.feature_selection.RFE.predict_log_proba", false]], "predict_log_proba() (sklearn.feature_selection.rfecv method)": [[593, "sklearn.feature_selection.RFECV.predict_log_proba", false]], "predict_log_proba() (sklearn.linear_model.logisticregression method)": [[658, "sklearn.linear_model.LogisticRegression.predict_log_proba", false]], "predict_log_proba() (sklearn.linear_model.logisticregressioncv method)": [[659, "sklearn.linear_model.LogisticRegressionCV.predict_log_proba", false]], "predict_log_proba() (sklearn.linear_model.sgdclassifier method)": [[676, "sklearn.linear_model.SGDClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.fixedthresholdclassifier method)": [[799, "sklearn.model_selection.FixedThresholdClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.gridsearchcv method)": [[800, "sklearn.model_selection.GridSearchCV.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[803, "sklearn.model_selection.HalvingGridSearchCV.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[804, "sklearn.model_selection.HalvingRandomSearchCV.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.randomizedsearchcv method)": [[814, "sklearn.model_selection.RandomizedSearchCV.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[822, "sklearn.model_selection.TunedThresholdClassifierCV.predict_log_proba", false]], "predict_log_proba() (sklearn.multioutput.classifierchain method)": [[835, "sklearn.multioutput.ClassifierChain.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[839, "sklearn.naive_bayes.BernoulliNB.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[840, "sklearn.naive_bayes.CategoricalNB.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.complementnb method)": [[841, "sklearn.naive_bayes.ComplementNB.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[842, "sklearn.naive_bayes.GaussianNB.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[843, "sklearn.naive_bayes.MultinomialNB.predict_log_proba", false]], "predict_log_proba() (sklearn.neighbors.nearestcentroid method)": [[851, "sklearn.neighbors.NearestCentroid.predict_log_proba", false]], "predict_log_proba() (sklearn.neural_network.mlpclassifier method)": [[861, "sklearn.neural_network.MLPClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.pipeline.pipeline method)": [[864, "sklearn.pipeline.Pipeline.predict_log_proba", false]], "predict_log_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[901, "sklearn.semi_supervised.SelfTrainingClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.svm.nusvc method)": [[906, "sklearn.svm.NuSVC.predict_log_proba", false]], "predict_log_proba() (sklearn.svm.svc method)": [[909, "sklearn.svm.SVC.predict_log_proba", false]], "predict_log_proba() (sklearn.tree.decisiontreeclassifier method)": [[912, "sklearn.tree.DecisionTreeClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.tree.extratreeclassifier method)": [[914, "sklearn.tree.ExtraTreeClassifier.predict_log_proba", false]], "predict_proba": [[386, "term-predict_proba", true]], "predict_proba() (sklearn.calibration.calibratedclassifiercv method)": [[434, "sklearn.calibration.CalibratedClassifierCV.predict_proba", false]], "predict_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[547, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_proba", false]], "predict_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[548, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_proba", false]], "predict_proba() (sklearn.dummy.dummyclassifier method)": [[549, "sklearn.dummy.DummyClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[551, "sklearn.ensemble.AdaBoostClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.baggingclassifier method)": [[553, "sklearn.ensemble.BaggingClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.extratreesclassifier method)": [[555, "sklearn.ensemble.ExtraTreesClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[557, "sklearn.ensemble.GradientBoostingClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[559, "sklearn.ensemble.HistGradientBoostingClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.randomforestclassifier method)": [[562, "sklearn.ensemble.RandomForestClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.stackingclassifier method)": [[565, "sklearn.ensemble.StackingClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.votingclassifier method)": [[567, "sklearn.ensemble.VotingClassifier.predict_proba", false]], "predict_proba() (sklearn.feature_selection.rfe method)": [[592, "sklearn.feature_selection.RFE.predict_proba", false]], "predict_proba() (sklearn.feature_selection.rfecv method)": [[593, "sklearn.feature_selection.RFECV.predict_proba", false]], "predict_proba() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[610, "sklearn.gaussian_process.GaussianProcessClassifier.predict_proba", false]], "predict_proba() (sklearn.linear_model.logisticregression method)": [[658, "sklearn.linear_model.LogisticRegression.predict_proba", false]], "predict_proba() (sklearn.linear_model.logisticregressioncv method)": [[659, "sklearn.linear_model.LogisticRegressionCV.predict_proba", false]], "predict_proba() (sklearn.linear_model.sgdclassifier method)": [[676, "sklearn.linear_model.SGDClassifier.predict_proba", false]], "predict_proba() (sklearn.mixture.bayesiangaussianmixture method)": [[797, "sklearn.mixture.BayesianGaussianMixture.predict_proba", false]], "predict_proba() (sklearn.mixture.gaussianmixture method)": [[798, "sklearn.mixture.GaussianMixture.predict_proba", false]], "predict_proba() (sklearn.model_selection.fixedthresholdclassifier method)": [[799, "sklearn.model_selection.FixedThresholdClassifier.predict_proba", false]], "predict_proba() (sklearn.model_selection.gridsearchcv method)": [[800, "sklearn.model_selection.GridSearchCV.predict_proba", false]], "predict_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[803, "sklearn.model_selection.HalvingGridSearchCV.predict_proba", false]], "predict_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[804, "sklearn.model_selection.HalvingRandomSearchCV.predict_proba", false]], "predict_proba() (sklearn.model_selection.randomizedsearchcv method)": [[814, "sklearn.model_selection.RandomizedSearchCV.predict_proba", false]], "predict_proba() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[822, "sklearn.model_selection.TunedThresholdClassifierCV.predict_proba", false]], "predict_proba() (sklearn.multiclass.onevsrestclassifier method)": [[833, "sklearn.multiclass.OneVsRestClassifier.predict_proba", false]], "predict_proba() (sklearn.multioutput.classifierchain method)": [[835, "sklearn.multioutput.ClassifierChain.predict_proba", false]], "predict_proba() (sklearn.multioutput.multioutputclassifier method)": [[836, "sklearn.multioutput.MultiOutputClassifier.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.bernoullinb method)": [[839, "sklearn.naive_bayes.BernoulliNB.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.categoricalnb method)": [[840, "sklearn.naive_bayes.CategoricalNB.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.complementnb method)": [[841, "sklearn.naive_bayes.ComplementNB.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.gaussiannb method)": [[842, "sklearn.naive_bayes.GaussianNB.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.multinomialnb method)": [[843, "sklearn.naive_bayes.MultinomialNB.predict_proba", false]], "predict_proba() (sklearn.neighbors.kneighborsclassifier method)": [[846, "sklearn.neighbors.KNeighborsClassifier.predict_proba", false]], "predict_proba() (sklearn.neighbors.nearestcentroid method)": [[851, "sklearn.neighbors.NearestCentroid.predict_proba", false]], "predict_proba() (sklearn.neighbors.radiusneighborsclassifier method)": [[854, "sklearn.neighbors.RadiusNeighborsClassifier.predict_proba", false]], "predict_proba() (sklearn.neural_network.mlpclassifier method)": [[861, "sklearn.neural_network.MLPClassifier.predict_proba", false]], "predict_proba() (sklearn.pipeline.pipeline method)": [[864, "sklearn.pipeline.Pipeline.predict_proba", false]], "predict_proba() (sklearn.semi_supervised.labelpropagation method)": [[899, "sklearn.semi_supervised.LabelPropagation.predict_proba", false]], "predict_proba() (sklearn.semi_supervised.labelspreading method)": [[900, "sklearn.semi_supervised.LabelSpreading.predict_proba", false]], "predict_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[901, "sklearn.semi_supervised.SelfTrainingClassifier.predict_proba", false]], "predict_proba() (sklearn.svm.nusvc method)": [[906, "sklearn.svm.NuSVC.predict_proba", false]], "predict_proba() (sklearn.svm.svc method)": [[909, "sklearn.svm.SVC.predict_proba", false]], "predict_proba() (sklearn.tree.decisiontreeclassifier method)": [[912, "sklearn.tree.DecisionTreeClassifier.predict_proba", false]], "predict_proba() (sklearn.tree.extratreeclassifier method)": [[914, "sklearn.tree.ExtraTreeClassifier.predict_proba", false]], "predictionerrordisplay (class in sklearn.metrics)": [[701, "sklearn.metrics.PredictionErrorDisplay", false]], "predictor": [[386, "term-predictor", true]], "predictors": [[386, "term-predictors", true]], "print_progress() (sklearn.utils.parallel.parallel method)": [[966, "sklearn.utils.parallel.Parallel.print_progress", false]], "process_routing() (in module sklearn.utils.metadata_routing)": [[960, "sklearn.utils.metadata_routing.process_routing", false]], "product (class in sklearn.gaussian_process.kernels)": [[621, "sklearn.gaussian_process.kernels.Product", false]], "quadraticdiscriminantanalysis (class in sklearn.discriminant_analysis)": [[548, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis", false]], "quantile_transform() (in module sklearn.preprocessing)": [[893, "sklearn.preprocessing.quantile_transform", false]], "quantileregressor (class in sklearn.linear_model)": [[670, "sklearn.linear_model.QuantileRegressor", false]], "quantiletransformer (class in sklearn.preprocessing)": [[881, "sklearn.preprocessing.QuantileTransformer", false]], "query() (sklearn.neighbors.balltree method)": [[844, "sklearn.neighbors.BallTree.query", false]], "query() (sklearn.neighbors.kdtree method)": [[845, "sklearn.neighbors.KDTree.query", false]], "query_radius() (sklearn.neighbors.balltree method)": [[844, "sklearn.neighbors.BallTree.query_radius", false]], "query_radius() (sklearn.neighbors.kdtree method)": [[845, "sklearn.neighbors.KDTree.query_radius", false]], "r2_score() (in module sklearn.metrics)": [[785, "sklearn.metrics.r2_score", false]], "r_regression() (in module sklearn.feature_selection)": [[608, "sklearn.feature_selection.r_regression", false]], "radius_neighbors() (sklearn.neighbors.nearestneighbors method)": [[852, "sklearn.neighbors.NearestNeighbors.radius_neighbors", false]], "radius_neighbors() (sklearn.neighbors.radiusneighborsclassifier method)": [[854, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors", false]], "radius_neighbors() (sklearn.neighbors.radiusneighborsregressor method)": [[855, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors", false]], "radius_neighbors() (sklearn.neighbors.radiusneighborstransformer method)": [[856, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors", false]], "radius_neighbors_graph() (in module sklearn.neighbors)": [[858, "sklearn.neighbors.radius_neighbors_graph", false]], "radius_neighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[852, "sklearn.neighbors.NearestNeighbors.radius_neighbors_graph", false]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsclassifier method)": [[854, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors_graph", false]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsregressor method)": [[855, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors_graph", false]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborstransformer method)": [[856, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors_graph", false]], "radiusneighborsclassifier (class in sklearn.neighbors)": [[854, "sklearn.neighbors.RadiusNeighborsClassifier", false]], "radiusneighborsregressor (class in sklearn.neighbors)": [[855, "sklearn.neighbors.RadiusNeighborsRegressor", false]], "radiusneighborstransformer (class in sklearn.neighbors)": [[856, "sklearn.neighbors.RadiusNeighborsTransformer", false]], "rand_score() (in module sklearn.metrics)": [[786, "sklearn.metrics.rand_score", false]], "random_state": [[386, "term-random_state", true]], "randomforestclassifier (class in sklearn.ensemble)": [[562, "sklearn.ensemble.RandomForestClassifier", false]], "randomforestregressor (class in sklearn.ensemble)": [[563, "sklearn.ensemble.RandomForestRegressor", false]], "randomized_range_finder() (in module sklearn.utils.extmath)": [[947, "sklearn.utils.extmath.randomized_range_finder", false]], "randomized_svd() (in module sklearn.utils.extmath)": [[948, "sklearn.utils.extmath.randomized_svd", false]], "randomizedsearchcv (class in sklearn.model_selection)": [[814, "sklearn.model_selection.RandomizedSearchCV", false]], "randomtreesembedding (class in sklearn.ensemble)": [[564, "sklearn.ensemble.RandomTreesEmbedding", false]], "ransacregressor (class in sklearn.linear_model)": [[671, "sklearn.linear_model.RANSACRegressor", false]], "rationalquadratic (class in sklearn.gaussian_process.kernels)": [[623, "sklearn.gaussian_process.kernels.RationalQuadratic", false]], "rbf (class in sklearn.gaussian_process.kernels)": [[622, "sklearn.gaussian_process.kernels.RBF", false]], "rbf_kernel() (in module sklearn.metrics.pairwise)": [[776, "sklearn.metrics.pairwise.rbf_kernel", false]], "rbfsampler (class in sklearn.kernel_approximation)": [[641, "sklearn.kernel_approximation.RBFSampler", false]], "recall_score() (in module sklearn.metrics)": [[787, "sklearn.metrics.recall_score", false]], "reconstruct_from_patches_2d() (in module sklearn.feature_extraction.image)": [[586, "sklearn.feature_extraction.image.reconstruct_from_patches_2d", false]], "reconstruction_error() (sklearn.manifold.isomap method)": [[688, "sklearn.manifold.Isomap.reconstruction_error", false]], "rectangular": [[386, "term-rectangular", true]], "regressor": [[386, "term-regressor", true]], "regressorchain (class in sklearn.multioutput)": [[838, "sklearn.multioutput.RegressorChain", false]], "regressormixin (class in sklearn.base)": [[427, "sklearn.base.RegressorMixin", false]], "regressors": [[386, "term-regressors", true]], "regressortags (class in sklearn.utils)": [[922, "sklearn.utils.RegressorTags", false]], "repeatedkfold (class in sklearn.model_selection)": [[815, "sklearn.model_selection.RepeatedKFold", false]], "repeatedstratifiedkfold (class in sklearn.model_selection)": [[816, "sklearn.model_selection.RepeatedStratifiedKFold", false]], "requires_vector_input (sklearn.gaussian_process.kernels.compoundkernel property)": [[612, "sklearn.gaussian_process.kernels.CompoundKernel.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.constantkernel property)": [[613, "sklearn.gaussian_process.kernels.ConstantKernel.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.dotproduct property)": [[614, "sklearn.gaussian_process.kernels.DotProduct.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.exponentiation property)": [[616, "sklearn.gaussian_process.kernels.Exponentiation.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.expsinesquared property)": [[615, "sklearn.gaussian_process.kernels.ExpSineSquared.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.kernel property)": [[618, "sklearn.gaussian_process.kernels.Kernel.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.matern property)": [[619, "sklearn.gaussian_process.kernels.Matern.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.pairwisekernel property)": [[620, "sklearn.gaussian_process.kernels.PairwiseKernel.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.product property)": [[621, "sklearn.gaussian_process.kernels.Product.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.rationalquadratic property)": [[623, "sklearn.gaussian_process.kernels.RationalQuadratic.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.rbf property)": [[622, "sklearn.gaussian_process.kernels.RBF.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.sum property)": [[624, "sklearn.gaussian_process.kernels.Sum.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.whitekernel property)": [[625, "sklearn.gaussian_process.kernels.WhiteKernel.requires_vector_input", false]], "resample() (in module sklearn.utils)": [[969, "sklearn.utils.resample", false]], "reset_n_calls() (sklearn.neighbors.balltree method)": [[844, "sklearn.neighbors.BallTree.reset_n_calls", false]], "reset_n_calls() (sklearn.neighbors.kdtree method)": [[845, "sklearn.neighbors.KDTree.reset_n_calls", false]], "restrict() (sklearn.feature_extraction.dictvectorizer method)": [[580, "sklearn.feature_extraction.DictVectorizer.restrict", false]], "reweight_covariance() (sklearn.covariance.ellipticenvelope method)": [[466, "sklearn.covariance.EllipticEnvelope.reweight_covariance", false]], "reweight_covariance() (sklearn.covariance.mincovdet method)": [[471, "sklearn.covariance.MinCovDet.reweight_covariance", false]], "rfe (class in sklearn.feature_selection)": [[592, "sklearn.feature_selection.RFE", false]], "rfecv (class in sklearn.feature_selection)": [[593, "sklearn.feature_selection.RFECV", false]], "ridge (class in sklearn.linear_model)": [[672, "sklearn.linear_model.Ridge", false]], "ridge_regression() (in module sklearn.linear_model)": [[687, "sklearn.linear_model.ridge_regression", false]], "ridgeclassifier (class in sklearn.linear_model)": [[674, "sklearn.linear_model.RidgeClassifier", false]], "ridgeclassifiercv (class in sklearn.linear_model)": [[675, "sklearn.linear_model.RidgeClassifierCV", false]], "ridgecv (class in sklearn.linear_model)": [[673, "sklearn.linear_model.RidgeCV", false]], "robust_scale() (in module sklearn.preprocessing)": [[894, "sklearn.preprocessing.robust_scale", false]], "robustscaler (class in sklearn.preprocessing)": [[882, "sklearn.preprocessing.RobustScaler", false]], "roc_auc_score() (in module sklearn.metrics)": [[788, "sklearn.metrics.roc_auc_score", false]], "roc_curve() (in module sklearn.metrics)": [[789, "sklearn.metrics.roc_curve", false]], "roccurvedisplay (class in sklearn.metrics)": [[702, "sklearn.metrics.RocCurveDisplay", false]], "root_mean_squared_error() (in module sklearn.metrics)": [[790, "sklearn.metrics.root_mean_squared_error", false]], "root_mean_squared_log_error() (in module sklearn.metrics)": [[791, "sklearn.metrics.root_mean_squared_log_error", false]], "route_params() (sklearn.utils.metadata_routing.metadatarouter method)": [[957, "sklearn.utils.metadata_routing.MetadataRouter.route_params", false]], "router": [[386, "term-router", true]], "safe_mask() (in module sklearn.utils)": [[970, "sklearn.utils.safe_mask", false]], "safe_sparse_dot() (in module sklearn.utils.extmath)": [[949, "sklearn.utils.extmath.safe_sparse_dot", false]], "safe_sqr() (in module sklearn.utils)": [[971, "sklearn.utils.safe_sqr", false]], "sample": [[386, "term-sample", true]], "sample properties": [[386, "term-sample-properties", true]], "sample property": [[386, "term-sample-property", true]], "sample() (sklearn.mixture.bayesiangaussianmixture method)": [[797, "sklearn.mixture.BayesianGaussianMixture.sample", false]], "sample() (sklearn.mixture.gaussianmixture method)": [[798, "sklearn.mixture.GaussianMixture.sample", false]], "sample() (sklearn.neighbors.kerneldensity method)": [[849, "sklearn.neighbors.KernelDensity.sample", false]], "sample_weight": [[386, "term-sample_weight", true]], "sample_without_replacement() (in module sklearn.utils.random)": [[968, "sklearn.utils.random.sample_without_replacement", false]], "sample_y() (sklearn.gaussian_process.gaussianprocessregressor method)": [[611, "sklearn.gaussian_process.GaussianProcessRegressor.sample_y", false]], "samples": [[386, "term-samples", true]], "scale() (in module sklearn.preprocessing)": [[895, "sklearn.preprocessing.scale", false]], "scikit-learn enhancement proposals": [[386, "term-scikit-learn-enhancement-proposals", true]], "scikit-learn-contrib": [[386, "term-scikit-learn-contrib", true]], "score": [[386, "term-score", true]], "score() (sklearn.base.classifiermixin method)": [[421, "sklearn.base.ClassifierMixin.score", false]], "score() (sklearn.base.densitymixin method)": [[423, "sklearn.base.DensityMixin.score", false]], "score() (sklearn.base.regressormixin method)": [[427, "sklearn.base.RegressorMixin.score", false]], "score() (sklearn.calibration.calibratedclassifiercv method)": [[434, "sklearn.calibration.CalibratedClassifierCV.score", false]], "score() (sklearn.cluster.bisectingkmeans method)": [[440, "sklearn.cluster.BisectingKMeans.score", false]], "score() (sklearn.cluster.kmeans method)": [[444, "sklearn.cluster.KMeans.score", false]], "score() (sklearn.cluster.minibatchkmeans method)": [[446, "sklearn.cluster.MiniBatchKMeans.score", false]], "score() (sklearn.compose.transformedtargetregressor method)": [[462, "sklearn.compose.TransformedTargetRegressor.score", false]], "score() (sklearn.covariance.ellipticenvelope method)": [[466, "sklearn.covariance.EllipticEnvelope.score", false]], "score() (sklearn.covariance.empiricalcovariance method)": [[467, "sklearn.covariance.EmpiricalCovariance.score", false]], "score() (sklearn.covariance.graphicallasso method)": [[468, "sklearn.covariance.GraphicalLasso.score", false]], "score() (sklearn.covariance.graphicallassocv method)": [[469, "sklearn.covariance.GraphicalLassoCV.score", false]], "score() (sklearn.covariance.ledoitwolf method)": [[470, "sklearn.covariance.LedoitWolf.score", false]], "score() (sklearn.covariance.mincovdet method)": [[471, "sklearn.covariance.MinCovDet.score", false]], "score() (sklearn.covariance.oas method)": [[472, "sklearn.covariance.OAS.score", false]], "score() (sklearn.covariance.shrunkcovariance method)": [[473, "sklearn.covariance.ShrunkCovariance.score", false]], "score() (sklearn.cross_decomposition.cca method)": [[479, "sklearn.cross_decomposition.CCA.score", false]], "score() (sklearn.cross_decomposition.plscanonical method)": [[480, "sklearn.cross_decomposition.PLSCanonical.score", false]], "score() (sklearn.cross_decomposition.plsregression method)": [[481, "sklearn.cross_decomposition.PLSRegression.score", false]], "score() (sklearn.decomposition.factoranalysis method)": [[530, "sklearn.decomposition.FactorAnalysis.score", false]], "score() (sklearn.decomposition.latentdirichletallocation method)": [[534, "sklearn.decomposition.LatentDirichletAllocation.score", false]], "score() (sklearn.decomposition.pca method)": [[539, "sklearn.decomposition.PCA.score", false]], "score() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[547, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.score", false]], "score() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[548, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.score", false]], "score() (sklearn.dummy.dummyclassifier method)": [[549, "sklearn.dummy.DummyClassifier.score", false]], "score() (sklearn.dummy.dummyregressor method)": [[550, "sklearn.dummy.DummyRegressor.score", false]], "score() (sklearn.ensemble.adaboostclassifier method)": [[551, "sklearn.ensemble.AdaBoostClassifier.score", false]], "score() (sklearn.ensemble.adaboostregressor method)": [[552, "sklearn.ensemble.AdaBoostRegressor.score", false]], "score() (sklearn.ensemble.baggingclassifier method)": [[553, "sklearn.ensemble.BaggingClassifier.score", false]], "score() (sklearn.ensemble.baggingregressor method)": [[554, "sklearn.ensemble.BaggingRegressor.score", false]], "score() (sklearn.ensemble.extratreesclassifier method)": [[555, "sklearn.ensemble.ExtraTreesClassifier.score", false]], "score() (sklearn.ensemble.extratreesregressor method)": [[556, "sklearn.ensemble.ExtraTreesRegressor.score", false]], "score() (sklearn.ensemble.gradientboostingclassifier method)": [[557, "sklearn.ensemble.GradientBoostingClassifier.score", false]], "score() (sklearn.ensemble.gradientboostingregressor method)": [[558, "sklearn.ensemble.GradientBoostingRegressor.score", false]], "score() (sklearn.ensemble.histgradientboostingclassifier method)": [[559, "sklearn.ensemble.HistGradientBoostingClassifier.score", false]], "score() (sklearn.ensemble.histgradientboostingregressor method)": [[560, "sklearn.ensemble.HistGradientBoostingRegressor.score", false]], "score() (sklearn.ensemble.randomforestclassifier method)": [[562, "sklearn.ensemble.RandomForestClassifier.score", false]], "score() (sklearn.ensemble.randomforestregressor method)": [[563, "sklearn.ensemble.RandomForestRegressor.score", false]], "score() (sklearn.ensemble.stackingclassifier method)": [[565, "sklearn.ensemble.StackingClassifier.score", false]], "score() (sklearn.ensemble.stackingregressor method)": [[566, "sklearn.ensemble.StackingRegressor.score", false]], "score() (sklearn.ensemble.votingclassifier method)": [[567, "sklearn.ensemble.VotingClassifier.score", false]], "score() (sklearn.ensemble.votingregressor method)": [[568, "sklearn.ensemble.VotingRegressor.score", false]], "score() (sklearn.feature_selection.rfe method)": [[592, "sklearn.feature_selection.RFE.score", false]], "score() (sklearn.feature_selection.rfecv method)": [[593, "sklearn.feature_selection.RFECV.score", false]], "score() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[610, "sklearn.gaussian_process.GaussianProcessClassifier.score", false]], "score() (sklearn.gaussian_process.gaussianprocessregressor method)": [[611, "sklearn.gaussian_process.GaussianProcessRegressor.score", false]], "score() (sklearn.isotonic.isotonicregression method)": [[635, "sklearn.isotonic.IsotonicRegression.score", false]], "score() (sklearn.kernel_ridge.kernelridge method)": [[643, "sklearn.kernel_ridge.KernelRidge.score", false]], "score() (sklearn.linear_model.ardregression method)": [[644, "sklearn.linear_model.ARDRegression.score", false]], "score() (sklearn.linear_model.bayesianridge method)": [[645, "sklearn.linear_model.BayesianRidge.score", false]], "score() (sklearn.linear_model.elasticnet method)": [[646, "sklearn.linear_model.ElasticNet.score", false]], "score() (sklearn.linear_model.elasticnetcv method)": [[647, "sklearn.linear_model.ElasticNetCV.score", false]], "score() (sklearn.linear_model.gammaregressor method)": [[648, "sklearn.linear_model.GammaRegressor.score", false]], "score() (sklearn.linear_model.huberregressor method)": [[649, "sklearn.linear_model.HuberRegressor.score", false]], "score() (sklearn.linear_model.lars method)": [[650, "sklearn.linear_model.Lars.score", false]], "score() (sklearn.linear_model.larscv method)": [[651, "sklearn.linear_model.LarsCV.score", false]], "score() (sklearn.linear_model.lasso method)": [[652, "sklearn.linear_model.Lasso.score", false]], "score() (sklearn.linear_model.lassocv method)": [[653, "sklearn.linear_model.LassoCV.score", false]], "score() (sklearn.linear_model.lassolars method)": [[654, "sklearn.linear_model.LassoLars.score", false]], "score() (sklearn.linear_model.lassolarscv method)": [[655, "sklearn.linear_model.LassoLarsCV.score", false]], "score() (sklearn.linear_model.lassolarsic method)": [[656, "sklearn.linear_model.LassoLarsIC.score", false]], "score() (sklearn.linear_model.linearregression method)": [[657, "sklearn.linear_model.LinearRegression.score", false]], "score() (sklearn.linear_model.logisticregression method)": [[658, "sklearn.linear_model.LogisticRegression.score", false]], "score() (sklearn.linear_model.logisticregressioncv method)": [[659, "sklearn.linear_model.LogisticRegressionCV.score", false]], "score() (sklearn.linear_model.multitaskelasticnet method)": [[660, "sklearn.linear_model.MultiTaskElasticNet.score", false]], "score() (sklearn.linear_model.multitaskelasticnetcv method)": [[661, "sklearn.linear_model.MultiTaskElasticNetCV.score", false]], "score() (sklearn.linear_model.multitasklasso method)": [[662, "sklearn.linear_model.MultiTaskLasso.score", false]], "score() (sklearn.linear_model.multitasklassocv method)": [[663, "sklearn.linear_model.MultiTaskLassoCV.score", false]], "score() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[664, "sklearn.linear_model.OrthogonalMatchingPursuit.score", false]], "score() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[665, "sklearn.linear_model.OrthogonalMatchingPursuitCV.score", false]], "score() (sklearn.linear_model.passiveaggressiveclassifier method)": [[666, "sklearn.linear_model.PassiveAggressiveClassifier.score", false]], "score() (sklearn.linear_model.passiveaggressiveregressor method)": [[667, "sklearn.linear_model.PassiveAggressiveRegressor.score", false]], "score() (sklearn.linear_model.perceptron method)": [[668, "sklearn.linear_model.Perceptron.score", false]], "score() (sklearn.linear_model.poissonregressor method)": [[669, "sklearn.linear_model.PoissonRegressor.score", false]], "score() (sklearn.linear_model.quantileregressor method)": [[670, "sklearn.linear_model.QuantileRegressor.score", false]], "score() (sklearn.linear_model.ransacregressor method)": [[671, "sklearn.linear_model.RANSACRegressor.score", false]], "score() (sklearn.linear_model.ridge method)": [[672, "sklearn.linear_model.Ridge.score", false]], "score() (sklearn.linear_model.ridgeclassifier method)": [[674, "sklearn.linear_model.RidgeClassifier.score", false]], "score() (sklearn.linear_model.ridgeclassifiercv method)": [[675, "sklearn.linear_model.RidgeClassifierCV.score", false]], "score() (sklearn.linear_model.ridgecv method)": [[673, "sklearn.linear_model.RidgeCV.score", false]], "score() (sklearn.linear_model.sgdclassifier method)": [[676, "sklearn.linear_model.SGDClassifier.score", false]], "score() (sklearn.linear_model.sgdregressor method)": [[678, "sklearn.linear_model.SGDRegressor.score", false]], "score() (sklearn.linear_model.theilsenregressor method)": [[679, "sklearn.linear_model.TheilSenRegressor.score", false]], "score() (sklearn.linear_model.tweedieregressor method)": [[680, "sklearn.linear_model.TweedieRegressor.score", false]], "score() (sklearn.mixture.bayesiangaussianmixture method)": [[797, "sklearn.mixture.BayesianGaussianMixture.score", false]], "score() (sklearn.mixture.gaussianmixture method)": [[798, "sklearn.mixture.GaussianMixture.score", false]], "score() (sklearn.model_selection.fixedthresholdclassifier method)": [[799, "sklearn.model_selection.FixedThresholdClassifier.score", false]], "score() (sklearn.model_selection.gridsearchcv method)": [[800, "sklearn.model_selection.GridSearchCV.score", false]], "score() (sklearn.model_selection.halvinggridsearchcv method)": [[803, "sklearn.model_selection.HalvingGridSearchCV.score", false]], "score() (sklearn.model_selection.halvingrandomsearchcv method)": [[804, "sklearn.model_selection.HalvingRandomSearchCV.score", false]], "score() (sklearn.model_selection.randomizedsearchcv method)": [[814, "sklearn.model_selection.RandomizedSearchCV.score", false]], "score() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[822, "sklearn.model_selection.TunedThresholdClassifierCV.score", false]], "score() (sklearn.multiclass.onevsoneclassifier method)": [[832, "sklearn.multiclass.OneVsOneClassifier.score", false]], "score() (sklearn.multiclass.onevsrestclassifier method)": [[833, "sklearn.multiclass.OneVsRestClassifier.score", false]], "score() (sklearn.multiclass.outputcodeclassifier method)": [[834, "sklearn.multiclass.OutputCodeClassifier.score", false]], "score() (sklearn.multioutput.classifierchain method)": [[835, "sklearn.multioutput.ClassifierChain.score", false]], "score() (sklearn.multioutput.multioutputclassifier method)": [[836, "sklearn.multioutput.MultiOutputClassifier.score", false]], "score() (sklearn.multioutput.multioutputregressor method)": [[837, "sklearn.multioutput.MultiOutputRegressor.score", false]], "score() (sklearn.multioutput.regressorchain method)": [[838, "sklearn.multioutput.RegressorChain.score", false]], "score() (sklearn.naive_bayes.bernoullinb method)": [[839, "sklearn.naive_bayes.BernoulliNB.score", false]], "score() (sklearn.naive_bayes.categoricalnb method)": [[840, "sklearn.naive_bayes.CategoricalNB.score", false]], "score() (sklearn.naive_bayes.complementnb method)": [[841, "sklearn.naive_bayes.ComplementNB.score", false]], "score() (sklearn.naive_bayes.gaussiannb method)": [[842, "sklearn.naive_bayes.GaussianNB.score", false]], "score() (sklearn.naive_bayes.multinomialnb method)": [[843, "sklearn.naive_bayes.MultinomialNB.score", false]], "score() (sklearn.neighbors.kerneldensity method)": [[849, "sklearn.neighbors.KernelDensity.score", false]], "score() (sklearn.neighbors.kneighborsclassifier method)": [[846, "sklearn.neighbors.KNeighborsClassifier.score", false]], "score() (sklearn.neighbors.kneighborsregressor method)": [[847, "sklearn.neighbors.KNeighborsRegressor.score", false]], "score() (sklearn.neighbors.nearestcentroid method)": [[851, "sklearn.neighbors.NearestCentroid.score", false]], "score() (sklearn.neighbors.radiusneighborsclassifier method)": [[854, "sklearn.neighbors.RadiusNeighborsClassifier.score", false]], "score() (sklearn.neighbors.radiusneighborsregressor method)": [[855, "sklearn.neighbors.RadiusNeighborsRegressor.score", false]], "score() (sklearn.neural_network.mlpclassifier method)": [[861, "sklearn.neural_network.MLPClassifier.score", false]], "score() (sklearn.neural_network.mlpregressor method)": [[862, "sklearn.neural_network.MLPRegressor.score", false]], "score() (sklearn.pipeline.pipeline method)": [[864, "sklearn.pipeline.Pipeline.score", false]], "score() (sklearn.semi_supervised.labelpropagation method)": [[899, "sklearn.semi_supervised.LabelPropagation.score", false]], "score() (sklearn.semi_supervised.labelspreading method)": [[900, "sklearn.semi_supervised.LabelSpreading.score", false]], "score() (sklearn.semi_supervised.selftrainingclassifier method)": [[901, "sklearn.semi_supervised.SelfTrainingClassifier.score", false]], "score() (sklearn.svm.linearsvc method)": [[904, "sklearn.svm.LinearSVC.score", false]], "score() (sklearn.svm.linearsvr method)": [[905, "sklearn.svm.LinearSVR.score", false]], "score() (sklearn.svm.nusvc method)": [[906, "sklearn.svm.NuSVC.score", false]], "score() (sklearn.svm.nusvr method)": [[907, "sklearn.svm.NuSVR.score", false]], "score() (sklearn.svm.svc method)": [[909, "sklearn.svm.SVC.score", false]], "score() (sklearn.svm.svr method)": [[910, "sklearn.svm.SVR.score", false]], "score() (sklearn.tree.decisiontreeclassifier method)": [[912, "sklearn.tree.DecisionTreeClassifier.score", false]], "score() (sklearn.tree.decisiontreeregressor method)": [[913, "sklearn.tree.DecisionTreeRegressor.score", false]], "score() (sklearn.tree.extratreeclassifier method)": [[914, "sklearn.tree.ExtraTreeClassifier.score", false]], "score() (sklearn.tree.extratreeregressor method)": [[915, "sklearn.tree.ExtraTreeRegressor.score", false]], "score_samples": [[386, "term-score_samples", true]], "score_samples() (sklearn.covariance.ellipticenvelope method)": [[466, "sklearn.covariance.EllipticEnvelope.score_samples", false]], "score_samples() (sklearn.decomposition.factoranalysis method)": [[530, "sklearn.decomposition.FactorAnalysis.score_samples", false]], "score_samples() (sklearn.decomposition.pca method)": [[539, "sklearn.decomposition.PCA.score_samples", false]], "score_samples() (sklearn.ensemble.isolationforest method)": [[561, "sklearn.ensemble.IsolationForest.score_samples", false]], "score_samples() (sklearn.linear_model.sgdoneclasssvm method)": [[677, "sklearn.linear_model.SGDOneClassSVM.score_samples", false]], "score_samples() (sklearn.mixture.bayesiangaussianmixture method)": [[797, "sklearn.mixture.BayesianGaussianMixture.score_samples", false]], "score_samples() (sklearn.mixture.gaussianmixture method)": [[798, "sklearn.mixture.GaussianMixture.score_samples", false]], "score_samples() (sklearn.model_selection.gridsearchcv method)": [[800, "sklearn.model_selection.GridSearchCV.score_samples", false]], "score_samples() (sklearn.model_selection.halvinggridsearchcv method)": [[803, "sklearn.model_selection.HalvingGridSearchCV.score_samples", false]], "score_samples() (sklearn.model_selection.halvingrandomsearchcv method)": [[804, "sklearn.model_selection.HalvingRandomSearchCV.score_samples", false]], "score_samples() (sklearn.model_selection.randomizedsearchcv method)": [[814, "sklearn.model_selection.RandomizedSearchCV.score_samples", false]], "score_samples() (sklearn.neighbors.kerneldensity method)": [[849, "sklearn.neighbors.KernelDensity.score_samples", false]], "score_samples() (sklearn.neighbors.localoutlierfactor method)": [[850, "sklearn.neighbors.LocalOutlierFactor.score_samples", false]], "score_samples() (sklearn.neural_network.bernoullirbm method)": [[860, "sklearn.neural_network.BernoulliRBM.score_samples", false]], "score_samples() (sklearn.pipeline.pipeline method)": [[864, "sklearn.pipeline.Pipeline.score_samples", false]], "score_samples() (sklearn.svm.oneclasssvm method)": [[908, "sklearn.svm.OneClassSVM.score_samples", false]], "scorer": [[386, "term-scorer", true]], "scoring": [[386, "term-scoring", true]], "selectfdr (class in sklearn.feature_selection)": [[594, "sklearn.feature_selection.SelectFdr", false]], "selectfpr (class in sklearn.feature_selection)": [[595, "sklearn.feature_selection.SelectFpr", false]], "selectfrommodel (class in sklearn.feature_selection)": [[596, "sklearn.feature_selection.SelectFromModel", false]], "selectfwe (class in sklearn.feature_selection)": [[597, "sklearn.feature_selection.SelectFwe", false]], "selectkbest (class in sklearn.feature_selection)": [[598, "sklearn.feature_selection.SelectKBest", false]], "selectormixin (class in sklearn.feature_selection)": [[600, "sklearn.feature_selection.SelectorMixin", false]], "selectpercentile (class in sklearn.feature_selection)": [[599, "sklearn.feature_selection.SelectPercentile", false]], "selftrainingclassifier (class in sklearn.semi_supervised)": [[901, "sklearn.semi_supervised.SelfTrainingClassifier", false]], "semi-supervised": [[386, "term-semi-supervised", true]], "semi-supervised learning": [[386, "term-semi-supervised-learning", true]], "semisupervised": [[386, "term-semisupervised", true]], "sequentialfeatureselector (class in sklearn.feature_selection)": [[601, "sklearn.feature_selection.SequentialFeatureSelector", false]], "set_config() (in module sklearn)": [[902, "sklearn.set_config", false]], "set_fit_request() (sklearn.calibration.calibratedclassifiercv method)": [[434, "sklearn.calibration.CalibratedClassifierCV.set_fit_request", false]], "set_fit_request() (sklearn.cluster.bisectingkmeans method)": [[440, "sklearn.cluster.BisectingKMeans.set_fit_request", false]], "set_fit_request() (sklearn.cluster.dbscan method)": [[441, "sklearn.cluster.DBSCAN.set_fit_request", false]], "set_fit_request() (sklearn.cluster.kmeans method)": [[444, "sklearn.cluster.KMeans.set_fit_request", false]], "set_fit_request() (sklearn.cluster.minibatchkmeans method)": [[446, "sklearn.cluster.MiniBatchKMeans.set_fit_request", false]], "set_fit_request() (sklearn.dummy.dummyclassifier method)": [[549, "sklearn.dummy.DummyClassifier.set_fit_request", false]], "set_fit_request() (sklearn.dummy.dummyregressor method)": [[550, "sklearn.dummy.DummyRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.adaboostclassifier method)": [[551, "sklearn.ensemble.AdaBoostClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.adaboostregressor method)": [[552, "sklearn.ensemble.AdaBoostRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.baggingclassifier method)": [[553, "sklearn.ensemble.BaggingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.baggingregressor method)": [[554, "sklearn.ensemble.BaggingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.extratreesclassifier method)": [[555, "sklearn.ensemble.ExtraTreesClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.extratreesregressor method)": [[556, "sklearn.ensemble.ExtraTreesRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.gradientboostingclassifier method)": [[557, "sklearn.ensemble.GradientBoostingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.gradientboostingregressor method)": [[558, "sklearn.ensemble.GradientBoostingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.histgradientboostingclassifier method)": [[559, "sklearn.ensemble.HistGradientBoostingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.histgradientboostingregressor method)": [[560, "sklearn.ensemble.HistGradientBoostingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.isolationforest method)": [[561, "sklearn.ensemble.IsolationForest.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.randomforestclassifier method)": [[562, "sklearn.ensemble.RandomForestClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.randomforestregressor method)": [[563, "sklearn.ensemble.RandomForestRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.randomtreesembedding method)": [[564, "sklearn.ensemble.RandomTreesEmbedding.set_fit_request", false]], "set_fit_request() (sklearn.isotonic.isotonicregression method)": [[635, "sklearn.isotonic.IsotonicRegression.set_fit_request", false]], "set_fit_request() (sklearn.kernel_ridge.kernelridge method)": [[643, "sklearn.kernel_ridge.KernelRidge.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.bayesianridge method)": [[645, "sklearn.linear_model.BayesianRidge.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.elasticnet method)": [[646, "sklearn.linear_model.ElasticNet.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.elasticnetcv method)": [[647, "sklearn.linear_model.ElasticNetCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.gammaregressor method)": [[648, "sklearn.linear_model.GammaRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.huberregressor method)": [[649, "sklearn.linear_model.HuberRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lars method)": [[650, "sklearn.linear_model.Lars.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.larscv method)": [[651, "sklearn.linear_model.LarsCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lasso method)": [[652, "sklearn.linear_model.Lasso.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lassocv method)": [[653, "sklearn.linear_model.LassoCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lassolars method)": [[654, "sklearn.linear_model.LassoLars.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lassolarscv method)": [[655, "sklearn.linear_model.LassoLarsCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lassolarsic method)": [[656, "sklearn.linear_model.LassoLarsIC.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.linearregression method)": [[657, "sklearn.linear_model.LinearRegression.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.logisticregression method)": [[658, "sklearn.linear_model.LogisticRegression.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.logisticregressioncv method)": [[659, "sklearn.linear_model.LogisticRegressionCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.multitaskelasticnet method)": [[660, "sklearn.linear_model.MultiTaskElasticNet.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.multitaskelasticnetcv method)": [[661, "sklearn.linear_model.MultiTaskElasticNetCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.multitasklasso method)": [[662, "sklearn.linear_model.MultiTaskLasso.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.multitasklassocv method)": [[663, "sklearn.linear_model.MultiTaskLassoCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[666, "sklearn.linear_model.PassiveAggressiveClassifier.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[667, "sklearn.linear_model.PassiveAggressiveRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.perceptron method)": [[668, "sklearn.linear_model.Perceptron.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.poissonregressor method)": [[669, "sklearn.linear_model.PoissonRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.quantileregressor method)": [[670, "sklearn.linear_model.QuantileRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ransacregressor method)": [[671, "sklearn.linear_model.RANSACRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ridge method)": [[672, "sklearn.linear_model.Ridge.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ridgeclassifier method)": [[674, "sklearn.linear_model.RidgeClassifier.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ridgeclassifiercv method)": [[675, "sklearn.linear_model.RidgeClassifierCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ridgecv method)": [[673, "sklearn.linear_model.RidgeCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.sgdclassifier method)": [[676, "sklearn.linear_model.SGDClassifier.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.sgdoneclasssvm method)": [[677, "sklearn.linear_model.SGDOneClassSVM.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.sgdregressor method)": [[678, "sklearn.linear_model.SGDRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.tweedieregressor method)": [[680, "sklearn.linear_model.TweedieRegressor.set_fit_request", false]], "set_fit_request() (sklearn.manifold.mds method)": [[690, "sklearn.manifold.MDS.set_fit_request", false]], "set_fit_request() (sklearn.multioutput.multioutputclassifier method)": [[836, "sklearn.multioutput.MultiOutputClassifier.set_fit_request", false]], "set_fit_request() (sklearn.multioutput.multioutputregressor method)": [[837, "sklearn.multioutput.MultiOutputRegressor.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.bernoullinb method)": [[839, "sklearn.naive_bayes.BernoulliNB.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.categoricalnb method)": [[840, "sklearn.naive_bayes.CategoricalNB.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.complementnb method)": [[841, "sklearn.naive_bayes.ComplementNB.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.gaussiannb method)": [[842, "sklearn.naive_bayes.GaussianNB.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.multinomialnb method)": [[843, "sklearn.naive_bayes.MultinomialNB.set_fit_request", false]], "set_fit_request() (sklearn.neighbors.kerneldensity method)": [[849, "sklearn.neighbors.KernelDensity.set_fit_request", false]], "set_fit_request() (sklearn.neural_network.mlpclassifier method)": [[861, "sklearn.neural_network.MLPClassifier.set_fit_request", false]], "set_fit_request() (sklearn.neural_network.mlpregressor method)": [[862, "sklearn.neural_network.MLPRegressor.set_fit_request", false]], "set_fit_request() (sklearn.preprocessing.kbinsdiscretizer method)": [[869, "sklearn.preprocessing.KBinsDiscretizer.set_fit_request", false]], "set_fit_request() (sklearn.preprocessing.splinetransformer method)": [[883, "sklearn.preprocessing.SplineTransformer.set_fit_request", false]], "set_fit_request() (sklearn.preprocessing.standardscaler method)": [[884, "sklearn.preprocessing.StandardScaler.set_fit_request", false]], "set_fit_request() (sklearn.svm.linearsvc method)": [[904, "sklearn.svm.LinearSVC.set_fit_request", false]], "set_fit_request() (sklearn.svm.linearsvr method)": [[905, "sklearn.svm.LinearSVR.set_fit_request", false]], "set_fit_request() (sklearn.svm.nusvc method)": [[906, "sklearn.svm.NuSVC.set_fit_request", false]], "set_fit_request() (sklearn.svm.nusvr method)": [[907, "sklearn.svm.NuSVR.set_fit_request", false]], "set_fit_request() (sklearn.svm.oneclasssvm method)": [[908, "sklearn.svm.OneClassSVM.set_fit_request", false]], "set_fit_request() (sklearn.svm.svc method)": [[909, "sklearn.svm.SVC.set_fit_request", false]], "set_fit_request() (sklearn.svm.svr method)": [[910, "sklearn.svm.SVR.set_fit_request", false]], "set_fit_request() (sklearn.tree.decisiontreeclassifier method)": [[912, "sklearn.tree.DecisionTreeClassifier.set_fit_request", false]], "set_fit_request() (sklearn.tree.decisiontreeregressor method)": [[913, "sklearn.tree.DecisionTreeRegressor.set_fit_request", false]], "set_fit_request() (sklearn.tree.extratreeclassifier method)": [[914, "sklearn.tree.ExtraTreeClassifier.set_fit_request", false]], "set_fit_request() (sklearn.tree.extratreeregressor method)": [[915, "sklearn.tree.ExtraTreeRegressor.set_fit_request", false]], "set_inverse_transform_request() (sklearn.decomposition.fastica method)": [[531, "sklearn.decomposition.FastICA.set_inverse_transform_request", false]], "set_inverse_transform_request() (sklearn.preprocessing.labelbinarizer method)": [[871, "sklearn.preprocessing.LabelBinarizer.set_inverse_transform_request", false]], "set_inverse_transform_request() (sklearn.preprocessing.standardscaler method)": [[884, "sklearn.preprocessing.StandardScaler.set_inverse_transform_request", false]], "set_output() (sklearn.base.transformermixin method)": [[428, "sklearn.base.TransformerMixin.set_output", false]], "set_output() (sklearn.cluster.birch method)": [[439, "sklearn.cluster.Birch.set_output", false]], "set_output() (sklearn.cluster.bisectingkmeans method)": [[440, "sklearn.cluster.BisectingKMeans.set_output", false]], "set_output() (sklearn.cluster.featureagglomeration method)": [[442, "sklearn.cluster.FeatureAgglomeration.set_output", false]], "set_output() (sklearn.cluster.kmeans method)": [[444, "sklearn.cluster.KMeans.set_output", false]], "set_output() (sklearn.cluster.minibatchkmeans method)": [[446, "sklearn.cluster.MiniBatchKMeans.set_output", false]], "set_output() (sklearn.compose.columntransformer method)": [[461, "sklearn.compose.ColumnTransformer.set_output", false]], "set_output() (sklearn.cross_decomposition.cca method)": [[479, "sklearn.cross_decomposition.CCA.set_output", false]], "set_output() (sklearn.cross_decomposition.plscanonical method)": [[480, "sklearn.cross_decomposition.PLSCanonical.set_output", false]], "set_output() (sklearn.cross_decomposition.plsregression method)": [[481, "sklearn.cross_decomposition.PLSRegression.set_output", false]], "set_output() (sklearn.cross_decomposition.plssvd method)": [[482, "sklearn.cross_decomposition.PLSSVD.set_output", false]], "set_output() (sklearn.decomposition.dictionarylearning method)": [[529, "sklearn.decomposition.DictionaryLearning.set_output", false]], "set_output() (sklearn.decomposition.factoranalysis method)": [[530, "sklearn.decomposition.FactorAnalysis.set_output", false]], "set_output() (sklearn.decomposition.fastica method)": [[531, "sklearn.decomposition.FastICA.set_output", false]], "set_output() (sklearn.decomposition.incrementalpca method)": [[532, "sklearn.decomposition.IncrementalPCA.set_output", false]], "set_output() (sklearn.decomposition.kernelpca method)": [[533, "sklearn.decomposition.KernelPCA.set_output", false]], "set_output() (sklearn.decomposition.latentdirichletallocation method)": [[534, "sklearn.decomposition.LatentDirichletAllocation.set_output", false]], "set_output() (sklearn.decomposition.minibatchdictionarylearning method)": [[535, "sklearn.decomposition.MiniBatchDictionaryLearning.set_output", false]], "set_output() (sklearn.decomposition.minibatchnmf method)": [[536, "sklearn.decomposition.MiniBatchNMF.set_output", false]], "set_output() (sklearn.decomposition.minibatchsparsepca method)": [[537, "sklearn.decomposition.MiniBatchSparsePCA.set_output", false]], "set_output() (sklearn.decomposition.nmf method)": [[538, "sklearn.decomposition.NMF.set_output", false]], "set_output() (sklearn.decomposition.pca method)": [[539, "sklearn.decomposition.PCA.set_output", false]], "set_output() (sklearn.decomposition.sparsecoder method)": [[540, "sklearn.decomposition.SparseCoder.set_output", false]], "set_output() (sklearn.decomposition.sparsepca method)": [[541, "sklearn.decomposition.SparsePCA.set_output", false]], "set_output() (sklearn.decomposition.truncatedsvd method)": [[542, "sklearn.decomposition.TruncatedSVD.set_output", false]], "set_output() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[547, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_output", false]], "set_output() (sklearn.ensemble.randomtreesembedding method)": [[564, "sklearn.ensemble.RandomTreesEmbedding.set_output", false]], "set_output() (sklearn.ensemble.stackingclassifier method)": [[565, "sklearn.ensemble.StackingClassifier.set_output", false]], "set_output() (sklearn.ensemble.stackingregressor method)": [[566, "sklearn.ensemble.StackingRegressor.set_output", false]], "set_output() (sklearn.ensemble.votingclassifier method)": [[567, "sklearn.ensemble.VotingClassifier.set_output", false]], "set_output() (sklearn.ensemble.votingregressor method)": [[568, "sklearn.ensemble.VotingRegressor.set_output", false]], "set_output() (sklearn.feature_extraction.dictvectorizer method)": [[580, "sklearn.feature_extraction.DictVectorizer.set_output", false]], "set_output() (sklearn.feature_extraction.featurehasher method)": [[581, "sklearn.feature_extraction.FeatureHasher.set_output", false]], "set_output() (sklearn.feature_extraction.image.patchextractor method)": [[582, "sklearn.feature_extraction.image.PatchExtractor.set_output", false]], "set_output() (sklearn.feature_extraction.text.hashingvectorizer method)": [[588, "sklearn.feature_extraction.text.HashingVectorizer.set_output", false]], "set_output() (sklearn.feature_extraction.text.tfidftransformer method)": [[589, "sklearn.feature_extraction.text.TfidfTransformer.set_output", false]], "set_output() (sklearn.feature_selection.genericunivariateselect method)": [[591, "sklearn.feature_selection.GenericUnivariateSelect.set_output", false]], "set_output() (sklearn.feature_selection.rfe method)": [[592, "sklearn.feature_selection.RFE.set_output", false]], "set_output() (sklearn.feature_selection.rfecv method)": [[593, "sklearn.feature_selection.RFECV.set_output", false]], "set_output() (sklearn.feature_selection.selectfdr method)": [[594, "sklearn.feature_selection.SelectFdr.set_output", false]], "set_output() (sklearn.feature_selection.selectfpr method)": [[595, "sklearn.feature_selection.SelectFpr.set_output", false]], "set_output() (sklearn.feature_selection.selectfrommodel method)": [[596, "sklearn.feature_selection.SelectFromModel.set_output", false]], "set_output() (sklearn.feature_selection.selectfwe method)": [[597, "sklearn.feature_selection.SelectFwe.set_output", false]], "set_output() (sklearn.feature_selection.selectkbest method)": [[598, "sklearn.feature_selection.SelectKBest.set_output", false]], "set_output() (sklearn.feature_selection.selectormixin method)": [[600, "sklearn.feature_selection.SelectorMixin.set_output", false]], "set_output() (sklearn.feature_selection.selectpercentile method)": [[599, "sklearn.feature_selection.SelectPercentile.set_output", false]], "set_output() (sklearn.feature_selection.sequentialfeatureselector method)": [[601, "sklearn.feature_selection.SequentialFeatureSelector.set_output", false]], "set_output() (sklearn.feature_selection.variancethreshold method)": [[602, "sklearn.feature_selection.VarianceThreshold.set_output", false]], "set_output() (sklearn.impute.iterativeimputer method)": [[627, "sklearn.impute.IterativeImputer.set_output", false]], "set_output() (sklearn.impute.knnimputer method)": [[628, "sklearn.impute.KNNImputer.set_output", false]], "set_output() (sklearn.impute.missingindicator method)": [[629, "sklearn.impute.MissingIndicator.set_output", false]], "set_output() (sklearn.impute.simpleimputer method)": [[630, "sklearn.impute.SimpleImputer.set_output", false]], "set_output() (sklearn.isotonic.isotonicregression method)": [[635, "sklearn.isotonic.IsotonicRegression.set_output", false]], "set_output() (sklearn.kernel_approximation.additivechi2sampler method)": [[638, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_output", false]], "set_output() (sklearn.kernel_approximation.nystroem method)": [[639, "sklearn.kernel_approximation.Nystroem.set_output", false]], "set_output() (sklearn.kernel_approximation.polynomialcountsketch method)": [[640, "sklearn.kernel_approximation.PolynomialCountSketch.set_output", false]], "set_output() (sklearn.kernel_approximation.rbfsampler method)": [[641, "sklearn.kernel_approximation.RBFSampler.set_output", false]], "set_output() (sklearn.kernel_approximation.skewedchi2sampler method)": [[642, "sklearn.kernel_approximation.SkewedChi2Sampler.set_output", false]], "set_output() (sklearn.manifold.isomap method)": [[688, "sklearn.manifold.Isomap.set_output", false]], "set_output() (sklearn.manifold.locallylinearembedding method)": [[689, "sklearn.manifold.LocallyLinearEmbedding.set_output", false]], "set_output() (sklearn.manifold.tsne method)": [[692, "sklearn.manifold.TSNE.set_output", false]], "set_output() (sklearn.neighbors.kneighborstransformer method)": [[848, "sklearn.neighbors.KNeighborsTransformer.set_output", false]], "set_output() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[853, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_output", false]], "set_output() (sklearn.neighbors.radiusneighborstransformer method)": [[856, "sklearn.neighbors.RadiusNeighborsTransformer.set_output", false]], "set_output() (sklearn.neural_network.bernoullirbm method)": [[860, "sklearn.neural_network.BernoulliRBM.set_output", false]], "set_output() (sklearn.pipeline.featureunion method)": [[863, "sklearn.pipeline.FeatureUnion.set_output", false]], "set_output() (sklearn.pipeline.pipeline method)": [[864, "sklearn.pipeline.Pipeline.set_output", false]], "set_output() (sklearn.preprocessing.binarizer method)": [[867, "sklearn.preprocessing.Binarizer.set_output", false]], "set_output() (sklearn.preprocessing.functiontransformer method)": [[868, "sklearn.preprocessing.FunctionTransformer.set_output", false]], "set_output() (sklearn.preprocessing.kbinsdiscretizer method)": [[869, "sklearn.preprocessing.KBinsDiscretizer.set_output", false]], "set_output() (sklearn.preprocessing.kernelcenterer method)": [[870, "sklearn.preprocessing.KernelCenterer.set_output", false]], "set_output() (sklearn.preprocessing.labelbinarizer method)": [[871, "sklearn.preprocessing.LabelBinarizer.set_output", false]], "set_output() (sklearn.preprocessing.labelencoder method)": [[872, "sklearn.preprocessing.LabelEncoder.set_output", false]], "set_output() (sklearn.preprocessing.maxabsscaler method)": [[873, "sklearn.preprocessing.MaxAbsScaler.set_output", false]], "set_output() (sklearn.preprocessing.minmaxscaler method)": [[874, "sklearn.preprocessing.MinMaxScaler.set_output", false]], "set_output() (sklearn.preprocessing.multilabelbinarizer method)": [[875, "sklearn.preprocessing.MultiLabelBinarizer.set_output", false]], "set_output() (sklearn.preprocessing.normalizer method)": [[876, "sklearn.preprocessing.Normalizer.set_output", false]], "set_output() (sklearn.preprocessing.onehotencoder method)": [[877, "sklearn.preprocessing.OneHotEncoder.set_output", false]], "set_output() (sklearn.preprocessing.ordinalencoder method)": [[878, "sklearn.preprocessing.OrdinalEncoder.set_output", false]], "set_output() (sklearn.preprocessing.polynomialfeatures method)": [[879, "sklearn.preprocessing.PolynomialFeatures.set_output", false]], "set_output() (sklearn.preprocessing.powertransformer method)": [[880, "sklearn.preprocessing.PowerTransformer.set_output", false]], "set_output() (sklearn.preprocessing.quantiletransformer method)": [[881, "sklearn.preprocessing.QuantileTransformer.set_output", false]], "set_output() (sklearn.preprocessing.robustscaler method)": [[882, "sklearn.preprocessing.RobustScaler.set_output", false]], "set_output() (sklearn.preprocessing.splinetransformer method)": [[883, "sklearn.preprocessing.SplineTransformer.set_output", false]], "set_output() (sklearn.preprocessing.standardscaler method)": [[884, "sklearn.preprocessing.StandardScaler.set_output", false]], "set_output() (sklearn.preprocessing.targetencoder method)": [[885, "sklearn.preprocessing.TargetEncoder.set_output", false]], "set_output() (sklearn.random_projection.gaussianrandomprojection method)": [[896, "sklearn.random_projection.GaussianRandomProjection.set_output", false]], "set_output() (sklearn.random_projection.sparserandomprojection method)": [[897, "sklearn.random_projection.SparseRandomProjection.set_output", false]], "set_params": [[386, "term-set_params", true]], "set_params() (sklearn.base.baseestimator method)": [[418, "sklearn.base.BaseEstimator.set_params", false]], "set_params() (sklearn.calibration.calibratedclassifiercv method)": [[434, "sklearn.calibration.CalibratedClassifierCV.set_params", false]], "set_params() (sklearn.cluster.affinitypropagation method)": [[437, "sklearn.cluster.AffinityPropagation.set_params", false]], "set_params() (sklearn.cluster.agglomerativeclustering method)": [[438, "sklearn.cluster.AgglomerativeClustering.set_params", false]], "set_params() (sklearn.cluster.birch method)": [[439, "sklearn.cluster.Birch.set_params", false]], "set_params() (sklearn.cluster.bisectingkmeans method)": [[440, "sklearn.cluster.BisectingKMeans.set_params", false]], "set_params() (sklearn.cluster.dbscan method)": [[441, "sklearn.cluster.DBSCAN.set_params", false]], "set_params() (sklearn.cluster.featureagglomeration method)": [[442, "sklearn.cluster.FeatureAgglomeration.set_params", false]], "set_params() (sklearn.cluster.hdbscan method)": [[443, "sklearn.cluster.HDBSCAN.set_params", false]], "set_params() (sklearn.cluster.kmeans method)": [[444, "sklearn.cluster.KMeans.set_params", false]], "set_params() (sklearn.cluster.meanshift method)": [[445, "sklearn.cluster.MeanShift.set_params", false]], "set_params() (sklearn.cluster.minibatchkmeans method)": [[446, "sklearn.cluster.MiniBatchKMeans.set_params", false]], "set_params() (sklearn.cluster.optics method)": [[447, "sklearn.cluster.OPTICS.set_params", false]], "set_params() (sklearn.cluster.spectralbiclustering method)": [[448, "sklearn.cluster.SpectralBiclustering.set_params", false]], "set_params() (sklearn.cluster.spectralclustering method)": [[449, "sklearn.cluster.SpectralClustering.set_params", false]], "set_params() (sklearn.cluster.spectralcoclustering method)": [[450, "sklearn.cluster.SpectralCoclustering.set_params", false]], "set_params() (sklearn.compose.columntransformer method)": [[461, "sklearn.compose.ColumnTransformer.set_params", false]], "set_params() (sklearn.compose.transformedtargetregressor method)": [[462, "sklearn.compose.TransformedTargetRegressor.set_params", false]], "set_params() (sklearn.covariance.ellipticenvelope method)": [[466, "sklearn.covariance.EllipticEnvelope.set_params", false]], "set_params() (sklearn.covariance.empiricalcovariance method)": [[467, "sklearn.covariance.EmpiricalCovariance.set_params", false]], "set_params() (sklearn.covariance.graphicallasso method)": [[468, "sklearn.covariance.GraphicalLasso.set_params", false]], "set_params() (sklearn.covariance.graphicallassocv method)": [[469, "sklearn.covariance.GraphicalLassoCV.set_params", false]], "set_params() (sklearn.covariance.ledoitwolf method)": [[470, "sklearn.covariance.LedoitWolf.set_params", false]], "set_params() (sklearn.covariance.mincovdet method)": [[471, "sklearn.covariance.MinCovDet.set_params", false]], "set_params() (sklearn.covariance.oas method)": [[472, "sklearn.covariance.OAS.set_params", false]], "set_params() (sklearn.covariance.shrunkcovariance method)": [[473, "sklearn.covariance.ShrunkCovariance.set_params", false]], "set_params() (sklearn.cross_decomposition.cca method)": [[479, "sklearn.cross_decomposition.CCA.set_params", false]], "set_params() (sklearn.cross_decomposition.plscanonical method)": [[480, "sklearn.cross_decomposition.PLSCanonical.set_params", false]], "set_params() (sklearn.cross_decomposition.plsregression method)": [[481, "sklearn.cross_decomposition.PLSRegression.set_params", false]], "set_params() (sklearn.cross_decomposition.plssvd method)": [[482, "sklearn.cross_decomposition.PLSSVD.set_params", false]], "set_params() (sklearn.decomposition.dictionarylearning method)": [[529, "sklearn.decomposition.DictionaryLearning.set_params", false]], "set_params() (sklearn.decomposition.factoranalysis method)": [[530, "sklearn.decomposition.FactorAnalysis.set_params", false]], "set_params() (sklearn.decomposition.fastica method)": [[531, "sklearn.decomposition.FastICA.set_params", false]], "set_params() (sklearn.decomposition.incrementalpca method)": [[532, "sklearn.decomposition.IncrementalPCA.set_params", false]], "set_params() (sklearn.decomposition.kernelpca method)": [[533, "sklearn.decomposition.KernelPCA.set_params", false]], "set_params() (sklearn.decomposition.latentdirichletallocation method)": [[534, "sklearn.decomposition.LatentDirichletAllocation.set_params", false]], "set_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[535, "sklearn.decomposition.MiniBatchDictionaryLearning.set_params", false]], "set_params() (sklearn.decomposition.minibatchnmf method)": [[536, "sklearn.decomposition.MiniBatchNMF.set_params", false]], "set_params() (sklearn.decomposition.minibatchsparsepca method)": [[537, "sklearn.decomposition.MiniBatchSparsePCA.set_params", false]], "set_params() (sklearn.decomposition.nmf method)": [[538, "sklearn.decomposition.NMF.set_params", false]], "set_params() (sklearn.decomposition.pca method)": [[539, "sklearn.decomposition.PCA.set_params", false]], "set_params() (sklearn.decomposition.sparsecoder method)": [[540, "sklearn.decomposition.SparseCoder.set_params", false]], "set_params() (sklearn.decomposition.sparsepca method)": [[541, "sklearn.decomposition.SparsePCA.set_params", false]], "set_params() (sklearn.decomposition.truncatedsvd method)": [[542, "sklearn.decomposition.TruncatedSVD.set_params", false]], "set_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[547, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_params", false]], "set_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[548, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.set_params", false]], "set_params() (sklearn.dummy.dummyclassifier method)": [[549, "sklearn.dummy.DummyClassifier.set_params", false]], "set_params() (sklearn.dummy.dummyregressor method)": [[550, "sklearn.dummy.DummyRegressor.set_params", false]], "set_params() (sklearn.ensemble.adaboostclassifier method)": [[551, "sklearn.ensemble.AdaBoostClassifier.set_params", false]], "set_params() (sklearn.ensemble.adaboostregressor method)": [[552, "sklearn.ensemble.AdaBoostRegressor.set_params", false]], "set_params() (sklearn.ensemble.baggingclassifier method)": [[553, "sklearn.ensemble.BaggingClassifier.set_params", false]], "set_params() (sklearn.ensemble.baggingregressor method)": [[554, "sklearn.ensemble.BaggingRegressor.set_params", false]], "set_params() (sklearn.ensemble.extratreesclassifier method)": [[555, "sklearn.ensemble.ExtraTreesClassifier.set_params", false]], "set_params() (sklearn.ensemble.extratreesregressor method)": [[556, "sklearn.ensemble.ExtraTreesRegressor.set_params", false]], "set_params() (sklearn.ensemble.gradientboostingclassifier method)": [[557, "sklearn.ensemble.GradientBoostingClassifier.set_params", false]], "set_params() (sklearn.ensemble.gradientboostingregressor method)": [[558, "sklearn.ensemble.GradientBoostingRegressor.set_params", false]], "set_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[559, "sklearn.ensemble.HistGradientBoostingClassifier.set_params", false]], "set_params() (sklearn.ensemble.histgradientboostingregressor method)": [[560, "sklearn.ensemble.HistGradientBoostingRegressor.set_params", false]], "set_params() (sklearn.ensemble.isolationforest method)": [[561, "sklearn.ensemble.IsolationForest.set_params", false]], "set_params() (sklearn.ensemble.randomforestclassifier method)": [[562, "sklearn.ensemble.RandomForestClassifier.set_params", false]], "set_params() (sklearn.ensemble.randomforestregressor method)": [[563, "sklearn.ensemble.RandomForestRegressor.set_params", false]], "set_params() (sklearn.ensemble.randomtreesembedding method)": [[564, "sklearn.ensemble.RandomTreesEmbedding.set_params", false]], "set_params() (sklearn.ensemble.stackingclassifier method)": [[565, "sklearn.ensemble.StackingClassifier.set_params", false]], "set_params() (sklearn.ensemble.stackingregressor method)": [[566, "sklearn.ensemble.StackingRegressor.set_params", false]], "set_params() (sklearn.ensemble.votingclassifier method)": [[567, "sklearn.ensemble.VotingClassifier.set_params", false]], "set_params() (sklearn.ensemble.votingregressor method)": [[568, "sklearn.ensemble.VotingRegressor.set_params", false]], "set_params() (sklearn.feature_extraction.dictvectorizer method)": [[580, "sklearn.feature_extraction.DictVectorizer.set_params", false]], "set_params() (sklearn.feature_extraction.featurehasher method)": [[581, "sklearn.feature_extraction.FeatureHasher.set_params", false]], "set_params() (sklearn.feature_extraction.image.patchextractor method)": [[582, "sklearn.feature_extraction.image.PatchExtractor.set_params", false]], "set_params() (sklearn.feature_extraction.text.countvectorizer method)": [[587, "sklearn.feature_extraction.text.CountVectorizer.set_params", false]], "set_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[588, "sklearn.feature_extraction.text.HashingVectorizer.set_params", false]], "set_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[589, "sklearn.feature_extraction.text.TfidfTransformer.set_params", false]], "set_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[590, "sklearn.feature_extraction.text.TfidfVectorizer.set_params", false]], "set_params() (sklearn.feature_selection.genericunivariateselect method)": [[591, "sklearn.feature_selection.GenericUnivariateSelect.set_params", false]], "set_params() (sklearn.feature_selection.rfe method)": [[592, "sklearn.feature_selection.RFE.set_params", false]], "set_params() (sklearn.feature_selection.rfecv method)": [[593, "sklearn.feature_selection.RFECV.set_params", false]], "set_params() (sklearn.feature_selection.selectfdr method)": [[594, "sklearn.feature_selection.SelectFdr.set_params", false]], "set_params() (sklearn.feature_selection.selectfpr method)": [[595, "sklearn.feature_selection.SelectFpr.set_params", false]], "set_params() (sklearn.feature_selection.selectfrommodel method)": [[596, "sklearn.feature_selection.SelectFromModel.set_params", false]], "set_params() (sklearn.feature_selection.selectfwe method)": [[597, "sklearn.feature_selection.SelectFwe.set_params", false]], "set_params() (sklearn.feature_selection.selectkbest method)": [[598, "sklearn.feature_selection.SelectKBest.set_params", false]], "set_params() (sklearn.feature_selection.selectpercentile method)": [[599, "sklearn.feature_selection.SelectPercentile.set_params", false]], "set_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[601, "sklearn.feature_selection.SequentialFeatureSelector.set_params", false]], "set_params() (sklearn.feature_selection.variancethreshold method)": [[602, "sklearn.feature_selection.VarianceThreshold.set_params", false]], "set_params() (sklearn.frozen.frozenestimator method)": [[609, "sklearn.frozen.FrozenEstimator.set_params", false]], "set_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[610, "sklearn.gaussian_process.GaussianProcessClassifier.set_params", false]], "set_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[611, "sklearn.gaussian_process.GaussianProcessRegressor.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[612, "sklearn.gaussian_process.kernels.CompoundKernel.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[613, "sklearn.gaussian_process.kernels.ConstantKernel.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[614, "sklearn.gaussian_process.kernels.DotProduct.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[616, "sklearn.gaussian_process.kernels.Exponentiation.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[615, "sklearn.gaussian_process.kernels.ExpSineSquared.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.kernel method)": [[618, "sklearn.gaussian_process.kernels.Kernel.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.matern method)": [[619, "sklearn.gaussian_process.kernels.Matern.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[620, "sklearn.gaussian_process.kernels.PairwiseKernel.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.product method)": [[621, "sklearn.gaussian_process.kernels.Product.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[623, "sklearn.gaussian_process.kernels.RationalQuadratic.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.rbf method)": [[622, "sklearn.gaussian_process.kernels.RBF.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.sum method)": [[624, "sklearn.gaussian_process.kernels.Sum.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[625, "sklearn.gaussian_process.kernels.WhiteKernel.set_params", false]], "set_params() (sklearn.impute.iterativeimputer method)": [[627, "sklearn.impute.IterativeImputer.set_params", false]], "set_params() (sklearn.impute.knnimputer method)": [[628, "sklearn.impute.KNNImputer.set_params", false]], "set_params() (sklearn.impute.missingindicator method)": [[629, "sklearn.impute.MissingIndicator.set_params", false]], "set_params() (sklearn.impute.simpleimputer method)": [[630, "sklearn.impute.SimpleImputer.set_params", false]], "set_params() (sklearn.isotonic.isotonicregression method)": [[635, "sklearn.isotonic.IsotonicRegression.set_params", false]], "set_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[638, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_params", false]], "set_params() (sklearn.kernel_approximation.nystroem method)": [[639, "sklearn.kernel_approximation.Nystroem.set_params", false]], "set_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[640, "sklearn.kernel_approximation.PolynomialCountSketch.set_params", false]], "set_params() (sklearn.kernel_approximation.rbfsampler method)": [[641, "sklearn.kernel_approximation.RBFSampler.set_params", false]], "set_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[642, "sklearn.kernel_approximation.SkewedChi2Sampler.set_params", false]], "set_params() (sklearn.kernel_ridge.kernelridge method)": [[643, "sklearn.kernel_ridge.KernelRidge.set_params", false]], "set_params() (sklearn.linear_model.ardregression method)": [[644, "sklearn.linear_model.ARDRegression.set_params", false]], "set_params() (sklearn.linear_model.bayesianridge method)": [[645, "sklearn.linear_model.BayesianRidge.set_params", false]], "set_params() (sklearn.linear_model.elasticnet method)": [[646, "sklearn.linear_model.ElasticNet.set_params", false]], "set_params() (sklearn.linear_model.elasticnetcv method)": [[647, "sklearn.linear_model.ElasticNetCV.set_params", false]], "set_params() (sklearn.linear_model.gammaregressor method)": [[648, "sklearn.linear_model.GammaRegressor.set_params", false]], "set_params() (sklearn.linear_model.huberregressor method)": [[649, "sklearn.linear_model.HuberRegressor.set_params", false]], "set_params() (sklearn.linear_model.lars method)": [[650, "sklearn.linear_model.Lars.set_params", false]], "set_params() (sklearn.linear_model.larscv method)": [[651, "sklearn.linear_model.LarsCV.set_params", false]], "set_params() (sklearn.linear_model.lasso method)": [[652, "sklearn.linear_model.Lasso.set_params", false]], "set_params() (sklearn.linear_model.lassocv method)": [[653, "sklearn.linear_model.LassoCV.set_params", false]], "set_params() (sklearn.linear_model.lassolars method)": [[654, "sklearn.linear_model.LassoLars.set_params", false]], "set_params() (sklearn.linear_model.lassolarscv method)": [[655, "sklearn.linear_model.LassoLarsCV.set_params", false]], "set_params() (sklearn.linear_model.lassolarsic method)": [[656, "sklearn.linear_model.LassoLarsIC.set_params", false]], "set_params() (sklearn.linear_model.linearregression method)": [[657, "sklearn.linear_model.LinearRegression.set_params", false]], "set_params() (sklearn.linear_model.logisticregression method)": [[658, "sklearn.linear_model.LogisticRegression.set_params", false]], "set_params() (sklearn.linear_model.logisticregressioncv method)": [[659, "sklearn.linear_model.LogisticRegressionCV.set_params", false]], "set_params() (sklearn.linear_model.multitaskelasticnet method)": [[660, "sklearn.linear_model.MultiTaskElasticNet.set_params", false]], "set_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[661, "sklearn.linear_model.MultiTaskElasticNetCV.set_params", false]], "set_params() (sklearn.linear_model.multitasklasso method)": [[662, "sklearn.linear_model.MultiTaskLasso.set_params", false]], "set_params() (sklearn.linear_model.multitasklassocv method)": [[663, "sklearn.linear_model.MultiTaskLassoCV.set_params", false]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[664, "sklearn.linear_model.OrthogonalMatchingPursuit.set_params", false]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[665, "sklearn.linear_model.OrthogonalMatchingPursuitCV.set_params", false]], "set_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[666, "sklearn.linear_model.PassiveAggressiveClassifier.set_params", false]], "set_params() (sklearn.linear_model.passiveaggressiveregressor method)": [[667, "sklearn.linear_model.PassiveAggressiveRegressor.set_params", false]], "set_params() (sklearn.linear_model.perceptron method)": [[668, "sklearn.linear_model.Perceptron.set_params", false]], "set_params() (sklearn.linear_model.poissonregressor method)": [[669, "sklearn.linear_model.PoissonRegressor.set_params", false]], "set_params() (sklearn.linear_model.quantileregressor method)": [[670, "sklearn.linear_model.QuantileRegressor.set_params", false]], "set_params() (sklearn.linear_model.ransacregressor method)": [[671, "sklearn.linear_model.RANSACRegressor.set_params", false]], "set_params() (sklearn.linear_model.ridge method)": [[672, "sklearn.linear_model.Ridge.set_params", false]], "set_params() (sklearn.linear_model.ridgeclassifier method)": [[674, "sklearn.linear_model.RidgeClassifier.set_params", false]], "set_params() (sklearn.linear_model.ridgeclassifiercv method)": [[675, "sklearn.linear_model.RidgeClassifierCV.set_params", false]], "set_params() (sklearn.linear_model.ridgecv method)": [[673, "sklearn.linear_model.RidgeCV.set_params", false]], "set_params() (sklearn.linear_model.sgdclassifier method)": [[676, "sklearn.linear_model.SGDClassifier.set_params", false]], "set_params() (sklearn.linear_model.sgdoneclasssvm method)": [[677, "sklearn.linear_model.SGDOneClassSVM.set_params", false]], "set_params() (sklearn.linear_model.sgdregressor method)": [[678, "sklearn.linear_model.SGDRegressor.set_params", false]], "set_params() (sklearn.linear_model.theilsenregressor method)": [[679, "sklearn.linear_model.TheilSenRegressor.set_params", false]], "set_params() (sklearn.linear_model.tweedieregressor method)": [[680, "sklearn.linear_model.TweedieRegressor.set_params", false]], "set_params() (sklearn.manifold.isomap method)": [[688, "sklearn.manifold.Isomap.set_params", false]], "set_params() (sklearn.manifold.locallylinearembedding method)": [[689, "sklearn.manifold.LocallyLinearEmbedding.set_params", false]], "set_params() (sklearn.manifold.mds method)": [[690, "sklearn.manifold.MDS.set_params", false]], "set_params() (sklearn.manifold.spectralembedding method)": [[691, "sklearn.manifold.SpectralEmbedding.set_params", false]], "set_params() (sklearn.manifold.tsne method)": [[692, "sklearn.manifold.TSNE.set_params", false]], "set_params() (sklearn.mixture.bayesiangaussianmixture method)": [[797, "sklearn.mixture.BayesianGaussianMixture.set_params", false]], "set_params() (sklearn.mixture.gaussianmixture method)": [[798, "sklearn.mixture.GaussianMixture.set_params", false]], "set_params() (sklearn.model_selection.fixedthresholdclassifier method)": [[799, "sklearn.model_selection.FixedThresholdClassifier.set_params", false]], "set_params() (sklearn.model_selection.gridsearchcv method)": [[800, "sklearn.model_selection.GridSearchCV.set_params", false]], "set_params() (sklearn.model_selection.halvinggridsearchcv method)": [[803, "sklearn.model_selection.HalvingGridSearchCV.set_params", false]], "set_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[804, "sklearn.model_selection.HalvingRandomSearchCV.set_params", false]], "set_params() (sklearn.model_selection.randomizedsearchcv method)": [[814, "sklearn.model_selection.RandomizedSearchCV.set_params", false]], "set_params() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[822, "sklearn.model_selection.TunedThresholdClassifierCV.set_params", false]], "set_params() (sklearn.multiclass.onevsoneclassifier method)": [[832, "sklearn.multiclass.OneVsOneClassifier.set_params", false]], "set_params() (sklearn.multiclass.onevsrestclassifier method)": [[833, "sklearn.multiclass.OneVsRestClassifier.set_params", false]], "set_params() (sklearn.multiclass.outputcodeclassifier method)": [[834, "sklearn.multiclass.OutputCodeClassifier.set_params", false]], "set_params() (sklearn.multioutput.classifierchain method)": [[835, "sklearn.multioutput.ClassifierChain.set_params", false]], "set_params() (sklearn.multioutput.multioutputclassifier method)": [[836, "sklearn.multioutput.MultiOutputClassifier.set_params", false]], "set_params() (sklearn.multioutput.multioutputregressor method)": [[837, "sklearn.multioutput.MultiOutputRegressor.set_params", false]], "set_params() (sklearn.multioutput.regressorchain method)": [[838, "sklearn.multioutput.RegressorChain.set_params", false]], "set_params() (sklearn.naive_bayes.bernoullinb method)": [[839, "sklearn.naive_bayes.BernoulliNB.set_params", false]], "set_params() (sklearn.naive_bayes.categoricalnb method)": [[840, "sklearn.naive_bayes.CategoricalNB.set_params", false]], "set_params() (sklearn.naive_bayes.complementnb method)": [[841, "sklearn.naive_bayes.ComplementNB.set_params", false]], "set_params() (sklearn.naive_bayes.gaussiannb method)": [[842, "sklearn.naive_bayes.GaussianNB.set_params", false]], "set_params() (sklearn.naive_bayes.multinomialnb method)": [[843, "sklearn.naive_bayes.MultinomialNB.set_params", false]], "set_params() (sklearn.neighbors.kerneldensity method)": [[849, "sklearn.neighbors.KernelDensity.set_params", false]], "set_params() (sklearn.neighbors.kneighborsclassifier method)": [[846, "sklearn.neighbors.KNeighborsClassifier.set_params", false]], "set_params() (sklearn.neighbors.kneighborsregressor method)": [[847, "sklearn.neighbors.KNeighborsRegressor.set_params", false]], "set_params() (sklearn.neighbors.kneighborstransformer method)": [[848, "sklearn.neighbors.KNeighborsTransformer.set_params", false]], "set_params() (sklearn.neighbors.localoutlierfactor method)": [[850, "sklearn.neighbors.LocalOutlierFactor.set_params", false]], "set_params() (sklearn.neighbors.nearestcentroid method)": [[851, "sklearn.neighbors.NearestCentroid.set_params", false]], "set_params() (sklearn.neighbors.nearestneighbors method)": [[852, "sklearn.neighbors.NearestNeighbors.set_params", false]], "set_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[853, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_params", false]], "set_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[854, "sklearn.neighbors.RadiusNeighborsClassifier.set_params", false]], "set_params() (sklearn.neighbors.radiusneighborsregressor method)": [[855, "sklearn.neighbors.RadiusNeighborsRegressor.set_params", false]], "set_params() (sklearn.neighbors.radiusneighborstransformer method)": [[856, "sklearn.neighbors.RadiusNeighborsTransformer.set_params", false]], "set_params() (sklearn.neural_network.bernoullirbm method)": [[860, "sklearn.neural_network.BernoulliRBM.set_params", false]], "set_params() (sklearn.neural_network.mlpclassifier method)": [[861, "sklearn.neural_network.MLPClassifier.set_params", false]], "set_params() (sklearn.neural_network.mlpregressor method)": [[862, "sklearn.neural_network.MLPRegressor.set_params", false]], "set_params() (sklearn.pipeline.featureunion method)": [[863, "sklearn.pipeline.FeatureUnion.set_params", false]], "set_params() (sklearn.pipeline.pipeline method)": [[864, "sklearn.pipeline.Pipeline.set_params", false]], "set_params() (sklearn.preprocessing.binarizer method)": [[867, "sklearn.preprocessing.Binarizer.set_params", false]], "set_params() (sklearn.preprocessing.functiontransformer method)": [[868, "sklearn.preprocessing.FunctionTransformer.set_params", false]], "set_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[869, "sklearn.preprocessing.KBinsDiscretizer.set_params", false]], "set_params() (sklearn.preprocessing.kernelcenterer method)": [[870, "sklearn.preprocessing.KernelCenterer.set_params", false]], "set_params() (sklearn.preprocessing.labelbinarizer method)": [[871, "sklearn.preprocessing.LabelBinarizer.set_params", false]], "set_params() (sklearn.preprocessing.labelencoder method)": [[872, "sklearn.preprocessing.LabelEncoder.set_params", false]], "set_params() (sklearn.preprocessing.maxabsscaler method)": [[873, "sklearn.preprocessing.MaxAbsScaler.set_params", false]], "set_params() (sklearn.preprocessing.minmaxscaler method)": [[874, "sklearn.preprocessing.MinMaxScaler.set_params", false]], "set_params() (sklearn.preprocessing.multilabelbinarizer method)": [[875, "sklearn.preprocessing.MultiLabelBinarizer.set_params", false]], "set_params() (sklearn.preprocessing.normalizer method)": [[876, "sklearn.preprocessing.Normalizer.set_params", false]], "set_params() (sklearn.preprocessing.onehotencoder method)": [[877, "sklearn.preprocessing.OneHotEncoder.set_params", false]], "set_params() (sklearn.preprocessing.ordinalencoder method)": [[878, "sklearn.preprocessing.OrdinalEncoder.set_params", false]], "set_params() (sklearn.preprocessing.polynomialfeatures method)": [[879, "sklearn.preprocessing.PolynomialFeatures.set_params", false]], "set_params() (sklearn.preprocessing.powertransformer method)": [[880, "sklearn.preprocessing.PowerTransformer.set_params", false]], "set_params() (sklearn.preprocessing.quantiletransformer method)": [[881, "sklearn.preprocessing.QuantileTransformer.set_params", false]], "set_params() (sklearn.preprocessing.robustscaler method)": [[882, "sklearn.preprocessing.RobustScaler.set_params", false]], "set_params() (sklearn.preprocessing.splinetransformer method)": [[883, "sklearn.preprocessing.SplineTransformer.set_params", false]], "set_params() (sklearn.preprocessing.standardscaler method)": [[884, "sklearn.preprocessing.StandardScaler.set_params", false]], "set_params() (sklearn.preprocessing.targetencoder method)": [[885, "sklearn.preprocessing.TargetEncoder.set_params", false]], "set_params() (sklearn.random_projection.gaussianrandomprojection method)": [[896, "sklearn.random_projection.GaussianRandomProjection.set_params", false]], "set_params() (sklearn.random_projection.sparserandomprojection method)": [[897, "sklearn.random_projection.SparseRandomProjection.set_params", false]], "set_params() (sklearn.semi_supervised.labelpropagation method)": [[899, "sklearn.semi_supervised.LabelPropagation.set_params", false]], "set_params() (sklearn.semi_supervised.labelspreading method)": [[900, "sklearn.semi_supervised.LabelSpreading.set_params", false]], "set_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[901, "sklearn.semi_supervised.SelfTrainingClassifier.set_params", false]], "set_params() (sklearn.svm.linearsvc method)": [[904, "sklearn.svm.LinearSVC.set_params", false]], "set_params() (sklearn.svm.linearsvr method)": [[905, "sklearn.svm.LinearSVR.set_params", false]], "set_params() (sklearn.svm.nusvc method)": [[906, "sklearn.svm.NuSVC.set_params", false]], "set_params() (sklearn.svm.nusvr method)": [[907, "sklearn.svm.NuSVR.set_params", false]], "set_params() (sklearn.svm.oneclasssvm method)": [[908, "sklearn.svm.OneClassSVM.set_params", false]], "set_params() (sklearn.svm.svc method)": [[909, "sklearn.svm.SVC.set_params", false]], "set_params() (sklearn.svm.svr method)": [[910, "sklearn.svm.SVR.set_params", false]], "set_params() (sklearn.tree.decisiontreeclassifier method)": [[912, "sklearn.tree.DecisionTreeClassifier.set_params", false]], "set_params() (sklearn.tree.decisiontreeregressor method)": [[913, "sklearn.tree.DecisionTreeRegressor.set_params", false]], "set_params() (sklearn.tree.extratreeclassifier method)": [[914, "sklearn.tree.ExtraTreeClassifier.set_params", false]], "set_params() (sklearn.tree.extratreeregressor method)": [[915, "sklearn.tree.ExtraTreeRegressor.set_params", false]], "set_partial_fit_request() (sklearn.cluster.minibatchkmeans method)": [[446, "sklearn.cluster.MiniBatchKMeans.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.decomposition.minibatchnmf method)": [[536, "sklearn.decomposition.MiniBatchNMF.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[666, "sklearn.linear_model.PassiveAggressiveClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[667, "sklearn.linear_model.PassiveAggressiveRegressor.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.perceptron method)": [[668, "sklearn.linear_model.Perceptron.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.sgdclassifier method)": [[676, "sklearn.linear_model.SGDClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.sgdoneclasssvm method)": [[677, "sklearn.linear_model.SGDOneClassSVM.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.sgdregressor method)": [[678, "sklearn.linear_model.SGDRegressor.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.multiclass.onevsoneclassifier method)": [[832, "sklearn.multiclass.OneVsOneClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.multiclass.onevsrestclassifier method)": [[833, "sklearn.multiclass.OneVsRestClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.multioutput.multioutputclassifier method)": [[836, "sklearn.multioutput.MultiOutputClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.multioutput.multioutputregressor method)": [[837, "sklearn.multioutput.MultiOutputRegressor.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.bernoullinb method)": [[839, "sklearn.naive_bayes.BernoulliNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.categoricalnb method)": [[840, "sklearn.naive_bayes.CategoricalNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.complementnb method)": [[841, "sklearn.naive_bayes.ComplementNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.gaussiannb method)": [[842, "sklearn.naive_bayes.GaussianNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.multinomialnb method)": [[843, "sklearn.naive_bayes.MultinomialNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.neural_network.mlpclassifier method)": [[861, "sklearn.neural_network.MLPClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.neural_network.mlpregressor method)": [[862, "sklearn.neural_network.MLPRegressor.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.preprocessing.standardscaler method)": [[884, "sklearn.preprocessing.StandardScaler.set_partial_fit_request", false]], "set_predict_request() (sklearn.cross_decomposition.cca method)": [[479, "sklearn.cross_decomposition.CCA.set_predict_request", false]], "set_predict_request() (sklearn.cross_decomposition.plscanonical method)": [[480, "sklearn.cross_decomposition.PLSCanonical.set_predict_request", false]], "set_predict_request() (sklearn.cross_decomposition.plsregression method)": [[481, "sklearn.cross_decomposition.PLSRegression.set_predict_request", false]], "set_predict_request() (sklearn.dummy.dummyregressor method)": [[550, "sklearn.dummy.DummyRegressor.set_predict_request", false]], "set_predict_request() (sklearn.gaussian_process.gaussianprocessregressor method)": [[611, "sklearn.gaussian_process.GaussianProcessRegressor.set_predict_request", false]], "set_predict_request() (sklearn.linear_model.ardregression method)": [[644, "sklearn.linear_model.ARDRegression.set_predict_request", false]], "set_predict_request() (sklearn.linear_model.bayesianridge method)": [[645, "sklearn.linear_model.BayesianRidge.set_predict_request", false]], "set_score_request() (sklearn.calibration.calibratedclassifiercv method)": [[434, "sklearn.calibration.CalibratedClassifierCV.set_score_request", false]], "set_score_request() (sklearn.cluster.bisectingkmeans method)": [[440, "sklearn.cluster.BisectingKMeans.set_score_request", false]], "set_score_request() (sklearn.cluster.kmeans method)": [[444, "sklearn.cluster.KMeans.set_score_request", false]], "set_score_request() (sklearn.cluster.minibatchkmeans method)": [[446, "sklearn.cluster.MiniBatchKMeans.set_score_request", false]], "set_score_request() (sklearn.compose.transformedtargetregressor method)": [[462, "sklearn.compose.TransformedTargetRegressor.set_score_request", false]], "set_score_request() (sklearn.cross_decomposition.cca method)": [[479, "sklearn.cross_decomposition.CCA.set_score_request", false]], "set_score_request() (sklearn.cross_decomposition.plscanonical method)": [[480, "sklearn.cross_decomposition.PLSCanonical.set_score_request", false]], "set_score_request() (sklearn.cross_decomposition.plsregression method)": [[481, "sklearn.cross_decomposition.PLSRegression.set_score_request", false]], "set_score_request() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[547, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_score_request", false]], "set_score_request() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[548, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.set_score_request", false]], "set_score_request() (sklearn.dummy.dummyclassifier method)": [[549, "sklearn.dummy.DummyClassifier.set_score_request", false]], "set_score_request() (sklearn.dummy.dummyregressor method)": [[550, "sklearn.dummy.DummyRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.adaboostclassifier method)": [[551, "sklearn.ensemble.AdaBoostClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.adaboostregressor method)": [[552, "sklearn.ensemble.AdaBoostRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.baggingclassifier method)": [[553, "sklearn.ensemble.BaggingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.baggingregressor method)": [[554, "sklearn.ensemble.BaggingRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.extratreesclassifier method)": [[555, "sklearn.ensemble.ExtraTreesClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.extratreesregressor method)": [[556, "sklearn.ensemble.ExtraTreesRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.gradientboostingclassifier method)": [[557, "sklearn.ensemble.GradientBoostingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.gradientboostingregressor method)": [[558, "sklearn.ensemble.GradientBoostingRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.histgradientboostingclassifier method)": [[559, "sklearn.ensemble.HistGradientBoostingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.histgradientboostingregressor method)": [[560, "sklearn.ensemble.HistGradientBoostingRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.randomforestclassifier method)": [[562, "sklearn.ensemble.RandomForestClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.randomforestregressor method)": [[563, "sklearn.ensemble.RandomForestRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.stackingclassifier method)": [[565, "sklearn.ensemble.StackingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.stackingregressor method)": [[566, "sklearn.ensemble.StackingRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.votingclassifier method)": [[567, "sklearn.ensemble.VotingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.votingregressor method)": [[568, "sklearn.ensemble.VotingRegressor.set_score_request", false]], "set_score_request() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[610, "sklearn.gaussian_process.GaussianProcessClassifier.set_score_request", false]], "set_score_request() (sklearn.gaussian_process.gaussianprocessregressor method)": [[611, "sklearn.gaussian_process.GaussianProcessRegressor.set_score_request", false]], "set_score_request() (sklearn.isotonic.isotonicregression method)": [[635, "sklearn.isotonic.IsotonicRegression.set_score_request", false]], "set_score_request() (sklearn.kernel_ridge.kernelridge method)": [[643, "sklearn.kernel_ridge.KernelRidge.set_score_request", false]], "set_score_request() (sklearn.linear_model.ardregression method)": [[644, "sklearn.linear_model.ARDRegression.set_score_request", false]], "set_score_request() (sklearn.linear_model.bayesianridge method)": [[645, "sklearn.linear_model.BayesianRidge.set_score_request", false]], "set_score_request() (sklearn.linear_model.elasticnet method)": [[646, "sklearn.linear_model.ElasticNet.set_score_request", false]], "set_score_request() (sklearn.linear_model.elasticnetcv method)": [[647, "sklearn.linear_model.ElasticNetCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.gammaregressor method)": [[648, "sklearn.linear_model.GammaRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.huberregressor method)": [[649, "sklearn.linear_model.HuberRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.lars method)": [[650, "sklearn.linear_model.Lars.set_score_request", false]], "set_score_request() (sklearn.linear_model.larscv method)": [[651, "sklearn.linear_model.LarsCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.lasso method)": [[652, "sklearn.linear_model.Lasso.set_score_request", false]], "set_score_request() (sklearn.linear_model.lassocv method)": [[653, "sklearn.linear_model.LassoCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.lassolars method)": [[654, "sklearn.linear_model.LassoLars.set_score_request", false]], "set_score_request() (sklearn.linear_model.lassolarscv method)": [[655, "sklearn.linear_model.LassoLarsCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.lassolarsic method)": [[656, "sklearn.linear_model.LassoLarsIC.set_score_request", false]], "set_score_request() (sklearn.linear_model.linearregression method)": [[657, "sklearn.linear_model.LinearRegression.set_score_request", false]], "set_score_request() (sklearn.linear_model.logisticregression method)": [[658, "sklearn.linear_model.LogisticRegression.set_score_request", false]], "set_score_request() (sklearn.linear_model.logisticregressioncv method)": [[659, "sklearn.linear_model.LogisticRegressionCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.multitaskelasticnet method)": [[660, "sklearn.linear_model.MultiTaskElasticNet.set_score_request", false]], "set_score_request() (sklearn.linear_model.multitaskelasticnetcv method)": [[661, "sklearn.linear_model.MultiTaskElasticNetCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.multitasklasso method)": [[662, "sklearn.linear_model.MultiTaskLasso.set_score_request", false]], "set_score_request() (sklearn.linear_model.multitasklassocv method)": [[663, "sklearn.linear_model.MultiTaskLassoCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[664, "sklearn.linear_model.OrthogonalMatchingPursuit.set_score_request", false]], "set_score_request() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[665, "sklearn.linear_model.OrthogonalMatchingPursuitCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[666, "sklearn.linear_model.PassiveAggressiveClassifier.set_score_request", false]], "set_score_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[667, "sklearn.linear_model.PassiveAggressiveRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.perceptron method)": [[668, "sklearn.linear_model.Perceptron.set_score_request", false]], "set_score_request() (sklearn.linear_model.poissonregressor method)": [[669, "sklearn.linear_model.PoissonRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.quantileregressor method)": [[670, "sklearn.linear_model.QuantileRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.ridge method)": [[672, "sklearn.linear_model.Ridge.set_score_request", false]], "set_score_request() (sklearn.linear_model.ridgeclassifier method)": [[674, "sklearn.linear_model.RidgeClassifier.set_score_request", false]], "set_score_request() (sklearn.linear_model.ridgeclassifiercv method)": [[675, "sklearn.linear_model.RidgeClassifierCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.ridgecv method)": [[673, "sklearn.linear_model.RidgeCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.sgdclassifier method)": [[676, "sklearn.linear_model.SGDClassifier.set_score_request", false]], "set_score_request() (sklearn.linear_model.sgdregressor method)": [[678, "sklearn.linear_model.SGDRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.theilsenregressor method)": [[679, "sklearn.linear_model.TheilSenRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.tweedieregressor method)": [[680, "sklearn.linear_model.TweedieRegressor.set_score_request", false]], "set_score_request() (sklearn.model_selection.fixedthresholdclassifier method)": [[799, "sklearn.model_selection.FixedThresholdClassifier.set_score_request", false]], "set_score_request() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[822, "sklearn.model_selection.TunedThresholdClassifierCV.set_score_request", false]], "set_score_request() (sklearn.multiclass.onevsoneclassifier method)": [[832, "sklearn.multiclass.OneVsOneClassifier.set_score_request", false]], "set_score_request() (sklearn.multiclass.onevsrestclassifier method)": [[833, "sklearn.multiclass.OneVsRestClassifier.set_score_request", false]], "set_score_request() (sklearn.multiclass.outputcodeclassifier method)": [[834, "sklearn.multiclass.OutputCodeClassifier.set_score_request", false]], "set_score_request() (sklearn.multioutput.classifierchain method)": [[835, "sklearn.multioutput.ClassifierChain.set_score_request", false]], "set_score_request() (sklearn.multioutput.multioutputregressor method)": [[837, "sklearn.multioutput.MultiOutputRegressor.set_score_request", false]], "set_score_request() (sklearn.multioutput.regressorchain method)": [[838, "sklearn.multioutput.RegressorChain.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.bernoullinb method)": [[839, "sklearn.naive_bayes.BernoulliNB.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.categoricalnb method)": [[840, "sklearn.naive_bayes.CategoricalNB.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.complementnb method)": [[841, "sklearn.naive_bayes.ComplementNB.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.gaussiannb method)": [[842, "sklearn.naive_bayes.GaussianNB.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.multinomialnb method)": [[843, "sklearn.naive_bayes.MultinomialNB.set_score_request", false]], "set_score_request() (sklearn.neighbors.kneighborsclassifier method)": [[846, "sklearn.neighbors.KNeighborsClassifier.set_score_request", false]], "set_score_request() (sklearn.neighbors.kneighborsregressor method)": [[847, "sklearn.neighbors.KNeighborsRegressor.set_score_request", false]], "set_score_request() (sklearn.neighbors.nearestcentroid method)": [[851, "sklearn.neighbors.NearestCentroid.set_score_request", false]], "set_score_request() (sklearn.neighbors.radiusneighborsclassifier method)": [[854, "sklearn.neighbors.RadiusNeighborsClassifier.set_score_request", false]], "set_score_request() (sklearn.neighbors.radiusneighborsregressor method)": [[855, "sklearn.neighbors.RadiusNeighborsRegressor.set_score_request", false]], "set_score_request() (sklearn.neural_network.mlpclassifier method)": [[861, "sklearn.neural_network.MLPClassifier.set_score_request", false]], "set_score_request() (sklearn.neural_network.mlpregressor method)": [[862, "sklearn.neural_network.MLPRegressor.set_score_request", false]], "set_score_request() (sklearn.pipeline.pipeline method)": [[864, "sklearn.pipeline.Pipeline.set_score_request", false]], "set_score_request() (sklearn.semi_supervised.labelpropagation method)": [[899, "sklearn.semi_supervised.LabelPropagation.set_score_request", false]], "set_score_request() (sklearn.semi_supervised.labelspreading method)": [[900, "sklearn.semi_supervised.LabelSpreading.set_score_request", false]], "set_score_request() (sklearn.svm.linearsvc method)": [[904, "sklearn.svm.LinearSVC.set_score_request", false]], "set_score_request() (sklearn.svm.linearsvr method)": [[905, "sklearn.svm.LinearSVR.set_score_request", false]], "set_score_request() (sklearn.svm.nusvc method)": [[906, "sklearn.svm.NuSVC.set_score_request", false]], "set_score_request() (sklearn.svm.nusvr method)": [[907, "sklearn.svm.NuSVR.set_score_request", false]], "set_score_request() (sklearn.svm.svc method)": [[909, "sklearn.svm.SVC.set_score_request", false]], "set_score_request() (sklearn.svm.svr method)": [[910, "sklearn.svm.SVR.set_score_request", false]], "set_score_request() (sklearn.tree.decisiontreeclassifier method)": [[912, "sklearn.tree.DecisionTreeClassifier.set_score_request", false]], "set_score_request() (sklearn.tree.decisiontreeregressor method)": [[913, "sklearn.tree.DecisionTreeRegressor.set_score_request", false]], "set_score_request() (sklearn.tree.extratreeclassifier method)": [[914, "sklearn.tree.ExtraTreeClassifier.set_score_request", false]], "set_score_request() (sklearn.tree.extratreeregressor method)": [[915, "sklearn.tree.ExtraTreeRegressor.set_score_request", false]], "set_split_request() (sklearn.model_selection.groupkfold method)": [[801, "sklearn.model_selection.GroupKFold.set_split_request", false]], "set_split_request() (sklearn.model_selection.groupshufflesplit method)": [[802, "sklearn.model_selection.GroupShuffleSplit.set_split_request", false]], "set_split_request() (sklearn.model_selection.leaveonegroupout method)": [[807, "sklearn.model_selection.LeaveOneGroupOut.set_split_request", false]], "set_split_request() (sklearn.model_selection.leavepgroupsout method)": [[809, "sklearn.model_selection.LeavePGroupsOut.set_split_request", false]], "set_split_request() (sklearn.model_selection.stratifiedgroupkfold method)": [[818, "sklearn.model_selection.StratifiedGroupKFold.set_split_request", false]], "set_transform_request() (sklearn.cross_decomposition.cca method)": [[479, "sklearn.cross_decomposition.CCA.set_transform_request", false]], "set_transform_request() (sklearn.cross_decomposition.plscanonical method)": [[480, "sklearn.cross_decomposition.PLSCanonical.set_transform_request", false]], "set_transform_request() (sklearn.cross_decomposition.plsregression method)": [[481, "sklearn.cross_decomposition.PLSRegression.set_transform_request", false]], "set_transform_request() (sklearn.decomposition.fastica method)": [[531, "sklearn.decomposition.FastICA.set_transform_request", false]], "set_transform_request() (sklearn.decomposition.latentdirichletallocation method)": [[534, "sklearn.decomposition.LatentDirichletAllocation.set_transform_request", false]], "set_transform_request() (sklearn.feature_extraction.text.tfidftransformer method)": [[589, "sklearn.feature_extraction.text.TfidfTransformer.set_transform_request", false]], "set_transform_request() (sklearn.preprocessing.binarizer method)": [[867, "sklearn.preprocessing.Binarizer.set_transform_request", false]], "set_transform_request() (sklearn.preprocessing.kernelcenterer method)": [[870, "sklearn.preprocessing.KernelCenterer.set_transform_request", false]], "set_transform_request() (sklearn.preprocessing.normalizer method)": [[876, "sklearn.preprocessing.Normalizer.set_transform_request", false]], "set_transform_request() (sklearn.preprocessing.standardscaler method)": [[884, "sklearn.preprocessing.StandardScaler.set_transform_request", false]], "setdefault() (sklearn.utils.bunch method)": [[919, "sklearn.utils.Bunch.setdefault", false]], "sgdclassifier (class in sklearn.linear_model)": [[676, "sklearn.linear_model.SGDClassifier", false]], "sgdoneclasssvm (class in sklearn.linear_model)": [[677, "sklearn.linear_model.SGDOneClassSVM", false]], "sgdregressor (class in sklearn.linear_model)": [[678, "sklearn.linear_model.SGDRegressor", false]], "show_versions() (in module sklearn)": [[903, "sklearn.show_versions", false]], "shrunk_covariance() (in module sklearn.covariance)": [[478, "sklearn.covariance.shrunk_covariance", false]], "shrunkcovariance (class in sklearn.covariance)": [[473, "sklearn.covariance.ShrunkCovariance", false]], "shuffle() (in module sklearn.utils)": [[972, "sklearn.utils.shuffle", false]], "shufflesplit (class in sklearn.model_selection)": [[817, "sklearn.model_selection.ShuffleSplit", false]], "sigmoid_kernel() (in module sklearn.metrics.pairwise)": [[777, "sklearn.metrics.pairwise.sigmoid_kernel", false]], "silhouette_samples() (in module sklearn.metrics)": [[792, "sklearn.metrics.silhouette_samples", false]], "silhouette_score() (in module sklearn.metrics)": [[793, "sklearn.metrics.silhouette_score", false]], "simpleimputer (class in sklearn.impute)": [[630, "sklearn.impute.SimpleImputer", false]], "single_source_shortest_path_length() (in module sklearn.utils.graph)": [[954, "sklearn.utils.graph.single_source_shortest_path_length", false]], "skewedchi2sampler (class in sklearn.kernel_approximation)": [[642, "sklearn.kernel_approximation.SkewedChi2Sampler", false]], "sklearn": [[2, "module-sklearn", false]], "sklearn.base": [[3, "module-sklearn.base", false]], "sklearn.calibration": [[4, "module-sklearn.calibration", false]], "sklearn.cluster": [[5, "module-sklearn.cluster", false]], "sklearn.compose": [[6, "module-sklearn.compose", false]], "sklearn.covariance": [[7, "module-sklearn.covariance", false]], "sklearn.cross_decomposition": [[8, "module-sklearn.cross_decomposition", false]], "sklearn.datasets": [[9, "module-sklearn.datasets", false]], "sklearn.decomposition": [[10, "module-sklearn.decomposition", false]], "sklearn.discriminant_analysis": [[11, "module-sklearn.discriminant_analysis", false]], "sklearn.dummy": [[12, "module-sklearn.dummy", false]], "sklearn.ensemble": [[13, "module-sklearn.ensemble", false]], "sklearn.exceptions": [[14, "module-sklearn.exceptions", false]], "sklearn.experimental": [[15, "module-sklearn.experimental", false]], "sklearn.experimental.enable_halving_search_cv": [[578, "module-sklearn.experimental.enable_halving_search_cv", false]], "sklearn.experimental.enable_iterative_imputer": [[579, "module-sklearn.experimental.enable_iterative_imputer", false]], "sklearn.feature_extraction": [[16, "module-sklearn.feature_extraction", false]], "sklearn.feature_extraction.image": [[16, "module-sklearn.feature_extraction.image", false]], "sklearn.feature_extraction.text": [[16, "module-sklearn.feature_extraction.text", false]], "sklearn.feature_selection": [[17, "module-sklearn.feature_selection", false]], "sklearn.frozen": [[18, "module-sklearn.frozen", false]], "sklearn.gaussian_process": [[19, "module-sklearn.gaussian_process", false]], "sklearn.gaussian_process.kernels": [[19, "module-sklearn.gaussian_process.kernels", false]], "sklearn.impute": [[20, "module-sklearn.impute", false]], "sklearn.inspection": [[21, "module-sklearn.inspection", false]], "sklearn.isotonic": [[22, "module-sklearn.isotonic", false]], "sklearn.kernel_approximation": [[23, "module-sklearn.kernel_approximation", false]], "sklearn.kernel_ridge": [[24, "module-sklearn.kernel_ridge", false]], "sklearn.linear_model": [[25, "module-sklearn.linear_model", false]], "sklearn.manifold": [[26, "module-sklearn.manifold", false]], "sklearn.metrics": [[27, "module-sklearn.metrics", false]], "sklearn.metrics.cluster": [[27, "module-sklearn.metrics.cluster", false]], "sklearn.metrics.pairwise": [[27, "module-sklearn.metrics.pairwise", false]], "sklearn.mixture": [[28, "module-sklearn.mixture", false]], "sklearn.model_selection": [[29, "module-sklearn.model_selection", false]], "sklearn.multiclass": [[30, "module-sklearn.multiclass", false]], "sklearn.multioutput": [[31, "module-sklearn.multioutput", false]], "sklearn.naive_bayes": [[32, "module-sklearn.naive_bayes", false]], "sklearn.neighbors": [[33, "module-sklearn.neighbors", false]], "sklearn.neural_network": [[34, "module-sklearn.neural_network", false]], "sklearn.pipeline": [[35, "module-sklearn.pipeline", false]], "sklearn.preprocessing": [[36, "module-sklearn.preprocessing", false]], "sklearn.random_projection": [[37, "module-sklearn.random_projection", false]], "sklearn.semi_supervised": [[38, "module-sklearn.semi_supervised", false]], "sklearn.svm": [[39, "module-sklearn.svm", false]], "sklearn.tree": [[40, "module-sklearn.tree", false]], "sklearn.utils": [[41, "module-sklearn.utils", false]], "sklearn.utils.arrayfuncs": [[41, "module-sklearn.utils.arrayfuncs", false]], "sklearn.utils.class_weight": [[41, "module-sklearn.utils.class_weight", false]], "sklearn.utils.discovery": [[41, "module-sklearn.utils.discovery", false]], "sklearn.utils.estimator_checks": [[41, "module-sklearn.utils.estimator_checks", false]], "sklearn.utils.extmath": [[41, "module-sklearn.utils.extmath", false]], "sklearn.utils.graph": [[41, "module-sklearn.utils.graph", false]], "sklearn.utils.metadata_routing": [[41, "module-sklearn.utils.metadata_routing", false]], "sklearn.utils.metaestimators": [[41, "module-sklearn.utils.metaestimators", false]], "sklearn.utils.multiclass": [[41, "module-sklearn.utils.multiclass", false]], "sklearn.utils.parallel": [[41, "module-sklearn.utils.parallel", false]], "sklearn.utils.random": [[41, "module-sklearn.utils.random", false]], "sklearn.utils.sparsefuncs": [[41, "module-sklearn.utils.sparsefuncs", false]], "sklearn.utils.sparsefuncs_fast": [[41, "module-sklearn.utils.sparsefuncs_fast", false]], "sklearn.utils.validation": [[41, "module-sklearn.utils.validation", false]], "slep": [[386, "term-SLEP", true]], "sleps": [[386, "term-SLEPs", true]], "smacof() (in module sklearn.manifold)": [[694, "sklearn.manifold.smacof", false]], "sort_graph_by_row_values() (in module sklearn.neighbors)": [[859, "sklearn.neighbors.sort_graph_by_row_values", false]], "sparse graph": [[386, "term-sparse-graph", true]], "sparse matrix": [[386, "term-sparse-matrix", true]], "sparse_encode() (in module sklearn.decomposition)": [[546, "sklearn.decomposition.sparse_encode", false]], "sparsecoder (class in sklearn.decomposition)": [[540, "sklearn.decomposition.SparseCoder", false]], "sparsepca (class in sklearn.decomposition)": [[541, "sklearn.decomposition.SparsePCA", false]], "sparserandomprojection (class in sklearn.random_projection)": [[897, "sklearn.random_projection.SparseRandomProjection", false]], "sparsify() (sklearn.linear_model.logisticregression method)": [[658, "sklearn.linear_model.LogisticRegression.sparsify", false]], "sparsify() (sklearn.linear_model.logisticregressioncv method)": [[659, "sklearn.linear_model.LogisticRegressionCV.sparsify", false]], "sparsify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[666, "sklearn.linear_model.PassiveAggressiveClassifier.sparsify", false]], "sparsify() (sklearn.linear_model.passiveaggressiveregressor method)": [[667, "sklearn.linear_model.PassiveAggressiveRegressor.sparsify", false]], "sparsify() (sklearn.linear_model.perceptron method)": [[668, "sklearn.linear_model.Perceptron.sparsify", false]], "sparsify() (sklearn.linear_model.sgdclassifier method)": [[676, "sklearn.linear_model.SGDClassifier.sparsify", false]], "sparsify() (sklearn.linear_model.sgdoneclasssvm method)": [[677, "sklearn.linear_model.SGDOneClassSVM.sparsify", false]], "sparsify() (sklearn.linear_model.sgdregressor method)": [[678, "sklearn.linear_model.SGDRegressor.sparsify", false]], "sparsify() (sklearn.svm.linearsvc method)": [[904, "sklearn.svm.LinearSVC.sparsify", false]], "spectral_clustering() (in module sklearn.cluster)": [[459, "sklearn.cluster.spectral_clustering", false]], "spectral_embedding() (in module sklearn.manifold)": [[695, "sklearn.manifold.spectral_embedding", false]], "spectralbiclustering (class in sklearn.cluster)": [[448, "sklearn.cluster.SpectralBiclustering", false]], "spectralclustering (class in sklearn.cluster)": [[449, "sklearn.cluster.SpectralClustering", false]], "spectralcoclustering (class in sklearn.cluster)": [[450, "sklearn.cluster.SpectralCoclustering", false]], "spectralembedding (class in sklearn.manifold)": [[691, "sklearn.manifold.SpectralEmbedding", false]], "splinetransformer (class in sklearn.preprocessing)": [[883, "sklearn.preprocessing.SplineTransformer", false]], "split": [[386, "term-split", true]], "split() (sklearn.model_selection.groupkfold method)": [[801, "sklearn.model_selection.GroupKFold.split", false]], "split() (sklearn.model_selection.groupshufflesplit method)": [[802, "sklearn.model_selection.GroupShuffleSplit.split", false]], "split() (sklearn.model_selection.kfold method)": [[805, "sklearn.model_selection.KFold.split", false]], "split() (sklearn.model_selection.leaveonegroupout method)": [[807, "sklearn.model_selection.LeaveOneGroupOut.split", false]], "split() (sklearn.model_selection.leaveoneout method)": [[808, "sklearn.model_selection.LeaveOneOut.split", false]], "split() (sklearn.model_selection.leavepgroupsout method)": [[809, "sklearn.model_selection.LeavePGroupsOut.split", false]], "split() (sklearn.model_selection.leavepout method)": [[810, "sklearn.model_selection.LeavePOut.split", false]], "split() (sklearn.model_selection.predefinedsplit method)": [[813, "sklearn.model_selection.PredefinedSplit.split", false]], "split() (sklearn.model_selection.repeatedkfold method)": [[815, "sklearn.model_selection.RepeatedKFold.split", false]], "split() (sklearn.model_selection.repeatedstratifiedkfold method)": [[816, "sklearn.model_selection.RepeatedStratifiedKFold.split", false]], "split() (sklearn.model_selection.shufflesplit method)": [[817, "sklearn.model_selection.ShuffleSplit.split", false]], "split() (sklearn.model_selection.stratifiedgroupkfold method)": [[818, "sklearn.model_selection.StratifiedGroupKFold.split", false]], "split() (sklearn.model_selection.stratifiedkfold method)": [[819, "sklearn.model_selection.StratifiedKFold.split", false]], "split() (sklearn.model_selection.stratifiedshufflesplit method)": [[820, "sklearn.model_selection.StratifiedShuffleSplit.split", false]], "split() (sklearn.model_selection.timeseriessplit method)": [[821, "sklearn.model_selection.TimeSeriesSplit.split", false]], "stackingclassifier (class in sklearn.ensemble)": [[565, "sklearn.ensemble.StackingClassifier", false]], "stackingregressor (class in sklearn.ensemble)": [[566, "sklearn.ensemble.StackingRegressor", false]], "staged_decision_function() (sklearn.ensemble.adaboostclassifier method)": [[551, "sklearn.ensemble.AdaBoostClassifier.staged_decision_function", false]], "staged_decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[557, "sklearn.ensemble.GradientBoostingClassifier.staged_decision_function", false]], "staged_decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[559, "sklearn.ensemble.HistGradientBoostingClassifier.staged_decision_function", false]], "staged_predict() (sklearn.ensemble.adaboostclassifier method)": [[551, "sklearn.ensemble.AdaBoostClassifier.staged_predict", false]], "staged_predict() (sklearn.ensemble.adaboostregressor method)": [[552, "sklearn.ensemble.AdaBoostRegressor.staged_predict", false]], "staged_predict() (sklearn.ensemble.gradientboostingclassifier method)": [[557, "sklearn.ensemble.GradientBoostingClassifier.staged_predict", false]], "staged_predict() (sklearn.ensemble.gradientboostingregressor method)": [[558, "sklearn.ensemble.GradientBoostingRegressor.staged_predict", false]], "staged_predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[559, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict", false]], "staged_predict() (sklearn.ensemble.histgradientboostingregressor method)": [[560, "sklearn.ensemble.HistGradientBoostingRegressor.staged_predict", false]], "staged_predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[551, "sklearn.ensemble.AdaBoostClassifier.staged_predict_proba", false]], "staged_predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[557, "sklearn.ensemble.GradientBoostingClassifier.staged_predict_proba", false]], "staged_predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[559, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict_proba", false]], "staged_score() (sklearn.ensemble.adaboostclassifier method)": [[551, "sklearn.ensemble.AdaBoostClassifier.staged_score", false]], "staged_score() (sklearn.ensemble.adaboostregressor method)": [[552, "sklearn.ensemble.AdaBoostRegressor.staged_score", false]], "standardscaler (class in sklearn.preprocessing)": [[884, "sklearn.preprocessing.StandardScaler", false]], "stateless": [[386, "term-stateless", true]], "stratifiedgroupkfold (class in sklearn.model_selection)": [[818, "sklearn.model_selection.StratifiedGroupKFold", false]], "stratifiedkfold (class in sklearn.model_selection)": [[819, "sklearn.model_selection.StratifiedKFold", false]], "stratifiedshufflesplit (class in sklearn.model_selection)": [[820, "sklearn.model_selection.StratifiedShuffleSplit", false]], "sum (class in sklearn.gaussian_process.kernels)": [[624, "sklearn.gaussian_process.kernels.Sum", false]], "supervised": [[386, "term-supervised", true]], "supervised learning": [[386, "term-supervised-learning", true]], "svc (class in sklearn.svm)": [[909, "sklearn.svm.SVC", false]], "svr (class in sklearn.svm)": [[910, "sklearn.svm.SVR", false]], "tags (class in sklearn.utils)": [[923, "sklearn.utils.Tags", false]], "target": [[386, "term-target", true]], "targetencoder (class in sklearn.preprocessing)": [[885, "sklearn.preprocessing.TargetEncoder", false]], "targets": [[386, "term-targets", true]], "targettags (class in sklearn.utils)": [[924, "sklearn.utils.TargetTags", false]], "tfidftransformer (class in sklearn.feature_extraction.text)": [[589, "sklearn.feature_extraction.text.TfidfTransformer", false]], "tfidfvectorizer (class in sklearn.feature_extraction.text)": [[590, "sklearn.feature_extraction.text.TfidfVectorizer", false]], "theilsenregressor (class in sklearn.linear_model)": [[679, "sklearn.linear_model.TheilSenRegressor", false]], "theta (sklearn.gaussian_process.kernels.compoundkernel property)": [[612, "sklearn.gaussian_process.kernels.CompoundKernel.theta", false]], "theta (sklearn.gaussian_process.kernels.constantkernel property)": [[613, "sklearn.gaussian_process.kernels.ConstantKernel.theta", false]], "theta (sklearn.gaussian_process.kernels.dotproduct property)": [[614, "sklearn.gaussian_process.kernels.DotProduct.theta", false]], "theta (sklearn.gaussian_process.kernels.exponentiation property)": [[616, "sklearn.gaussian_process.kernels.Exponentiation.theta", false]], "theta (sklearn.gaussian_process.kernels.expsinesquared property)": [[615, "sklearn.gaussian_process.kernels.ExpSineSquared.theta", false]], "theta (sklearn.gaussian_process.kernels.kernel property)": [[618, "sklearn.gaussian_process.kernels.Kernel.theta", false]], "theta (sklearn.gaussian_process.kernels.matern property)": [[619, "sklearn.gaussian_process.kernels.Matern.theta", false]], "theta (sklearn.gaussian_process.kernels.pairwisekernel property)": [[620, "sklearn.gaussian_process.kernels.PairwiseKernel.theta", false]], "theta (sklearn.gaussian_process.kernels.product property)": [[621, "sklearn.gaussian_process.kernels.Product.theta", false]], "theta (sklearn.gaussian_process.kernels.rationalquadratic property)": [[623, "sklearn.gaussian_process.kernels.RationalQuadratic.theta", false]], "theta (sklearn.gaussian_process.kernels.rbf property)": [[622, "sklearn.gaussian_process.kernels.RBF.theta", false]], "theta (sklearn.gaussian_process.kernels.sum property)": [[624, "sklearn.gaussian_process.kernels.Sum.theta", false]], "theta (sklearn.gaussian_process.kernels.whitekernel property)": [[625, "sklearn.gaussian_process.kernels.WhiteKernel.theta", false]], "timeseriessplit (class in sklearn.model_selection)": [[821, "sklearn.model_selection.TimeSeriesSplit", false]], "top_k_accuracy_score() (in module sklearn.metrics)": [[794, "sklearn.metrics.top_k_accuracy_score", false]], "train_test_split() (in module sklearn.model_selection)": [[830, "sklearn.model_selection.train_test_split", false]], "transduction": [[386, "term-transduction", true]], "transductive": [[386, "term-transductive", true]], "transform": [[386, "term-transform", true]], "transform() (sklearn.cluster.birch method)": [[439, "sklearn.cluster.Birch.transform", false]], "transform() (sklearn.cluster.bisectingkmeans method)": [[440, "sklearn.cluster.BisectingKMeans.transform", false]], "transform() (sklearn.cluster.featureagglomeration method)": [[442, "sklearn.cluster.FeatureAgglomeration.transform", false]], "transform() (sklearn.cluster.kmeans method)": [[444, "sklearn.cluster.KMeans.transform", false]], "transform() (sklearn.cluster.minibatchkmeans method)": [[446, "sklearn.cluster.MiniBatchKMeans.transform", false]], "transform() (sklearn.compose.columntransformer method)": [[461, "sklearn.compose.ColumnTransformer.transform", false]], "transform() (sklearn.cross_decomposition.cca method)": [[479, "sklearn.cross_decomposition.CCA.transform", false]], "transform() (sklearn.cross_decomposition.plscanonical method)": [[480, "sklearn.cross_decomposition.PLSCanonical.transform", false]], "transform() (sklearn.cross_decomposition.plsregression method)": [[481, "sklearn.cross_decomposition.PLSRegression.transform", false]], "transform() (sklearn.cross_decomposition.plssvd method)": [[482, "sklearn.cross_decomposition.PLSSVD.transform", false]], "transform() (sklearn.decomposition.dictionarylearning method)": [[529, "sklearn.decomposition.DictionaryLearning.transform", false]], "transform() (sklearn.decomposition.factoranalysis method)": [[530, "sklearn.decomposition.FactorAnalysis.transform", false]], "transform() (sklearn.decomposition.fastica method)": [[531, "sklearn.decomposition.FastICA.transform", false]], "transform() (sklearn.decomposition.incrementalpca method)": [[532, "sklearn.decomposition.IncrementalPCA.transform", false]], "transform() (sklearn.decomposition.kernelpca method)": [[533, "sklearn.decomposition.KernelPCA.transform", false]], "transform() (sklearn.decomposition.latentdirichletallocation method)": [[534, "sklearn.decomposition.LatentDirichletAllocation.transform", false]], "transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[535, "sklearn.decomposition.MiniBatchDictionaryLearning.transform", false]], "transform() (sklearn.decomposition.minibatchnmf method)": [[536, "sklearn.decomposition.MiniBatchNMF.transform", false]], "transform() (sklearn.decomposition.minibatchsparsepca method)": [[537, "sklearn.decomposition.MiniBatchSparsePCA.transform", false]], "transform() (sklearn.decomposition.nmf method)": [[538, "sklearn.decomposition.NMF.transform", false]], "transform() (sklearn.decomposition.pca method)": [[539, "sklearn.decomposition.PCA.transform", false]], "transform() (sklearn.decomposition.sparsecoder method)": [[540, "sklearn.decomposition.SparseCoder.transform", false]], "transform() (sklearn.decomposition.sparsepca method)": [[541, "sklearn.decomposition.SparsePCA.transform", false]], "transform() (sklearn.decomposition.truncatedsvd method)": [[542, "sklearn.decomposition.TruncatedSVD.transform", false]], "transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[547, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.transform", false]], "transform() (sklearn.ensemble.randomtreesembedding method)": [[564, "sklearn.ensemble.RandomTreesEmbedding.transform", false]], "transform() (sklearn.ensemble.stackingclassifier method)": [[565, "sklearn.ensemble.StackingClassifier.transform", false]], "transform() (sklearn.ensemble.stackingregressor method)": [[566, "sklearn.ensemble.StackingRegressor.transform", false]], "transform() (sklearn.ensemble.votingclassifier method)": [[567, "sklearn.ensemble.VotingClassifier.transform", false]], "transform() (sklearn.ensemble.votingregressor method)": [[568, "sklearn.ensemble.VotingRegressor.transform", false]], "transform() (sklearn.feature_extraction.dictvectorizer method)": [[580, "sklearn.feature_extraction.DictVectorizer.transform", false]], "transform() (sklearn.feature_extraction.featurehasher method)": [[581, "sklearn.feature_extraction.FeatureHasher.transform", false]], "transform() (sklearn.feature_extraction.image.patchextractor method)": [[582, "sklearn.feature_extraction.image.PatchExtractor.transform", false]], "transform() (sklearn.feature_extraction.text.countvectorizer method)": [[587, "sklearn.feature_extraction.text.CountVectorizer.transform", false]], "transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[588, "sklearn.feature_extraction.text.HashingVectorizer.transform", false]], "transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[589, "sklearn.feature_extraction.text.TfidfTransformer.transform", false]], "transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[590, "sklearn.feature_extraction.text.TfidfVectorizer.transform", false]], "transform() (sklearn.feature_selection.genericunivariateselect method)": [[591, "sklearn.feature_selection.GenericUnivariateSelect.transform", false]], "transform() (sklearn.feature_selection.rfe method)": [[592, "sklearn.feature_selection.RFE.transform", false]], "transform() (sklearn.feature_selection.rfecv method)": [[593, "sklearn.feature_selection.RFECV.transform", false]], "transform() (sklearn.feature_selection.selectfdr method)": [[594, "sklearn.feature_selection.SelectFdr.transform", false]], "transform() (sklearn.feature_selection.selectfpr method)": [[595, "sklearn.feature_selection.SelectFpr.transform", false]], "transform() (sklearn.feature_selection.selectfrommodel method)": [[596, "sklearn.feature_selection.SelectFromModel.transform", false]], "transform() (sklearn.feature_selection.selectfwe method)": [[597, "sklearn.feature_selection.SelectFwe.transform", false]], "transform() (sklearn.feature_selection.selectkbest method)": [[598, "sklearn.feature_selection.SelectKBest.transform", false]], "transform() (sklearn.feature_selection.selectormixin method)": [[600, "sklearn.feature_selection.SelectorMixin.transform", false]], "transform() (sklearn.feature_selection.selectpercentile method)": [[599, "sklearn.feature_selection.SelectPercentile.transform", false]], "transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[601, "sklearn.feature_selection.SequentialFeatureSelector.transform", false]], "transform() (sklearn.feature_selection.variancethreshold method)": [[602, "sklearn.feature_selection.VarianceThreshold.transform", false]], "transform() (sklearn.impute.iterativeimputer method)": [[627, "sklearn.impute.IterativeImputer.transform", false]], "transform() (sklearn.impute.knnimputer method)": [[628, "sklearn.impute.KNNImputer.transform", false]], "transform() (sklearn.impute.missingindicator method)": [[629, "sklearn.impute.MissingIndicator.transform", false]], "transform() (sklearn.impute.simpleimputer method)": [[630, "sklearn.impute.SimpleImputer.transform", false]], "transform() (sklearn.isotonic.isotonicregression method)": [[635, "sklearn.isotonic.IsotonicRegression.transform", false]], "transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[638, "sklearn.kernel_approximation.AdditiveChi2Sampler.transform", false]], "transform() (sklearn.kernel_approximation.nystroem method)": [[639, "sklearn.kernel_approximation.Nystroem.transform", false]], "transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[640, "sklearn.kernel_approximation.PolynomialCountSketch.transform", false]], "transform() (sklearn.kernel_approximation.rbfsampler method)": [[641, "sklearn.kernel_approximation.RBFSampler.transform", false]], "transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[642, "sklearn.kernel_approximation.SkewedChi2Sampler.transform", false]], "transform() (sklearn.manifold.isomap method)": [[688, "sklearn.manifold.Isomap.transform", false]], "transform() (sklearn.manifold.locallylinearembedding method)": [[689, "sklearn.manifold.LocallyLinearEmbedding.transform", false]], "transform() (sklearn.model_selection.gridsearchcv method)": [[800, "sklearn.model_selection.GridSearchCV.transform", false]], "transform() (sklearn.model_selection.halvinggridsearchcv method)": [[803, "sklearn.model_selection.HalvingGridSearchCV.transform", false]], "transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[804, "sklearn.model_selection.HalvingRandomSearchCV.transform", false]], "transform() (sklearn.model_selection.randomizedsearchcv method)": [[814, "sklearn.model_selection.RandomizedSearchCV.transform", false]], "transform() (sklearn.neighbors.kneighborstransformer method)": [[848, "sklearn.neighbors.KNeighborsTransformer.transform", false]], "transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[853, "sklearn.neighbors.NeighborhoodComponentsAnalysis.transform", false]], "transform() (sklearn.neighbors.radiusneighborstransformer method)": [[856, "sklearn.neighbors.RadiusNeighborsTransformer.transform", false]], "transform() (sklearn.neural_network.bernoullirbm method)": [[860, "sklearn.neural_network.BernoulliRBM.transform", false]], "transform() (sklearn.pipeline.featureunion method)": [[863, "sklearn.pipeline.FeatureUnion.transform", false]], "transform() (sklearn.pipeline.pipeline method)": [[864, "sklearn.pipeline.Pipeline.transform", false]], "transform() (sklearn.preprocessing.binarizer method)": [[867, "sklearn.preprocessing.Binarizer.transform", false]], "transform() (sklearn.preprocessing.functiontransformer method)": [[868, "sklearn.preprocessing.FunctionTransformer.transform", false]], "transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[869, "sklearn.preprocessing.KBinsDiscretizer.transform", false]], "transform() (sklearn.preprocessing.kernelcenterer method)": [[870, "sklearn.preprocessing.KernelCenterer.transform", false]], "transform() (sklearn.preprocessing.labelbinarizer method)": [[871, "sklearn.preprocessing.LabelBinarizer.transform", false]], "transform() (sklearn.preprocessing.labelencoder method)": [[872, "sklearn.preprocessing.LabelEncoder.transform", false]], "transform() (sklearn.preprocessing.maxabsscaler method)": [[873, "sklearn.preprocessing.MaxAbsScaler.transform", false]], "transform() (sklearn.preprocessing.minmaxscaler method)": [[874, "sklearn.preprocessing.MinMaxScaler.transform", false]], "transform() (sklearn.preprocessing.multilabelbinarizer method)": [[875, "sklearn.preprocessing.MultiLabelBinarizer.transform", false]], "transform() (sklearn.preprocessing.normalizer method)": [[876, "sklearn.preprocessing.Normalizer.transform", false]], "transform() (sklearn.preprocessing.onehotencoder method)": [[877, "sklearn.preprocessing.OneHotEncoder.transform", false]], "transform() (sklearn.preprocessing.ordinalencoder method)": [[878, "sklearn.preprocessing.OrdinalEncoder.transform", false]], "transform() (sklearn.preprocessing.polynomialfeatures method)": [[879, "sklearn.preprocessing.PolynomialFeatures.transform", false]], "transform() (sklearn.preprocessing.powertransformer method)": [[880, "sklearn.preprocessing.PowerTransformer.transform", false]], "transform() (sklearn.preprocessing.quantiletransformer method)": [[881, "sklearn.preprocessing.QuantileTransformer.transform", false]], "transform() (sklearn.preprocessing.robustscaler method)": [[882, "sklearn.preprocessing.RobustScaler.transform", false]], "transform() (sklearn.preprocessing.splinetransformer method)": [[883, "sklearn.preprocessing.SplineTransformer.transform", false]], "transform() (sklearn.preprocessing.standardscaler method)": [[884, "sklearn.preprocessing.StandardScaler.transform", false]], "transform() (sklearn.preprocessing.targetencoder method)": [[885, "sklearn.preprocessing.TargetEncoder.transform", false]], "transform() (sklearn.random_projection.gaussianrandomprojection method)": [[896, "sklearn.random_projection.GaussianRandomProjection.transform", false]], "transform() (sklearn.random_projection.sparserandomprojection method)": [[897, "sklearn.random_projection.SparseRandomProjection.transform", false]], "transformedtargetregressor (class in sklearn.compose)": [[462, "sklearn.compose.TransformedTargetRegressor", false]], "transformer": [[386, "term-transformer", true]], "transformermixin (class in sklearn.base)": [[428, "sklearn.base.TransformerMixin", false]], "transformers": [[386, "term-transformers", true]], "transformertags (class in sklearn.utils)": [[925, "sklearn.utils.TransformerTags", false]], "truncatedsvd (class in sklearn.decomposition)": [[542, "sklearn.decomposition.TruncatedSVD", false]], "trustworthiness() (in module sklearn.manifold)": [[696, "sklearn.manifold.trustworthiness", false]], "tsne (class in sklearn.manifold)": [[692, "sklearn.manifold.TSNE", false]], "tunedthresholdclassifiercv (class in sklearn.model_selection)": [[822, "sklearn.model_selection.TunedThresholdClassifierCV", false]], "tweedieregressor (class in sklearn.linear_model)": [[680, "sklearn.linear_model.TweedieRegressor", false]], "two_point_correlation() (sklearn.neighbors.balltree method)": [[844, "sklearn.neighbors.BallTree.two_point_correlation", false]], "two_point_correlation() (sklearn.neighbors.kdtree method)": [[845, "sklearn.neighbors.KDTree.two_point_correlation", false]], "type_of_target() (in module sklearn.utils.multiclass)": [[963, "sklearn.utils.multiclass.type_of_target", false]], "undefinedmetricwarning": [[577, "sklearn.exceptions.UndefinedMetricWarning", false]], "unique_labels() (in module sklearn.utils.multiclass)": [[964, "sklearn.utils.multiclass.unique_labels", false]], "unlabeled": [[386, "term-unlabeled", true]], "unlabeled data": [[386, "term-unlabeled-data", true]], "unsupervised": [[386, "term-unsupervised", true]], "unsupervised learning": [[386, "term-unsupervised-learning", true]], "update() (sklearn.utils.bunch method)": [[919, "sklearn.utils.Bunch.update", false]], "v_measure_score() (in module sklearn.metrics)": [[795, "sklearn.metrics.v_measure_score", false]], "validate_data() (in module sklearn.utils.validation)": [[987, "sklearn.utils.validation.validate_data", false]], "validate_metadata() (sklearn.utils.metadata_routing.metadatarouter method)": [[957, "sklearn.utils.metadata_routing.MetadataRouter.validate_metadata", false]], "validation_curve() (in module sklearn.model_selection)": [[831, "sklearn.model_selection.validation_curve", false]], "validationcurvedisplay (class in sklearn.model_selection)": [[823, "sklearn.model_selection.ValidationCurveDisplay", false]], "value_type (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[617, "sklearn.gaussian_process.kernels.Hyperparameter.value_type", false]], "values() (sklearn.utils.bunch method)": [[919, "sklearn.utils.Bunch.values", false]], "variancethreshold (class in sklearn.feature_selection)": [[602, "sklearn.feature_selection.VarianceThreshold", false]], "vectorizer": [[386, "term-vectorizer", true]], "vectorizers": [[386, "term-vectorizers", true]], "verbose": [[386, "term-verbose", true]], "votingclassifier (class in sklearn.ensemble)": [[567, "sklearn.ensemble.VotingClassifier", false]], "votingregressor (class in sklearn.ensemble)": [[568, "sklearn.ensemble.VotingRegressor", false]], "ward_tree() (in module sklearn.cluster)": [[460, "sklearn.cluster.ward_tree", false]], "warm_start": [[386, "term-warm_start", true]], "weighted_mode() (in module sklearn.utils.extmath)": [[950, "sklearn.utils.extmath.weighted_mode", false]], "whitekernel (class in sklearn.gaussian_process.kernels)": [[625, "sklearn.gaussian_process.kernels.WhiteKernel", false]], "x": [[386, "term-X", true]], "xt": [[386, "term-Xt", true]], "y": [[386, "term-Y", true], [386, "term-y", true]], "zero_one_loss() (in module sklearn.metrics)": [[796, "sklearn.metrics.zero_one_loss", false]]}, "objects": {"": [[2, 0, 0, "-", "sklearn"]], "sklearn": [[3, 0, 0, "-", "base"], [4, 0, 0, "-", "calibration"], [5, 0, 0, "-", "cluster"], [6, 0, 0, "-", "compose"], [465, 3, 1, "", "config_context"], [7, 0, 0, "-", "covariance"], [8, 0, 0, "-", "cross_decomposition"], [9, 0, 0, "-", "datasets"], [10, 0, 0, "-", "decomposition"], [11, 0, 0, "-", "discriminant_analysis"], [12, 0, 0, "-", "dummy"], [13, 0, 0, "-", "ensemble"], [14, 0, 0, "-", "exceptions"], [15, 0, 0, "-", "experimental"], [16, 0, 0, "-", "feature_extraction"], [17, 0, 0, "-", "feature_selection"], [18, 0, 0, "-", "frozen"], [19, 0, 0, "-", "gaussian_process"], [626, 3, 1, "", "get_config"], [20, 0, 0, "-", "impute"], [21, 0, 0, "-", "inspection"], [22, 0, 0, "-", "isotonic"], [23, 0, 0, "-", "kernel_approximation"], [24, 0, 0, "-", "kernel_ridge"], [25, 0, 0, "-", "linear_model"], [26, 0, 0, "-", "manifold"], [27, 0, 0, "-", "metrics"], [28, 0, 0, "-", "mixture"], [29, 0, 0, "-", "model_selection"], [30, 0, 0, "-", "multiclass"], [31, 0, 0, "-", "multioutput"], [32, 0, 0, "-", "naive_bayes"], [33, 0, 0, "-", "neighbors"], [34, 0, 0, "-", "neural_network"], [35, 0, 0, "-", "pipeline"], [36, 0, 0, "-", "preprocessing"], [37, 0, 0, "-", "random_projection"], [38, 0, 0, "-", "semi_supervised"], [902, 3, 1, "", "set_config"], [903, 3, 1, "", "show_versions"], [39, 0, 0, "-", "svm"], [40, 0, 0, "-", "tree"], [41, 0, 0, "-", "utils"]], "sklearn.base": [[418, 1, 1, "", "BaseEstimator"], [419, 1, 1, "", "BiclusterMixin"], [420, 1, 1, "", "ClassNamePrefixFeaturesOutMixin"], [421, 1, 1, "", "ClassifierMixin"], [422, 1, 1, "", "ClusterMixin"], [423, 1, 1, "", "DensityMixin"], [424, 1, 1, "", "MetaEstimatorMixin"], [425, 1, 1, "", "OneToOneFeatureMixin"], [426, 1, 1, "", "OutlierMixin"], [427, 1, 1, "", "RegressorMixin"], [428, 1, 1, "", "TransformerMixin"], [429, 3, 1, "", "clone"], [430, 3, 1, "", "is_classifier"], [431, 3, 1, "", "is_clusterer"], [432, 3, 1, "", "is_outlier_detector"], [433, 3, 1, "", "is_regressor"]], "sklearn.base.BaseEstimator": [[418, 2, 1, "", "get_metadata_routing"], [418, 2, 1, "", "get_params"], [418, 2, 1, "", "set_params"]], "sklearn.base.BiclusterMixin": [[419, 2, 1, "", "get_indices"], [419, 2, 1, "", "get_shape"], [419, 2, 1, "", "get_submatrix"]], "sklearn.base.ClassNamePrefixFeaturesOutMixin": [[420, 2, 1, "", "get_feature_names_out"]], "sklearn.base.ClassifierMixin": [[421, 2, 1, "", "score"]], "sklearn.base.ClusterMixin": [[422, 2, 1, "", "fit_predict"]], "sklearn.base.DensityMixin": [[423, 2, 1, "", "score"]], "sklearn.base.OneToOneFeatureMixin": [[425, 2, 1, "", "get_feature_names_out"]], "sklearn.base.OutlierMixin": [[426, 2, 1, "", "fit_predict"]], "sklearn.base.RegressorMixin": [[427, 2, 1, "", "score"]], "sklearn.base.TransformerMixin": [[428, 2, 1, "", "fit_transform"], [428, 2, 1, "", "set_output"]], "sklearn.calibration": [[434, 1, 1, "", "CalibratedClassifierCV"], [435, 1, 1, "", "CalibrationDisplay"], [436, 3, 1, "", "calibration_curve"]], "sklearn.calibration.CalibratedClassifierCV": [[434, 2, 1, "", "fit"], [434, 2, 1, "", "get_metadata_routing"], [434, 2, 1, "", "get_params"], [434, 2, 1, "", "predict"], [434, 2, 1, "", "predict_proba"], [434, 2, 1, "", "score"], [434, 2, 1, "", "set_fit_request"], [434, 2, 1, "", "set_params"], [434, 2, 1, "", "set_score_request"]], "sklearn.calibration.CalibrationDisplay": [[435, 2, 1, "", "from_estimator"], [435, 2, 1, "", "from_predictions"], [435, 2, 1, "", "plot"]], "sklearn.cluster": [[437, 1, 1, "", "AffinityPropagation"], [438, 1, 1, "", "AgglomerativeClustering"], [439, 1, 1, "", "Birch"], [440, 1, 1, "", "BisectingKMeans"], [441, 1, 1, "", "DBSCAN"], [442, 1, 1, "", "FeatureAgglomeration"], [443, 1, 1, "", "HDBSCAN"], [444, 1, 1, "", "KMeans"], [445, 1, 1, "", "MeanShift"], [446, 1, 1, "", "MiniBatchKMeans"], [447, 1, 1, "", "OPTICS"], [448, 1, 1, "", "SpectralBiclustering"], [449, 1, 1, "", "SpectralClustering"], [450, 1, 1, "", "SpectralCoclustering"], [451, 3, 1, "", "affinity_propagation"], [452, 3, 1, "", "cluster_optics_dbscan"], [453, 3, 1, "", "cluster_optics_xi"], [454, 3, 1, "", "compute_optics_graph"], [415, 3, 1, "", "dbscan"], [455, 3, 1, "", "estimate_bandwidth"], [456, 3, 1, "", "k_means"], [457, 3, 1, "", "kmeans_plusplus"], [458, 3, 1, "", "mean_shift"], [459, 3, 1, "", "spectral_clustering"], [460, 3, 1, "", "ward_tree"]], "sklearn.cluster.AffinityPropagation": [[437, 2, 1, "", "fit"], [437, 2, 1, "", "fit_predict"], [437, 2, 1, "", "get_metadata_routing"], [437, 2, 1, "", "get_params"], [437, 2, 1, "", "predict"], [437, 2, 1, "", "set_params"]], "sklearn.cluster.AgglomerativeClustering": [[438, 2, 1, "", "fit"], [438, 2, 1, "", "fit_predict"], [438, 2, 1, "", "get_metadata_routing"], [438, 2, 1, "", "get_params"], [438, 2, 1, "", "set_params"]], "sklearn.cluster.Birch": [[439, 2, 1, "", "fit"], [439, 2, 1, "", "fit_predict"], [439, 2, 1, "", "fit_transform"], [439, 2, 1, "", "get_feature_names_out"], [439, 2, 1, "", "get_metadata_routing"], [439, 2, 1, "", "get_params"], [439, 2, 1, "", "partial_fit"], [439, 2, 1, "", "predict"], [439, 2, 1, "", "set_output"], [439, 2, 1, "", "set_params"], [439, 2, 1, "", "transform"]], "sklearn.cluster.BisectingKMeans": [[440, 2, 1, "", "fit"], [440, 2, 1, "", "fit_predict"], [440, 2, 1, "", "fit_transform"], [440, 2, 1, "", "get_feature_names_out"], [440, 2, 1, "", "get_metadata_routing"], [440, 2, 1, "", "get_params"], [440, 2, 1, "", "predict"], [440, 2, 1, "", "score"], [440, 2, 1, "", "set_fit_request"], [440, 2, 1, "", "set_output"], [440, 2, 1, "", "set_params"], [440, 2, 1, "", "set_score_request"], [440, 2, 1, "", "transform"]], "sklearn.cluster.DBSCAN": [[441, 2, 1, "", "fit"], [441, 2, 1, "", "fit_predict"], [441, 2, 1, "", "get_metadata_routing"], [441, 2, 1, "", "get_params"], [441, 2, 1, "", "set_fit_request"], [441, 2, 1, "", "set_params"]], "sklearn.cluster.FeatureAgglomeration": [[442, 2, 1, "", "fit"], [442, 4, 1, "", "fit_predict"], [442, 2, 1, "", "fit_transform"], [442, 2, 1, "", "get_feature_names_out"], [442, 2, 1, "", "get_metadata_routing"], [442, 2, 1, "", "get_params"], [442, 2, 1, "", "inverse_transform"], [442, 2, 1, "", "set_output"], [442, 2, 1, "", "set_params"], [442, 2, 1, "", "transform"]], "sklearn.cluster.HDBSCAN": [[443, 2, 1, "", "dbscan_clustering"], [443, 2, 1, "", "fit"], [443, 2, 1, "", "fit_predict"], [443, 2, 1, "", "get_metadata_routing"], [443, 2, 1, "", "get_params"], [443, 2, 1, "", "set_params"]], "sklearn.cluster.KMeans": [[444, 2, 1, "", "fit"], [444, 2, 1, "", "fit_predict"], [444, 2, 1, "", "fit_transform"], [444, 2, 1, "", "get_feature_names_out"], [444, 2, 1, "", "get_metadata_routing"], [444, 2, 1, "", "get_params"], [444, 2, 1, "", "predict"], [444, 2, 1, "", "score"], [444, 2, 1, "", "set_fit_request"], [444, 2, 1, "", "set_output"], [444, 2, 1, "", "set_params"], [444, 2, 1, "", "set_score_request"], [444, 2, 1, "", "transform"]], "sklearn.cluster.MeanShift": [[445, 2, 1, "", "fit"], [445, 2, 1, "", "fit_predict"], [445, 2, 1, "", "get_metadata_routing"], [445, 2, 1, "", "get_params"], [445, 2, 1, "", "predict"], [445, 2, 1, "", "set_params"]], "sklearn.cluster.MiniBatchKMeans": [[446, 2, 1, "", "fit"], [446, 2, 1, "", "fit_predict"], [446, 2, 1, "", "fit_transform"], [446, 2, 1, "", "get_feature_names_out"], [446, 2, 1, "", "get_metadata_routing"], [446, 2, 1, "", "get_params"], [446, 2, 1, "", "partial_fit"], [446, 2, 1, "", "predict"], [446, 2, 1, "", "score"], [446, 2, 1, "", "set_fit_request"], [446, 2, 1, "", "set_output"], [446, 2, 1, "", "set_params"], [446, 2, 1, "", "set_partial_fit_request"], [446, 2, 1, "", "set_score_request"], [446, 2, 1, "", "transform"]], "sklearn.cluster.OPTICS": [[447, 2, 1, "", "fit"], [447, 2, 1, "", "fit_predict"], [447, 2, 1, "", "get_metadata_routing"], [447, 2, 1, "", "get_params"], [447, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralBiclustering": [[448, 2, 1, "", "fit"], [448, 2, 1, "", "get_indices"], [448, 2, 1, "", "get_metadata_routing"], [448, 2, 1, "", "get_params"], [448, 2, 1, "", "get_shape"], [448, 2, 1, "", "get_submatrix"], [448, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralClustering": [[449, 2, 1, "", "fit"], [449, 2, 1, "", "fit_predict"], [449, 2, 1, "", "get_metadata_routing"], [449, 2, 1, "", "get_params"], [449, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralCoclustering": [[450, 2, 1, "", "fit"], [450, 2, 1, "", "get_indices"], [450, 2, 1, "", "get_metadata_routing"], [450, 2, 1, "", "get_params"], [450, 2, 1, "", "get_shape"], [450, 2, 1, "", "get_submatrix"], [450, 2, 1, "", "set_params"]], "sklearn.compose": [[461, 1, 1, "", "ColumnTransformer"], [462, 1, 1, "", "TransformedTargetRegressor"], [463, 1, 1, "", "make_column_selector"], [464, 3, 1, "", "make_column_transformer"]], "sklearn.compose.ColumnTransformer": [[461, 2, 1, "", "fit"], [461, 2, 1, "", "fit_transform"], [461, 2, 1, "", "get_feature_names_out"], [461, 2, 1, "", "get_metadata_routing"], [461, 2, 1, "", "get_params"], [461, 2, 1, "", "set_output"], [461, 2, 1, "", "set_params"], [461, 2, 1, "", "transform"]], "sklearn.compose.TransformedTargetRegressor": [[462, 2, 1, "", "fit"], [462, 2, 1, "", "get_metadata_routing"], [462, 2, 1, "", "get_params"], [462, 2, 1, "", "predict"], [462, 2, 1, "", "score"], [462, 2, 1, "", "set_params"], [462, 2, 1, "", "set_score_request"]], "sklearn.compose.make_column_selector": [[463, 2, 1, "", "__call__"]], "sklearn.covariance": [[466, 1, 1, "", "EllipticEnvelope"], [467, 1, 1, "", "EmpiricalCovariance"], [468, 1, 1, "", "GraphicalLasso"], [469, 1, 1, "", "GraphicalLassoCV"], [470, 1, 1, "", "LedoitWolf"], [471, 1, 1, "", "MinCovDet"], [472, 1, 1, "", "OAS"], [473, 1, 1, "", "ShrunkCovariance"], [474, 3, 1, "", "empirical_covariance"], [475, 3, 1, "", "graphical_lasso"], [476, 3, 1, "", "ledoit_wolf"], [477, 3, 1, "", "ledoit_wolf_shrinkage"], [417, 3, 1, "", "oas"], [478, 3, 1, "", "shrunk_covariance"]], "sklearn.covariance.EllipticEnvelope": [[466, 2, 1, "", "correct_covariance"], [466, 2, 1, "", "decision_function"], [466, 2, 1, "", "error_norm"], [466, 2, 1, "", "fit"], [466, 2, 1, "", "fit_predict"], [466, 2, 1, "", "get_metadata_routing"], [466, 2, 1, "", "get_params"], [466, 2, 1, "", "get_precision"], [466, 2, 1, "", "mahalanobis"], [466, 2, 1, "", "predict"], [466, 2, 1, "", "reweight_covariance"], [466, 2, 1, "", "score"], [466, 2, 1, "", "score_samples"], [466, 2, 1, "", "set_params"]], "sklearn.covariance.EmpiricalCovariance": [[467, 2, 1, "", "error_norm"], [467, 2, 1, "", "fit"], [467, 2, 1, "", "get_metadata_routing"], [467, 2, 1, "", "get_params"], [467, 2, 1, "", "get_precision"], [467, 2, 1, "", "mahalanobis"], [467, 2, 1, "", "score"], [467, 2, 1, "", "set_params"]], "sklearn.covariance.GraphicalLasso": [[468, 2, 1, "", "error_norm"], [468, 2, 1, "", "fit"], [468, 2, 1, "", "get_metadata_routing"], [468, 2, 1, "", "get_params"], [468, 2, 1, "", "get_precision"], [468, 2, 1, "", "mahalanobis"], [468, 2, 1, "", "score"], [468, 2, 1, "", "set_params"]], "sklearn.covariance.GraphicalLassoCV": [[469, 2, 1, "", "error_norm"], [469, 2, 1, "", "fit"], [469, 2, 1, "", "get_metadata_routing"], [469, 2, 1, "", "get_params"], [469, 2, 1, "", "get_precision"], [469, 2, 1, "", "mahalanobis"], [469, 2, 1, "", "score"], [469, 2, 1, "", "set_params"]], "sklearn.covariance.LedoitWolf": [[470, 2, 1, "", "error_norm"], [470, 2, 1, "", "fit"], [470, 2, 1, "", "get_metadata_routing"], [470, 2, 1, "", "get_params"], [470, 2, 1, "", "get_precision"], [470, 2, 1, "", "mahalanobis"], [470, 2, 1, "", "score"], [470, 2, 1, "", "set_params"]], "sklearn.covariance.MinCovDet": [[471, 2, 1, "", "correct_covariance"], [471, 2, 1, "", "error_norm"], [471, 2, 1, "", "fit"], [471, 2, 1, "", "get_metadata_routing"], [471, 2, 1, "", "get_params"], [471, 2, 1, "", "get_precision"], [471, 2, 1, "", "mahalanobis"], [471, 2, 1, "", "reweight_covariance"], [471, 2, 1, "", "score"], [471, 2, 1, "", "set_params"]], "sklearn.covariance.OAS": [[472, 2, 1, "", "error_norm"], [472, 2, 1, "", "fit"], [472, 2, 1, "", "get_metadata_routing"], [472, 2, 1, "", "get_params"], [472, 2, 1, "", "get_precision"], [472, 2, 1, "", "mahalanobis"], [472, 2, 1, "", "score"], [472, 2, 1, "", "set_params"]], "sklearn.covariance.ShrunkCovariance": [[473, 2, 1, "", "error_norm"], [473, 2, 1, "", "fit"], [473, 2, 1, "", "get_metadata_routing"], [473, 2, 1, "", "get_params"], [473, 2, 1, "", "get_precision"], [473, 2, 1, "", "mahalanobis"], [473, 2, 1, "", "score"], [473, 2, 1, "", "set_params"]], "sklearn.cross_decomposition": [[479, 1, 1, "", "CCA"], [480, 1, 1, "", "PLSCanonical"], [481, 1, 1, "", "PLSRegression"], [482, 1, 1, "", "PLSSVD"]], "sklearn.cross_decomposition.CCA": [[479, 2, 1, "", "fit"], [479, 2, 1, "", "fit_transform"], [479, 2, 1, "", "get_feature_names_out"], [479, 2, 1, "", "get_metadata_routing"], [479, 2, 1, "", "get_params"], [479, 2, 1, "", "inverse_transform"], [479, 2, 1, "", "predict"], [479, 2, 1, "", "score"], [479, 2, 1, "", "set_output"], [479, 2, 1, "", "set_params"], [479, 2, 1, "", "set_predict_request"], [479, 2, 1, "", "set_score_request"], [479, 2, 1, "", "set_transform_request"], [479, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSCanonical": [[480, 2, 1, "", "fit"], [480, 2, 1, "", "fit_transform"], [480, 2, 1, "", "get_feature_names_out"], [480, 2, 1, "", "get_metadata_routing"], [480, 2, 1, "", "get_params"], [480, 2, 1, "", "inverse_transform"], [480, 2, 1, "", "predict"], [480, 2, 1, "", "score"], [480, 2, 1, "", "set_output"], [480, 2, 1, "", "set_params"], [480, 2, 1, "", "set_predict_request"], [480, 2, 1, "", "set_score_request"], [480, 2, 1, "", "set_transform_request"], [480, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSRegression": [[481, 2, 1, "", "fit"], [481, 2, 1, "", "fit_transform"], [481, 2, 1, "", "get_feature_names_out"], [481, 2, 1, "", "get_metadata_routing"], [481, 2, 1, "", "get_params"], [481, 2, 1, "", "inverse_transform"], [481, 2, 1, "", "predict"], [481, 2, 1, "", "score"], [481, 2, 1, "", "set_output"], [481, 2, 1, "", "set_params"], [481, 2, 1, "", "set_predict_request"], [481, 2, 1, "", "set_score_request"], [481, 2, 1, "", "set_transform_request"], [481, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSSVD": [[482, 2, 1, "", "fit"], [482, 2, 1, "", "fit_transform"], [482, 2, 1, "", "get_feature_names_out"], [482, 2, 1, "", "get_metadata_routing"], [482, 2, 1, "", "get_params"], [482, 2, 1, "", "set_output"], [482, 2, 1, "", "set_params"], [482, 2, 1, "", "transform"]], "sklearn.datasets": [[483, 3, 1, "", "clear_data_home"], [484, 3, 1, "", "dump_svmlight_file"], [485, 3, 1, "", "fetch_20newsgroups"], [486, 3, 1, "", "fetch_20newsgroups_vectorized"], [487, 3, 1, "", "fetch_california_housing"], [488, 3, 1, "", "fetch_covtype"], [489, 3, 1, "", "fetch_file"], [490, 3, 1, "", "fetch_kddcup99"], [491, 3, 1, "", "fetch_lfw_pairs"], [492, 3, 1, "", "fetch_lfw_people"], [493, 3, 1, "", "fetch_olivetti_faces"], [494, 3, 1, "", "fetch_openml"], [495, 3, 1, "", "fetch_rcv1"], [496, 3, 1, "", "fetch_species_distributions"], [497, 3, 1, "", "get_data_home"], [498, 3, 1, "", "load_breast_cancer"], [499, 3, 1, "", "load_diabetes"], [500, 3, 1, "", "load_digits"], [501, 3, 1, "", "load_files"], [502, 3, 1, "", "load_iris"], [503, 3, 1, "", "load_linnerud"], [504, 3, 1, "", "load_sample_image"], [505, 3, 1, "", "load_sample_images"], [506, 3, 1, "", "load_svmlight_file"], [507, 3, 1, "", "load_svmlight_files"], [508, 3, 1, "", "load_wine"], [509, 3, 1, "", "make_biclusters"], [510, 3, 1, "", "make_blobs"], [511, 3, 1, "", "make_checkerboard"], [512, 3, 1, "", "make_circles"], [513, 3, 1, "", "make_classification"], [514, 3, 1, "", "make_friedman1"], [515, 3, 1, "", "make_friedman2"], [516, 3, 1, "", "make_friedman3"], [517, 3, 1, "", "make_gaussian_quantiles"], [518, 3, 1, "", "make_hastie_10_2"], [519, 3, 1, "", "make_low_rank_matrix"], [520, 3, 1, "", "make_moons"], [521, 3, 1, "", "make_multilabel_classification"], [522, 3, 1, "", "make_regression"], [523, 3, 1, "", "make_s_curve"], [524, 3, 1, "", "make_sparse_coded_signal"], [525, 3, 1, "", "make_sparse_spd_matrix"], [526, 3, 1, "", "make_sparse_uncorrelated"], [527, 3, 1, "", "make_spd_matrix"], [528, 3, 1, "", "make_swiss_roll"]], "sklearn.decomposition": [[529, 1, 1, "", "DictionaryLearning"], [530, 1, 1, "", "FactorAnalysis"], [531, 1, 1, "", "FastICA"], [532, 1, 1, "", "IncrementalPCA"], [533, 1, 1, "", "KernelPCA"], [534, 1, 1, "", "LatentDirichletAllocation"], [535, 1, 1, "", "MiniBatchDictionaryLearning"], [536, 1, 1, "", "MiniBatchNMF"], [537, 1, 1, "", "MiniBatchSparsePCA"], [538, 1, 1, "", "NMF"], [539, 1, 1, "", "PCA"], [540, 1, 1, "", "SparseCoder"], [541, 1, 1, "", "SparsePCA"], [542, 1, 1, "", "TruncatedSVD"], [543, 3, 1, "", "dict_learning"], [544, 3, 1, "", "dict_learning_online"], [416, 3, 1, "", "fastica"], [545, 3, 1, "", "non_negative_factorization"], [546, 3, 1, "", "sparse_encode"]], "sklearn.decomposition.DictionaryLearning": [[529, 2, 1, "", "fit"], [529, 2, 1, "", "fit_transform"], [529, 2, 1, "", "get_feature_names_out"], [529, 2, 1, "", "get_metadata_routing"], [529, 2, 1, "", "get_params"], [529, 2, 1, "", "inverse_transform"], [529, 2, 1, "", "set_output"], [529, 2, 1, "", "set_params"], [529, 2, 1, "", "transform"]], "sklearn.decomposition.FactorAnalysis": [[530, 2, 1, "", "fit"], [530, 2, 1, "", "fit_transform"], [530, 2, 1, "", "get_covariance"], [530, 2, 1, "", "get_feature_names_out"], [530, 2, 1, "", "get_metadata_routing"], [530, 2, 1, "", "get_params"], [530, 2, 1, "", "get_precision"], [530, 2, 1, "", "score"], [530, 2, 1, "", "score_samples"], [530, 2, 1, "", "set_output"], [530, 2, 1, "", "set_params"], [530, 2, 1, "", "transform"]], "sklearn.decomposition.FastICA": [[531, 2, 1, "", "fit"], [531, 2, 1, "", "fit_transform"], [531, 2, 1, "", "get_feature_names_out"], [531, 2, 1, "", "get_metadata_routing"], [531, 2, 1, "", "get_params"], [531, 2, 1, "", "inverse_transform"], [531, 2, 1, "", "set_inverse_transform_request"], [531, 2, 1, "", "set_output"], [531, 2, 1, "", "set_params"], [531, 2, 1, "", "set_transform_request"], [531, 2, 1, "", "transform"]], "sklearn.decomposition.IncrementalPCA": [[532, 2, 1, "", "fit"], [532, 2, 1, "", "fit_transform"], [532, 2, 1, "", "get_covariance"], [532, 2, 1, "", "get_feature_names_out"], [532, 2, 1, "", "get_metadata_routing"], [532, 2, 1, "", "get_params"], [532, 2, 1, "", "get_precision"], [532, 2, 1, "", "inverse_transform"], [532, 2, 1, "", "partial_fit"], [532, 2, 1, "", "set_output"], [532, 2, 1, "", "set_params"], [532, 2, 1, "", "transform"]], "sklearn.decomposition.KernelPCA": [[533, 2, 1, "", "fit"], [533, 2, 1, "", "fit_transform"], [533, 2, 1, "", "get_feature_names_out"], [533, 2, 1, "", "get_metadata_routing"], [533, 2, 1, "", "get_params"], [533, 2, 1, "", "inverse_transform"], [533, 2, 1, "", "set_output"], [533, 2, 1, "", "set_params"], [533, 2, 1, "", "transform"]], "sklearn.decomposition.LatentDirichletAllocation": [[534, 2, 1, "", "fit"], [534, 2, 1, "", "fit_transform"], [534, 2, 1, "", "get_feature_names_out"], [534, 2, 1, "", "get_metadata_routing"], [534, 2, 1, "", "get_params"], [534, 2, 1, "", "partial_fit"], [534, 2, 1, "", "perplexity"], [534, 2, 1, "", "score"], [534, 2, 1, "", "set_output"], [534, 2, 1, "", "set_params"], [534, 2, 1, "", "set_transform_request"], [534, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchDictionaryLearning": [[535, 2, 1, "", "fit"], [535, 2, 1, "", "fit_transform"], [535, 2, 1, "", "get_feature_names_out"], [535, 2, 1, "", "get_metadata_routing"], [535, 2, 1, "", "get_params"], [535, 2, 1, "", "inverse_transform"], [535, 2, 1, "", "partial_fit"], [535, 2, 1, "", "set_output"], [535, 2, 1, "", "set_params"], [535, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchNMF": [[536, 2, 1, "", "fit"], [536, 2, 1, "", "fit_transform"], [536, 2, 1, "", "get_feature_names_out"], [536, 2, 1, "", "get_metadata_routing"], [536, 2, 1, "", "get_params"], [536, 2, 1, "", "inverse_transform"], [536, 2, 1, "", "partial_fit"], [536, 2, 1, "", "set_output"], [536, 2, 1, "", "set_params"], [536, 2, 1, "", "set_partial_fit_request"], [536, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchSparsePCA": [[537, 2, 1, "", "fit"], [537, 2, 1, "", "fit_transform"], [537, 2, 1, "", "get_feature_names_out"], [537, 2, 1, "", "get_metadata_routing"], [537, 2, 1, "", "get_params"], [537, 2, 1, "", "inverse_transform"], [537, 2, 1, "", "set_output"], [537, 2, 1, "", "set_params"], [537, 2, 1, "", "transform"]], "sklearn.decomposition.NMF": [[538, 2, 1, "", "fit"], [538, 2, 1, "", "fit_transform"], [538, 2, 1, "", "get_feature_names_out"], [538, 2, 1, "", "get_metadata_routing"], [538, 2, 1, "", "get_params"], [538, 2, 1, "", "inverse_transform"], [538, 2, 1, "", "set_output"], [538, 2, 1, "", "set_params"], [538, 2, 1, "", "transform"]], "sklearn.decomposition.PCA": [[539, 2, 1, "", "fit"], [539, 2, 1, "", "fit_transform"], [539, 2, 1, "", "get_covariance"], [539, 2, 1, "", "get_feature_names_out"], [539, 2, 1, "", "get_metadata_routing"], [539, 2, 1, "", "get_params"], [539, 2, 1, "", "get_precision"], [539, 2, 1, "", "inverse_transform"], [539, 2, 1, "", "score"], [539, 2, 1, "", "score_samples"], [539, 2, 1, "", "set_output"], [539, 2, 1, "", "set_params"], [539, 2, 1, "", "transform"]], "sklearn.decomposition.SparseCoder": [[540, 2, 1, "", "fit"], [540, 2, 1, "", "fit_transform"], [540, 2, 1, "", "get_feature_names_out"], [540, 2, 1, "", "get_metadata_routing"], [540, 2, 1, "", "get_params"], [540, 2, 1, "", "inverse_transform"], [540, 2, 1, "", "set_output"], [540, 2, 1, "", "set_params"], [540, 2, 1, "", "transform"]], "sklearn.decomposition.SparsePCA": [[541, 2, 1, "", "fit"], [541, 2, 1, "", "fit_transform"], [541, 2, 1, "", "get_feature_names_out"], [541, 2, 1, "", "get_metadata_routing"], [541, 2, 1, "", "get_params"], [541, 2, 1, "", "inverse_transform"], [541, 2, 1, "", "set_output"], [541, 2, 1, "", "set_params"], [541, 2, 1, "", "transform"]], "sklearn.decomposition.TruncatedSVD": [[542, 2, 1, "", "fit"], [542, 2, 1, "", "fit_transform"], [542, 2, 1, "", "get_feature_names_out"], [542, 2, 1, "", "get_metadata_routing"], [542, 2, 1, "", "get_params"], [542, 2, 1, "", "inverse_transform"], [542, 2, 1, "", "set_output"], [542, 2, 1, "", "set_params"], [542, 2, 1, "", "transform"]], "sklearn.discriminant_analysis": [[547, 1, 1, "", "LinearDiscriminantAnalysis"], [548, 1, 1, "", "QuadraticDiscriminantAnalysis"]], "sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[547, 2, 1, "", "decision_function"], [547, 2, 1, "", "fit"], [547, 2, 1, "", "fit_transform"], [547, 2, 1, "", "get_feature_names_out"], [547, 2, 1, "", "get_metadata_routing"], [547, 2, 1, "", "get_params"], [547, 2, 1, "", "predict"], [547, 2, 1, "", "predict_log_proba"], [547, 2, 1, "", "predict_proba"], [547, 2, 1, "", "score"], [547, 2, 1, "", "set_output"], [547, 2, 1, "", "set_params"], [547, 2, 1, "", "set_score_request"], [547, 2, 1, "", "transform"]], "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[548, 2, 1, "", "decision_function"], [548, 2, 1, "", "fit"], [548, 2, 1, "", "get_metadata_routing"], [548, 2, 1, "", "get_params"], [548, 2, 1, "", "predict"], [548, 2, 1, "", "predict_log_proba"], [548, 2, 1, "", "predict_proba"], [548, 2, 1, "", "score"], [548, 2, 1, "", "set_params"], [548, 2, 1, "", "set_score_request"]], "sklearn.dummy": [[549, 1, 1, "", "DummyClassifier"], [550, 1, 1, "", "DummyRegressor"]], "sklearn.dummy.DummyClassifier": [[549, 2, 1, "", "fit"], [549, 2, 1, "", "get_metadata_routing"], [549, 2, 1, "", "get_params"], [549, 2, 1, "", "predict"], [549, 2, 1, "", "predict_log_proba"], [549, 2, 1, "", "predict_proba"], [549, 2, 1, "", "score"], [549, 2, 1, "", "set_fit_request"], [549, 2, 1, "", "set_params"], [549, 2, 1, "", "set_score_request"]], "sklearn.dummy.DummyRegressor": [[550, 2, 1, "", "fit"], [550, 2, 1, "", "get_metadata_routing"], [550, 2, 1, "", "get_params"], [550, 2, 1, "", "predict"], [550, 2, 1, "", "score"], [550, 2, 1, "", "set_fit_request"], [550, 2, 1, "", "set_params"], [550, 2, 1, "", "set_predict_request"], [550, 2, 1, "", "set_score_request"]], "sklearn.ensemble": [[551, 1, 1, "", "AdaBoostClassifier"], [552, 1, 1, "", "AdaBoostRegressor"], [553, 1, 1, "", "BaggingClassifier"], [554, 1, 1, "", "BaggingRegressor"], [555, 1, 1, "", "ExtraTreesClassifier"], [556, 1, 1, "", "ExtraTreesRegressor"], [557, 1, 1, "", "GradientBoostingClassifier"], [558, 1, 1, "", "GradientBoostingRegressor"], [559, 1, 1, "", "HistGradientBoostingClassifier"], [560, 1, 1, "", "HistGradientBoostingRegressor"], [561, 1, 1, "", "IsolationForest"], [562, 1, 1, "", "RandomForestClassifier"], [563, 1, 1, "", "RandomForestRegressor"], [564, 1, 1, "", "RandomTreesEmbedding"], [565, 1, 1, "", "StackingClassifier"], [566, 1, 1, "", "StackingRegressor"], [567, 1, 1, "", "VotingClassifier"], [568, 1, 1, "", "VotingRegressor"]], "sklearn.ensemble.AdaBoostClassifier": [[551, 2, 1, "", "decision_function"], [551, 2, 1, "", "fit"], [551, 2, 1, "", "get_metadata_routing"], [551, 2, 1, "", "get_params"], [551, 2, 1, "", "predict"], [551, 2, 1, "", "predict_log_proba"], [551, 2, 1, "", "predict_proba"], [551, 2, 1, "", "score"], [551, 2, 1, "", "set_fit_request"], [551, 2, 1, "", "set_params"], [551, 2, 1, "", "set_score_request"], [551, 2, 1, "", "staged_decision_function"], [551, 2, 1, "", "staged_predict"], [551, 2, 1, "", "staged_predict_proba"], [551, 2, 1, "", "staged_score"]], "sklearn.ensemble.AdaBoostRegressor": [[552, 2, 1, "", "fit"], [552, 2, 1, "", "get_metadata_routing"], [552, 2, 1, "", "get_params"], [552, 2, 1, "", "predict"], [552, 2, 1, "", "score"], [552, 2, 1, "", "set_fit_request"], [552, 2, 1, "", "set_params"], [552, 2, 1, "", "set_score_request"], [552, 2, 1, "", "staged_predict"], [552, 2, 1, "", "staged_score"]], "sklearn.ensemble.BaggingClassifier": [[553, 2, 1, "", "decision_function"], [553, 2, 1, "", "fit"], [553, 2, 1, "", "get_metadata_routing"], [553, 2, 1, "", "get_params"], [553, 2, 1, "", "predict"], [553, 2, 1, "", "predict_log_proba"], [553, 2, 1, "", "predict_proba"], [553, 2, 1, "", "score"], [553, 2, 1, "", "set_fit_request"], [553, 2, 1, "", "set_params"], [553, 2, 1, "", "set_score_request"]], "sklearn.ensemble.BaggingRegressor": [[554, 2, 1, "", "fit"], [554, 2, 1, "", "get_metadata_routing"], [554, 2, 1, "", "get_params"], [554, 2, 1, "", "predict"], [554, 2, 1, "", "score"], [554, 2, 1, "", "set_fit_request"], [554, 2, 1, "", "set_params"], [554, 2, 1, "", "set_score_request"]], "sklearn.ensemble.ExtraTreesClassifier": [[555, 2, 1, "", "apply"], [555, 2, 1, "", "decision_path"], [555, 2, 1, "", "fit"], [555, 2, 1, "", "get_metadata_routing"], [555, 2, 1, "", "get_params"], [555, 2, 1, "", "predict"], [555, 2, 1, "", "predict_log_proba"], [555, 2, 1, "", "predict_proba"], [555, 2, 1, "", "score"], [555, 2, 1, "", "set_fit_request"], [555, 2, 1, "", "set_params"], [555, 2, 1, "", "set_score_request"]], "sklearn.ensemble.ExtraTreesRegressor": [[556, 2, 1, "", "apply"], [556, 2, 1, "", "decision_path"], [556, 2, 1, "", "fit"], [556, 2, 1, "", "get_metadata_routing"], [556, 2, 1, "", "get_params"], [556, 2, 1, "", "predict"], [556, 2, 1, "", "score"], [556, 2, 1, "", "set_fit_request"], [556, 2, 1, "", "set_params"], [556, 2, 1, "", "set_score_request"]], "sklearn.ensemble.GradientBoostingClassifier": [[557, 2, 1, "", "apply"], [557, 2, 1, "", "decision_function"], [557, 2, 1, "", "fit"], [557, 2, 1, "", "get_metadata_routing"], [557, 2, 1, "", "get_params"], [557, 2, 1, "", "predict"], [557, 2, 1, "", "predict_log_proba"], [557, 2, 1, "", "predict_proba"], [557, 2, 1, "", "score"], [557, 2, 1, "", "set_fit_request"], [557, 2, 1, "", "set_params"], [557, 2, 1, "", "set_score_request"], [557, 2, 1, "", "staged_decision_function"], [557, 2, 1, "", "staged_predict"], [557, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.GradientBoostingRegressor": [[558, 2, 1, "", "apply"], [558, 2, 1, "", "fit"], [558, 2, 1, "", "get_metadata_routing"], [558, 2, 1, "", "get_params"], [558, 2, 1, "", "predict"], [558, 2, 1, "", "score"], [558, 2, 1, "", "set_fit_request"], [558, 2, 1, "", "set_params"], [558, 2, 1, "", "set_score_request"], [558, 2, 1, "", "staged_predict"]], "sklearn.ensemble.HistGradientBoostingClassifier": [[559, 2, 1, "", "decision_function"], [559, 2, 1, "", "fit"], [559, 2, 1, "", "get_metadata_routing"], [559, 2, 1, "", "get_params"], [559, 2, 1, "", "predict"], [559, 2, 1, "", "predict_proba"], [559, 2, 1, "", "score"], [559, 2, 1, "", "set_fit_request"], [559, 2, 1, "", "set_params"], [559, 2, 1, "", "set_score_request"], [559, 2, 1, "", "staged_decision_function"], [559, 2, 1, "", "staged_predict"], [559, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.HistGradientBoostingRegressor": [[560, 2, 1, "", "fit"], [560, 2, 1, "", "get_metadata_routing"], [560, 2, 1, "", "get_params"], [560, 2, 1, "", "predict"], [560, 2, 1, "", "score"], [560, 2, 1, "", "set_fit_request"], [560, 2, 1, "", "set_params"], [560, 2, 1, "", "set_score_request"], [560, 2, 1, "", "staged_predict"]], "sklearn.ensemble.IsolationForest": [[561, 2, 1, "", "decision_function"], [561, 2, 1, "", "fit"], [561, 2, 1, "", "fit_predict"], [561, 2, 1, "", "get_metadata_routing"], [561, 2, 1, "", "get_params"], [561, 2, 1, "", "predict"], [561, 2, 1, "", "score_samples"], [561, 2, 1, "", "set_fit_request"], [561, 2, 1, "", "set_params"]], "sklearn.ensemble.RandomForestClassifier": [[562, 2, 1, "", "apply"], [562, 2, 1, "", "decision_path"], [562, 2, 1, "", "fit"], [562, 2, 1, "", "get_metadata_routing"], [562, 2, 1, "", "get_params"], [562, 2, 1, "", "predict"], [562, 2, 1, "", "predict_log_proba"], [562, 2, 1, "", "predict_proba"], [562, 2, 1, "", "score"], [562, 2, 1, "", "set_fit_request"], [562, 2, 1, "", "set_params"], [562, 2, 1, "", "set_score_request"]], "sklearn.ensemble.RandomForestRegressor": [[563, 2, 1, "", "apply"], [563, 2, 1, "", "decision_path"], [563, 2, 1, "", "fit"], [563, 2, 1, "", "get_metadata_routing"], [563, 2, 1, "", "get_params"], [563, 2, 1, "", "predict"], [563, 2, 1, "", "score"], [563, 2, 1, "", "set_fit_request"], [563, 2, 1, "", "set_params"], [563, 2, 1, "", "set_score_request"]], "sklearn.ensemble.RandomTreesEmbedding": [[564, 2, 1, "", "apply"], [564, 2, 1, "", "decision_path"], [564, 2, 1, "", "fit"], [564, 2, 1, "", "fit_transform"], [564, 2, 1, "", "get_feature_names_out"], [564, 2, 1, "", "get_metadata_routing"], [564, 2, 1, "", "get_params"], [564, 2, 1, "", "set_fit_request"], [564, 2, 1, "", "set_output"], [564, 2, 1, "", "set_params"], [564, 2, 1, "", "transform"]], "sklearn.ensemble.StackingClassifier": [[565, 2, 1, "", "decision_function"], [565, 2, 1, "", "fit"], [565, 2, 1, "", "fit_transform"], [565, 2, 1, "", "get_feature_names_out"], [565, 2, 1, "", "get_metadata_routing"], [565, 2, 1, "", "get_params"], [565, 4, 1, "", "named_estimators"], [565, 2, 1, "", "predict"], [565, 2, 1, "", "predict_proba"], [565, 2, 1, "", "score"], [565, 2, 1, "", "set_output"], [565, 2, 1, "", "set_params"], [565, 2, 1, "", "set_score_request"], [565, 2, 1, "", "transform"]], "sklearn.ensemble.StackingRegressor": [[566, 2, 1, "", "fit"], [566, 2, 1, "", "fit_transform"], [566, 2, 1, "", "get_feature_names_out"], [566, 2, 1, "", "get_metadata_routing"], [566, 2, 1, "", "get_params"], [566, 4, 1, "", "named_estimators"], [566, 2, 1, "", "predict"], [566, 2, 1, "", "score"], [566, 2, 1, "", "set_output"], [566, 2, 1, "", "set_params"], [566, 2, 1, "", "set_score_request"], [566, 2, 1, "", "transform"]], "sklearn.ensemble.VotingClassifier": [[567, 2, 1, "", "fit"], [567, 2, 1, "", "fit_transform"], [567, 2, 1, "", "get_feature_names_out"], [567, 2, 1, "", "get_metadata_routing"], [567, 2, 1, "", "get_params"], [567, 4, 1, "", "named_estimators"], [567, 2, 1, "", "predict"], [567, 2, 1, "", "predict_proba"], [567, 2, 1, "", "score"], [567, 2, 1, "", "set_output"], [567, 2, 1, "", "set_params"], [567, 2, 1, "", "set_score_request"], [567, 2, 1, "", "transform"]], "sklearn.ensemble.VotingRegressor": [[568, 2, 1, "", "fit"], [568, 2, 1, "", "fit_transform"], [568, 2, 1, "", "get_feature_names_out"], [568, 2, 1, "", "get_metadata_routing"], [568, 2, 1, "", "get_params"], [568, 4, 1, "", "named_estimators"], [568, 2, 1, "", "predict"], [568, 2, 1, "", "score"], [568, 2, 1, "", "set_output"], [568, 2, 1, "", "set_params"], [568, 2, 1, "", "set_score_request"], [568, 2, 1, "", "transform"]], "sklearn.exceptions": [[569, 5, 1, "", "ConvergenceWarning"], [570, 5, 1, "", "DataConversionWarning"], [571, 5, 1, "", "DataDimensionalityWarning"], [572, 5, 1, "", "EfficiencyWarning"], [573, 5, 1, "", "EstimatorCheckFailedWarning"], [574, 5, 1, "", "FitFailedWarning"], [575, 5, 1, "", "InconsistentVersionWarning"], [576, 5, 1, "", "NotFittedError"], [577, 5, 1, "", "UndefinedMetricWarning"]], "sklearn.experimental": [[578, 0, 0, "-", "enable_halving_search_cv"], [579, 0, 0, "-", "enable_iterative_imputer"]], "sklearn.feature_extraction": [[580, 1, 1, "", "DictVectorizer"], [581, 1, 1, "", "FeatureHasher"], [16, 0, 0, "-", "image"], [16, 0, 0, "-", "text"]], "sklearn.feature_extraction.DictVectorizer": [[580, 2, 1, "", "fit"], [580, 2, 1, "", "fit_transform"], [580, 2, 1, "", "get_feature_names_out"], [580, 2, 1, "", "get_metadata_routing"], [580, 2, 1, "", "get_params"], [580, 2, 1, "", "inverse_transform"], [580, 2, 1, "", "restrict"], [580, 2, 1, "", "set_output"], [580, 2, 1, "", "set_params"], [580, 2, 1, "", "transform"]], "sklearn.feature_extraction.FeatureHasher": [[581, 2, 1, "", "fit"], [581, 2, 1, "", "fit_transform"], [581, 2, 1, "", "get_metadata_routing"], [581, 2, 1, "", "get_params"], [581, 2, 1, "", "set_output"], [581, 2, 1, "", "set_params"], [581, 2, 1, "", "transform"]], "sklearn.feature_extraction.image": [[582, 1, 1, "", "PatchExtractor"], [583, 3, 1, "", "extract_patches_2d"], [584, 3, 1, "", "grid_to_graph"], [585, 3, 1, "", "img_to_graph"], [586, 3, 1, "", "reconstruct_from_patches_2d"]], "sklearn.feature_extraction.image.PatchExtractor": [[582, 2, 1, "", "fit"], [582, 2, 1, "", "fit_transform"], [582, 2, 1, "", "get_metadata_routing"], [582, 2, 1, "", "get_params"], [582, 2, 1, "", "set_output"], [582, 2, 1, "", "set_params"], [582, 2, 1, "", "transform"]], "sklearn.feature_extraction.text": [[587, 1, 1, "", "CountVectorizer"], [588, 1, 1, "", "HashingVectorizer"], [589, 1, 1, "", "TfidfTransformer"], [590, 1, 1, "", "TfidfVectorizer"]], "sklearn.feature_extraction.text.CountVectorizer": [[587, 2, 1, "", "build_analyzer"], [587, 2, 1, "", "build_preprocessor"], [587, 2, 1, "", "build_tokenizer"], [587, 2, 1, "", "decode"], [587, 2, 1, "", "fit"], [587, 2, 1, "", "fit_transform"], [587, 2, 1, "", "get_feature_names_out"], [587, 2, 1, "", "get_metadata_routing"], [587, 2, 1, "", "get_params"], [587, 2, 1, "", "get_stop_words"], [587, 2, 1, "", "inverse_transform"], [587, 2, 1, "", "set_params"], [587, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.HashingVectorizer": [[588, 2, 1, "", "build_analyzer"], [588, 2, 1, "", "build_preprocessor"], [588, 2, 1, "", "build_tokenizer"], [588, 2, 1, "", "decode"], [588, 2, 1, "", "fit"], [588, 2, 1, "", "fit_transform"], [588, 2, 1, "", "get_metadata_routing"], [588, 2, 1, "", "get_params"], [588, 2, 1, "", "get_stop_words"], [588, 2, 1, "", "partial_fit"], [588, 2, 1, "", "set_output"], [588, 2, 1, "", "set_params"], [588, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfTransformer": [[589, 2, 1, "", "fit"], [589, 2, 1, "", "fit_transform"], [589, 2, 1, "", "get_feature_names_out"], [589, 2, 1, "", "get_metadata_routing"], [589, 2, 1, "", "get_params"], [589, 2, 1, "", "set_output"], [589, 2, 1, "", "set_params"], [589, 2, 1, "", "set_transform_request"], [589, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfVectorizer": [[590, 2, 1, "", "build_analyzer"], [590, 2, 1, "", "build_preprocessor"], [590, 2, 1, "", "build_tokenizer"], [590, 2, 1, "", "decode"], [590, 2, 1, "", "fit"], [590, 2, 1, "", "fit_transform"], [590, 2, 1, "", "get_feature_names_out"], [590, 2, 1, "", "get_metadata_routing"], [590, 2, 1, "", "get_params"], [590, 2, 1, "", "get_stop_words"], [590, 2, 1, "", "inverse_transform"], [590, 2, 1, "", "set_params"], [590, 2, 1, "", "transform"]], "sklearn.feature_selection": [[591, 1, 1, "", "GenericUnivariateSelect"], [592, 1, 1, "", "RFE"], [593, 1, 1, "", "RFECV"], [594, 1, 1, "", "SelectFdr"], [595, 1, 1, "", "SelectFpr"], [596, 1, 1, "", "SelectFromModel"], [597, 1, 1, "", "SelectFwe"], [598, 1, 1, "", "SelectKBest"], [599, 1, 1, "", "SelectPercentile"], [600, 1, 1, "", "SelectorMixin"], [601, 1, 1, "", "SequentialFeatureSelector"], [602, 1, 1, "", "VarianceThreshold"], [603, 3, 1, "", "chi2"], [604, 3, 1, "", "f_classif"], [605, 3, 1, "", "f_regression"], [606, 3, 1, "", "mutual_info_classif"], [607, 3, 1, "", "mutual_info_regression"], [608, 3, 1, "", "r_regression"]], "sklearn.feature_selection.GenericUnivariateSelect": [[591, 2, 1, "", "fit"], [591, 2, 1, "", "fit_transform"], [591, 2, 1, "", "get_feature_names_out"], [591, 2, 1, "", "get_metadata_routing"], [591, 2, 1, "", "get_params"], [591, 2, 1, "", "get_support"], [591, 2, 1, "", "inverse_transform"], [591, 2, 1, "", "set_output"], [591, 2, 1, "", "set_params"], [591, 2, 1, "", "transform"]], "sklearn.feature_selection.RFE": [[592, 2, 1, "", "decision_function"], [592, 2, 1, "", "fit"], [592, 2, 1, "", "fit_transform"], [592, 2, 1, "", "get_feature_names_out"], [592, 2, 1, "", "get_metadata_routing"], [592, 2, 1, "", "get_params"], [592, 2, 1, "", "get_support"], [592, 2, 1, "", "inverse_transform"], [592, 2, 1, "", "predict"], [592, 2, 1, "", "predict_log_proba"], [592, 2, 1, "", "predict_proba"], [592, 2, 1, "", "score"], [592, 2, 1, "", "set_output"], [592, 2, 1, "", "set_params"], [592, 2, 1, "", "transform"]], "sklearn.feature_selection.RFECV": [[593, 2, 1, "", "decision_function"], [593, 2, 1, "", "fit"], [593, 2, 1, "", "fit_transform"], [593, 2, 1, "", "get_feature_names_out"], [593, 2, 1, "", "get_metadata_routing"], [593, 2, 1, "", "get_params"], [593, 2, 1, "", "get_support"], [593, 2, 1, "", "inverse_transform"], [593, 2, 1, "", "predict"], [593, 2, 1, "", "predict_log_proba"], [593, 2, 1, "", "predict_proba"], [593, 2, 1, "", "score"], [593, 2, 1, "", "set_output"], [593, 2, 1, "", "set_params"], [593, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFdr": [[594, 2, 1, "", "fit"], [594, 2, 1, "", "fit_transform"], [594, 2, 1, "", "get_feature_names_out"], [594, 2, 1, "", "get_metadata_routing"], [594, 2, 1, "", "get_params"], [594, 2, 1, "", "get_support"], [594, 2, 1, "", "inverse_transform"], [594, 2, 1, "", "set_output"], [594, 2, 1, "", "set_params"], [594, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFpr": [[595, 2, 1, "", "fit"], [595, 2, 1, "", "fit_transform"], [595, 2, 1, "", "get_feature_names_out"], [595, 2, 1, "", "get_metadata_routing"], [595, 2, 1, "", "get_params"], [595, 2, 1, "", "get_support"], [595, 2, 1, "", "inverse_transform"], [595, 2, 1, "", "set_output"], [595, 2, 1, "", "set_params"], [595, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFromModel": [[596, 2, 1, "", "fit"], [596, 2, 1, "", "fit_transform"], [596, 2, 1, "", "get_feature_names_out"], [596, 2, 1, "", "get_metadata_routing"], [596, 2, 1, "", "get_params"], [596, 2, 1, "", "get_support"], [596, 2, 1, "", "inverse_transform"], [596, 2, 1, "", "partial_fit"], [596, 2, 1, "", "set_output"], [596, 2, 1, "", "set_params"], [596, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFwe": [[597, 2, 1, "", "fit"], [597, 2, 1, "", "fit_transform"], [597, 2, 1, "", "get_feature_names_out"], [597, 2, 1, "", "get_metadata_routing"], [597, 2, 1, "", "get_params"], [597, 2, 1, "", "get_support"], [597, 2, 1, "", "inverse_transform"], [597, 2, 1, "", "set_output"], [597, 2, 1, "", "set_params"], [597, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectKBest": [[598, 2, 1, "", "fit"], [598, 2, 1, "", "fit_transform"], [598, 2, 1, "", "get_feature_names_out"], [598, 2, 1, "", "get_metadata_routing"], [598, 2, 1, "", "get_params"], [598, 2, 1, "", "get_support"], [598, 2, 1, "", "inverse_transform"], [598, 2, 1, "", "set_output"], [598, 2, 1, "", "set_params"], [598, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectPercentile": [[599, 2, 1, "", "fit"], [599, 2, 1, "", "fit_transform"], [599, 2, 1, "", "get_feature_names_out"], [599, 2, 1, "", "get_metadata_routing"], [599, 2, 1, "", "get_params"], [599, 2, 1, "", "get_support"], [599, 2, 1, "", "inverse_transform"], [599, 2, 1, "", "set_output"], [599, 2, 1, "", "set_params"], [599, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectorMixin": [[600, 2, 1, "", "fit_transform"], [600, 2, 1, "", "get_feature_names_out"], [600, 2, 1, "", "get_support"], [600, 2, 1, "", "inverse_transform"], [600, 2, 1, "", "set_output"], [600, 2, 1, "", "transform"]], "sklearn.feature_selection.SequentialFeatureSelector": [[601, 2, 1, "", "fit"], [601, 2, 1, "", "fit_transform"], [601, 2, 1, "", "get_feature_names_out"], [601, 2, 1, "", "get_metadata_routing"], [601, 2, 1, "", "get_params"], [601, 2, 1, "", "get_support"], [601, 2, 1, "", "inverse_transform"], [601, 2, 1, "", "set_output"], [601, 2, 1, "", "set_params"], [601, 2, 1, "", "transform"]], "sklearn.feature_selection.VarianceThreshold": [[602, 2, 1, "", "fit"], [602, 2, 1, "", "fit_transform"], [602, 2, 1, "", "get_feature_names_out"], [602, 2, 1, "", "get_metadata_routing"], [602, 2, 1, "", "get_params"], [602, 2, 1, "", "get_support"], [602, 2, 1, "", "inverse_transform"], [602, 2, 1, "", "set_output"], [602, 2, 1, "", "set_params"], [602, 2, 1, "", "transform"]], "sklearn.frozen": [[609, 1, 1, "", "FrozenEstimator"]], "sklearn.frozen.FrozenEstimator": [[609, 2, 1, "", "fit"], [609, 2, 1, "", "get_metadata_routing"], [609, 2, 1, "", "get_params"], [609, 2, 1, "", "set_params"]], "sklearn.gaussian_process": [[610, 1, 1, "", "GaussianProcessClassifier"], [611, 1, 1, "", "GaussianProcessRegressor"], [19, 0, 0, "-", "kernels"]], "sklearn.gaussian_process.GaussianProcessClassifier": [[610, 2, 1, "", "fit"], [610, 2, 1, "", "get_metadata_routing"], [610, 2, 1, "", "get_params"], [610, 2, 1, "", "latent_mean_and_variance"], [610, 2, 1, "", "log_marginal_likelihood"], [610, 2, 1, "", "predict"], [610, 2, 1, "", "predict_proba"], [610, 2, 1, "", "score"], [610, 2, 1, "", "set_params"], [610, 2, 1, "", "set_score_request"]], "sklearn.gaussian_process.GaussianProcessRegressor": [[611, 2, 1, "", "fit"], [611, 2, 1, "", "get_metadata_routing"], [611, 2, 1, "", "get_params"], [611, 2, 1, "", "log_marginal_likelihood"], [611, 2, 1, "", "predict"], [611, 2, 1, "", "sample_y"], [611, 2, 1, "", "score"], [611, 2, 1, "", "set_params"], [611, 2, 1, "", "set_predict_request"], [611, 2, 1, "", "set_score_request"]], "sklearn.gaussian_process.kernels": [[612, 1, 1, "", "CompoundKernel"], [613, 1, 1, "", "ConstantKernel"], [614, 1, 1, "", "DotProduct"], [615, 1, 1, "", "ExpSineSquared"], [616, 1, 1, "", "Exponentiation"], [617, 1, 1, "", "Hyperparameter"], [618, 1, 1, "", "Kernel"], [619, 1, 1, "", "Matern"], [620, 1, 1, "", "PairwiseKernel"], [621, 1, 1, "", "Product"], [622, 1, 1, "", "RBF"], [623, 1, 1, "", "RationalQuadratic"], [624, 1, 1, "", "Sum"], [625, 1, 1, "", "WhiteKernel"]], "sklearn.gaussian_process.kernels.CompoundKernel": [[612, 2, 1, "", "__call__"], [612, 4, 1, "", "bounds"], [612, 2, 1, "", "clone_with_theta"], [612, 2, 1, "", "diag"], [612, 2, 1, "", "get_params"], [612, 4, 1, "", "hyperparameters"], [612, 2, 1, "", "is_stationary"], [612, 4, 1, "", "n_dims"], [612, 4, 1, "", "requires_vector_input"], [612, 2, 1, "", "set_params"], [612, 4, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ConstantKernel": [[613, 2, 1, "", "__call__"], [613, 4, 1, "", "bounds"], [613, 2, 1, "", "clone_with_theta"], [613, 2, 1, "", "diag"], [613, 2, 1, "", "get_params"], [613, 4, 1, "", "hyperparameters"], [613, 2, 1, "", "is_stationary"], [613, 4, 1, "", "n_dims"], [613, 4, 1, "", "requires_vector_input"], [613, 2, 1, "", "set_params"], [613, 4, 1, "", "theta"]], "sklearn.gaussian_process.kernels.DotProduct": [[614, 2, 1, "", "__call__"], [614, 4, 1, "", "bounds"], [614, 2, 1, "", "clone_with_theta"], [614, 2, 1, "", "diag"], [614, 2, 1, "", "get_params"], [614, 4, 1, "", "hyperparameters"], [614, 2, 1, "", "is_stationary"], [614, 4, 1, "", "n_dims"], [614, 4, 1, "", "requires_vector_input"], [614, 2, 1, "", "set_params"], [614, 4, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ExpSineSquared": [[615, 2, 1, "", "__call__"], [615, 4, 1, "", "bounds"], [615, 2, 1, "", "clone_with_theta"], [615, 2, 1, "", "diag"], [615, 2, 1, "", "get_params"], [615, 4, 1, "", "hyperparameter_length_scale"], [615, 4, 1, "", "hyperparameters"], [615, 2, 1, "", "is_stationary"], [615, 4, 1, "", "n_dims"], [615, 4, 1, "", "requires_vector_input"], [615, 2, 1, "", "set_params"], [615, 4, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Exponentiation": [[616, 2, 1, "", "__call__"], [616, 4, 1, "", "bounds"], [616, 2, 1, "", "clone_with_theta"], [616, 2, 1, "", "diag"], [616, 2, 1, "", "get_params"], [616, 4, 1, "", "hyperparameters"], [616, 2, 1, "", "is_stationary"], [616, 4, 1, "", "n_dims"], [616, 4, 1, "", "requires_vector_input"], [616, 2, 1, "", "set_params"], [616, 4, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Hyperparameter": [[617, 6, 1, "", "bounds"], [617, 2, 1, "", "count"], [617, 6, 1, "", "fixed"], [617, 2, 1, "", "index"], [617, 6, 1, "", "n_elements"], [617, 6, 1, "", "name"], [617, 6, 1, "", "value_type"]], "sklearn.gaussian_process.kernels.Kernel": [[618, 2, 1, "", "__call__"], [618, 4, 1, "", "bounds"], [618, 2, 1, "", "clone_with_theta"], [618, 2, 1, "", "diag"], [618, 2, 1, "", "get_params"], [618, 4, 1, "", "hyperparameters"], [618, 2, 1, "", "is_stationary"], [618, 4, 1, "", "n_dims"], [618, 4, 1, "", "requires_vector_input"], [618, 2, 1, "", "set_params"], [618, 4, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Matern": [[619, 2, 1, "", "__call__"], [619, 4, 1, "", "bounds"], [619, 2, 1, "", "clone_with_theta"], [619, 2, 1, "", "diag"], [619, 2, 1, "", "get_params"], [619, 4, 1, "", "hyperparameters"], [619, 2, 1, "", "is_stationary"], [619, 4, 1, "", "n_dims"], [619, 4, 1, "", "requires_vector_input"], [619, 2, 1, "", "set_params"], [619, 4, 1, "", "theta"]], "sklearn.gaussian_process.kernels.PairwiseKernel": [[620, 2, 1, "", "__call__"], [620, 4, 1, "", "bounds"], [620, 2, 1, "", "clone_with_theta"], [620, 2, 1, "", "diag"], [620, 2, 1, "", "get_params"], [620, 4, 1, "", "hyperparameters"], [620, 2, 1, "", "is_stationary"], [620, 4, 1, "", "n_dims"], [620, 4, 1, "", "requires_vector_input"], [620, 2, 1, "", "set_params"], [620, 4, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Product": [[621, 2, 1, "", "__call__"], [621, 4, 1, "", "bounds"], [621, 2, 1, "", "clone_with_theta"], [621, 2, 1, "", "diag"], [621, 2, 1, "", "get_params"], [621, 4, 1, "", "hyperparameters"], [621, 2, 1, "", "is_stationary"], [621, 4, 1, "", "n_dims"], [621, 4, 1, "", "requires_vector_input"], [621, 2, 1, "", "set_params"], [621, 4, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RBF": [[622, 2, 1, "", "__call__"], [622, 4, 1, "", "bounds"], [622, 2, 1, "", "clone_with_theta"], [622, 2, 1, "", "diag"], [622, 2, 1, "", "get_params"], [622, 4, 1, "", "hyperparameters"], [622, 2, 1, "", "is_stationary"], [622, 4, 1, "", "n_dims"], [622, 4, 1, "", "requires_vector_input"], [622, 2, 1, "", "set_params"], [622, 4, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RationalQuadratic": [[623, 2, 1, "", "__call__"], [623, 4, 1, "", "bounds"], [623, 2, 1, "", "clone_with_theta"], [623, 2, 1, "", "diag"], [623, 2, 1, "", "get_params"], [623, 4, 1, "", "hyperparameters"], [623, 2, 1, "", "is_stationary"], [623, 4, 1, "", "n_dims"], [623, 4, 1, "", "requires_vector_input"], [623, 2, 1, "", "set_params"], [623, 4, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Sum": [[624, 2, 1, "", "__call__"], [624, 4, 1, "", "bounds"], [624, 2, 1, "", "clone_with_theta"], [624, 2, 1, "", "diag"], [624, 2, 1, "", "get_params"], [624, 4, 1, "", "hyperparameters"], [624, 2, 1, "", "is_stationary"], [624, 4, 1, "", "n_dims"], [624, 4, 1, "", "requires_vector_input"], [624, 2, 1, "", "set_params"], [624, 4, 1, "", "theta"]], "sklearn.gaussian_process.kernels.WhiteKernel": [[625, 2, 1, "", "__call__"], [625, 4, 1, "", "bounds"], [625, 2, 1, "", "clone_with_theta"], [625, 2, 1, "", "diag"], [625, 2, 1, "", "get_params"], [625, 4, 1, "", "hyperparameters"], [625, 2, 1, "", "is_stationary"], [625, 4, 1, "", "n_dims"], [625, 4, 1, "", "requires_vector_input"], [625, 2, 1, "", "set_params"], [625, 4, 1, "", "theta"]], "sklearn.impute": [[627, 1, 1, "", "IterativeImputer"], [628, 1, 1, "", "KNNImputer"], [629, 1, 1, "", "MissingIndicator"], [630, 1, 1, "", "SimpleImputer"]], "sklearn.impute.IterativeImputer": [[627, 2, 1, "", "fit"], [627, 2, 1, "", "fit_transform"], [627, 2, 1, "", "get_feature_names_out"], [627, 2, 1, "", "get_metadata_routing"], [627, 2, 1, "", "get_params"], [627, 2, 1, "", "set_output"], [627, 2, 1, "", "set_params"], [627, 2, 1, "", "transform"]], "sklearn.impute.KNNImputer": [[628, 2, 1, "", "fit"], [628, 2, 1, "", "fit_transform"], [628, 2, 1, "", "get_feature_names_out"], [628, 2, 1, "", "get_metadata_routing"], [628, 2, 1, "", "get_params"], [628, 2, 1, "", "set_output"], [628, 2, 1, "", "set_params"], [628, 2, 1, "", "transform"]], "sklearn.impute.MissingIndicator": [[629, 2, 1, "", "fit"], [629, 2, 1, "", "fit_transform"], [629, 2, 1, "", "get_feature_names_out"], [629, 2, 1, "", "get_metadata_routing"], [629, 2, 1, "", "get_params"], [629, 2, 1, "", "set_output"], [629, 2, 1, "", "set_params"], [629, 2, 1, "", "transform"]], "sklearn.impute.SimpleImputer": [[630, 2, 1, "", "fit"], [630, 2, 1, "", "fit_transform"], [630, 2, 1, "", "get_feature_names_out"], [630, 2, 1, "", "get_metadata_routing"], [630, 2, 1, "", "get_params"], [630, 2, 1, "", "inverse_transform"], [630, 2, 1, "", "set_output"], [630, 2, 1, "", "set_params"], [630, 2, 1, "", "transform"]], "sklearn.inspection": [[631, 1, 1, "", "DecisionBoundaryDisplay"], [632, 1, 1, "", "PartialDependenceDisplay"], [633, 3, 1, "", "partial_dependence"], [634, 3, 1, "", "permutation_importance"]], "sklearn.inspection.DecisionBoundaryDisplay": [[631, 2, 1, "", "from_estimator"], [631, 2, 1, "", "plot"]], "sklearn.inspection.PartialDependenceDisplay": [[632, 2, 1, "", "from_estimator"], [632, 2, 1, "", "plot"]], "sklearn.isotonic": [[635, 1, 1, "", "IsotonicRegression"], [636, 3, 1, "", "check_increasing"], [637, 3, 1, "", "isotonic_regression"]], "sklearn.isotonic.IsotonicRegression": [[635, 2, 1, "", "fit"], [635, 2, 1, "", "fit_transform"], [635, 2, 1, "", "get_feature_names_out"], [635, 2, 1, "", "get_metadata_routing"], [635, 2, 1, "", "get_params"], [635, 2, 1, "", "predict"], [635, 2, 1, "", "score"], [635, 2, 1, "", "set_fit_request"], [635, 2, 1, "", "set_output"], [635, 2, 1, "", "set_params"], [635, 2, 1, "", "set_score_request"], [635, 2, 1, "", "transform"]], "sklearn.kernel_approximation": [[638, 1, 1, "", "AdditiveChi2Sampler"], [639, 1, 1, "", "Nystroem"], [640, 1, 1, "", "PolynomialCountSketch"], [641, 1, 1, "", "RBFSampler"], [642, 1, 1, "", "SkewedChi2Sampler"]], "sklearn.kernel_approximation.AdditiveChi2Sampler": [[638, 2, 1, "", "fit"], [638, 2, 1, "", "fit_transform"], [638, 2, 1, "", "get_feature_names_out"], [638, 2, 1, "", "get_metadata_routing"], [638, 2, 1, "", "get_params"], [638, 2, 1, "", "set_output"], [638, 2, 1, "", "set_params"], [638, 2, 1, "", "transform"]], "sklearn.kernel_approximation.Nystroem": [[639, 2, 1, "", "fit"], [639, 2, 1, "", "fit_transform"], [639, 2, 1, "", "get_feature_names_out"], [639, 2, 1, "", "get_metadata_routing"], [639, 2, 1, "", "get_params"], [639, 2, 1, "", "set_output"], [639, 2, 1, "", "set_params"], [639, 2, 1, "", "transform"]], "sklearn.kernel_approximation.PolynomialCountSketch": [[640, 2, 1, "", "fit"], [640, 2, 1, "", "fit_transform"], [640, 2, 1, "", "get_feature_names_out"], [640, 2, 1, "", "get_metadata_routing"], [640, 2, 1, "", "get_params"], [640, 2, 1, "", "set_output"], [640, 2, 1, "", "set_params"], [640, 2, 1, "", "transform"]], "sklearn.kernel_approximation.RBFSampler": [[641, 2, 1, "", "fit"], [641, 2, 1, "", "fit_transform"], [641, 2, 1, "", "get_feature_names_out"], [641, 2, 1, "", "get_metadata_routing"], [641, 2, 1, "", "get_params"], [641, 2, 1, "", "set_output"], [641, 2, 1, "", "set_params"], [641, 2, 1, "", "transform"]], "sklearn.kernel_approximation.SkewedChi2Sampler": [[642, 2, 1, "", "fit"], [642, 2, 1, "", "fit_transform"], [642, 2, 1, "", "get_feature_names_out"], [642, 2, 1, "", "get_metadata_routing"], [642, 2, 1, "", "get_params"], [642, 2, 1, "", "set_output"], [642, 2, 1, "", "set_params"], [642, 2, 1, "", "transform"]], "sklearn.kernel_ridge": [[643, 1, 1, "", "KernelRidge"]], "sklearn.kernel_ridge.KernelRidge": [[643, 2, 1, "", "fit"], [643, 2, 1, "", "get_metadata_routing"], [643, 2, 1, "", "get_params"], [643, 2, 1, "", "predict"], [643, 2, 1, "", "score"], [643, 2, 1, "", "set_fit_request"], [643, 2, 1, "", "set_params"], [643, 2, 1, "", "set_score_request"]], "sklearn.linear_model": [[644, 1, 1, "", "ARDRegression"], [645, 1, 1, "", "BayesianRidge"], [646, 1, 1, "", "ElasticNet"], [647, 1, 1, "", "ElasticNetCV"], [648, 1, 1, "", "GammaRegressor"], [649, 1, 1, "", "HuberRegressor"], [650, 1, 1, "", "Lars"], [651, 1, 1, "", "LarsCV"], [652, 1, 1, "", "Lasso"], [653, 1, 1, "", "LassoCV"], [654, 1, 1, "", "LassoLars"], [655, 1, 1, "", "LassoLarsCV"], [656, 1, 1, "", "LassoLarsIC"], [657, 1, 1, "", "LinearRegression"], [658, 1, 1, "", "LogisticRegression"], [659, 1, 1, "", "LogisticRegressionCV"], [660, 1, 1, "", "MultiTaskElasticNet"], [661, 1, 1, "", "MultiTaskElasticNetCV"], [662, 1, 1, "", "MultiTaskLasso"], [663, 1, 1, "", "MultiTaskLassoCV"], [664, 1, 1, "", "OrthogonalMatchingPursuit"], [665, 1, 1, "", "OrthogonalMatchingPursuitCV"], [666, 1, 1, "", "PassiveAggressiveClassifier"], [667, 1, 1, "", "PassiveAggressiveRegressor"], [668, 1, 1, "", "Perceptron"], [669, 1, 1, "", "PoissonRegressor"], [670, 1, 1, "", "QuantileRegressor"], [671, 1, 1, "", "RANSACRegressor"], [672, 1, 1, "", "Ridge"], [673, 1, 1, "", "RidgeCV"], [674, 1, 1, "", "RidgeClassifier"], [675, 1, 1, "", "RidgeClassifierCV"], [676, 1, 1, "", "SGDClassifier"], [677, 1, 1, "", "SGDOneClassSVM"], [678, 1, 1, "", "SGDRegressor"], [679, 1, 1, "", "TheilSenRegressor"], [680, 1, 1, "", "TweedieRegressor"], [681, 3, 1, "", "enet_path"], [682, 3, 1, "", "lars_path"], [683, 3, 1, "", "lars_path_gram"], [684, 3, 1, "", "lasso_path"], [685, 3, 1, "", "orthogonal_mp"], [686, 3, 1, "", "orthogonal_mp_gram"], [687, 3, 1, "", "ridge_regression"]], "sklearn.linear_model.ARDRegression": [[644, 2, 1, "", "fit"], [644, 2, 1, "", "get_metadata_routing"], [644, 2, 1, "", "get_params"], [644, 2, 1, "", "predict"], [644, 2, 1, "", "score"], [644, 2, 1, "", "set_params"], [644, 2, 1, "", "set_predict_request"], [644, 2, 1, "", "set_score_request"]], "sklearn.linear_model.BayesianRidge": [[645, 2, 1, "", "fit"], [645, 2, 1, "", "get_metadata_routing"], [645, 2, 1, "", "get_params"], [645, 2, 1, "", "predict"], [645, 2, 1, "", "score"], [645, 2, 1, "", "set_fit_request"], [645, 2, 1, "", "set_params"], [645, 2, 1, "", "set_predict_request"], [645, 2, 1, "", "set_score_request"]], "sklearn.linear_model.ElasticNet": [[646, 2, 1, "", "fit"], [646, 2, 1, "", "get_metadata_routing"], [646, 2, 1, "", "get_params"], [646, 2, 1, "", "path"], [646, 2, 1, "", "predict"], [646, 2, 1, "", "score"], [646, 2, 1, "", "set_fit_request"], [646, 2, 1, "", "set_params"], [646, 2, 1, "", "set_score_request"]], "sklearn.linear_model.ElasticNetCV": [[647, 2, 1, "", "fit"], [647, 2, 1, "", "get_metadata_routing"], [647, 2, 1, "", "get_params"], [647, 2, 1, "", "path"], [647, 2, 1, "", "predict"], [647, 2, 1, "", "score"], [647, 2, 1, "", "set_fit_request"], [647, 2, 1, "", "set_params"], [647, 2, 1, "", "set_score_request"]], "sklearn.linear_model.GammaRegressor": [[648, 2, 1, "", "fit"], [648, 2, 1, "", "get_metadata_routing"], [648, 2, 1, "", "get_params"], [648, 2, 1, "", "predict"], [648, 2, 1, "", "score"], [648, 2, 1, "", "set_fit_request"], [648, 2, 1, "", "set_params"], [648, 2, 1, "", "set_score_request"]], "sklearn.linear_model.HuberRegressor": [[649, 2, 1, "", "fit"], [649, 2, 1, "", "get_metadata_routing"], [649, 2, 1, "", "get_params"], [649, 2, 1, "", "predict"], [649, 2, 1, "", "score"], [649, 2, 1, "", "set_fit_request"], [649, 2, 1, "", "set_params"], [649, 2, 1, "", "set_score_request"]], "sklearn.linear_model.Lars": [[650, 2, 1, "", "fit"], [650, 2, 1, "", "get_metadata_routing"], [650, 2, 1, "", "get_params"], [650, 2, 1, "", "predict"], [650, 2, 1, "", "score"], [650, 2, 1, "", "set_fit_request"], [650, 2, 1, "", "set_params"], [650, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LarsCV": [[651, 2, 1, "", "fit"], [651, 2, 1, "", "get_metadata_routing"], [651, 2, 1, "", "get_params"], [651, 2, 1, "", "predict"], [651, 2, 1, "", "score"], [651, 2, 1, "", "set_fit_request"], [651, 2, 1, "", "set_params"], [651, 2, 1, "", "set_score_request"]], "sklearn.linear_model.Lasso": [[652, 2, 1, "", "fit"], [652, 2, 1, "", "get_metadata_routing"], [652, 2, 1, "", "get_params"], [652, 2, 1, "", "path"], [652, 2, 1, "", "predict"], [652, 2, 1, "", "score"], [652, 2, 1, "", "set_fit_request"], [652, 2, 1, "", "set_params"], [652, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoCV": [[653, 2, 1, "", "fit"], [653, 2, 1, "", "get_metadata_routing"], [653, 2, 1, "", "get_params"], [653, 2, 1, "", "path"], [653, 2, 1, "", "predict"], [653, 2, 1, "", "score"], [653, 2, 1, "", "set_fit_request"], [653, 2, 1, "", "set_params"], [653, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLars": [[654, 2, 1, "", "fit"], [654, 2, 1, "", "get_metadata_routing"], [654, 2, 1, "", "get_params"], [654, 2, 1, "", "predict"], [654, 2, 1, "", "score"], [654, 2, 1, "", "set_fit_request"], [654, 2, 1, "", "set_params"], [654, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLarsCV": [[655, 2, 1, "", "fit"], [655, 2, 1, "", "get_metadata_routing"], [655, 2, 1, "", "get_params"], [655, 2, 1, "", "predict"], [655, 2, 1, "", "score"], [655, 2, 1, "", "set_fit_request"], [655, 2, 1, "", "set_params"], [655, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLarsIC": [[656, 2, 1, "", "fit"], [656, 2, 1, "", "get_metadata_routing"], [656, 2, 1, "", "get_params"], [656, 2, 1, "", "predict"], [656, 2, 1, "", "score"], [656, 2, 1, "", "set_fit_request"], [656, 2, 1, "", "set_params"], [656, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LinearRegression": [[657, 2, 1, "", "fit"], [657, 2, 1, "", "get_metadata_routing"], [657, 2, 1, "", "get_params"], [657, 2, 1, "", "predict"], [657, 2, 1, "", "score"], [657, 2, 1, "", "set_fit_request"], [657, 2, 1, "", "set_params"], [657, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LogisticRegression": [[658, 2, 1, "", "decision_function"], [658, 2, 1, "", "densify"], [658, 2, 1, "", "fit"], [658, 2, 1, "", "get_metadata_routing"], [658, 2, 1, "", "get_params"], [658, 2, 1, "", "predict"], [658, 2, 1, "", "predict_log_proba"], [658, 2, 1, "", "predict_proba"], [658, 2, 1, "", "score"], [658, 2, 1, "", "set_fit_request"], [658, 2, 1, "", "set_params"], [658, 2, 1, "", "set_score_request"], [658, 2, 1, "", "sparsify"]], "sklearn.linear_model.LogisticRegressionCV": [[659, 2, 1, "", "decision_function"], [659, 2, 1, "", "densify"], [659, 2, 1, "", "fit"], [659, 2, 1, "", "get_metadata_routing"], [659, 2, 1, "", "get_params"], [659, 2, 1, "", "predict"], [659, 2, 1, "", "predict_log_proba"], [659, 2, 1, "", "predict_proba"], [659, 2, 1, "", "score"], [659, 2, 1, "", "set_fit_request"], [659, 2, 1, "", "set_params"], [659, 2, 1, "", "set_score_request"], [659, 2, 1, "", "sparsify"]], "sklearn.linear_model.MultiTaskElasticNet": [[660, 2, 1, "", "fit"], [660, 2, 1, "", "get_metadata_routing"], [660, 2, 1, "", "get_params"], [660, 2, 1, "", "path"], [660, 2, 1, "", "predict"], [660, 2, 1, "", "score"], [660, 2, 1, "", "set_fit_request"], [660, 2, 1, "", "set_params"], [660, 2, 1, "", "set_score_request"]], "sklearn.linear_model.MultiTaskElasticNetCV": [[661, 2, 1, "", "fit"], [661, 2, 1, "", "get_metadata_routing"], [661, 2, 1, "", "get_params"], [661, 2, 1, "", "path"], [661, 2, 1, "", "predict"], [661, 2, 1, "", "score"], [661, 2, 1, "", "set_fit_request"], [661, 2, 1, "", "set_params"], [661, 2, 1, "", "set_score_request"]], "sklearn.linear_model.MultiTaskLasso": [[662, 2, 1, "", "fit"], [662, 2, 1, "", "get_metadata_routing"], [662, 2, 1, "", "get_params"], [662, 2, 1, "", "path"], [662, 2, 1, "", "predict"], [662, 2, 1, "", "score"], [662, 2, 1, "", "set_fit_request"], [662, 2, 1, "", "set_params"], [662, 2, 1, "", "set_score_request"]], "sklearn.linear_model.MultiTaskLassoCV": [[663, 2, 1, "", "fit"], [663, 2, 1, "", "get_metadata_routing"], [663, 2, 1, "", "get_params"], [663, 2, 1, "", "path"], [663, 2, 1, "", "predict"], [663, 2, 1, "", "score"], [663, 2, 1, "", "set_fit_request"], [663, 2, 1, "", "set_params"], [663, 2, 1, "", "set_score_request"]], "sklearn.linear_model.OrthogonalMatchingPursuit": [[664, 2, 1, "", "fit"], [664, 2, 1, "", "get_metadata_routing"], [664, 2, 1, "", "get_params"], [664, 2, 1, "", "predict"], [664, 2, 1, "", "score"], [664, 2, 1, "", "set_params"], [664, 2, 1, "", "set_score_request"]], "sklearn.linear_model.OrthogonalMatchingPursuitCV": [[665, 2, 1, "", "fit"], [665, 2, 1, "", "get_metadata_routing"], [665, 2, 1, "", "get_params"], [665, 2, 1, "", "predict"], [665, 2, 1, "", "score"], [665, 2, 1, "", "set_params"], [665, 2, 1, "", "set_score_request"]], "sklearn.linear_model.PassiveAggressiveClassifier": [[666, 2, 1, "", "decision_function"], [666, 2, 1, "", "densify"], [666, 2, 1, "", "fit"], [666, 2, 1, "", "get_metadata_routing"], [666, 2, 1, "", "get_params"], [666, 2, 1, "", "partial_fit"], [666, 2, 1, "", "predict"], [666, 2, 1, "", "score"], [666, 2, 1, "", "set_fit_request"], [666, 2, 1, "", "set_params"], [666, 2, 1, "", "set_partial_fit_request"], [666, 2, 1, "", "set_score_request"], [666, 2, 1, "", "sparsify"]], "sklearn.linear_model.PassiveAggressiveRegressor": [[667, 2, 1, "", "densify"], [667, 2, 1, "", "fit"], [667, 2, 1, "", "get_metadata_routing"], [667, 2, 1, "", "get_params"], [667, 2, 1, "", "partial_fit"], [667, 2, 1, "", "predict"], [667, 2, 1, "", "score"], [667, 2, 1, "", "set_fit_request"], [667, 2, 1, "", "set_params"], [667, 2, 1, "", "set_partial_fit_request"], [667, 2, 1, "", "set_score_request"], [667, 2, 1, "", "sparsify"]], "sklearn.linear_model.Perceptron": [[668, 2, 1, "", "decision_function"], [668, 2, 1, "", "densify"], [668, 2, 1, "", "fit"], [668, 2, 1, "", "get_metadata_routing"], [668, 2, 1, "", "get_params"], [668, 2, 1, "", "partial_fit"], [668, 2, 1, "", "predict"], [668, 2, 1, "", "score"], [668, 2, 1, "", "set_fit_request"], [668, 2, 1, "", "set_params"], [668, 2, 1, "", "set_partial_fit_request"], [668, 2, 1, "", "set_score_request"], [668, 2, 1, "", "sparsify"]], "sklearn.linear_model.PoissonRegressor": [[669, 2, 1, "", "fit"], [669, 2, 1, "", "get_metadata_routing"], [669, 2, 1, "", "get_params"], [669, 2, 1, "", "predict"], [669, 2, 1, "", "score"], [669, 2, 1, "", "set_fit_request"], [669, 2, 1, "", "set_params"], [669, 2, 1, "", "set_score_request"]], "sklearn.linear_model.QuantileRegressor": [[670, 2, 1, "", "fit"], [670, 2, 1, "", "get_metadata_routing"], [670, 2, 1, "", "get_params"], [670, 2, 1, "", "predict"], [670, 2, 1, "", "score"], [670, 2, 1, "", "set_fit_request"], [670, 2, 1, "", "set_params"], [670, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RANSACRegressor": [[671, 2, 1, "", "fit"], [671, 2, 1, "", "get_metadata_routing"], [671, 2, 1, "", "get_params"], [671, 2, 1, "", "predict"], [671, 2, 1, "", "score"], [671, 2, 1, "", "set_fit_request"], [671, 2, 1, "", "set_params"]], "sklearn.linear_model.Ridge": [[672, 2, 1, "", "fit"], [672, 2, 1, "", "get_metadata_routing"], [672, 2, 1, "", "get_params"], [672, 2, 1, "", "predict"], [672, 2, 1, "", "score"], [672, 2, 1, "", "set_fit_request"], [672, 2, 1, "", "set_params"], [672, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeCV": [[673, 2, 1, "", "fit"], [673, 2, 1, "", "get_metadata_routing"], [673, 2, 1, "", "get_params"], [673, 2, 1, "", "predict"], [673, 2, 1, "", "score"], [673, 2, 1, "", "set_fit_request"], [673, 2, 1, "", "set_params"], [673, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeClassifier": [[674, 2, 1, "", "decision_function"], [674, 2, 1, "", "fit"], [674, 2, 1, "", "get_metadata_routing"], [674, 2, 1, "", "get_params"], [674, 2, 1, "", "predict"], [674, 2, 1, "", "score"], [674, 2, 1, "", "set_fit_request"], [674, 2, 1, "", "set_params"], [674, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeClassifierCV": [[675, 2, 1, "", "decision_function"], [675, 2, 1, "", "fit"], [675, 2, 1, "", "get_metadata_routing"], [675, 2, 1, "", "get_params"], [675, 2, 1, "", "predict"], [675, 2, 1, "", "score"], [675, 2, 1, "", "set_fit_request"], [675, 2, 1, "", "set_params"], [675, 2, 1, "", "set_score_request"]], "sklearn.linear_model.SGDClassifier": [[676, 2, 1, "", "decision_function"], [676, 2, 1, "", "densify"], [676, 2, 1, "", "fit"], [676, 2, 1, "", "get_metadata_routing"], [676, 2, 1, "", "get_params"], [676, 2, 1, "", "partial_fit"], [676, 2, 1, "", "predict"], [676, 2, 1, "", "predict_log_proba"], [676, 2, 1, "", "predict_proba"], [676, 2, 1, "", "score"], [676, 2, 1, "", "set_fit_request"], [676, 2, 1, "", "set_params"], [676, 2, 1, "", "set_partial_fit_request"], [676, 2, 1, "", "set_score_request"], [676, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDOneClassSVM": [[677, 2, 1, "", "decision_function"], [677, 2, 1, "", "densify"], [677, 2, 1, "", "fit"], [677, 2, 1, "", "fit_predict"], [677, 2, 1, "", "get_metadata_routing"], [677, 2, 1, "", "get_params"], [677, 2, 1, "", "partial_fit"], [677, 2, 1, "", "predict"], [677, 2, 1, "", "score_samples"], [677, 2, 1, "", "set_fit_request"], [677, 2, 1, "", "set_params"], [677, 2, 1, "", "set_partial_fit_request"], [677, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDRegressor": [[678, 2, 1, "", "densify"], [678, 2, 1, "", "fit"], [678, 2, 1, "", "get_metadata_routing"], [678, 2, 1, "", "get_params"], [678, 2, 1, "", "partial_fit"], [678, 2, 1, "", "predict"], [678, 2, 1, "", "score"], [678, 2, 1, "", "set_fit_request"], [678, 2, 1, "", "set_params"], [678, 2, 1, "", "set_partial_fit_request"], [678, 2, 1, "", "set_score_request"], [678, 2, 1, "", "sparsify"]], "sklearn.linear_model.TheilSenRegressor": [[679, 2, 1, "", "fit"], [679, 2, 1, "", "get_metadata_routing"], [679, 2, 1, "", "get_params"], [679, 2, 1, "", "predict"], [679, 2, 1, "", "score"], [679, 2, 1, "", "set_params"], [679, 2, 1, "", "set_score_request"]], "sklearn.linear_model.TweedieRegressor": [[680, 2, 1, "", "fit"], [680, 2, 1, "", "get_metadata_routing"], [680, 2, 1, "", "get_params"], [680, 2, 1, "", "predict"], [680, 2, 1, "", "score"], [680, 2, 1, "", "set_fit_request"], [680, 2, 1, "", "set_params"], [680, 2, 1, "", "set_score_request"]], "sklearn.manifold": [[688, 1, 1, "", "Isomap"], [689, 1, 1, "", "LocallyLinearEmbedding"], [690, 1, 1, "", "MDS"], [691, 1, 1, "", "SpectralEmbedding"], [692, 1, 1, "", "TSNE"], [693, 3, 1, "", "locally_linear_embedding"], [694, 3, 1, "", "smacof"], [695, 3, 1, "", "spectral_embedding"], [696, 3, 1, "", "trustworthiness"]], "sklearn.manifold.Isomap": [[688, 2, 1, "", "fit"], [688, 2, 1, "", "fit_transform"], [688, 2, 1, "", "get_feature_names_out"], [688, 2, 1, "", "get_metadata_routing"], [688, 2, 1, "", "get_params"], [688, 2, 1, "", "reconstruction_error"], [688, 2, 1, "", "set_output"], [688, 2, 1, "", "set_params"], [688, 2, 1, "", "transform"]], "sklearn.manifold.LocallyLinearEmbedding": [[689, 2, 1, "", "fit"], [689, 2, 1, "", "fit_transform"], [689, 2, 1, "", "get_feature_names_out"], [689, 2, 1, "", "get_metadata_routing"], [689, 2, 1, "", "get_params"], [689, 2, 1, "", "set_output"], [689, 2, 1, "", "set_params"], [689, 2, 1, "", "transform"]], "sklearn.manifold.MDS": [[690, 2, 1, "", "fit"], [690, 2, 1, "", "fit_transform"], [690, 2, 1, "", "get_metadata_routing"], [690, 2, 1, "", "get_params"], [690, 2, 1, "", "set_fit_request"], [690, 2, 1, "", "set_params"]], "sklearn.manifold.SpectralEmbedding": [[691, 2, 1, "", "fit"], [691, 2, 1, "", "fit_transform"], [691, 2, 1, "", "get_metadata_routing"], [691, 2, 1, "", "get_params"], [691, 2, 1, "", "set_params"]], "sklearn.manifold.TSNE": [[692, 2, 1, "", "fit"], [692, 2, 1, "", "fit_transform"], [692, 2, 1, "", "get_feature_names_out"], [692, 2, 1, "", "get_metadata_routing"], [692, 2, 1, "", "get_params"], [692, 2, 1, "", "set_output"], [692, 2, 1, "", "set_params"]], "sklearn.metrics": [[697, 1, 1, "", "ConfusionMatrixDisplay"], [698, 1, 1, "", "DetCurveDisplay"], [699, 1, 1, "", "DistanceMetric"], [700, 1, 1, "", "PrecisionRecallDisplay"], [701, 1, 1, "", "PredictionErrorDisplay"], [702, 1, 1, "", "RocCurveDisplay"], [703, 3, 1, "", "accuracy_score"], [704, 3, 1, "", "adjusted_mutual_info_score"], [705, 3, 1, "", "adjusted_rand_score"], [706, 3, 1, "", "auc"], [707, 3, 1, "", "average_precision_score"], [708, 3, 1, "", "balanced_accuracy_score"], [709, 3, 1, "", "brier_score_loss"], [710, 3, 1, "", "calinski_harabasz_score"], [711, 3, 1, "", "check_scoring"], [712, 3, 1, "", "class_likelihood_ratios"], [713, 3, 1, "", "classification_report"], [27, 0, 0, "-", "cluster"], [716, 3, 1, "", "cohen_kappa_score"], [717, 3, 1, "", "completeness_score"], [718, 3, 1, "", "confusion_matrix"], [719, 3, 1, "", "consensus_score"], [720, 3, 1, "", "coverage_error"], [721, 3, 1, "", "d2_absolute_error_score"], [722, 3, 1, "", "d2_log_loss_score"], [723, 3, 1, "", "d2_pinball_score"], [724, 3, 1, "", "d2_tweedie_score"], [725, 3, 1, "", "davies_bouldin_score"], [726, 3, 1, "", "dcg_score"], [727, 3, 1, "", "det_curve"], [728, 3, 1, "", "explained_variance_score"], [729, 3, 1, "", "f1_score"], [730, 3, 1, "", "fbeta_score"], [731, 3, 1, "", "fowlkes_mallows_score"], [732, 3, 1, "", "get_scorer"], [733, 3, 1, "", "get_scorer_names"], [734, 3, 1, "", "hamming_loss"], [735, 3, 1, "", "hinge_loss"], [736, 3, 1, "", "homogeneity_completeness_v_measure"], [737, 3, 1, "", "homogeneity_score"], [738, 3, 1, "", "jaccard_score"], [739, 3, 1, "", "label_ranking_average_precision_score"], [740, 3, 1, "", "label_ranking_loss"], [741, 3, 1, "", "log_loss"], [742, 3, 1, "", "make_scorer"], [743, 3, 1, "", "matthews_corrcoef"], [744, 3, 1, "", "max_error"], [745, 3, 1, "", "mean_absolute_error"], [746, 3, 1, "", "mean_absolute_percentage_error"], [747, 3, 1, "", "mean_gamma_deviance"], [748, 3, 1, "", "mean_pinball_loss"], [749, 3, 1, "", "mean_poisson_deviance"], [750, 3, 1, "", "mean_squared_error"], [751, 3, 1, "", "mean_squared_log_error"], [752, 3, 1, "", "mean_tweedie_deviance"], [753, 3, 1, "", "median_absolute_error"], [754, 3, 1, "", "multilabel_confusion_matrix"], [755, 3, 1, "", "mutual_info_score"], [756, 3, 1, "", "ndcg_score"], [757, 3, 1, "", "normalized_mutual_info_score"], [27, 0, 0, "-", "pairwise"], [778, 3, 1, "", "pairwise_distances"], [779, 3, 1, "", "pairwise_distances_argmin"], [780, 3, 1, "", "pairwise_distances_argmin_min"], [781, 3, 1, "", "pairwise_distances_chunked"], [782, 3, 1, "", "precision_recall_curve"], [783, 3, 1, "", "precision_recall_fscore_support"], [784, 3, 1, "", "precision_score"], [785, 3, 1, "", "r2_score"], [786, 3, 1, "", "rand_score"], [787, 3, 1, "", "recall_score"], [788, 3, 1, "", "roc_auc_score"], [789, 3, 1, "", "roc_curve"], [790, 3, 1, "", "root_mean_squared_error"], [791, 3, 1, "", "root_mean_squared_log_error"], [792, 3, 1, "", "silhouette_samples"], [793, 3, 1, "", "silhouette_score"], [794, 3, 1, "", "top_k_accuracy_score"], [795, 3, 1, "", "v_measure_score"], [796, 3, 1, "", "zero_one_loss"]], "sklearn.metrics.ConfusionMatrixDisplay": [[697, 2, 1, "", "from_estimator"], [697, 2, 1, "", "from_predictions"], [697, 2, 1, "", "plot"]], "sklearn.metrics.DetCurveDisplay": [[698, 2, 1, "", "from_estimator"], [698, 2, 1, "", "from_predictions"], [698, 2, 1, "", "plot"]], "sklearn.metrics.DistanceMetric": [[699, 2, 1, "", "get_metric"]], "sklearn.metrics.PrecisionRecallDisplay": [[700, 2, 1, "", "from_estimator"], [700, 2, 1, "", "from_predictions"], [700, 2, 1, "", "plot"]], "sklearn.metrics.PredictionErrorDisplay": [[701, 2, 1, "", "from_estimator"], [701, 2, 1, "", "from_predictions"], [701, 2, 1, "", "plot"]], "sklearn.metrics.RocCurveDisplay": [[702, 2, 1, "", "from_cv_results"], [702, 2, 1, "", "from_estimator"], [702, 2, 1, "", "from_predictions"], [702, 2, 1, "", "plot"]], "sklearn.metrics.cluster": [[714, 3, 1, "", "contingency_matrix"], [715, 3, 1, "", "pair_confusion_matrix"]], "sklearn.metrics.pairwise": [[758, 3, 1, "", "additive_chi2_kernel"], [759, 3, 1, "", "chi2_kernel"], [760, 3, 1, "", "cosine_distances"], [761, 3, 1, "", "cosine_similarity"], [762, 3, 1, "", "distance_metrics"], [763, 3, 1, "", "euclidean_distances"], [764, 3, 1, "", "haversine_distances"], [765, 3, 1, "", "kernel_metrics"], [766, 3, 1, "", "laplacian_kernel"], [767, 3, 1, "", "linear_kernel"], [768, 3, 1, "", "manhattan_distances"], [769, 3, 1, "", "nan_euclidean_distances"], [770, 3, 1, "", "paired_cosine_distances"], [771, 3, 1, "", "paired_distances"], [772, 3, 1, "", "paired_euclidean_distances"], [773, 3, 1, "", "paired_manhattan_distances"], [774, 3, 1, "", "pairwise_kernels"], [775, 3, 1, "", "polynomial_kernel"], [776, 3, 1, "", "rbf_kernel"], [777, 3, 1, "", "sigmoid_kernel"]], "sklearn.mixture": [[797, 1, 1, "", "BayesianGaussianMixture"], [798, 1, 1, "", "GaussianMixture"]], "sklearn.mixture.BayesianGaussianMixture": [[797, 2, 1, "", "fit"], [797, 2, 1, "", "fit_predict"], [797, 2, 1, "", "get_metadata_routing"], [797, 2, 1, "", "get_params"], [797, 2, 1, "", "predict"], [797, 2, 1, "", "predict_proba"], [797, 2, 1, "", "sample"], [797, 2, 1, "", "score"], [797, 2, 1, "", "score_samples"], [797, 2, 1, "", "set_params"]], "sklearn.mixture.GaussianMixture": [[798, 2, 1, "", "aic"], [798, 2, 1, "", "bic"], [798, 2, 1, "", "fit"], [798, 2, 1, "", "fit_predict"], [798, 2, 1, "", "get_metadata_routing"], [798, 2, 1, "", "get_params"], [798, 2, 1, "", "predict"], [798, 2, 1, "", "predict_proba"], [798, 2, 1, "", "sample"], [798, 2, 1, "", "score"], [798, 2, 1, "", "score_samples"], [798, 2, 1, "", "set_params"]], "sklearn.model_selection": [[799, 1, 1, "", "FixedThresholdClassifier"], [800, 1, 1, "", "GridSearchCV"], [801, 1, 1, "", "GroupKFold"], [802, 1, 1, "", "GroupShuffleSplit"], [803, 1, 1, "", "HalvingGridSearchCV"], [804, 1, 1, "", "HalvingRandomSearchCV"], [805, 1, 1, "", "KFold"], [806, 1, 1, "", "LearningCurveDisplay"], [807, 1, 1, "", "LeaveOneGroupOut"], [808, 1, 1, "", "LeaveOneOut"], [809, 1, 1, "", "LeavePGroupsOut"], [810, 1, 1, "", "LeavePOut"], [811, 1, 1, "", "ParameterGrid"], [812, 1, 1, "", "ParameterSampler"], [813, 1, 1, "", "PredefinedSplit"], [814, 1, 1, "", "RandomizedSearchCV"], [815, 1, 1, "", "RepeatedKFold"], [816, 1, 1, "", "RepeatedStratifiedKFold"], [817, 1, 1, "", "ShuffleSplit"], [818, 1, 1, "", "StratifiedGroupKFold"], [819, 1, 1, "", "StratifiedKFold"], [820, 1, 1, "", "StratifiedShuffleSplit"], [821, 1, 1, "", "TimeSeriesSplit"], [822, 1, 1, "", "TunedThresholdClassifierCV"], [823, 1, 1, "", "ValidationCurveDisplay"], [824, 3, 1, "", "check_cv"], [825, 3, 1, "", "cross_val_predict"], [826, 3, 1, "", "cross_val_score"], [827, 3, 1, "", "cross_validate"], [828, 3, 1, "", "learning_curve"], [829, 3, 1, "", "permutation_test_score"], [830, 3, 1, "", "train_test_split"], [831, 3, 1, "", "validation_curve"]], "sklearn.model_selection.FixedThresholdClassifier": [[799, 2, 1, "", "decision_function"], [799, 2, 1, "", "fit"], [799, 2, 1, "", "get_metadata_routing"], [799, 2, 1, "", "get_params"], [799, 2, 1, "", "predict"], [799, 2, 1, "", "predict_log_proba"], [799, 2, 1, "", "predict_proba"], [799, 2, 1, "", "score"], [799, 2, 1, "", "set_params"], [799, 2, 1, "", "set_score_request"]], "sklearn.model_selection.GridSearchCV": [[800, 2, 1, "", "decision_function"], [800, 2, 1, "", "fit"], [800, 2, 1, "", "get_metadata_routing"], [800, 2, 1, "", "get_params"], [800, 2, 1, "", "inverse_transform"], [800, 2, 1, "", "predict"], [800, 2, 1, "", "predict_log_proba"], [800, 2, 1, "", "predict_proba"], [800, 2, 1, "", "score"], [800, 2, 1, "", "score_samples"], [800, 2, 1, "", "set_params"], [800, 2, 1, "", "transform"]], "sklearn.model_selection.GroupKFold": [[801, 2, 1, "", "get_metadata_routing"], [801, 2, 1, "", "get_n_splits"], [801, 2, 1, "", "set_split_request"], [801, 2, 1, "", "split"]], "sklearn.model_selection.GroupShuffleSplit": [[802, 2, 1, "", "get_metadata_routing"], [802, 2, 1, "", "get_n_splits"], [802, 2, 1, "", "set_split_request"], [802, 2, 1, "", "split"]], "sklearn.model_selection.HalvingGridSearchCV": [[803, 2, 1, "", "decision_function"], [803, 2, 1, "", "fit"], [803, 2, 1, "", "get_metadata_routing"], [803, 2, 1, "", "get_params"], [803, 2, 1, "", "inverse_transform"], [803, 2, 1, "", "predict"], [803, 2, 1, "", "predict_log_proba"], [803, 2, 1, "", "predict_proba"], [803, 2, 1, "", "score"], [803, 2, 1, "", "score_samples"], [803, 2, 1, "", "set_params"], [803, 2, 1, "", "transform"]], "sklearn.model_selection.HalvingRandomSearchCV": [[804, 2, 1, "", "decision_function"], [804, 2, 1, "", "fit"], [804, 2, 1, "", "get_metadata_routing"], [804, 2, 1, "", "get_params"], [804, 2, 1, "", "inverse_transform"], [804, 2, 1, "", "predict"], [804, 2, 1, "", "predict_log_proba"], [804, 2, 1, "", "predict_proba"], [804, 2, 1, "", "score"], [804, 2, 1, "", "score_samples"], [804, 2, 1, "", "set_params"], [804, 2, 1, "", "transform"]], "sklearn.model_selection.KFold": [[805, 2, 1, "", "get_metadata_routing"], [805, 2, 1, "", "get_n_splits"], [805, 2, 1, "", "split"]], "sklearn.model_selection.LearningCurveDisplay": [[806, 2, 1, "", "from_estimator"], [806, 2, 1, "", "plot"]], "sklearn.model_selection.LeaveOneGroupOut": [[807, 2, 1, "", "get_metadata_routing"], [807, 2, 1, "", "get_n_splits"], [807, 2, 1, "", "set_split_request"], [807, 2, 1, "", "split"]], "sklearn.model_selection.LeaveOneOut": [[808, 2, 1, "", "get_metadata_routing"], [808, 2, 1, "", "get_n_splits"], [808, 2, 1, "", "split"]], "sklearn.model_selection.LeavePGroupsOut": [[809, 2, 1, "", "get_metadata_routing"], [809, 2, 1, "", "get_n_splits"], [809, 2, 1, "", "set_split_request"], [809, 2, 1, "", "split"]], "sklearn.model_selection.LeavePOut": [[810, 2, 1, "", "get_metadata_routing"], [810, 2, 1, "", "get_n_splits"], [810, 2, 1, "", "split"]], "sklearn.model_selection.PredefinedSplit": [[813, 2, 1, "", "get_metadata_routing"], [813, 2, 1, "", "get_n_splits"], [813, 2, 1, "", "split"]], "sklearn.model_selection.RandomizedSearchCV": [[814, 2, 1, "", "decision_function"], [814, 2, 1, "", "fit"], [814, 2, 1, "", "get_metadata_routing"], [814, 2, 1, "", "get_params"], [814, 2, 1, "", "inverse_transform"], [814, 2, 1, "", "predict"], [814, 2, 1, "", "predict_log_proba"], [814, 2, 1, "", "predict_proba"], [814, 2, 1, "", "score"], [814, 2, 1, "", "score_samples"], [814, 2, 1, "", "set_params"], [814, 2, 1, "", "transform"]], "sklearn.model_selection.RepeatedKFold": [[815, 2, 1, "", "get_metadata_routing"], [815, 2, 1, "", "get_n_splits"], [815, 2, 1, "", "split"]], "sklearn.model_selection.RepeatedStratifiedKFold": [[816, 2, 1, "", "get_metadata_routing"], [816, 2, 1, "", "get_n_splits"], [816, 2, 1, "", "split"]], "sklearn.model_selection.ShuffleSplit": [[817, 2, 1, "", "get_metadata_routing"], [817, 2, 1, "", "get_n_splits"], [817, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedGroupKFold": [[818, 2, 1, "", "get_metadata_routing"], [818, 2, 1, "", "get_n_splits"], [818, 2, 1, "", "set_split_request"], [818, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedKFold": [[819, 2, 1, "", "get_metadata_routing"], [819, 2, 1, "", "get_n_splits"], [819, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedShuffleSplit": [[820, 2, 1, "", "get_metadata_routing"], [820, 2, 1, "", "get_n_splits"], [820, 2, 1, "", "split"]], "sklearn.model_selection.TimeSeriesSplit": [[821, 2, 1, "", "get_metadata_routing"], [821, 2, 1, "", "get_n_splits"], [821, 2, 1, "", "split"]], "sklearn.model_selection.TunedThresholdClassifierCV": [[822, 2, 1, "", "decision_function"], [822, 2, 1, "", "fit"], [822, 2, 1, "", "get_metadata_routing"], [822, 2, 1, "", "get_params"], [822, 2, 1, "", "predict"], [822, 2, 1, "", "predict_log_proba"], [822, 2, 1, "", "predict_proba"], [822, 2, 1, "", "score"], [822, 2, 1, "", "set_params"], [822, 2, 1, "", "set_score_request"]], "sklearn.model_selection.ValidationCurveDisplay": [[823, 2, 1, "", "from_estimator"], [823, 2, 1, "", "plot"]], "sklearn.multiclass": [[832, 1, 1, "", "OneVsOneClassifier"], [833, 1, 1, "", "OneVsRestClassifier"], [834, 1, 1, "", "OutputCodeClassifier"]], "sklearn.multiclass.OneVsOneClassifier": [[832, 2, 1, "", "decision_function"], [832, 2, 1, "", "fit"], [832, 2, 1, "", "get_metadata_routing"], [832, 2, 1, "", "get_params"], [832, 2, 1, "", "partial_fit"], [832, 2, 1, "", "predict"], [832, 2, 1, "", "score"], [832, 2, 1, "", "set_params"], [832, 2, 1, "", "set_partial_fit_request"], [832, 2, 1, "", "set_score_request"]], "sklearn.multiclass.OneVsRestClassifier": [[833, 2, 1, "", "decision_function"], [833, 2, 1, "", "fit"], [833, 2, 1, "", "get_metadata_routing"], [833, 2, 1, "", "get_params"], [833, 2, 1, "", "partial_fit"], [833, 2, 1, "", "predict"], [833, 2, 1, "", "predict_proba"], [833, 2, 1, "", "score"], [833, 2, 1, "", "set_params"], [833, 2, 1, "", "set_partial_fit_request"], [833, 2, 1, "", "set_score_request"]], "sklearn.multiclass.OutputCodeClassifier": [[834, 2, 1, "", "fit"], [834, 2, 1, "", "get_metadata_routing"], [834, 2, 1, "", "get_params"], [834, 2, 1, "", "predict"], [834, 2, 1, "", "score"], [834, 2, 1, "", "set_params"], [834, 2, 1, "", "set_score_request"]], "sklearn.multioutput": [[835, 1, 1, "", "ClassifierChain"], [836, 1, 1, "", "MultiOutputClassifier"], [837, 1, 1, "", "MultiOutputRegressor"], [838, 1, 1, "", "RegressorChain"]], "sklearn.multioutput.ClassifierChain": [[835, 2, 1, "", "decision_function"], [835, 2, 1, "", "fit"], [835, 2, 1, "", "get_metadata_routing"], [835, 2, 1, "", "get_params"], [835, 2, 1, "", "predict"], [835, 2, 1, "", "predict_log_proba"], [835, 2, 1, "", "predict_proba"], [835, 2, 1, "", "score"], [835, 2, 1, "", "set_params"], [835, 2, 1, "", "set_score_request"]], "sklearn.multioutput.MultiOutputClassifier": [[836, 2, 1, "", "fit"], [836, 2, 1, "", "get_metadata_routing"], [836, 2, 1, "", "get_params"], [836, 2, 1, "", "partial_fit"], [836, 2, 1, "", "predict"], [836, 2, 1, "", "predict_proba"], [836, 2, 1, "", "score"], [836, 2, 1, "", "set_fit_request"], [836, 2, 1, "", "set_params"], [836, 2, 1, "", "set_partial_fit_request"]], "sklearn.multioutput.MultiOutputRegressor": [[837, 2, 1, "", "fit"], [837, 2, 1, "", "get_metadata_routing"], [837, 2, 1, "", "get_params"], [837, 2, 1, "", "partial_fit"], [837, 2, 1, "", "predict"], [837, 2, 1, "", "score"], [837, 2, 1, "", "set_fit_request"], [837, 2, 1, "", "set_params"], [837, 2, 1, "", "set_partial_fit_request"], [837, 2, 1, "", "set_score_request"]], "sklearn.multioutput.RegressorChain": [[838, 2, 1, "", "fit"], [838, 2, 1, "", "get_metadata_routing"], [838, 2, 1, "", "get_params"], [838, 2, 1, "", "predict"], [838, 2, 1, "", "score"], [838, 2, 1, "", "set_params"], [838, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes": [[839, 1, 1, "", "BernoulliNB"], [840, 1, 1, "", "CategoricalNB"], [841, 1, 1, "", "ComplementNB"], [842, 1, 1, "", "GaussianNB"], [843, 1, 1, "", "MultinomialNB"]], "sklearn.naive_bayes.BernoulliNB": [[839, 2, 1, "", "fit"], [839, 2, 1, "", "get_metadata_routing"], [839, 2, 1, "", "get_params"], [839, 2, 1, "", "partial_fit"], [839, 2, 1, "", "predict"], [839, 2, 1, "", "predict_joint_log_proba"], [839, 2, 1, "", "predict_log_proba"], [839, 2, 1, "", "predict_proba"], [839, 2, 1, "", "score"], [839, 2, 1, "", "set_fit_request"], [839, 2, 1, "", "set_params"], [839, 2, 1, "", "set_partial_fit_request"], [839, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.CategoricalNB": [[840, 2, 1, "", "fit"], [840, 2, 1, "", "get_metadata_routing"], [840, 2, 1, "", "get_params"], [840, 2, 1, "", "partial_fit"], [840, 2, 1, "", "predict"], [840, 2, 1, "", "predict_joint_log_proba"], [840, 2, 1, "", "predict_log_proba"], [840, 2, 1, "", "predict_proba"], [840, 2, 1, "", "score"], [840, 2, 1, "", "set_fit_request"], [840, 2, 1, "", "set_params"], [840, 2, 1, "", "set_partial_fit_request"], [840, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.ComplementNB": [[841, 2, 1, "", "fit"], [841, 2, 1, "", "get_metadata_routing"], [841, 2, 1, "", "get_params"], [841, 2, 1, "", "partial_fit"], [841, 2, 1, "", "predict"], [841, 2, 1, "", "predict_joint_log_proba"], [841, 2, 1, "", "predict_log_proba"], [841, 2, 1, "", "predict_proba"], [841, 2, 1, "", "score"], [841, 2, 1, "", "set_fit_request"], [841, 2, 1, "", "set_params"], [841, 2, 1, "", "set_partial_fit_request"], [841, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.GaussianNB": [[842, 2, 1, "", "fit"], [842, 2, 1, "", "get_metadata_routing"], [842, 2, 1, "", "get_params"], [842, 2, 1, "", "partial_fit"], [842, 2, 1, "", "predict"], [842, 2, 1, "", "predict_joint_log_proba"], [842, 2, 1, "", "predict_log_proba"], [842, 2, 1, "", "predict_proba"], [842, 2, 1, "", "score"], [842, 2, 1, "", "set_fit_request"], [842, 2, 1, "", "set_params"], [842, 2, 1, "", "set_partial_fit_request"], [842, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.MultinomialNB": [[843, 2, 1, "", "fit"], [843, 2, 1, "", "get_metadata_routing"], [843, 2, 1, "", "get_params"], [843, 2, 1, "", "partial_fit"], [843, 2, 1, "", "predict"], [843, 2, 1, "", "predict_joint_log_proba"], [843, 2, 1, "", "predict_log_proba"], [843, 2, 1, "", "predict_proba"], [843, 2, 1, "", "score"], [843, 2, 1, "", "set_fit_request"], [843, 2, 1, "", "set_params"], [843, 2, 1, "", "set_partial_fit_request"], [843, 2, 1, "", "set_score_request"]], "sklearn.neighbors": [[844, 1, 1, "", "BallTree"], [845, 1, 1, "", "KDTree"], [846, 1, 1, "", "KNeighborsClassifier"], [847, 1, 1, "", "KNeighborsRegressor"], [848, 1, 1, "", "KNeighborsTransformer"], [849, 1, 1, "", "KernelDensity"], [850, 1, 1, "", "LocalOutlierFactor"], [851, 1, 1, "", "NearestCentroid"], [852, 1, 1, "", "NearestNeighbors"], [853, 1, 1, "", "NeighborhoodComponentsAnalysis"], [854, 1, 1, "", "RadiusNeighborsClassifier"], [855, 1, 1, "", "RadiusNeighborsRegressor"], [856, 1, 1, "", "RadiusNeighborsTransformer"], [857, 3, 1, "", "kneighbors_graph"], [858, 3, 1, "", "radius_neighbors_graph"], [859, 3, 1, "", "sort_graph_by_row_values"]], "sklearn.neighbors.BallTree": [[844, 2, 1, "", "get_arrays"], [844, 2, 1, "", "get_n_calls"], [844, 2, 1, "", "get_tree_stats"], [844, 2, 1, "", "kernel_density"], [844, 2, 1, "", "query"], [844, 2, 1, "", "query_radius"], [844, 2, 1, "", "reset_n_calls"], [844, 2, 1, "", "two_point_correlation"]], "sklearn.neighbors.KDTree": [[845, 2, 1, "", "get_arrays"], [845, 2, 1, "", "get_n_calls"], [845, 2, 1, "", "get_tree_stats"], [845, 2, 1, "", "kernel_density"], [845, 2, 1, "", "query"], [845, 2, 1, "", "query_radius"], [845, 2, 1, "", "reset_n_calls"], [845, 2, 1, "", "two_point_correlation"]], "sklearn.neighbors.KNeighborsClassifier": [[846, 2, 1, "", "fit"], [846, 2, 1, "", "get_metadata_routing"], [846, 2, 1, "", "get_params"], [846, 2, 1, "", "kneighbors"], [846, 2, 1, "", "kneighbors_graph"], [846, 2, 1, "", "predict"], [846, 2, 1, "", "predict_proba"], [846, 2, 1, "", "score"], [846, 2, 1, "", "set_params"], [846, 2, 1, "", "set_score_request"]], "sklearn.neighbors.KNeighborsRegressor": [[847, 2, 1, "", "fit"], [847, 2, 1, "", "get_metadata_routing"], [847, 2, 1, "", "get_params"], [847, 2, 1, "", "kneighbors"], [847, 2, 1, "", "kneighbors_graph"], [847, 2, 1, "", "predict"], [847, 2, 1, "", "score"], [847, 2, 1, "", "set_params"], [847, 2, 1, "", "set_score_request"]], "sklearn.neighbors.KNeighborsTransformer": [[848, 2, 1, "", "fit"], [848, 2, 1, "", "fit_transform"], [848, 2, 1, "", "get_feature_names_out"], [848, 2, 1, "", "get_metadata_routing"], [848, 2, 1, "", "get_params"], [848, 2, 1, "", "kneighbors"], [848, 2, 1, "", "kneighbors_graph"], [848, 2, 1, "", "set_output"], [848, 2, 1, "", "set_params"], [848, 2, 1, "", "transform"]], "sklearn.neighbors.KernelDensity": [[849, 2, 1, "", "fit"], [849, 2, 1, "", "get_metadata_routing"], [849, 2, 1, "", "get_params"], [849, 2, 1, "", "sample"], [849, 2, 1, "", "score"], [849, 2, 1, "", "score_samples"], [849, 2, 1, "", "set_fit_request"], [849, 2, 1, "", "set_params"]], "sklearn.neighbors.LocalOutlierFactor": [[850, 2, 1, "", "decision_function"], [850, 2, 1, "", "fit"], [850, 2, 1, "", "fit_predict"], [850, 2, 1, "", "get_metadata_routing"], [850, 2, 1, "", "get_params"], [850, 2, 1, "", "kneighbors"], [850, 2, 1, "", "kneighbors_graph"], [850, 2, 1, "", "predict"], [850, 2, 1, "", "score_samples"], [850, 2, 1, "", "set_params"]], "sklearn.neighbors.NearestCentroid": [[851, 2, 1, "", "decision_function"], [851, 2, 1, "", "fit"], [851, 2, 1, "", "get_metadata_routing"], [851, 2, 1, "", "get_params"], [851, 2, 1, "", "predict"], [851, 2, 1, "", "predict_log_proba"], [851, 2, 1, "", "predict_proba"], [851, 2, 1, "", "score"], [851, 2, 1, "", "set_params"], [851, 2, 1, "", "set_score_request"]], "sklearn.neighbors.NearestNeighbors": [[852, 2, 1, "", "fit"], [852, 2, 1, "", "get_metadata_routing"], [852, 2, 1, "", "get_params"], [852, 2, 1, "", "kneighbors"], [852, 2, 1, "", "kneighbors_graph"], [852, 2, 1, "", "radius_neighbors"], [852, 2, 1, "", "radius_neighbors_graph"], [852, 2, 1, "", "set_params"]], "sklearn.neighbors.NeighborhoodComponentsAnalysis": [[853, 2, 1, "", "fit"], [853, 2, 1, "", "fit_transform"], [853, 2, 1, "", "get_feature_names_out"], [853, 2, 1, "", "get_metadata_routing"], [853, 2, 1, "", "get_params"], [853, 2, 1, "", "set_output"], [853, 2, 1, "", "set_params"], [853, 2, 1, "", "transform"]], "sklearn.neighbors.RadiusNeighborsClassifier": [[854, 2, 1, "", "fit"], [854, 2, 1, "", "get_metadata_routing"], [854, 2, 1, "", "get_params"], [854, 2, 1, "", "predict"], [854, 2, 1, "", "predict_proba"], [854, 2, 1, "", "radius_neighbors"], [854, 2, 1, "", "radius_neighbors_graph"], [854, 2, 1, "", "score"], [854, 2, 1, "", "set_params"], [854, 2, 1, "", "set_score_request"]], "sklearn.neighbors.RadiusNeighborsRegressor": [[855, 2, 1, "", "fit"], [855, 2, 1, "", "get_metadata_routing"], [855, 2, 1, "", "get_params"], [855, 2, 1, "", "predict"], [855, 2, 1, "", "radius_neighbors"], [855, 2, 1, "", "radius_neighbors_graph"], [855, 2, 1, "", "score"], [855, 2, 1, "", "set_params"], [855, 2, 1, "", "set_score_request"]], "sklearn.neighbors.RadiusNeighborsTransformer": [[856, 2, 1, "", "fit"], [856, 2, 1, "", "fit_transform"], [856, 2, 1, "", "get_feature_names_out"], [856, 2, 1, "", "get_metadata_routing"], [856, 2, 1, "", "get_params"], [856, 2, 1, "", "radius_neighbors"], [856, 2, 1, "", "radius_neighbors_graph"], [856, 2, 1, "", "set_output"], [856, 2, 1, "", "set_params"], [856, 2, 1, "", "transform"]], "sklearn.neural_network": [[860, 1, 1, "", "BernoulliRBM"], [861, 1, 1, "", "MLPClassifier"], [862, 1, 1, "", "MLPRegressor"]], "sklearn.neural_network.BernoulliRBM": [[860, 2, 1, "", "fit"], [860, 2, 1, "", "fit_transform"], [860, 2, 1, "", "get_feature_names_out"], [860, 2, 1, "", "get_metadata_routing"], [860, 2, 1, "", "get_params"], [860, 2, 1, "", "gibbs"], [860, 2, 1, "", "partial_fit"], [860, 2, 1, "", "score_samples"], [860, 2, 1, "", "set_output"], [860, 2, 1, "", "set_params"], [860, 2, 1, "", "transform"]], "sklearn.neural_network.MLPClassifier": [[861, 2, 1, "", "fit"], [861, 2, 1, "", "get_metadata_routing"], [861, 2, 1, "", "get_params"], [861, 2, 1, "", "partial_fit"], [861, 2, 1, "", "predict"], [861, 2, 1, "", "predict_log_proba"], [861, 2, 1, "", "predict_proba"], [861, 2, 1, "", "score"], [861, 2, 1, "", "set_fit_request"], [861, 2, 1, "", "set_params"], [861, 2, 1, "", "set_partial_fit_request"], [861, 2, 1, "", "set_score_request"]], "sklearn.neural_network.MLPRegressor": [[862, 2, 1, "", "fit"], [862, 2, 1, "", "get_metadata_routing"], [862, 2, 1, "", "get_params"], [862, 2, 1, "", "partial_fit"], [862, 2, 1, "", "predict"], [862, 2, 1, "", "score"], [862, 2, 1, "", "set_fit_request"], [862, 2, 1, "", "set_params"], [862, 2, 1, "", "set_partial_fit_request"], [862, 2, 1, "", "set_score_request"]], "sklearn.pipeline": [[863, 1, 1, "", "FeatureUnion"], [864, 1, 1, "", "Pipeline"], [865, 3, 1, "", "make_pipeline"], [866, 3, 1, "", "make_union"]], "sklearn.pipeline.FeatureUnion": [[863, 2, 1, "", "fit"], [863, 2, 1, "", "fit_transform"], [863, 2, 1, "", "get_feature_names_out"], [863, 2, 1, "", "get_metadata_routing"], [863, 2, 1, "", "get_params"], [863, 2, 1, "", "set_output"], [863, 2, 1, "", "set_params"], [863, 2, 1, "", "transform"]], "sklearn.pipeline.Pipeline": [[864, 2, 1, "", "decision_function"], [864, 2, 1, "", "fit"], [864, 2, 1, "", "fit_predict"], [864, 2, 1, "", "fit_transform"], [864, 2, 1, "", "get_feature_names_out"], [864, 2, 1, "", "get_metadata_routing"], [864, 2, 1, "", "get_params"], [864, 2, 1, "", "inverse_transform"], [864, 4, 1, "", "named_steps"], [864, 2, 1, "", "predict"], [864, 2, 1, "", "predict_log_proba"], [864, 2, 1, "", "predict_proba"], [864, 2, 1, "", "score"], [864, 2, 1, "", "score_samples"], [864, 2, 1, "", "set_output"], [864, 2, 1, "", "set_params"], [864, 2, 1, "", "set_score_request"], [864, 2, 1, "", "transform"]], "sklearn.preprocessing": [[867, 1, 1, "", "Binarizer"], [868, 1, 1, "", "FunctionTransformer"], [869, 1, 1, "", "KBinsDiscretizer"], [870, 1, 1, "", "KernelCenterer"], [871, 1, 1, "", "LabelBinarizer"], [872, 1, 1, "", "LabelEncoder"], [873, 1, 1, "", "MaxAbsScaler"], [874, 1, 1, "", "MinMaxScaler"], [875, 1, 1, "", "MultiLabelBinarizer"], [876, 1, 1, "", "Normalizer"], [877, 1, 1, "", "OneHotEncoder"], [878, 1, 1, "", "OrdinalEncoder"], [879, 1, 1, "", "PolynomialFeatures"], [880, 1, 1, "", "PowerTransformer"], [881, 1, 1, "", "QuantileTransformer"], [882, 1, 1, "", "RobustScaler"], [883, 1, 1, "", "SplineTransformer"], [884, 1, 1, "", "StandardScaler"], [885, 1, 1, "", "TargetEncoder"], [886, 3, 1, "", "add_dummy_feature"], [887, 3, 1, "", "binarize"], [888, 3, 1, "", "label_binarize"], [889, 3, 1, "", "maxabs_scale"], [890, 3, 1, "", "minmax_scale"], [891, 3, 1, "", "normalize"], [892, 3, 1, "", "power_transform"], [893, 3, 1, "", "quantile_transform"], [894, 3, 1, "", "robust_scale"], [895, 3, 1, "", "scale"]], "sklearn.preprocessing.Binarizer": [[867, 2, 1, "", "fit"], [867, 2, 1, "", "fit_transform"], [867, 2, 1, "", "get_feature_names_out"], [867, 2, 1, "", "get_metadata_routing"], [867, 2, 1, "", "get_params"], [867, 2, 1, "", "set_output"], [867, 2, 1, "", "set_params"], [867, 2, 1, "", "set_transform_request"], [867, 2, 1, "", "transform"]], "sklearn.preprocessing.FunctionTransformer": [[868, 2, 1, "", "fit"], [868, 2, 1, "", "fit_transform"], [868, 2, 1, "", "get_feature_names_out"], [868, 2, 1, "", "get_metadata_routing"], [868, 2, 1, "", "get_params"], [868, 2, 1, "", "inverse_transform"], [868, 2, 1, "", "set_output"], [868, 2, 1, "", "set_params"], [868, 2, 1, "", "transform"]], "sklearn.preprocessing.KBinsDiscretizer": [[869, 2, 1, "", "fit"], [869, 2, 1, "", "fit_transform"], [869, 2, 1, "", "get_feature_names_out"], [869, 2, 1, "", "get_metadata_routing"], [869, 2, 1, "", "get_params"], [869, 2, 1, "", "inverse_transform"], [869, 2, 1, "", "set_fit_request"], [869, 2, 1, "", "set_output"], [869, 2, 1, "", "set_params"], [869, 2, 1, "", "transform"]], "sklearn.preprocessing.KernelCenterer": [[870, 2, 1, "", "fit"], [870, 2, 1, "", "fit_transform"], [870, 2, 1, "", "get_feature_names_out"], [870, 2, 1, "", "get_metadata_routing"], [870, 2, 1, "", "get_params"], [870, 2, 1, "", "set_output"], [870, 2, 1, "", "set_params"], [870, 2, 1, "", "set_transform_request"], [870, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelBinarizer": [[871, 2, 1, "", "fit"], [871, 2, 1, "", "fit_transform"], [871, 2, 1, "", "get_metadata_routing"], [871, 2, 1, "", "get_params"], [871, 2, 1, "", "inverse_transform"], [871, 2, 1, "", "set_inverse_transform_request"], [871, 2, 1, "", "set_output"], [871, 2, 1, "", "set_params"], [871, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelEncoder": [[872, 2, 1, "", "fit"], [872, 2, 1, "", "fit_transform"], [872, 2, 1, "", "get_metadata_routing"], [872, 2, 1, "", "get_params"], [872, 2, 1, "", "inverse_transform"], [872, 2, 1, "", "set_output"], [872, 2, 1, "", "set_params"], [872, 2, 1, "", "transform"]], "sklearn.preprocessing.MaxAbsScaler": [[873, 2, 1, "", "fit"], [873, 2, 1, "", "fit_transform"], [873, 2, 1, "", "get_feature_names_out"], [873, 2, 1, "", "get_metadata_routing"], [873, 2, 1, "", "get_params"], [873, 2, 1, "", "inverse_transform"], [873, 2, 1, "", "partial_fit"], [873, 2, 1, "", "set_output"], [873, 2, 1, "", "set_params"], [873, 2, 1, "", "transform"]], "sklearn.preprocessing.MinMaxScaler": [[874, 2, 1, "", "fit"], [874, 2, 1, "", "fit_transform"], [874, 2, 1, "", "get_feature_names_out"], [874, 2, 1, "", "get_metadata_routing"], [874, 2, 1, "", "get_params"], [874, 2, 1, "", "inverse_transform"], [874, 2, 1, "", "partial_fit"], [874, 2, 1, "", "set_output"], [874, 2, 1, "", "set_params"], [874, 2, 1, "", "transform"]], "sklearn.preprocessing.MultiLabelBinarizer": [[875, 2, 1, "", "fit"], [875, 2, 1, "", "fit_transform"], [875, 2, 1, "", "get_metadata_routing"], [875, 2, 1, "", "get_params"], [875, 2, 1, "", "inverse_transform"], [875, 2, 1, "", "set_output"], [875, 2, 1, "", "set_params"], [875, 2, 1, "", "transform"]], "sklearn.preprocessing.Normalizer": [[876, 2, 1, "", "fit"], [876, 2, 1, "", "fit_transform"], [876, 2, 1, "", "get_feature_names_out"], [876, 2, 1, "", "get_metadata_routing"], [876, 2, 1, "", "get_params"], [876, 2, 1, "", "set_output"], [876, 2, 1, "", "set_params"], [876, 2, 1, "", "set_transform_request"], [876, 2, 1, "", "transform"]], "sklearn.preprocessing.OneHotEncoder": [[877, 2, 1, "", "fit"], [877, 2, 1, "", "fit_transform"], [877, 2, 1, "", "get_feature_names_out"], [877, 2, 1, "", "get_metadata_routing"], [877, 2, 1, "", "get_params"], [877, 2, 1, "", "inverse_transform"], [877, 2, 1, "", "set_output"], [877, 2, 1, "", "set_params"], [877, 2, 1, "", "transform"]], "sklearn.preprocessing.OrdinalEncoder": [[878, 2, 1, "", "fit"], [878, 2, 1, "", "fit_transform"], [878, 2, 1, "", "get_feature_names_out"], [878, 2, 1, "", "get_metadata_routing"], [878, 2, 1, "", "get_params"], [878, 2, 1, "", "inverse_transform"], [878, 2, 1, "", "set_output"], [878, 2, 1, "", "set_params"], [878, 2, 1, "", "transform"]], "sklearn.preprocessing.PolynomialFeatures": [[879, 2, 1, "", "fit"], [879, 2, 1, "", "fit_transform"], [879, 2, 1, "", "get_feature_names_out"], [879, 2, 1, "", "get_metadata_routing"], [879, 2, 1, "", "get_params"], [879, 2, 1, "", "set_output"], [879, 2, 1, "", "set_params"], [879, 2, 1, "", "transform"]], "sklearn.preprocessing.PowerTransformer": [[880, 2, 1, "", "fit"], [880, 2, 1, "", "fit_transform"], [880, 2, 1, "", "get_feature_names_out"], [880, 2, 1, "", "get_metadata_routing"], [880, 2, 1, "", "get_params"], [880, 2, 1, "", "inverse_transform"], [880, 2, 1, "", "set_output"], [880, 2, 1, "", "set_params"], [880, 2, 1, "", "transform"]], "sklearn.preprocessing.QuantileTransformer": [[881, 2, 1, "", "fit"], [881, 2, 1, "", "fit_transform"], [881, 2, 1, "", "get_feature_names_out"], [881, 2, 1, "", "get_metadata_routing"], [881, 2, 1, "", "get_params"], [881, 2, 1, "", "inverse_transform"], [881, 2, 1, "", "set_output"], [881, 2, 1, "", "set_params"], [881, 2, 1, "", "transform"]], "sklearn.preprocessing.RobustScaler": [[882, 2, 1, "", "fit"], [882, 2, 1, "", "fit_transform"], [882, 2, 1, "", "get_feature_names_out"], [882, 2, 1, "", "get_metadata_routing"], [882, 2, 1, "", "get_params"], [882, 2, 1, "", "inverse_transform"], [882, 2, 1, "", "set_output"], [882, 2, 1, "", "set_params"], [882, 2, 1, "", "transform"]], "sklearn.preprocessing.SplineTransformer": [[883, 2, 1, "", "fit"], [883, 2, 1, "", "fit_transform"], [883, 2, 1, "", "get_feature_names_out"], [883, 2, 1, "", "get_metadata_routing"], [883, 2, 1, "", "get_params"], [883, 2, 1, "", "set_fit_request"], [883, 2, 1, "", "set_output"], [883, 2, 1, "", "set_params"], [883, 2, 1, "", "transform"]], "sklearn.preprocessing.StandardScaler": [[884, 2, 1, "", "fit"], [884, 2, 1, "", "fit_transform"], [884, 2, 1, "", "get_feature_names_out"], [884, 2, 1, "", "get_metadata_routing"], [884, 2, 1, "", "get_params"], [884, 2, 1, "", "inverse_transform"], [884, 2, 1, "", "partial_fit"], [884, 2, 1, "", "set_fit_request"], [884, 2, 1, "", "set_inverse_transform_request"], [884, 2, 1, "", "set_output"], [884, 2, 1, "", "set_params"], [884, 2, 1, "", "set_partial_fit_request"], [884, 2, 1, "", "set_transform_request"], [884, 2, 1, "", "transform"]], "sklearn.preprocessing.TargetEncoder": [[885, 2, 1, "", "fit"], [885, 2, 1, "", "fit_transform"], [885, 2, 1, "", "get_feature_names_out"], [885, 2, 1, "", "get_metadata_routing"], [885, 2, 1, "", "get_params"], [885, 2, 1, "", "set_output"], [885, 2, 1, "", "set_params"], [885, 2, 1, "", "transform"]], "sklearn.random_projection": [[896, 1, 1, "", "GaussianRandomProjection"], [897, 1, 1, "", "SparseRandomProjection"], [898, 3, 1, "", "johnson_lindenstrauss_min_dim"]], "sklearn.random_projection.GaussianRandomProjection": [[896, 2, 1, "", "fit"], [896, 2, 1, "", "fit_transform"], [896, 2, 1, "", "get_feature_names_out"], [896, 2, 1, "", "get_metadata_routing"], [896, 2, 1, "", "get_params"], [896, 2, 1, "", "inverse_transform"], [896, 2, 1, "", "set_output"], [896, 2, 1, "", "set_params"], [896, 2, 1, "", "transform"]], "sklearn.random_projection.SparseRandomProjection": [[897, 2, 1, "", "fit"], [897, 2, 1, "", "fit_transform"], [897, 2, 1, "", "get_feature_names_out"], [897, 2, 1, "", "get_metadata_routing"], [897, 2, 1, "", "get_params"], [897, 2, 1, "", "inverse_transform"], [897, 2, 1, "", "set_output"], [897, 2, 1, "", "set_params"], [897, 2, 1, "", "transform"]], "sklearn.semi_supervised": [[899, 1, 1, "", "LabelPropagation"], [900, 1, 1, "", "LabelSpreading"], [901, 1, 1, "", "SelfTrainingClassifier"]], "sklearn.semi_supervised.LabelPropagation": [[899, 2, 1, "", "fit"], [899, 2, 1, "", "get_metadata_routing"], [899, 2, 1, "", "get_params"], [899, 2, 1, "", "predict"], [899, 2, 1, "", "predict_proba"], [899, 2, 1, "", "score"], [899, 2, 1, "", "set_params"], [899, 2, 1, "", "set_score_request"]], "sklearn.semi_supervised.LabelSpreading": [[900, 2, 1, "", "fit"], [900, 2, 1, "", "get_metadata_routing"], [900, 2, 1, "", "get_params"], [900, 2, 1, "", "predict"], [900, 2, 1, "", "predict_proba"], [900, 2, 1, "", "score"], [900, 2, 1, "", "set_params"], [900, 2, 1, "", "set_score_request"]], "sklearn.semi_supervised.SelfTrainingClassifier": [[901, 2, 1, "", "decision_function"], [901, 2, 1, "", "fit"], [901, 2, 1, "", "get_metadata_routing"], [901, 2, 1, "", "get_params"], [901, 2, 1, "", "predict"], [901, 2, 1, "", "predict_log_proba"], [901, 2, 1, "", "predict_proba"], [901, 2, 1, "", "score"], [901, 2, 1, "", "set_params"]], "sklearn.svm": [[904, 1, 1, "", "LinearSVC"], [905, 1, 1, "", "LinearSVR"], [906, 1, 1, "", "NuSVC"], [907, 1, 1, "", "NuSVR"], [908, 1, 1, "", "OneClassSVM"], [909, 1, 1, "", "SVC"], [910, 1, 1, "", "SVR"], [911, 3, 1, "", "l1_min_c"]], "sklearn.svm.LinearSVC": [[904, 2, 1, "", "decision_function"], [904, 2, 1, "", "densify"], [904, 2, 1, "", "fit"], [904, 2, 1, "", "get_metadata_routing"], [904, 2, 1, "", "get_params"], [904, 2, 1, "", "predict"], [904, 2, 1, "", "score"], [904, 2, 1, "", "set_fit_request"], [904, 2, 1, "", "set_params"], [904, 2, 1, "", "set_score_request"], [904, 2, 1, "", "sparsify"]], "sklearn.svm.LinearSVR": [[905, 2, 1, "", "fit"], [905, 2, 1, "", "get_metadata_routing"], [905, 2, 1, "", "get_params"], [905, 2, 1, "", "predict"], [905, 2, 1, "", "score"], [905, 2, 1, "", "set_fit_request"], [905, 2, 1, "", "set_params"], [905, 2, 1, "", "set_score_request"]], "sklearn.svm.NuSVC": [[906, 2, 1, "", "decision_function"], [906, 2, 1, "", "fit"], [906, 2, 1, "", "get_metadata_routing"], [906, 2, 1, "", "get_params"], [906, 2, 1, "", "predict"], [906, 2, 1, "", "predict_log_proba"], [906, 2, 1, "", "predict_proba"], [906, 2, 1, "", "score"], [906, 2, 1, "", "set_fit_request"], [906, 2, 1, "", "set_params"], [906, 2, 1, "", "set_score_request"]], "sklearn.svm.NuSVR": [[907, 2, 1, "", "fit"], [907, 2, 1, "", "get_metadata_routing"], [907, 2, 1, "", "get_params"], [907, 2, 1, "", "predict"], [907, 2, 1, "", "score"], [907, 2, 1, "", "set_fit_request"], [907, 2, 1, "", "set_params"], [907, 2, 1, "", "set_score_request"]], "sklearn.svm.OneClassSVM": [[908, 2, 1, "", "decision_function"], [908, 2, 1, "", "fit"], [908, 2, 1, "", "fit_predict"], [908, 2, 1, "", "get_metadata_routing"], [908, 2, 1, "", "get_params"], [908, 2, 1, "", "predict"], [908, 2, 1, "", "score_samples"], [908, 2, 1, "", "set_fit_request"], [908, 2, 1, "", "set_params"]], "sklearn.svm.SVC": [[909, 2, 1, "", "decision_function"], [909, 2, 1, "", "fit"], [909, 2, 1, "", "get_metadata_routing"], [909, 2, 1, "", "get_params"], [909, 2, 1, "", "predict"], [909, 2, 1, "", "predict_log_proba"], [909, 2, 1, "", "predict_proba"], [909, 2, 1, "", "score"], [909, 2, 1, "", "set_fit_request"], [909, 2, 1, "", "set_params"], [909, 2, 1, "", "set_score_request"]], "sklearn.svm.SVR": [[910, 2, 1, "", "fit"], [910, 2, 1, "", "get_metadata_routing"], [910, 2, 1, "", "get_params"], [910, 2, 1, "", "predict"], [910, 2, 1, "", "score"], [910, 2, 1, "", "set_fit_request"], [910, 2, 1, "", "set_params"], [910, 2, 1, "", "set_score_request"]], "sklearn.tree": [[912, 1, 1, "", "DecisionTreeClassifier"], [913, 1, 1, "", "DecisionTreeRegressor"], [914, 1, 1, "", "ExtraTreeClassifier"], [915, 1, 1, "", "ExtraTreeRegressor"], [916, 3, 1, "", "export_graphviz"], [917, 3, 1, "", "export_text"], [918, 3, 1, "", "plot_tree"]], "sklearn.tree.DecisionTreeClassifier": [[912, 2, 1, "", "apply"], [912, 2, 1, "", "cost_complexity_pruning_path"], [912, 2, 1, "", "decision_path"], [912, 2, 1, "", "fit"], [912, 2, 1, "", "get_depth"], [912, 2, 1, "", "get_metadata_routing"], [912, 2, 1, "", "get_n_leaves"], [912, 2, 1, "", "get_params"], [912, 2, 1, "", "predict"], [912, 2, 1, "", "predict_log_proba"], [912, 2, 1, "", "predict_proba"], [912, 2, 1, "", "score"], [912, 2, 1, "", "set_fit_request"], [912, 2, 1, "", "set_params"], [912, 2, 1, "", "set_score_request"]], "sklearn.tree.DecisionTreeRegressor": [[913, 2, 1, "", "apply"], [913, 2, 1, "", "cost_complexity_pruning_path"], [913, 2, 1, "", "decision_path"], [913, 2, 1, "", "fit"], [913, 2, 1, "", "get_depth"], [913, 2, 1, "", "get_metadata_routing"], [913, 2, 1, "", "get_n_leaves"], [913, 2, 1, "", "get_params"], [913, 2, 1, "", "predict"], [913, 2, 1, "", "score"], [913, 2, 1, "", "set_fit_request"], [913, 2, 1, "", "set_params"], [913, 2, 1, "", "set_score_request"]], "sklearn.tree.ExtraTreeClassifier": [[914, 2, 1, "", "apply"], [914, 2, 1, "", "cost_complexity_pruning_path"], [914, 2, 1, "", "decision_path"], [914, 2, 1, "", "fit"], [914, 2, 1, "", "get_depth"], [914, 2, 1, "", "get_metadata_routing"], [914, 2, 1, "", "get_n_leaves"], [914, 2, 1, "", "get_params"], [914, 2, 1, "", "predict"], [914, 2, 1, "", "predict_log_proba"], [914, 2, 1, "", "predict_proba"], [914, 2, 1, "", "score"], [914, 2, 1, "", "set_fit_request"], [914, 2, 1, "", "set_params"], [914, 2, 1, "", "set_score_request"]], "sklearn.tree.ExtraTreeRegressor": [[915, 2, 1, "", "apply"], [915, 2, 1, "", "cost_complexity_pruning_path"], [915, 2, 1, "", "decision_path"], [915, 2, 1, "", "fit"], [915, 2, 1, "", "get_depth"], [915, 2, 1, "", "get_metadata_routing"], [915, 2, 1, "", "get_n_leaves"], [915, 2, 1, "", "get_params"], [915, 2, 1, "", "predict"], [915, 2, 1, "", "score"], [915, 2, 1, "", "set_fit_request"], [915, 2, 1, "", "set_params"], [915, 2, 1, "", "set_score_request"]], "sklearn.utils": [[919, 1, 1, "", "Bunch"], [920, 1, 1, "", "ClassifierTags"], [921, 1, 1, "", "InputTags"], [922, 1, 1, "", "RegressorTags"], [923, 1, 1, "", "Tags"], [924, 1, 1, "", "TargetTags"], [925, 1, 1, "", "TransformerTags"], [926, 3, 1, "", "_safe_indexing"], [41, 0, 0, "-", "arrayfuncs"], [928, 3, 1, "", "as_float_array"], [929, 3, 1, "", "assert_all_finite"], [930, 3, 1, "", "check_X_y"], [931, 3, 1, "", "check_array"], [932, 3, 1, "", "check_consistent_length"], [933, 3, 1, "", "check_random_state"], [934, 3, 1, "", "check_scalar"], [41, 0, 0, "-", "class_weight"], [937, 1, 1, "", "deprecated"], [41, 0, 0, "-", "discovery"], [41, 0, 0, "-", "estimator_checks"], [944, 3, 1, "", "estimator_html_repr"], [41, 0, 0, "-", "extmath"], [951, 3, 1, "", "gen_batches"], [952, 3, 1, "", "gen_even_slices"], [953, 3, 1, "", "get_tags"], [41, 0, 0, "-", "graph"], [955, 3, 1, "", "indexable"], [41, 0, 0, "-", "metadata_routing"], [41, 0, 0, "-", "metaestimators"], [41, 0, 0, "-", "multiclass"], [965, 3, 1, "", "murmurhash3_32"], [41, 0, 0, "-", "parallel"], [41, 0, 0, "-", "random"], [969, 3, 1, "", "resample"], [970, 3, 1, "", "safe_mask"], [971, 3, 1, "", "safe_sqr"], [972, 3, 1, "", "shuffle"], [41, 0, 0, "-", "sparsefuncs"], [41, 0, 0, "-", "sparsefuncs_fast"], [41, 0, 0, "-", "validation"]], "sklearn.utils.Bunch": [[919, 2, 1, "", "clear"], [919, 2, 1, "", "copy"], [919, 2, 1, "", "fromkeys"], [919, 2, 1, "", "get"], [919, 2, 1, "", "items"], [919, 2, 1, "", "keys"], [919, 2, 1, "", "pop"], [919, 2, 1, "", "popitem"], [919, 2, 1, "", "setdefault"], [919, 2, 1, "", "update"], [919, 2, 1, "", "values"]], "sklearn.utils.arrayfuncs": [[927, 3, 1, "", "min_pos"]], "sklearn.utils.class_weight": [[935, 3, 1, "", "compute_class_weight"], [936, 3, 1, "", "compute_sample_weight"]], "sklearn.utils.deprecated": [[937, 2, 1, "", "__call__"]], "sklearn.utils.discovery": [[938, 3, 1, "", "all_displays"], [939, 3, 1, "", "all_estimators"], [940, 3, 1, "", "all_functions"]], "sklearn.utils.estimator_checks": [[941, 3, 1, "", "check_estimator"], [942, 3, 1, "", "estimator_checks_generator"], [943, 3, 1, "", "parametrize_with_checks"]], "sklearn.utils.extmath": [[945, 3, 1, "", "density"], [946, 3, 1, "", "fast_logdet"], [947, 3, 1, "", "randomized_range_finder"], [948, 3, 1, "", "randomized_svd"], [949, 3, 1, "", "safe_sparse_dot"], [950, 3, 1, "", "weighted_mode"]], "sklearn.utils.graph": [[954, 3, 1, "", "single_source_shortest_path_length"]], "sklearn.utils.metadata_routing": [[956, 1, 1, "", "MetadataRequest"], [957, 1, 1, "", "MetadataRouter"], [958, 1, 1, "", "MethodMapping"], [959, 3, 1, "", "get_routing_for_object"], [960, 3, 1, "", "process_routing"]], "sklearn.utils.metadata_routing.MetadataRequest": [[956, 2, 1, "", "consumes"]], "sklearn.utils.metadata_routing.MetadataRouter": [[957, 2, 1, "", "add"], [957, 2, 1, "", "add_self_request"], [957, 2, 1, "", "consumes"], [957, 2, 1, "", "route_params"], [957, 2, 1, "", "validate_metadata"]], "sklearn.utils.metadata_routing.MethodMapping": [[958, 2, 1, "", "add"]], "sklearn.utils.metaestimators": [[961, 3, 1, "", "available_if"]], "sklearn.utils.multiclass": [[962, 3, 1, "", "is_multilabel"], [963, 3, 1, "", "type_of_target"], [964, 3, 1, "", "unique_labels"]], "sklearn.utils.parallel": [[966, 1, 1, "", "Parallel"], [967, 3, 1, "", "delayed"]], "sklearn.utils.parallel.Parallel": [[966, 2, 1, "", "__call__"], [966, 2, 1, "", "dispatch_next"], [966, 2, 1, "", "dispatch_one_batch"], [966, 2, 1, "", "format"], [966, 2, 1, "", "print_progress"]], "sklearn.utils.random": [[968, 3, 1, "", "sample_without_replacement"]], "sklearn.utils.sparsefuncs": [[973, 3, 1, "", "incr_mean_variance_axis"], [974, 3, 1, "", "inplace_column_scale"], [975, 3, 1, "", "inplace_csr_column_scale"], [976, 3, 1, "", "inplace_row_scale"], [977, 3, 1, "", "inplace_swap_column"], [978, 3, 1, "", "inplace_swap_row"], [979, 3, 1, "", "mean_variance_axis"]], "sklearn.utils.sparsefuncs_fast": [[980, 3, 1, "", "inplace_csr_row_normalize_l1"], [981, 3, 1, "", "inplace_csr_row_normalize_l2"]], "sklearn.utils.validation": [[982, 3, 1, "", "check_is_fitted"], [983, 3, 1, "", "check_memory"], [984, 3, 1, "", "check_symmetric"], [985, 3, 1, "", "column_or_1d"], [986, 3, 1, "", "has_fit_parameter"], [987, 3, 1, "", "validate_data"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "property", "Python property"], "5": ["py", "exception", "Python exception"], "6": ["py", "attribute", "Python attribute"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:property", "5": "py:exception", "6": "py:attribute"}, "terms": {"": [0, 1, 43, 44, 45, 46, 47, 49, 50, 51, 52, 55, 57, 61, 64, 66, 70, 73, 74, 75, 77, 78, 79, 80, 81, 85, 86, 88, 90, 91, 92, 93, 94, 95, 97, 98, 100, 102, 103, 104, 109, 110, 113, 115, 118, 120, 121, 122, 125, 126, 128, 129, 130, 132, 134, 136, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 155, 158, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 179, 180, 183, 184, 186, 188, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 205, 207, 209, 211, 213, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 233, 234, 237, 239, 240, 241, 243, 249, 251, 252, 254, 258, 259, 263, 264, 265, 266, 267, 268, 270, 271, 275, 277, 279, 284, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 302, 303, 304, 307, 310, 313, 315, 316, 317, 318, 319, 320, 321, 322, 326, 327, 333, 334, 335, 336, 337, 340, 341, 342, 345, 347, 348, 349, 352, 353, 354, 355, 359, 360, 361, 365, 366, 367, 369, 370, 371, 372, 373, 374, 376, 378, 379, 380, 381, 386, 387, 389, 390, 395, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 414, 416, 418, 425, 429, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 454, 456, 457, 460, 461, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 486, 488, 494, 496, 498, 502, 508, 509, 517, 523, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 570, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 605, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 685, 687, 688, 689, 690, 691, 692, 693, 700, 701, 702, 708, 711, 716, 720, 722, 735, 741, 758, 759, 779, 780, 797, 798, 799, 800, 802, 803, 804, 806, 809, 814, 818, 819, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 919, 928, 930, 931, 934, 941, 948, 950, 957, 958, 960, 982, 986, 987, 988, 990, 991, 993, 995, 996, 997, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1009, 1011, 1012, 1013, 1014, 1015, 1018, 1020, 1023, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "0": [1, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 180, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 351, 352, 353, 354, 355, 359, 360, 366, 367, 368, 369, 370, 372, 373, 374, 376, 377, 378, 379, 380, 381, 384, 385, 386, 390, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 427, 429, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 576, 577, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 920, 922, 926, 927, 928, 930, 931, 935, 936, 938, 939, 940, 941, 943, 945, 947, 948, 950, 951, 952, 954, 961, 962, 963, 965, 966, 968, 969, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 984, 988, 989, 991, 992, 993, 994, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1018, 1019, 1020, 1021, 1022, 1025, 1026, 1027], "00": [52, 68, 111, 123, 183, 184, 200, 224, 258, 262, 265, 302, 320, 325, 326, 348, 366, 369, 378, 404, 411, 412, 604, 713, 715, 788, 800, 814, 828, 913, 995, 999, 1009, 1011, 1013, 1020], "000": [43, 44, 59, 62, 64, 77, 106, 168, 185, 188, 201, 237, 258, 262, 264, 266, 309, 316, 347, 348, 355, 367, 378, 411, 412, 487, 559, 560, 644, 677, 992, 1013, 1020, 1040], "0000": [43, 318], "000000": [79, 183, 198, 224, 264, 308, 737], "00000000": 170, "000000e": 224, "000024": 359, "000045": 183, "00005": 54, "0000ff": [67, 292, 299], "0001": [49, 51, 103, 104, 139, 154, 155, 156, 160, 163, 183, 192, 214, 234, 235, 244, 245, 247, 258, 262, 263, 271, 278, 314, 317, 323, 374, 416, 440, 444, 456, 468, 469, 475, 531, 536, 538, 545, 547, 548, 557, 558, 646, 647, 648, 649, 652, 653, 658, 659, 660, 661, 662, 663, 668, 669, 672, 674, 676, 678, 680, 687, 689, 693, 861, 862, 904, 905, 988], "000184": 46, "000198": [46, 183], "000249": 46, "000271": 46, "000281": 46, "0003": 137, "000313": 46, "0004": [52, 137, 309], "000421": 46, "000456": 603, "000461": 347, "000473": 347, "000577": 347, "00058": 347, "000622": 347, "000645": 46, "000748": 347, "000977": 264, "00099547": 170, "000e": 412, "001": [46, 53, 68, 79, 95, 144, 154, 163, 167, 183, 194, 215, 233, 243, 244, 245, 246, 249, 254, 262, 263, 264, 266, 315, 327, 328, 348, 369, 378, 408, 534, 535, 537, 544, 627, 644, 645, 646, 647, 652, 653, 660, 661, 662, 663, 666, 667, 668, 676, 677, 678, 679, 681, 684, 689, 693, 797, 798, 861, 862, 899, 900, 906, 907, 908, 909, 910, 988], "001022": 46, "0012": [43, 687], "0013": [43, 263], "0014": [43, 263], "0015": 43, "001540": 52, "00166409": 661, "0017": 347, "00171412": [758, 759, 997], "001727": 258, "00188": 347, "001882": [196, 198], "0019": 263, "002": [43, 51, 163, 167, 348, 369], "0022": 263, "0023": 263, "002592": [196, 198], "00273427": 155, "00274": 207, "0028": [43, 263], "002861": [196, 198], "003": 43, "0032": 43, "0034189458230957995": 45, "003533": 198, "003586": 534, "00360392": 534, "0036211": 534, "00362644": 534, "00364": 317, "00393284e": 192, "003935": [196, 198], "003e": 412, "004": [43, 348], "0044": 911, "004577621581492997": 311, "00462428": 751, "0048": 263, "0049896314219659565": 311, "005": [43, 127, 264, 268, 272, 289, 304, 378, 1020], "005027": 267, "005294": 262, "005383": [196, 198], "005422": 264, "005670": [196, 198], "005840": 267, "005861": 267, "006": [43, 378], "006360": 267, "007": [45, 141, 249, 284, 348], "0072b2": 249, "0075": [470, 539], "00755": 539, "007581": 269, "00768662e": 192, "007822": 278, "007833": 269, "008": [163, 272, 348, 369, 378], "008142": [196, 198], "0083899664": 764, "008449": [196, 198], "00860051": 658, "008915": 267, "009": [43, 348, 378], "009077": 183, "00911944e": 192, "0092": 137, "0093": 263, "009362": [196, 198], "009747": 278, "009778": 267, "009788": 278, "0098": 137, "00ff00": 292, "01": [45, 47, 49, 52, 53, 66, 75, 79, 84, 95, 120, 122, 123, 137, 145, 147, 149, 151, 152, 163, 172, 176, 183, 184, 192, 194, 200, 218, 219, 224, 226, 227, 233, 237, 238, 239, 243, 244, 251, 255, 257, 258, 263, 264, 265, 269, 271, 273, 289, 300, 302, 304, 314, 320, 338, 353, 367, 369, 376, 377, 404, 413, 446, 468, 513, 519, 530, 537, 541, 594, 595, 597, 604, 642, 646, 654, 658, 678, 696, 715, 800, 814, 898, 968, 995, 999, 1003, 1009, 1011, 1013, 1020, 1026], "010": [163, 348, 349, 378, 829, 1007], "010000000000000002": 172, "01001911984591966": 272, "0106": 649, "011": [43, 272, 284, 348, 378], "0115": 263, "011595": [196, 198], "0116": 603, "011e": 412, "012": [52, 186, 188, 348], "012191": [196, 198], "012521": 198, "0126": 263, "012831": 198, "0129126": 366, "013": [43, 52, 239, 1020], "01327": 367, "013520": 183, "014": [43, 91, 348, 378], "0144": [263, 615], "0148": 263, "015": [66, 351, 1007], "0152": 137, "015342e": 224, "015412e": 224, "015579": 278, "015596": [196, 198], "015600e": 224, "0157": 542, "015718e": 224, "0162": 263, "01621459": 404, "016445": 264, "017": [160, 165, 184, 348, 378, 468, 469, 1020], "017379": 52, "017646": [196, 198], "018": [52, 264, 272, 348, 469], "0182": 897, "018727": 183, "0188ff": 308, "018900": 198, "019": [163, 369, 378, 468], "019023": 264, "019069": 198, "01915283": 130, "019163": [196, 198], "0192": [263, 543], "0193": [467, 473], "0195": [417, 472], "0196": 137, "0198e1": 118, "019907": [196, 198], "01e": 195, "02": [43, 51, 52, 66, 79, 83, 85, 91, 95, 97, 113, 115, 120, 123, 136, 142, 163, 169, 174, 182, 183, 192, 224, 233, 237, 241, 243, 258, 259, 263, 265, 271, 289, 299, 302, 304, 306, 330, 332, 348, 352, 366, 369, 377, 403, 405, 408, 438, 442, 596, 604, 658, 676, 800, 814, 883, 899, 913, 995, 1020], "020": [43, 52, 1007], "021": [316, 1020], "021849": 318, "021872": [196, 198], "022": 1007, "022593": 183, "0226": 649, "022688": [196, 198], "023": [49, 52, 905, 1007, 1020], "02306214": 667, "0241": 263, "02449161": 130, "02456369": 194, "024991": [196, 198], "025": [67, 209, 243, 261, 348, 690, 694], "025102": 183, "025422": 264, "0255": 137, "0256": 170, "025930": [196, 198], "026": [116, 162, 348, 354, 1020], "026328": [196, 198], "026711": 87, "0268": 347, "027": [52, 163, 369], "027400": 359, "028": 262, "02818216": 115, "0287": 607, "0289": 347, "02891072": 1000, "029": [348, 1007], "02d": 198, "02e": [604, 658], "03": [51, 52, 85, 111, 120, 149, 163, 172, 183, 192, 224, 237, 249, 255, 258, 265, 326, 369, 412, 748, 800, 995, 1020], "030": [149, 235, 348, 1020], "030462": 103, "030498": 103, "030585": 278, "030676e": 224, "030867": 183, "031": [51, 163, 369], "031020": 103, "031026": 183, "031255": 183, "031555": 198, "03162278": 51, "031988": [196, 198], "032": [165, 167], "0321": 835, "032179": 198, "03228": 622, "03228706": 610, "032356": [196, 198], "03237920e": 192, "032405": 183, "0325": 347, "03260883": 1000, "033": [165, 999, 1007], "033764e": 224, "033823": 183, "034": [149, 195, 468], "034077": 198, "034194": [196, 198], "034278": 267, "034309": [196, 198], "03433306457": 45, "034821": [196, 198], "03498585": 1000, "035005": 183, "03531816": [826, 827], "035445": 278, "0358": 46, "035914": 278, "036": [378, 469], "036038": [196, 198], "036385": [196, 198], "036445": 264, "036592": 278, "036656": [196, 198], "0367": 172, "0368": 619, "036984": 46, "0370": 850, "037490e": 224, "0375": 709, "038": [46, 468, 469, 1020], "038076": [196, 198], "03812219": 1000, "038159": 812, "03823144": 170, "0383": 861, "038689": 254, "0387": 603, "039": [262, 751, 781], "039493": [196, 198], "039497": 247, "0397": 999, "03f": 262, "04": [52, 66, 75, 77, 87, 100, 115, 122, 129, 163, 172, 183, 192, 206, 224, 241, 249, 255, 258, 264, 265, 297, 321, 342, 348, 369, 411, 413, 468, 469, 788, 800, 814, 863, 995, 999, 1003, 1013, 1020], "040": 91, "040490e": 224, "041": [52, 194], "041297": 300, "0416": 403, "041824": 46, "042": 378, "0427": [224, 466, 471], "042898": 300, "043": [91, 378], "043401": [196, 198], "044": [43, 262, 751, 999], "044223": [196, 198], "044451": [196, 198], "044642": [196, 198], "0448": 224, "045": 723, "0453": 542, "045311": 300, "045599": [196, 198], "045690e": 224, "045934": 300, "046": [228, 240, 348, 646, 647, 652, 660, 661, 662, 681, 1020], "046050e": 224, "046636": 183, "046641": [196, 198], "047": [79, 378, 1020], "0479": 542, "048": 1007, "049": 468, "049250313e": 51, "049530": 300, "049540": 300, "0499": 542, "04995982": 115, "04e": 604, "05": [46, 47, 52, 54, 61, 63, 72, 79, 93, 95, 97, 98, 100, 107, 115, 125, 137, 140, 146, 149, 152, 159, 163, 172, 175, 176, 183, 191, 192, 206, 209, 220, 230, 231, 233, 243, 249, 251, 252, 255, 258, 264, 265, 273, 275, 289, 290, 292, 297, 304, 306, 313, 317, 326, 328, 341, 355, 369, 413, 447, 453, 475, 523, 528, 591, 594, 595, 597, 613, 614, 615, 619, 620, 622, 623, 625, 632, 633, 649, 690, 694, 756, 800, 853, 904, 905, 995, 1003, 1020], "050": [52, 1007], "05033776045421079": 272, "050680": [196, 198], "051": [469, 1009], "0512": 542, "051474": [196, 198], "0517578125e": 46, "0518": 347, "052": [156, 263, 535, 1020], "05216586": 115, "052506": 318, "053": [43, 163, 348, 369, 378, 544], "05306648": 128, "05317": 172, "053803": 46, "054045": 267, "054699": 183, "0547": 908, "055": [45, 163, 263, 348, 369, 999], "05518": 623, "05532": 620, "05534985": 301, "0556": 908, "056": [52, 529, 1007], "0561": 908, "0566": [623, 755], "05663": 620, "0568": 747, "057": [263, 378, 829], "057122": 198, "05752333": 130, "057711": 198, "05798371": 247, "057984": 247, "058": [163, 262, 263, 369], "05840206": 130, "059": [228, 348], "0595": 470, "05994843": 51, "06": [52, 66, 85, 156, 176, 183, 200, 206, 207, 236, 243, 254, 258, 263, 264, 265, 302, 306, 342, 378, 403, 479, 480, 481, 644, 645, 657, 689, 690, 693, 694, 797, 798, 800, 814, 913, 995, 1009, 1011, 1020], "060": [43, 52, 249, 348, 751, 1020], "0602": 46, "061": [52, 262, 341, 1020], "0614": 623, "06165": 620, "061696": [196, 198], "0622": [467, 473], "0625": 86, "0626": 835, "063": [92, 262, 264, 434, 1020], "0631": 52, "06320955": 247, "063210": 247, "064": [378, 1007], "0647": 347, "064710": 46, "065": [262, 378], "06506307": 301, "0652": 622, "06525643": 610, "066": [204, 262, 337, 348, 1020], "06686804": 221, "06694199": 130, "06695631e": 111, "067": [176, 648], "067109": 198, "067528": 198, "068": [43, 52, 264], "068332": [196, 198], "06880943": 115, "06896552": 446, "069": 262, "069196": 262, "0693": 619, "07": [52, 85, 115, 129, 151, 154, 183, 205, 224, 258, 273, 310, 318, 323, 367, 559, 560, 692, 999, 1013, 1020], "0707": 623, "07073": 620, "071": [163, 218, 321, 369, 1020], "071964": 183, "072": [219, 404, 434, 1020], "073": [262, 468, 469, 648], "074": 262, "074412": [196, 198], "075": [54, 123, 709], "07582983e": 192, "075887": 198, "076": [43, 50, 207, 348, 892, 1020], "077": 284, "077846": 264, "0779": 46, "078": [43, 104, 291, 1020], "07846529": 301, "079": [163, 369], "079297": 264, "07963978e": 192, "07993421": 221, "08": [43, 79, 83, 100, 123, 183, 184, 194, 244, 302, 369, 529, 541, 543, 561, 641, 658, 800, 861, 862, 883, 1005, 1020], "080": [80, 1020], "08022103": [826, 827], "080295": 198, "081": [141, 1007, 1020], "0813": [466, 471], "0817": 475, "082": [43, 288, 1020], "0825": 309, "083": [262, 354], "08377444": 751, "084": [61, 348], "085": 263, "085299": [196, 198], "08533159": 210, "085711": 87, "08604995": 115, "086944": 247, "08699432": 211, "087": 54, "0872422": 660, "088": [669, 1007], "089063": [196, 198], "08d": 55, "08t16": 366, "09": [122, 123, 129, 183, 237, 241, 404, 735, 842, 999, 1009, 1013, 1020], "090": [332, 1020], "09000": 207, "090528": 183, "0906": 411, "090808": 183, "091": [354, 1020], "091053": 183, "0916": 411, "091621": 87, "092204": [196, 198], "093": [263, 468, 527], "094": [196, 210, 469, 1020], "09443967": 301, "0947": 411, "09541846": 534, "0958": 411, "0968": 606, "09684337": 221, "096950": 300, "097": [43, 163, 369], "0972": 411, "098": 45, "098332": 62, "0986": [412, 868], "09861229": [612, 1009], "0987": 411, "098758": 62, "098776": 264, "098932": 62, "099": 43, "099820": 62, "0d": 1030, "0e": [275, 547, 548], "0f": [57, 91], "0min": 87, "0rc1": 376, "0rcn": 376, "0x": [320, 933], "0x7f4868e90880": 325, "0x7f48695bd420": 207, "0x7f48841cd870": 262, "0x7f48843dcee0": 139, "0x7f48853c5f40": 276, "0x7f48853c6a40": 276, "0x7f489c450ee0": 254, "0x7f489c6bc2e0": 276, "0x7f489d18baf0": 244, "0x7f489f4d0190": 103, "0x7f489f4d03a0": 103, "0x7f489f7a74c0": 154, "0x7f489f7a7640": 154, "0x7f489fc71450": 276, "0x7f48a4c1dfc0": 104, "0x7f48a4c1fb50": 103, "0x7f48a5f74160": 139, "0x7f48a6002e60": 263, "0x7f48a6b60540": 271, "1": [1, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 182, 183, 185, 186, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 351, 352, 353, 354, 355, 359, 360, 361, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 385, 386, 387, 390, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 502, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 525, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 576, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 922, 923, 926, 927, 928, 929, 930, 931, 932, 934, 935, 936, 941, 942, 943, 945, 946, 947, 948, 949, 950, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 984, 985, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1018, 1019, 1020, 1022, 1023, 1026, 1027, 1031], "10": [1, 43, 44, 45, 46, 47, 49, 51, 52, 54, 55, 58, 62, 63, 64, 66, 67, 68, 72, 74, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 103, 104, 106, 109, 110, 111, 112, 113, 115, 116, 118, 122, 123, 124, 125, 129, 130, 134, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 151, 152, 154, 155, 156, 160, 163, 168, 169, 171, 172, 173, 174, 176, 178, 179, 182, 183, 184, 185, 186, 188, 190, 194, 199, 200, 202, 203, 205, 207, 208, 209, 210, 211, 212, 213, 217, 218, 219, 222, 223, 224, 227, 228, 233, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 270, 272, 275, 277, 278, 279, 281, 283, 289, 299, 300, 301, 302, 304, 305, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 325, 326, 327, 329, 334, 335, 336, 338, 339, 341, 342, 343, 347, 348, 349, 355, 359, 366, 367, 368, 369, 370, 372, 374, 377, 378, 384, 385, 386, 390, 395, 396, 397, 401, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 417, 435, 440, 444, 446, 448, 449, 450, 456, 457, 459, 472, 485, 490, 491, 494, 498, 499, 500, 502, 508, 509, 510, 511, 514, 518, 519, 522, 524, 526, 529, 533, 534, 535, 536, 537, 539, 540, 542, 543, 544, 546, 550, 553, 554, 555, 556, 559, 560, 562, 563, 564, 565, 566, 568, 581, 582, 586, 592, 593, 598, 599, 604, 606, 611, 617, 619, 627, 630, 631, 632, 634, 635, 636, 637, 640, 642, 643, 644, 646, 647, 649, 652, 659, 660, 661, 662, 664, 665, 666, 667, 669, 670, 672, 673, 675, 676, 677, 678, 681, 685, 686, 691, 692, 695, 696, 699, 705, 715, 726, 730, 742, 756, 769, 797, 798, 800, 801, 802, 803, 804, 811, 814, 815, 816, 817, 818, 820, 821, 823, 828, 830, 831, 832, 833, 839, 840, 841, 843, 844, 845, 851, 860, 861, 862, 864, 870, 874, 877, 878, 881, 893, 901, 907, 910, 912, 913, 917, 922, 934, 945, 948, 952, 964, 968, 974, 975, 984, 988, 989, 994, 995, 996, 997, 999, 1000, 1002, 1003, 1005, 1006, 1009, 1013, 1014, 1020, 1026, 1027, 1030, 1031, 1032, 1037, 1039, 1040, 1041, 1043, 1044, 1049], "100": [0, 43, 44, 46, 49, 51, 52, 55, 57, 62, 64, 66, 72, 77, 83, 86, 87, 90, 94, 99, 103, 104, 107, 110, 111, 120, 122, 123, 129, 135, 140, 141, 149, 150, 151, 153, 154, 155, 156, 168, 172, 175, 176, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 199, 200, 203, 206, 207, 208, 209, 211, 215, 216, 217, 219, 221, 222, 224, 228, 229, 231, 234, 235, 236, 237, 238, 239, 240, 244, 245, 247, 249, 251, 254, 255, 258, 259, 260, 262, 264, 267, 269, 274, 275, 278, 279, 289, 290, 291, 302, 305, 306, 308, 310, 311, 314, 316, 317, 318, 320, 321, 323, 329, 330, 334, 335, 337, 338, 339, 342, 343, 345, 347, 348, 351, 353, 354, 359, 361, 367, 369, 372, 374, 377, 378, 395, 401, 404, 405, 408, 409, 410, 411, 412, 434, 438, 442, 446, 468, 469, 475, 487, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520, 521, 522, 523, 524, 526, 528, 532, 534, 542, 543, 544, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 604, 606, 610, 631, 632, 633, 639, 640, 641, 642, 646, 647, 648, 649, 652, 653, 658, 659, 660, 661, 662, 663, 665, 667, 669, 671, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 695, 696, 746, 797, 798, 802, 822, 828, 829, 834, 839, 840, 841, 843, 844, 845, 849, 861, 862, 880, 882, 885, 894, 911, 988, 989, 992, 996, 999, 1000, 1006, 1009, 1011, 1037, 1038, 1039, 1042, 1043], "1000": [0, 43, 46, 47, 54, 63, 67, 72, 83, 104, 107, 115, 129, 137, 139, 141, 144, 145, 146, 151, 154, 158, 160, 165, 173, 188, 192, 195, 210, 228, 236, 237, 239, 249, 253, 258, 262, 263, 264, 270, 271, 273, 275, 289, 291, 305, 308, 314, 315, 317, 319, 320, 322, 337, 338, 344, 347, 348, 377, 378, 385, 402, 412, 434, 470, 476, 477, 529, 530, 535, 537, 539, 540, 541, 543, 544, 546, 551, 561, 562, 632, 646, 647, 651, 652, 653, 655, 660, 661, 662, 663, 666, 667, 668, 672, 676, 677, 678, 687, 692, 698, 701, 764, 881, 893, 899, 904, 905, 988, 992, 1014, 1036, 1038, 1047], "10000": [43, 50, 52, 78, 96, 104, 105, 147, 184, 195, 207, 214, 222, 237, 239, 315, 333, 335, 355, 361, 411, 412, 559, 560, 644, 679, 881, 910, 1011], "100000": [171, 239, 249, 372, 613, 614, 615, 619, 620, 622, 623, 625, 893], "1000000": [55, 534], "10005": 1037, "1000x": 1035, "1001": 217, "10027": 1042, "10045": 1037, "1005": 1014, "10058": 1038, "10059": 1037, "10065": 243, "1007": 705, "10070308464041304": 207, "10071": 1037, "10093": 1037, "10095": 1037, "10096": 1042, "100_000": [62, 64, 183], "100k": [237, 392], "100ksampl": 392, "100x": [1029, 1032, 1046], "101": [64, 163, 195, 281, 369, 850, 1009, 1030], "10101": 1037, "10112": 1037, "1013": 1007, "10142": 1037, "10153": 1037, "10168": 1044, "10181": 1037, "10192": 1037, "10195": 1037, "101alexmartin": [1046, 1047], "102": [378, 999, 1031], "10210": 1037, "10229": 1037, "1024": [86, 129, 446, 465, 536, 902, 1042], "10280": 1037, "10297": 1037, "103": [149, 193, 283, 284, 367, 411, 495, 553, 554, 1020, 1029], "10306": 1037, "10325": 1037, "10336": 1037, "10346": 1037, "10377": 1037, "1038": 404, "10397": 1037, "104": [43, 61], "10403": 224, "10412": 1037, "10428": 1037, "10437": 1037, "10440": 1038, "10441": 1037, "1045": 103, "10452": 1037, "10458": 1037, "1046": [103, 254], "10468": 1044, "10469096": 170, "1047": 103, "10471": 1037, "10474": 1037, "10478008": 404, "10482": 1039, "1048576": [412, 581, 588], "10493": 1041, "105": [216, 308, 322, 411, 830, 1020], "10500": 1037, "10521": 1037, "10526": 404, "10536": 1037, "10580": 1038, "10581": 1037, "10584743": 170, "10587": 1037, "10591": 1041, "10593": 1037, "106": [163, 179, 247, 369, 880, 993, 999, 1020, 1030], "10606655": 221, "10610": 1037, "10655": 1037, "10663": 1037, "10677": 1037, "10687": 1037, "107": [76, 149, 239, 318, 404, 411, 606, 899, 1000, 1020, 1031], "10708": 1041, "10711": 1041, "10723": [1036, 1037], "10727": 1038, "1073": [367, 485], "10740": 1037, "1076": 329, "10774": 1037, "10795": 1037, "108": [0, 47, 74, 86, 199, 1020, 1030], "1080": [366, 404], "10805": 1043, "10811": 1037, "10815": 1039, "10827": 1037, "10829": 1037, "10834": 224, "10836": 1037, "1084": 254, "10845": 1037, "10869": 1037, "10881": 1037, "108843": 267, "10887": 1037, "108880": 62, "10898": 1037, "10899": 1037, "109": [61, 86, 1000, 1031], "10908": 1037, "10913": 1037, "10914094": 221, "10928": 1037, "10933": 1037, "10982": 1037, "10992": 1037, "10998": 1037, "10999": 1037, "10_000": [46, 62, 107, 139, 146, 182, 188, 237, 267, 277, 284, 321, 557, 558, 562, 563, 881], "10_fold": [367, 491], "10e": [190, 194], "10k": [314, 392, 444], "10ksampl": 392, "10x": 1029, "10x10": 212, "10\u2079": 1037, "11": [43, 47, 57, 106, 112, 122, 163, 170, 183, 184, 194, 207, 208, 209, 212, 237, 243, 258, 261, 269, 270, 276, 287, 288, 290, 302, 308, 315, 318, 319, 335, 339, 343, 347, 349, 366, 369, 370, 372, 378, 385, 390, 396, 397, 404, 407, 408, 447, 454, 479, 480, 481, 482, 494, 499, 515, 516, 605, 612, 650, 656, 670, 715, 721, 723, 724, 778, 779, 780, 801, 804, 818, 821, 829, 856, 913, 949, 964, 991, 995, 997, 1009, 1013, 1014, 1020, 1027, 1031, 1035, 1037, 1038, 1040, 1043, 1044, 1049], "110": [126, 184, 190, 236, 310, 320, 434, 993, 994], "1100": 83, "11000": 1038, "11005": 1037, "11006": 1037, "11010": 1037, "11011": 1037, "11021": 149, "11042": 1037, "11047": 1039, "11064": 1041, "11082": 1037, "110923": 198, "11099": 764, "111": [43, 46, 47, 100, 126, 221, 230, 264, 284, 310, 856, 1020, 1032], "1111": [650, 656], "1111111111111111": 272, "11124": 1037, "1112658": [898, 1011], "11135": 1037, "11136": 1037, "1114": 254, "11144": [1037, 1038], "11144673": 221, "11160": 1037, "11166": 1037, "1117": 619, "11176": 1037, "11179": 1038, "1118": 103, "112": [87, 163, 214, 367, 369, 1020, 1031], "11206": 1037, "11211": 1037, "112141": 378, "11232": 1039, "11235": 1037, "112589990684262": 746, "11272": 1037, "11272662": 155, "11293": 1037, "11295": 1037, "11296": 1040, "113": [281, 378, 411, 1032], "11306": 1037, "11308": 1037, "11310": 1037, "11314": 367, "11315": 1037, "11327": 1037, "1134": 47, "113516": 267, "11353": 1037, "11354": 1038, "11364": 1038, "11364637": 51, "113781": 318, "11378556": 301, "1139": 47, "114": [215, 318, 710, 1020, 1029], "1140": 367, "11413": 43, "11420": 1037, "1145": [188, 404, 676], "11452112": 221, "11458": 1038, "11464": 1037, "11466": 1037, "11467": 1037, "1148": 254, "115": [72, 184, 237, 1007, 1020], "11505": 1037, "11514": 1040, "11520": 1037, "11526": 1038, "11528972": 221, "11542": 1037, "1155": 47, "11553": 1037, "11556": 1037, "11557": 1037, "11558": 1037, "11576": 1037, "11585": 1037, "11596": 1037, "116": 1029, "1160": 47, "1162": 404, "11635": 1039, "11646": 1038, "11650": 1038, "11679": 1037, "11680": 47, "11682": 1041, "11682692": 221, "11693539": 115, "11699": 1038, "117": [270, 607, 1020, 1030], "11705": 1038, "117154": 183, "11724": 1037, "11727": 1038, "11741": 1037, "11754": 1038, "11756": [1037, 1038], "117608": 62, "11774": 1037, "1179": 254, "118": [195, 589, 830, 1020], "11841": [898, 1011], "1185": 378, "11860": 1044, "1189": 411, "119": [126, 993, 1020, 1032], "11901": 1037, "11905": 1037, "11912": 1037, "11915045": 355, "11924": 1037, "11931": 207, "11932": 207, "11933": 207, "11935": 207, "11950": 1040, "11951": 1037, "11958": 172, "11973": 1038, "12": [0, 43, 45, 47, 52, 54, 58, 70, 75, 77, 78, 86, 88, 89, 90, 105, 106, 115, 142, 143, 144, 146, 147, 149, 163, 170, 171, 172, 179, 183, 184, 186, 191, 194, 195, 201, 207, 214, 224, 226, 229, 230, 233, 234, 236, 244, 247, 251, 252, 258, 263, 264, 266, 267, 270, 276, 277, 278, 287, 302, 308, 309, 310, 318, 321, 343, 347, 349, 368, 369, 370, 376, 377, 385, 387, 390, 396, 397, 398, 404, 408, 412, 440, 444, 446, 454, 479, 480, 481, 482, 494, 530, 532, 539, 568, 664, 669, 671, 685, 686, 689, 692, 693, 725, 797, 798, 801, 818, 821, 835, 856, 872, 979, 988, 989, 991, 995, 997, 999, 1000, 1009, 1013, 1014, 1020, 1027, 1030, 1032, 1036, 1037, 1039, 1040, 1045, 1046, 1049], "120": [150, 227, 320, 413, 589, 646, 647, 652, 660, 661, 662, 681, 1029], "1200": [83, 145, 304, 411], "12000": 518, "12068": 1039, "12069": 1042, "1207": 1014, "121": [100, 136, 179, 224, 238, 618, 669, 1009, 1020], "12105": 1037, "12116": 1038, "1212": 496, "12122": 1037, "121351": 198, "12143": 1038, "12145": 1039, "12159": 1037, "12165": 1037, "12165031": 1000, "1217": 207, "12171": 1037, "12174": 1038, "12177": 1038, "12190903": 115, "12196": 207, "12197": 1038, "122": [0, 136, 172, 179, 184, 238, 378, 830, 1000], "1220": 619, "12211": 1037, "12222": 1038, "12232": 1038, "12234": 1037, "12246": 1037, "12251": 1038, "12258": 1039, "12274212": 1000, "12279": 1038, "12285": 1044, "1229": 515, "123": [138, 355, 411, 514, 515, 516, 553, 554, 837, 1000, 1007], "12300": 1038, "12303": 1039, "12304": 1037, "12317": [172, 1037], "1232": 411, "12326": 43, "12327": 43, "12328": [43, 1038], "12329": 43, "12330": [43, 1037], "12334": 1038, "12338": 1037, "12339": 1037, "1234": [191, 252, 267, 372], "12344": 1038, "12345": 1037, "12350": 1037, "1236": 310, "12360": 1037, "12365": 1037, "12379": 43, "12380": 43, "12381": 43, "12382": 43, "123828": 267, "12383": 43, "12388": 1037, "12393": 1037, "124": [46, 167, 184, 411, 1020, 1031], "124225": 198, "12436": 1038, "12441": 1037, "1245": 1014, "12451": 1037, "12462": 1037, "12467": 1037, "12471": 1037, "12481": 1037, "125": [43, 111, 123, 316, 532, 988, 999, 1009], "12513": 1038, "12514": 1037, "125140": 267, "12517": 1037, "12518": 1037, "12522": 1037, "125247168": 52, "12543": 1038, "12557": 1039, "12568": 1038, "12569": 1039, "12582": 1038, "12583": 1038, "1259": 57, "12599": 1038, "126": [88, 411, 1020], "12612": 1037, "12613": 1038, "12625": 1037, "1263": 378, "12638": 1041, "12650": 1039, "126502": 198, "12669": 1038, "1268187": 221, "12685": 1037, "12699": 1037, "127": [145, 245, 1020, 1029], "12701": 1037, "12704": 1037, "127128": 146, "12715": 1038, "12732": 1038, "1276": 47, "12789": 1039, "128": [53, 54, 207, 239, 359, 534, 646, 647, 652, 660, 661, 662, 681, 730], "12807": 1038, "12821": 1038, "12834": 1038, "12852": 1039, "12855": 1038, "12860": [224, 1038], "12861": 1038, "1288": [45, 367], "12881": 1037, "12883823": 408, "12887": 1039, "129": [209, 646, 647, 652, 660, 661, 662, 681, 1029], "12908": 1038, "12914884": 1000, "12916": 1038, "12927": 1039, "12946": 1037, "12949": 1037, "12955": 1038, "12972": 1038, "12983": 1038, "12988": 1038, "1299": [870, 1009], "12th": 1011, "13": [43, 45, 49, 50, 52, 79, 106, 125, 129, 142, 145, 147, 178, 183, 188, 195, 215, 231, 257, 258, 265, 268, 270, 302, 304, 308, 321, 336, 367, 369, 372, 378, 385, 390, 408, 416, 494, 508, 511, 530, 531, 549, 550, 581, 635, 639, 734, 818, 848, 863, 870, 896, 897, 995, 999, 1000, 1005, 1006, 1009, 1014, 1027, 1029, 1031, 1032, 1035, 1036, 1037, 1038, 1041], "130": 378, "1300": 83, "13003": 1041, "13005": 1037, "13007": 1038, "130107": [221, 237, 486], "13013": 1039, "13042": 1044, "13046": 1037, "13077794": 355, "13086": 1038, "131": [43, 53, 89, 335, 378, 999, 1020, 1030], "13124": [1037, 1038], "13134": 1037, "13142": 1038, "13146": 1039, "13151": 1038, "13157": 1038, "13164": 1038, "13165": 1037, "13174": 1038, "1319": [870, 1009], "131900": 102, "13193": 1038, "132": [43, 47, 53, 89, 411], "13204": 1041, "13213": 1039, "1322": 622, "13221": 1037, "13222543": 610, "1323": 207, "13231": 1039, "13233": [367, 491, 492], "13240": 1038, "13241": 1038, "13250": 1038, "13251": 1038, "13253": 1038, "13260": 1038, "13266": 1038, "13276": 1037, "13279": 1038, "13283": 1038, "13286": 989, "13290": 1039, "133": [53, 89], "13312": 1037, "13317": 1038, "13328": 1038, "13333": 1038, "13336": 1038, "13350": 1038, "13363": 1038, "13366": 1038, "13374": 43, "13375": 43, "13376": 43, "13377": 43, "13378": 43, "1338": 259, "13382": 1038, "13389": 1038, "13392": 1039, "13393": 1039, "13397": 1038, "134": [86, 95, 118, 145, 258, 264, 1020, 1032], "13422": 1038, "13427": 1038, "13439": 1038, "13447": 1038, "13459": 1038, "13467": 1039, "13485": 1038, "13486": 1038, "13496": 1038, "135": [163, 318, 369, 759], "13511": 1040, "1352374671440465": 272, "13524": 1038, "1353": 347, "13531": 1038, "13545": 1038, "13549": 1038, "13554": 1038, "13562": 1038, "13575": 1039, "136": [170, 1020], "13601": 1038, "13607": 1038, "13609": 1039, "13618": 1039, "13620": 1038, "13628": 1038, "13636": [995, 1038], "13641": 1038, "13649": 1046, "13651": 1038, "137": [243, 275, 378, 1020, 1030], "13704": 1039, "13707": 1039, "1371": 532, "13726": 1039, "1373": 996, "1374": 532, "13741": 1038, "13769": 1039, "13772": [1037, 1038], "13773": 1039, "13779": 1038, "1378": 224, "13780": 1038, "1379": 224, "138": [84, 349, 378, 411, 999, 1020], "13806": 1039, "1382": 522, "13835": 1038, "1385": 471, "13864": 1038, "13875": 1039, "13877": 1038, "13894": 1038, "13896": 1039, "139": [224, 284, 378, 411, 449, 459, 691, 695, 973, 1000], "13900": 1041, "13902": 1039, "13903": [1037, 1038], "13910": 1038, "13911": 1039, "13925": 1039, "13933": 1039, "13938": 1039, "13947": 1038, "1396": 996, "13960": 1039, "1397": 378, "13974": 1038, "13983521": 301, "13987": 1039, "13988486": 221, "13995": 1039, "13th": 64, "14": [43, 50, 52, 73, 82, 93, 95, 96, 99, 106, 112, 123, 125, 158, 184, 194, 198, 200, 224, 228, 231, 233, 238, 258, 263, 269, 270, 279, 283, 284, 307, 308, 318, 342, 345, 360, 367, 369, 370, 385, 390, 396, 397, 404, 408, 494, 496, 508, 551, 552, 635, 643, 692, 814, 818, 870, 992, 995, 1009, 1014, 1020, 1027, 1029, 1030, 1032, 1033, 1037, 1042], "140": [86, 320, 411, 508, 514, 515, 516, 553, 554, 1000], "1400": [83, 471], "14012": 1039, "14024": 1038, "14028": 1039, "14035": 1039, "14048": 1040, "14053": 1038, "14067": 1038, "14075": 1040, "14087": 1038, "14092": 1038, "141": [281, 499, 532, 904, 1000], "14108": 1039, "14114": 1039, "14156": 224, "14170": 1039, "14180": 1040, "1419": 43, "14194": 1039, "14197": 1038, "142": [43, 411], "1422": 43, "14228": 360, "14237": [1037, 1038], "14259": 1039, "14264": 1040, "142857": 224, "14286": 1039, "14287": 1039, "14294": 1039, "14296": 1039, "143": [64, 78, 163, 236, 369, 468, 469, 1011, 1020, 1029, 1030], "14300": 1040, "14302": 243, "14305": 1039, "14309": 1038, "14336": 1039, "14338": 989, "14356": 1039, "14357": 1039, "14378": 1039, "14381": 1039, "14393": 1038, "144": [231, 264, 378, 999, 1020, 1029], "1440": 43, "14406": 1039, "1441": 622, "14410151": 610, "14417": 1039, "144204": 146, "1443": 1005, "14430": 1039, "14446": 1041, "14458": 1039, "14464": 1039, "14475": 1039, "144943": 62, "14496": [378, 1038], "145": [52, 294, 327, 404, 1020], "14510": 1039, "14516": 1040, "14520": 1039, "14538": 1039, "14544": 1039, "14549": 1039, "1456": 224, "14591": 1039, "14593": 1039, "14595": 1039, "145957": 146, "146": [45, 411, 709, 999], "1460": [143, 154], "14602": 1039, "14603365": 221, "14623": 1039, "14625": 47, "14629": 1039, "1464": 234, "14646": 1039, "14647": 1039, "14680": 1039, "14682": 1039, "14696": 1040, "147": [247, 1000, 1020], "14702": 1039, "147022": 198, "14704": 1039, "14706": 1039, "1471": 1005, "14710": 1039, "14732": 1039, "14736": 1044, "1474": 378, "14740": 1039, "14764": 1039, "148": 1032, "14800": 1041, "14810": 310, "14848": 1040, "14849": 1039, "14862": 1044, "14864": 1039, "14865": 1039, "14869": 1039, "14872": 1039, "14884": 1039, "14890": 1039, "14894": 1039, "14898": 1039, "149": [1000, 1029], "14900": 1039, "14902": 1039, "14907": 1039, "14908": 1039, "14933": 1039, "14936": 1039, "14971": 1039, "14975": 1043, "14982": 1041, "1499": 47, "14e": 604, "15": [43, 45, 46, 51, 52, 53, 54, 66, 67, 70, 75, 79, 86, 87, 94, 95, 99, 105, 106, 111, 113, 118, 129, 138, 140, 142, 143, 146, 149, 158, 160, 162, 167, 171, 182, 183, 184, 198, 209, 220, 224, 228, 231, 233, 251, 252, 258, 259, 263, 267, 269, 272, 275, 276, 279, 288, 292, 299, 300, 304, 306, 308, 319, 326, 334, 336, 339, 342, 345, 347, 352, 366, 367, 370, 372, 385, 390, 396, 397, 408, 411, 412, 437, 451, 487, 494, 495, 496, 529, 535, 543, 544, 553, 554, 597, 603, 644, 652, 661, 663, 668, 676, 678, 692, 818, 833, 856, 885, 988, 994, 995, 996, 999, 1002, 1003, 1009, 1014, 1027, 1031, 1041, 1043, 1044], "150": [43, 45, 118, 126, 138, 146, 227, 231, 233, 277, 320, 323, 340, 343, 369, 408, 413, 502, 600, 601, 825, 826, 827, 999], "1500": [74, 83, 90, 95, 100, 118, 226, 230, 249], "15000": [244, 672, 687, 861, 862], "15005": [1040, 1042], "15007": 1041, "15010": 1039, "15028": 1039, "15038": 1039, "150407": 378, "15044": 1039, "15049": 1039, "150527": 300, "15053": 1039, "15057": 1039, "1506": 380, "15080": 1039, "15080251": 320, "15082": 1039, "15083": 1039, "15084": 1039, "15086": 1039, "15094": 1039, "15096": 1039, "15099": 1039, "151": [318, 378, 411, 499, 999, 1011], "15100": 1039, "15119": 1039, "15120": 1039, "15126": 1041, "15138": 1039, "15160": 1039, "15179": 1040, "152": 378, "15257": 1039, "1527": 860, "15274": 1039, "15297572": 534, "153": 663, "15304": 1039, "153244303321897735": 404, "15361": 1041, "15375": 1039, "15380": 1040, "15382": 1039, "15393": 1039, "154": [295, 302, 651, 1000, 1020], "1542": 378, "15427": 1041, "15429": 1039, "15436": 1040, "154453": 300, "15463": 1039, "15488": 1039, "15490": 1039, "155": [246, 1020], "15503": 1040, "15524": 1039, "1553374": 404, "1553511": 404, "1554": 860, "15557": 1039, "15558": 1040, "15582": 1040, "156": [163, 183, 338, 369, 1009, 1020], "15622": 1040, "15625": 1039, "156252": 198, "15636": 1041, "15652": 1040, "15655": 1040, "15661": 1039, "15669": 1040, "15699552": 1000, "157": [378, 608], "15707": 1040, "15709": 1040, "15730": 1040, "157334": 300, "15751": 1039, "15760": 1039, "15762": 1040, "15763": 1041, "15773": 1040, "15782": 1040, "15785": 1040, "15797": 1039, "158": [77, 91, 411, 669], "15806": 1040, "15810": 1039, "15834": 1040, "15863": 1039, "15864": 1040, "15868": 1039, "15879": 1039, "15888": 1039, "15898": 1039, "159": [86, 347, 367, 1029], "15918": 1040, "1592": 496, "15926": 1040, "15930": 1039, "15933": 1039, "15936": 1039, "15937": 1039, "159419": 247, "15946": 1040, "15947": 1039, "15948": 1043, "15950": 1040, "15953": 1040, "15959": 1040, "15963": 1040, "1597": 258, "15980": 1040, "15984": 1043, "15996": 1039, "15e": 120, "16": [43, 44, 47, 51, 52, 57, 64, 66, 78, 83, 84, 87, 88, 99, 106, 111, 120, 123, 158, 184, 202, 206, 207, 208, 221, 224, 226, 227, 231, 238, 242, 258, 266, 267, 268, 288, 302, 304, 308, 313, 340, 348, 353, 367, 369, 378, 385, 408, 409, 412, 439, 454, 456, 468, 469, 475, 476, 495, 496, 500, 514, 532, 533, 568, 588, 594, 595, 606, 607, 639, 650, 651, 654, 655, 656, 657, 682, 683, 813, 818, 830, 879, 905, 913, 974, 975, 976, 988, 995, 999, 1009, 1014, 1020, 1027, 1029, 1030, 1034, 1035, 1037, 1038], "160": [241, 988], "1600": [83, 87], "160030": 198, "16006": 1040, "16018": 1043, "16021": 1040, "16052385": 130, "16061": 1043, "16066": 1041, "16069": 1040, "16075": 1040, "16076": 1039, "16084": 1040, "16090": 1040, "16103": 1040, "16111": 1040, "16112": 1040, "16117": 1040, "161245": 87, "16132": 1040, "16144": 378, "16147": 369, "16149": 1040, "16159": [378, 1040], "1616": 470, "16182": 1040, "16183": 1040, "162": [91, 369], "16224": 1040, "1623": 57, "1624": 496, "16245": 1040, "16257": 1040, "16261": 1040, "16266": 1040, "16280": 1040, "16289": 1041, "163": [163, 281, 369, 1007], "163224": 198, "16323": 1040, "16326": [43, 1041], "16327": 43, "16328": 43, "16329": 43, "16330": 43, "16331": 1040, "16335": 1041, "16352": 1041, "16362": 1040, "16379": 43, "16380": 43, "16381": 43, "16382": 43, "16383": 43, "16392": 1041, "16397": [1039, 1040], "164": 411, "164009": 267, "16401": 1040, "16403": 1040, "16431": 1040, "16437": 1040, "16442": 1040, "16443186": 1000, "16449": 1042, "16451": 1040, "16466": 1040, "16484": 1040, "16493": 1041, "165": 1000, "16500": 1039, "16505": 1039, "16508": 1040, "16530": 1041, "16531": 149, "16539": 1040, "16585": 1040, "166": [43, 302, 378, 999, 1029], "16605": 1043, "16619": 1041, "16622": 1040, "16625": 1041, "16632": 1040, "16655": 1040, "16663": 1040, "166667315173": 52, "16692": 1040, "16695": 1044, "167": [257, 378, 973, 1020, 1029], "16718": 1040, "16726": 1040, "16728": 1040, "16747": 1044, "16748": 1043, "168": 1029, "1680": 369, "16801": 1040, "16837": 1040, "16841": 1040, "16849": 1040, "1689": 348, "169": [81, 91, 202, 302, 1020], "16906": 1041, "1691": 995, "169106": 264, "1693": 904, "16935": 1041, "16948": 1043, "16950": 1040, "169504": 224, "16979946": 1000, "1698": 649, "16981": 1040, "16985": 1041, "16993": 1040, "17": [47, 52, 57, 74, 85, 106, 111, 149, 168, 183, 206, 230, 237, 243, 258, 299, 308, 315, 343, 348, 367, 370, 377, 390, 396, 397, 404, 408, 441, 458, 484, 495, 496, 498, 521, 529, 534, 538, 545, 547, 548, 553, 557, 558, 567, 568, 596, 628, 649, 657, 658, 659, 666, 669, 672, 674, 687, 692, 729, 730, 740, 761, 766, 783, 784, 787, 789, 818, 842, 853, 868, 873, 874, 882, 884, 890, 906, 909, 912, 913, 914, 915, 949, 973, 988, 989, 1000, 1002, 1020, 1027, 1029, 1030, 1031, 1032, 1035, 1038, 1043], "170": [79, 90, 95, 378], "1700": 83, "170087": 300, "17021": 1040, "17032": 1040, "17036": 1042, "17038": 1041, "170388": 1000, "1706": 329, "17061": 1040, "17090": 1041, "17095": 1041, "171": [86, 163, 369, 378, 788, 999], "17107": 1041, "17132867": 86, "1714": 995, "17148": 1041, "17159": 1041, "17169": 1042, "17187": 1041, "17192": 1041, "17193": 1041, "172": [378, 491, 492, 649, 995], "17204": 1040, "17205": 1040, "17210": [52, 1040], "17225": 1041, "1723": 46, "17233": 1041, "17235": 1040, "17236387": 210, "17266": 1043, "17289014": 170, "1729": 184, "173": [91, 378, 583], "17309": 1040, "1731": 302, "17317": 1041, "17357": 1040, "17360": [47, 1040], "17367": 1041, "17370318": 221, "17374": 43, "17375": 43, "17376": 43, "17377": 43, "17378": 43, "17379": [43, 52, 1041], "1738": 999, "17386": 1041, "17388": 1045, "17396": 1041, "174": [145, 274, 302, 378, 583, 1020], "17406": 1041, "17412": 1041, "17414": 1041, "17427": 1041, "17433": 1040, "17443": 1042, "17448": 1041, "1747": 184, "17474": 224, "17478": 1041, "17491": 1041, "17499": 1041, "175": [103, 378, 1009, 1020], "17526": 1041, "175298": 267, "17546": 1041, "17569": 1041, "17575": 1048, "17578": 1041, "17598": 1041, "176": [97, 378, 837, 1000, 1007, 1020], "17603": 1041, "17604": 1041, "17606": 1041, "17608": 1041, "17609": 1041, "17610": 1041, "17612": 1041, "17614": 1041, "17616": 1041, "17622": 1042, "17633": 1041, "17644": 1041, "17651": 1041, "17661": 1041, "17662": 1041, "17679": 1041, "17694": 1040, "17697015": 320, "177": [334, 378, 1020], "17702": 1041, "1771": 348, "17742": 1040, "17743": 1042, "17746": 1042, "17750": 1042, "17759": 1041, "17769": 1042, "17772": 1042, "17777": 1041, "17785": 1042, "178": [46, 369, 378, 508, 848], "178000": 306, "17804": 1041, "17812": 1040, "17819": 1043, "17826": 1041, "17833": 1041, "17848": 1040, "1785": 348, "17856": 1041, "17864": 1041, "17876": 1041, "17878": 1041, "179": [241, 369, 378, 411, 1009, 1020, 1029], "1790": 47, "17914": 1040, "17928620": 366, "17932": 1041, "17935": 1041, "17937": 1041, "1794": 47, "17959": 1040, "1797": [91, 262, 302, 325, 369, 416, 442, 500, 530, 531, 532, 533, 598, 599, 688, 689, 690, 691, 693, 1002], "17984": 1041, "17985": 1040, "17985197": 221, "17987": 1041, "17992": 1041, "17995": 1040, "17997": 1041, "17_760": 149, "17t14": 366, "18": [43, 46, 47, 57, 75, 79, 82, 86, 93, 95, 106, 127, 146, 163, 165, 176, 183, 217, 233, 238, 258, 263, 264, 281, 302, 308, 310, 326, 347, 348, 349, 372, 378, 408, 409, 412, 444, 456, 490, 498, 499, 500, 502, 503, 508, 533, 534, 536, 538, 539, 555, 556, 557, 558, 561, 562, 563, 564, 567, 569, 570, 571, 572, 574, 576, 577, 588, 593, 598, 599, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 646, 649, 658, 659, 671, 714, 718, 731, 734, 735, 741, 743, 797, 798, 821, 830, 837, 851, 860, 861, 862, 868, 874, 882, 883, 894, 904, 905, 912, 913, 914, 915, 916, 947, 948, 988, 997, 999, 1009, 1020, 1027, 1029, 1030, 1033, 1034, 1036, 1037, 1039, 1040], "180": [70, 249, 250, 251, 254, 255, 293, 297, 321, 378, 500, 1020], "1800": 83, "18000": [349, 367], "18010": 1042, "18016": 1040, "18020": 1044, "1804243": 366, "1805": 47, "18052": 1041, "1808": 47, "18094": 1044, "181": [281, 302, 378], "18108182014": 176, "18114": 1041, "18121": 1041, "18124": 1041, "18149": 1041, "18167": 1041, "18170": 1043, "18176": 1041, "18197458": 355, "182": [167, 302, 378, 411], "18222": 1041, "18256": 1041, "18266": 1041, "18269": 1041, "18278": 1041, "18280": 1041, "18293": 1041, "18298": 1044, "183": [326, 378, 760, 1000, 1029], "18302": 1041, "18310": 1043, "18326": 1041, "18328": 1042, "18334": 1041, "18341": 1041, "18343": 1041, "18368": 1042, "18370": 1041, "18393": 1042, "18394": 1041, "184": [43, 86, 207, 302, 378, 770, 799], "18405": 1041, "18406": 1041, "18410": 1041, "18429": 1041, "18433": 1042, "18444": 1042, "18447": 1041, "18459": 1042, "1847": 46, "18482": 1043, "18488": 1045, "185": [163, 176, 333, 369, 378, 861, 862, 1020], "1850": [45, 367], "18508": 1041, "18510": 1041, "18525": 1041, "18527": 1041, "18528": 1041, "18543": 1042, "18545": 1041, "18555": 1047, "185654": 267, "185659": 198, "18595": 1041, "186": [195, 207, 302, 378, 788, 999], "18607": 1041, "18612": 1041, "18622": 1041, "18639": 1041, "18649": 1042, "1865": 47, "18682": 1041, "18689": 1046, "18691": 1041, "187": [264, 378, 583, 1000, 1031], "1871": 1014, "18723": 1045, "18736": 1042, "1874": 1014, "18746": 1041, "1875": [86, 979], "18768": 1041, "188": [163, 172, 369, 378, 583], "1880": 378, "18805": 1044, "18818427": 667, "18832": 1043, "18842": 1042, "18843": 1047, "18846": [367, 485, 486], "1887": 348, "18898": 1042, "189": [207, 378, 901, 999, 1012], "18925": 1042, "189267": 267, "18959": 1042, "189631": 198, "18964": 1042, "18975": 1043, "189830": 318, "18987": 1041, "19": [43, 52, 172, 183, 211, 231, 254, 258, 308, 309, 326, 369, 370, 386, 390, 396, 397, 404, 412, 415, 441, 490, 514, 515, 516, 534, 538, 539, 545, 547, 548, 555, 556, 557, 558, 562, 563, 564, 581, 588, 648, 658, 659, 666, 667, 668, 671, 672, 674, 676, 678, 687, 707, 785, 799, 800, 814, 827, 832, 833, 835, 836, 850, 851, 870, 881, 902, 906, 909, 912, 913, 914, 915, 988, 999, 1009, 1027, 1029, 1030, 1031, 1032, 1034, 1037, 1046], "190": [50, 145, 224, 260, 273, 297, 323, 367, 378, 496, 1020], "1900": 83, "19002": 1042, "19004": 1042, "19011": 1042, "19024": 1042, "19035": 1042, "1903908407869": 210, "19041": 1042, "19046": 1042, "19047631514961908949361222113": 52, "1905": [163, 369], "19052": 1042, "19055": 1042, "19069": 1042, "19075": 1044, "1908": 47, "19085": 1043, "1909": 47, "191": [115, 378, 1000, 1020], "19112072e": 192, "1912": 47, "19126": 1041, "19145": 349, "19158": 1043, "19159": 1042, "19162": 1042, "19172": 1042, "19174891": 301, "19179": 1041, "19182": 1041, "19198": 1042, "192": [145, 253, 378, 1020, 1029], "19210": 1042, "19211": 1041, "19234": 1041, "19244": 1042, "19263": 1042, "19271": 1041, "19278": 1042, "1929": 47, "192913": 267, "192938": 52, "19296": 1042, "19297": 1042, "193": [378, 411, 715, 786, 1012], "19308": 1041, "1931": [47, 111], "19310": 1042, "19317": 172, "19336": 1042, "193548": 224, "19356": 1042, "1936": [47, 369], "19365": 1042, "1938": 47, "19390": 1042, "19391": 1042, "193949": 267, "194": [149, 261, 302, 1020], "1940": 224, "19401": 1042, "19407": 1041, "19411": 1042, "19415": 1042, "19417": 1041, "194239": 378, "19426": 1042, "19428": 1042, "19438": 1043, "19459": 1042, "19472": 1042, "19473": 1042, "1948": [47, 57], "19483": 1042, "1949": 47, "19490": 1043, "19491": 1042, "19499": 1042, "195": [491, 492, 814], "1950": [369, 999], "1951": 224, "195133": 378, "1952": 47, "19520": 1042, "19522393": 221, "19527": 1042, "1953": 47, "19564": 1042, "19568": 1042, "19571": 1042, "19579": 1041, "1958": [172, 409, 411, 530], "19580": 1041, "196": [128, 606, 901, 1012, 1020], "1960": [627, 716], "19616": 1042, "19631": 1042, "1964": [690, 694, 880, 892, 996], "19641": 1042, "19643": 1042, "19646": 1041, "1965": 47, "19659": 1041, "19662693": [844, 845], "19664": 1045, "19669": 1042, "1967": 47, "196795181": 52, "19680": 1043, "196861": 198, "19689": 1043, "197": [279, 781, 1020], "1970": 47, "19703": 1041, "1972": [47, 369], "19721": 1041, "19727": 1041, "1973": [369, 402], "19731": 1048, "19732": 1041, "19733": 1042, "19734": 1042, "1974": [404, 412, 710], "19746": 1048, "19747": 1043, "1975": 1002, "19752": 1042, "19766": 1042, "197666": 267, "1977": [47, 635], "1978": [224, 995], "19784": 1042, "19788": 1042, "1979": [47, 404, 725, 769], "19790": 1042, "19794": 1043, "19799": 1042, "198": 1029, "1980": [47, 369], "19803308": 115, "1981": [224, 995], "19829832": 221, "1983": [404, 731, 884], "19836": 1042, "1984": [111, 112, 406, 471, 912, 913, 1015], "19847": 1041, "1985": [183, 404, 705, 715, 786], "1986": [989, 1015], "19869": 1042, "1987": [404, 606, 607, 792, 793], "198766": 267, "19879": 1042, "1988": 369, "19883": 1042, "19888": 1041, "1989": [273, 635, 788, 861, 862, 995, 1002], "199": [647, 791, 1014], "1990": 367, "19906": 1042, "19908": 1042, "1990a": 402, "1991": [514, 515, 516], "19916": 1043, "1992": [163, 367, 369, 408, 411, 565, 566, 645, 995], "19922": 1041, "19924": 1041, "1993": [163, 369, 471, 664, 685, 686, 1015], "19934": 1042, "19939": 1041, "1993apr6": 102, "1994": [163, 367, 369, 644], "19948": 1042, "1995": [163, 264, 369, 402, 411, 551, 552, 834, 901, 1000], "1996": [64, 149, 404, 411, 415, 441, 514, 515, 516, 553, 554, 1009], "1997": [135, 367, 409, 411, 533, 552, 690, 694, 995, 996, 999], "1998": [149, 264, 367, 369, 409, 411, 553, 554, 834, 839, 870, 1000, 1001, 1003, 1009, 1013], "19982": 1041, "1999": [175, 367, 402, 404, 406, 409, 411, 434, 447, 454, 466, 471, 532, 539, 553, 554, 557, 558, 723, 898, 906, 907, 909, 910, 1005, 1011], "19th": 404, "1_": 1009, "1_000": [44, 64, 70, 104, 125, 149, 167, 172, 174, 184, 201, 237, 261, 322, 343, 345, 403, 535, 537, 701, 799, 822, 823, 831], "1d": [1, 135, 137, 180, 184, 208, 237, 285, 288, 297, 321, 342, 372, 379, 381, 385, 386, 405, 410, 461, 464, 617, 630, 633, 653, 657, 660, 663, 684, 703, 712, 713, 719, 729, 730, 734, 738, 783, 784, 787, 796, 846, 847, 848, 849, 850, 852, 854, 855, 856, 869, 921, 924, 926, 930, 931, 963, 985, 1000, 1020, 1029, 1034, 1035, 1036, 1038, 1042, 1043, 1047, 1048, 1049], "1e": [44, 45, 46, 49, 55, 63, 80, 120, 151, 154, 156, 163, 167, 170, 172, 173, 174, 175, 176, 178, 183, 191, 202, 207, 208, 220, 224, 227, 229, 233, 236, 239, 244, 249, 252, 254, 255, 258, 262, 272, 275, 301, 310, 311, 316, 318, 319, 323, 329, 334, 336, 343, 347, 378, 416, 440, 444, 449, 456, 459, 468, 469, 475, 479, 480, 481, 529, 530, 531, 534, 535, 536, 537, 538, 540, 541, 543, 544, 545, 546, 557, 558, 559, 560, 591, 596, 605, 607, 608, 611, 613, 614, 615, 619, 620, 622, 623, 625, 627, 638, 640, 641, 642, 644, 645, 646, 647, 648, 649, 652, 653, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 669, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 684, 687, 689, 690, 691, 692, 693, 694, 695, 728, 785, 797, 798, 814, 839, 840, 841, 842, 843, 844, 845, 853, 861, 862, 869, 899, 900, 904, 905, 906, 907, 908, 909, 910, 984, 988, 999, 1003, 1007, 1009, 1013, 1037, 1042, 1043, 1044, 1049], "1e0": [167, 239, 255, 272, 988], "1e1": [167, 173, 207, 239, 336], "1e15": 176, "1e2": [49, 167, 174, 239, 255, 336], "1e3": [45, 46, 49, 167, 173, 239, 275, 319, 988], "1e4": [178, 275, 659, 679, 898, 1011], "1e5": [45, 172, 192, 199, 275, 613, 614, 615, 619, 620, 622, 623, 625, 893, 898, 1011], "1e6": [47, 49, 202, 237, 321, 347, 349, 359, 534, 898, 999, 1011], "1e7": 378, "1er": 412, "1f": [52, 58, 83, 86, 123, 191, 207, 237, 249, 251, 271, 313, 320, 348, 349], "1gb": 359, "1kastner": 1036, "1m": 966, "1mb": [360, 1034], "1mo": 172, "1nn": 369, "1or": 412, "1px": 302, "1qlettinn8oi": 347, "1st": [0, 43, 93, 126, 175, 208, 309, 882, 883], "1z": 412, "2": [1, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 74, 75, 77, 78, 79, 80, 81, 83, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 159, 160, 162, 163, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 182, 183, 184, 185, 186, 188, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 283, 284, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 351, 352, 353, 354, 355, 359, 360, 361, 366, 367, 368, 369, 370, 372, 374, 376, 377, 378, 379, 381, 384, 385, 386, 390, 395, 396, 397, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 426, 427, 428, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 465, 466, 468, 469, 470, 471, 472, 475, 476, 477, 479, 480, 481, 482, 491, 494, 498, 499, 502, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 576, 580, 581, 583, 584, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 600, 602, 603, 604, 605, 606, 607, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 701, 703, 704, 705, 706, 707, 708, 709, 711, 713, 714, 715, 716, 717, 718, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 757, 758, 759, 763, 764, 767, 768, 769, 771, 773, 774, 775, 776, 778, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 823, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 882, 883, 884, 885, 887, 888, 889, 890, 891, 892, 894, 895, 897, 898, 900, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 917, 919, 926, 927, 928, 930, 931, 932, 936, 939, 946, 947, 948, 949, 950, 951, 952, 954, 955, 961, 962, 963, 964, 965, 966, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 984, 985, 988, 989, 990, 991, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1020, 1022, 1026, 1027, 1029, 1030, 1031, 1033, 1034, 1048], "20": [1, 43, 46, 47, 49, 52, 54, 57, 62, 63, 64, 69, 70, 74, 75, 78, 80, 81, 83, 87, 88, 94, 100, 109, 113, 118, 120, 127, 129, 136, 140, 142, 143, 146, 150, 151, 154, 156, 158, 159, 160, 163, 173, 182, 184, 185, 193, 198, 199, 205, 206, 207, 208, 209, 211, 215, 218, 219, 220, 221, 223, 227, 229, 237, 243, 251, 253, 254, 258, 263, 264, 265, 267, 268, 270, 275, 276, 279, 281, 284, 288, 289, 290, 291, 292, 295, 302, 308, 309, 310, 314, 315, 316, 317, 318, 319, 323, 325, 326, 327, 329, 333, 335, 339, 341, 348, 349, 353, 365, 369, 370, 372, 377, 378, 390, 396, 397, 404, 411, 412, 438, 443, 444, 446, 461, 462, 466, 468, 469, 475, 485, 486, 487, 488, 490, 492, 494, 495, 498, 500, 502, 503, 509, 510, 513, 514, 521, 529, 534, 535, 540, 543, 544, 546, 550, 553, 554, 557, 558, 559, 560, 561, 567, 568, 581, 588, 589, 591, 593, 596, 598, 629, 630, 645, 649, 658, 666, 667, 668, 676, 678, 696, 704, 708, 713, 716, 725, 726, 739, 756, 757, 767, 792, 793, 797, 798, 799, 800, 814, 826, 827, 828, 831, 833, 836, 837, 838, 841, 842, 849, 850, 861, 862, 863, 864, 866, 868, 869, 877, 878, 879, 880, 885, 899, 900, 902, 903, 908, 911, 916, 922, 928, 930, 931, 934, 976, 988, 995, 999, 1002, 1005, 1006, 1009, 1012, 1020, 1022, 1023, 1025, 1027, 1029, 1035, 1038, 1041, 1043, 1044, 1049], "200": [69, 70, 79, 83, 87, 93, 107, 123, 136, 146, 153, 171, 195, 204, 208, 211, 212, 213, 218, 223, 227, 245, 246, 249, 262, 264, 265, 271, 273, 274, 304, 307, 315, 327, 335, 336, 353, 355, 367, 384, 409, 411, 416, 437, 451, 465, 468, 469, 520, 531, 532, 533, 536, 537, 538, 541, 545, 583, 649, 651, 671, 679, 692, 746, 814, 861, 862, 902, 906, 907, 908, 909, 910, 922, 999, 1014], "2000": [54, 63, 75, 83, 107, 121, 127, 188, 252, 255, 264, 281, 299, 317, 348, 367, 369, 404, 405, 411, 416, 449, 459, 531, 532, 557, 689, 691, 693, 743, 788, 797, 850, 862, 880, 892, 996, 999, 1005, 1011, 1014, 1048], "20000": [57, 122], "200000": [224, 869], "20002": 1042, "2001": [1, 64, 172, 185, 258, 263, 401, 404, 411, 434, 448, 449, 450, 459, 509, 557, 558, 562, 563, 628, 634, 639, 645, 691, 696, 735, 788, 885, 897, 935, 989, 991, 995, 999, 1005, 1007, 1009, 1011, 1014], "2002": [96, 402, 404, 411, 434, 445, 592, 593, 726, 756, 851, 899, 991, 999], "20023": 1042, "2003": [1, 51, 172, 401, 404, 409, 412, 448, 449, 459, 511, 513, 689, 693, 839, 841, 995, 996, 1001, 1011, 1037], "20030": 1042, "20031": 1043, "2004": [44, 163, 264, 281, 367, 369, 404, 406, 409, 470, 533, 606, 607, 689, 693, 705, 743, 783, 900, 993, 995, 996, 1001, 1014], "2005": [62, 64, 112, 369, 402, 434, 436, 853, 995, 1002, 1012], "20056": 1042, "2006": [1, 50, 297, 367, 411, 414, 459, 496, 555, 556, 563, 564, 610, 611, 614, 619, 622, 649, 666, 667, 741, 788, 789, 797, 839, 897, 914, 915, 995, 999, 1001, 1004, 1011, 1012], "2007": [0, 73, 196, 367, 404, 413, 437, 449, 451, 457, 459, 564, 656, 691, 717, 734, 737, 758, 759, 795, 991, 995, 997, 999], "20072": 1042, "2008": [51, 406, 408, 409, 475, 532, 561, 589, 645, 664, 685, 686, 692, 716, 726, 756, 834, 839, 843, 860, 993, 996, 997, 999, 1000, 1001, 1004, 1005, 1014], "20087": 1042, "2009": [1, 134, 137, 138, 148, 194, 404, 408, 409, 411, 412, 517, 518, 526, 529, 535, 536, 538, 539, 542, 545, 551, 557, 558, 635, 671, 679, 696, 835, 851, 912, 913, 947, 948, 995, 999, 1000, 1006, 1015], "200_000": [869, 1045], "200m": 367, "200x": 1029, "201": [145, 163, 369, 583], "2010": [0, 110, 184, 269, 270, 401, 404, 406, 408, 409, 417, 472, 534, 704, 708, 719, 720, 740, 829, 861, 862, 991, 995, 999, 1003, 1013, 1029], "2011": [0, 184, 378, 409, 412, 533, 536, 538, 539, 545, 589, 627, 638, 658, 730, 989, 1003, 1013, 1029], "20117": 1042, "2012": [0, 112, 402, 411, 553, 554, 561, 639, 743, 988, 992, 999, 1029], "2013": [0, 188, 369, 404, 408, 409, 534, 726, 756, 991, 999, 1030, 1031], "2014": [0, 366, 398, 409, 411, 414, 528, 606, 607, 622, 623, 658, 692, 861, 862, 947, 948, 996, 999, 1003, 1023, 1032], "20145": 1043, "2015": [0, 184, 366, 708, 721, 723, 724, 861, 862, 999, 1006, 1023, 1033, 1034], "201520": 198, "20155": 1042, "20159": 1042, "2016": [0, 231, 366, 404, 988, 1034, 1035], "20161": 1042, "20165": 1042, "2017": [0, 264, 366, 402, 404, 415, 441, 999, 1035, 1036], "2018": [0, 207, 224, 412, 447, 988, 999, 1023, 1036, 1037], "2019": [0, 184, 404, 449, 459, 692, 996, 999, 1006, 1009, 1037, 1038, 1039], "202": [86, 296, 1020], "2020": [0, 367, 1022, 1039, 1040, 1041, 1042], "20200": 1042, "20207": 1042, "20209": 1042, "2021": [0, 370, 372, 671, 999, 1041, 1042], "2022": [0, 360, 404, 411, 705, 996, 1009, 1043, 1044], "2023": [0, 384, 398, 400, 402, 1044, 1045], "20231": 1042, "2024": [1046, 1047, 1048], "20240": 1042, "2025": [376, 1048, 1049], "20250": 1042, "20272": 1042, "20297": 1042, "203": [206, 239, 348, 1020], "20312": 1042, "203174": 198, "20326": 1042, "20331": 1044, "2034": [347, 367], "20380": 1042, "20385": 1042, "2039": 267, "204": [1007, 1012], "20408": 1043, "20415": 1044, "20416": 1042, "20431": 1042, "20477": 1042, "20512": 1042, "20515": 1042, "20521": 1042, "20524": 1045, "20526": 1042, "20528": 1042, "20531": 1042, "20534": 1042, "20552": 1042, "20554": 1042, "20560": 1042, "20567": 1043, "20583": 1042, "20597": 1042, "2061": 147, "20617": 1044, "20619": 1042, "20638": 1042, "20640": [140, 179, 367, 385, 405, 487], "20652": 1042, "20653": 1043, "20657": 1042, "20673": 1042, "20683": 1042, "207": [302, 1029], "2071716": [844, 845], "20727": 1042, "20729": 1042, "20752": 1042, "2075215": 221, "20753": 1043, "20761": 1042, "207667": 267, "2079": 269, "208": [163, 284, 305, 369, 1020], "20802": 1044, "20803": 1043, "20811": 1043, "20842": 1042, "20843": 1042, "20860": 1043, "20880": 1042, "208864": 198, "20899": 1042, "209": [163, 475, 741, 880], "20904": 1042, "20959": 1042, "20960": 1042, "20961": 1042, "20_000": 284, "20new": 367, "20newgroup": [180, 189, 201, 222, 300, 302, 486, 658, 830, 833, 995, 1020], "20news_hom": 367, "20newsgroup": [221, 365, 1029], "20th": 708, "21": [43, 52, 57, 105, 118, 163, 183, 198, 208, 224, 231, 254, 258, 284, 302, 306, 308, 319, 369, 374, 376, 390, 401, 411, 412, 414, 438, 442, 471, 530, 559, 560, 561, 567, 568, 587, 588, 590, 605, 627, 669, 687, 754, 800, 814, 827, 870, 877, 879, 885, 902, 918, 991, 995, 999, 1000, 1027, 1029, 1030, 1032, 1036, 1037, 1039], "2100": [83, 316], "2102": 542, "21020": 1044, "21026": 1043, "21032": 1043, "21038": 1043, "2107": 269, "21078": 1043, "21079": 1043, "21080": 1042, "21086": 1043, "21093": 1042, "211": [251, 269, 318, 328, 880, 892, 1020], "21109": 1043, "21114": 1043, "211217613": 1037, "21130": 1042, "21145": 1042, "21148": 1043, "2117": 329, "21177": 1043, "21179": 1042, "21194": [80, 1042], "21195": 1042, "21199": 1042, "211mb": 347, "212": [145, 163, 269, 328, 369, 466, 475, 498, 1005], "21219": 1043, "212197e": 224, "21243": 80, "21251": 1042, "2126": 243, "21271": 1042, "21278": 1043, "21295": 1042, "21298": 1043, "21301203": 170, "213087e": 224, "21310": 1043, "21316": 1043, "21330": 1043, "21334": 1043, "21336": 1042, "21340": 1042, "21341": 1043, "21351": 1042, "21389": 1042, "2139": [207, 224], "214": [67, 168, 583, 947, 1020], "21408": 1043, "21425": 1043, "21430": 1043, "21432": 1043, "21434": 1043, "21436": 1043, "21443888": 221, "21445": 1043, "21448": 1043, "21469": 1044, "21481": [1042, 1043], "21482": 1043, "21493": 1042, "215": [250, 583, 1020], "21517": 1042, "21534": 1043, "21542": 1043, "21544347": 51, "21552": 1042, "21565": 1043, "2156660": 320, "21567": 1043, "21569": 1043, "21573": 1043, "21576": 1043, "21578": [47, 1042], "2159048": [653, 663, 684], "216": [259, 1012, 1020], "21606": 1043, "21616": 741, "21617": 1043, "21632": 1043, "21694": 1042, "217": [268, 533, 539, 799, 1009, 1020], "21701": 1043, "21705": 1043, "2171": 46, "21713": 1043, "21724": 1043, "2173": [196, 656, 995], "21735": 1043, "21741": 1042, "21762": 1043, "21767": 1043, "2179": 47, "218": [267, 369, 468, 527, 715, 786], "2180": 57, "21800": 1043, "21805": 1043, "21807": 1046, "21808": 1043, "21809": 1045, "21814": 1043, "21832": 1043, "21833": 1042, "21837": 1043, "21845": 1042, "21871": 1042, "21873": 1043, "21880": 1043, "21881": 1043, "21888": 1043, "218997": 198, "219": 263, "21901": 1043, "21915": 1042, "21917": 1042, "2192": [196, 656, 995], "21938": 1044, "21954": 1043, "21987": 1043, "21988": 1043, "21991": 1042, "21998": 1043, "21e": 604, "22": [43, 52, 77, 138, 139, 141, 163, 178, 179, 180, 183, 184, 185, 214, 223, 243, 246, 254, 258, 283, 286, 302, 304, 308, 310, 312, 315, 322, 323, 326, 329, 349, 370, 372, 377, 390, 396, 397, 401, 434, 445, 469, 485, 486, 493, 494, 502, 513, 522, 529, 535, 540, 543, 544, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 593, 627, 628, 632, 634, 645, 647, 651, 653, 655, 658, 659, 661, 663, 665, 669, 688, 692, 702, 704, 713, 757, 769, 778, 783, 784, 788, 800, 801, 805, 814, 819, 821, 824, 825, 826, 827, 828, 829, 830, 831, 848, 850, 852, 854, 855, 856, 861, 862, 863, 865, 868, 884, 895, 904, 906, 907, 908, 909, 910, 912, 913, 914, 915, 941, 943, 991, 999, 1009, 1020, 1027, 1029, 1032, 1037, 1040, 1042], "220": [79, 258, 1029], "2200": [83, 367, 491], "22002": 1043, "22014": 1044, "22015": 1043, "22016": 1043, "22027": 1043, "22035798": 320, "220446049250313e": [468, 469, 475, 650, 651, 654, 655, 656, 682, 683], "22046": 1049, "22050": 1042, "22054": 1044, "22058": 1043, "22059": 1043, "22062": 1043, "22063": 1043, "22064": 1043, "22065": 1043, "221": [115, 152, 258, 475, 1032], "22106": 1043, "22108": 1043, "2211": 634, "22111": 1043, "22114": 1043, "22118": 1043, "22119": 1043, "22120": 1043, "22137": 1043, "22148": 1043, "22149": 1043, "22150": 1043, "22154": 1043, "22159": 1043, "22181": 1043, "22188": 1043, "22191": 1043, "22199": 1043, "222": [115, 152, 329, 783, 1014], "22203": 1043, "22206": 1043, "22212": 1043, "22215": 1043, "22217": 1043, "22218": 1043, "2222": 656, "22223": 1043, "22227": 1049, "22235": 1043, "22237": 1043, "2224": 1031, "22240": 1043, "22248": 1043, "22249": 1043, "22254": 1043, "22255": 1043, "22268": 1044, "22269": 1044, "22284": 1043, "22288": 1043, "223": [86, 115, 152, 163, 369], "22300": 1043, "22314355": 589, "22318": 1043, "22320": 1043, "22356": 1043, "22361": 369, "22370": 1043, "223745": 207, "22385188": 86, "224": [82, 115, 152, 404, 725, 822, 1020], "22409": 1045, "22410": 1043, "22412": 1043, "22438": 384, "2246": 224, "22476": 1043, "22486": 1043, "22493": 1043, "22498": 1043, "225": 411, "22504": 404, "22506": 1045, "22508": 1043, "22518": 1044, "22525": 1043, "22526": 1043, "22527": 1044, "22537": 1043, "22548": 1043, "22553": 1043, "22554": 1044, "22562": 1044, "22566": 1043, "22578": 1043, "225806": 224, "22595": 1043, "226": [404, 415, 441], "22604": 1043, "22629": 1044, "22635": 1043, "22665": 1044, "22685": 1043, "22687": 1043, "22692": 123, "22694": 1043, "22695": 1043, "22696": 1043, "22697": 1043, "227": [124, 203, 264, 404, 725, 1020], "22710": 1044, "22735": 1043, "22747343e": 111, "22775": 1043, "22784907": 827, "22806": 1043, "22808": 1043, "22830": 1043, "2284": 184, "22856": 1043, "2286": 367, "22866": 1043, "22868": 1043, "2287": 367, "2288": 367, "22891": 1043, "22898": 1044, "22899": 1043, "229": [608, 999], "22908": 1043, "22913": 1043, "22950": 1043, "22953": 1043, "22965": 1044, "22968": 1044, "22982": 1043, "22993": 1044, "22nd": 436, "23": [43, 57, 63, 70, 77, 83, 123, 149, 151, 154, 163, 180, 207, 231, 235, 243, 247, 254, 258, 302, 308, 312, 315, 316, 317, 320, 323, 326, 369, 370, 378, 390, 411, 417, 427, 437, 444, 449, 451, 459, 462, 464, 465, 472, 476, 477, 479, 480, 481, 487, 490, 498, 499, 500, 502, 503, 508, 510, 512, 520, 522, 536, 537, 538, 541, 545, 552, 554, 556, 558, 559, 560, 563, 566, 567, 568, 606, 607, 611, 627, 630, 632, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 667, 669, 670, 672, 673, 675, 678, 679, 680, 681, 717, 778, 830, 836, 837, 838, 847, 855, 862, 865, 877, 884, 892, 893, 902, 905, 907, 910, 913, 915, 928, 930, 931, 943, 948, 999, 1020, 1022, 1027, 1029, 1030, 1036, 1037, 1038, 1041], "230": 583, "2300": [83, 198], "23023": 1043, "23033": 1043, "23034": 1043, "23036": 1043, "23038": 1044, "23040": 1043, "23046": 1043, "23047": 1043, "23077": 1043, "23079": 1043, "23095": 1043, "23097": 1043, "23098": 1043, "23099": 1045, "231": [50, 159, 297, 367, 404, 415, 441, 496, 583, 1020], "23101": 1044, "23113": 1043, "23115": 1043, "23127": 1044, "23139": 1044, "23149": [367, 495, 1043], "23194": 1043, "23197": 1044, "23198": 1043, "232": [75, 237, 258, 475, 999, 1020], "23210": 1044, "23214": 1043, "2323": [689, 693, 996], "23252": 1044, "23256": 1043, "23264": 1043, "23271": 1043, "23273": 1043, "23275": 1044, "23299": 1043, "233": 86, "2331": 43, "23317": 1046, "2332": 43, "2333": 43, "2334": 43, "2335": 43, "23358": 1043, "2336": 378, "23370": 1043, "23395": 1043, "234": [839, 843, 861, 862, 1001], "2341": 522, "23410": 1043, "234137": 198, "23442": 1044, "23446": 1044, "23461": 1044, "23470": 1044, "23471": 1043, "23480": 1044, "235": [310, 347], "235430": 267, "23548": 1043, "2357juan": [1043, 1044, 1045], "23585": 1044, "23595": 1045, "23604": 1044, "23608": 1043, "23619": 1044, "23636": 1043, "23637": 1044, "23668876": [653, 663, 684], "236720": 198, "23683": 1044, "23689075": [653, 663, 684], "23726": 1044, "23731": 1045, "23734": 1044, "237703": 198, "23773583": 111, "23798": 1044, "238": [229, 340, 730, 999, 1020], "23819": [1044, 1045], "23833": 1043, "23834": 1044, "23865": 1044, "23874": 1044, "238744": 198, "23877": 1044, "238955": 267, "239": [237, 1029], "23905": 1044, "23935": 1044, "23977": 1044, "23990": 1043, "23993": 1044, "24": [43, 44, 52, 99, 149, 163, 180, 184, 188, 194, 196, 231, 244, 258, 266, 276, 284, 312, 313, 314, 316, 320, 325, 326, 370, 376, 390, 396, 397, 404, 411, 412, 414, 434, 437, 438, 439, 441, 442, 444, 445, 446, 447, 448, 449, 450, 457, 459, 461, 466, 467, 468, 469, 470, 471, 472, 473, 486, 487, 488, 490, 494, 502, 513, 514, 515, 516, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 541, 542, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 567, 568, 580, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 610, 611, 627, 628, 629, 630, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 698, 699, 700, 702, 708, 714, 727, 738, 746, 753, 797, 798, 800, 803, 804, 814, 821, 828, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 865, 867, 868, 869, 870, 873, 874, 876, 878, 879, 880, 881, 882, 884, 894, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 943, 973, 979, 988, 1006, 1009, 1020, 1027, 1029, 1037, 1038, 1039, 1040, 1042], "240": [43, 52, 79, 286, 1007, 1020, 1029], "2400": 83, "24000": 518, "24015": 1043, "24017": 1043, "24027": 1045, "24051": 1044, "24058": 1044, "24075": 1044, "24076": 1045, "24083": 1045, "24084": 1044, "24087": 1043, "241": [54, 411, 565, 566], "2410": 542, "24140": 1045, "24141": 1044, "24145": 1045, "24146": 1044, "24160": 318, "242": [884, 1029], "24218": 1044, "24230": 1045, "24245": 1044, "24258": 1044, "24264": 1044, "24283": 1044, "243": 583, "2431": 472, "24317": 1044, "24338": 1044, "24350": 1044, "24354": 1044, "24365": 1044, "243802": 300, "244": [258, 281, 583], "24404831511191221642141021252626109": 52, "24405": 1044, "2441": 224, "24412": 1044, "24421": 1044, "24433": 1044, "24446": 1043, "244466": 247, "24465": 1044, "2449": 378, "245": [1011, 1031], "24512": 1044, "24523": 1044, "24528": 1044, "24538": 1044, "24539": 1044, "24543": 1044, "24556": 1044, "24568": 1045, "245961": 146, "245mb": 349, "246": [93, 194, 1007, 1020, 1029], "24617": 1044, "2463": 995, "24630": 1044, "24631": 1043, "24637": 1044, "24640578": 111, "24645": 1044, "24667": 1044, "24668": 1045, "24677": 1045, "24683": 1044, "24688": 1044, "24699": 1044, "247": 884, "24714": 1044, "24747": 1044, "24750": 1044, "24755": 1044, "24767": 1044, "24769": 1045, "24788": 1049, "248": [146, 613, 1020], "24838": 1046, "24849": 1044, "24855": 1044, "24856": 1044, "24871": 1045, "24873": 1044, "2487575": 188, "2487591": 188, "24882": 1045, "24889": 1044, "24894": 1044, "249": [158, 258, 947, 1020], "24935": 1045, "24951": 1044, "25": [43, 44, 45, 46, 48, 49, 50, 52, 57, 61, 63, 66, 77, 87, 88, 111, 115, 127, 129, 138, 146, 159, 160, 168, 172, 183, 191, 199, 211, 233, 251, 258, 263, 264, 265, 297, 299, 302, 304, 306, 318, 325, 326, 347, 353, 355, 359, 378, 408, 411, 412, 415, 441, 474, 499, 502, 519, 568, 596, 618, 678, 734, 796, 817, 830, 856, 874, 879, 881, 882, 885, 893, 894, 896, 897, 945, 949, 979, 995, 999, 1000, 1002, 1009, 1020, 1029, 1031, 1037, 1040], "250": [49, 98, 146, 188, 226, 491, 692, 822, 988, 1011, 1036], "2500": [172, 999], "25000": 77, "2501": [163, 369], "25044": 1045, "250639": 198, "25067": 1044, "25077": 1044, "25080": 1044, "25089": 1044, "25093": 1045, "25094": 1044, "251": [45, 90, 163, 228, 369, 1020], "25102": 1045, "25120": 1045, "25129": 1044, "25147": 1044, "25163598": 380, "25172": 1044, "25174": 1044, "25177": 1045, "25186": 1045, "25188": 1044, "25190": 1045, "25193977": 1000, "25196": 1045, "252": [163, 228, 369, 532, 880, 892], "25209": 1045, "25214": 1045, "25220": 1045, "25232": 1045, "25250": 1044, "25251": 1045, "25257": 1045, "25274": 1044, "25275": 1046, "25291": 1045, "25291366": 355, "25294": 1045, "25295": 1044, "25296": 1044, "25297": 1045, "25299": 1045, "253": [145, 329, 532, 1020], "25308": 1045, "25312": 1044, "25330": 1048, "25334": 1045, "25341": 1044, "253445": 146, "25349312e": 192, "2535": [466, 471], "25354": 1044, "2536": 473, "25363": 1044, "25367": 1045, "25370": 1044, "25387": 1045, "254": 478, "25402": 1045, "25417": 1045, "25432": 1045, "25438": 1045, "25443": 1045, "25477": 1044, "2548": 205, "25490": 1045, "25499205": 534, "255": [123, 151, 154, 258, 284, 301, 310, 316, 318, 323, 367, 411, 491, 492, 559, 560], "25500": 1044, "25506": 1045, "25511": 1044, "25531": 1045, "25563": 1044, "25570": 1044, "25587": 1045, "25589": 1044, "256": [77, 86, 145, 217, 310, 360, 367, 404, 411, 446, 465, 535, 544, 561, 860, 892, 902, 1020, 1043], "25601": 1045, "25619": 1044, "25629": 1045, "25638": 1044, "25659": 1045, "25664": 1044, "25672": 1045, "25677": 1045, "2568": 1038, "25694": 1044, "25697": 1045, "257": [228, 262], "25704": 1044, "25713": 1045, "25719016": 1000, "25732": 1045, "25733": 1045, "25744": 1044, "25747": 1044, "25752": 1045, "25774": 1044, "25784": 1045, "2579": 692, "258": 228, "25805": 1045, "25813": 1045, "25814": 1045, "25815": 1045, "259": [50, 228, 297, 367, 411, 496, 565, 566], "259031": 198, "259297": 198, "25931": 1045, "25956": 1045, "25973": 1045, "25987": 1045, "25991": 1047, "25e": 604, "25th": [43, 243, 882], "26": [43, 80, 87, 111, 118, 122, 123, 172, 183, 188, 231, 242, 258, 326, 378, 568, 648, 822, 880, 892, 948, 1020, 1029, 1032, 1033, 1041, 1047], "260": [263, 1042], "26019": 1045, "26021": 1045, "26033": 1045, "2605": 692, "26082": 1045, "26093": 1045, "261": [129, 1020], "26106": 1045, "26108": 1045, "26113448": 160, "26120": 1047, "26121": 1045, "26163": 1046, "26194": 1045, "262": 1029, "26202": 1049, "26207": 1045, "26242": 1045, "26243": 1046, "26253567e": 111, "26264": 1045, "26267": 1046, "26278": 1046, "26286": 1045, "26286057": 221, "26289": 1045, "26299": 1046, "26315": 1046, "26316": 172, "26318": 1045, "26323": 1045, "26325": 1045, "26333": 1045, "26335": 1049, "26337": 1045, "26362917": 221, "26366": 1046, "26367": 1048, "263758": [582, 586], "26376": 1045, "26385": 1045, "26386": 1045, "26386883": 170, "26391": 1046, "2640": 835, "26400": 1045, "26410": 1046, "26411": 1046, "26416": 1045, "26424": 1045, "26433": 1045, "26454": 1045, "26459": 1046, "26464": 1046, "26466": 1045, "265": [735, 839, 843, 1001], "26503": 1045, "26506": 1046, "26521": 1045, "2652124": 815, "26525": 1046, "26551": 1045, "26566": 1045, "26579": 1045, "26593496": 221, "26600": 1045, "26602": 1045, "26616": 1046, "26634": 1046, "26642044": 666, "26644": 1045, "26648": 1046, "26653": 1045, "26657": 1045, "2666": 999, "2667": 496, "26674": 1046, "26683": 1046, "26689": 1048, "267": [729, 783, 999, 1009, 1029], "2671": 1009, "26721": 1046, "26734": 1046, "26736": 1046, "26744": 1046, "26748": 1045, "2675": 46, "26754": 1045, "26760": 1045, "26765": 1046, "267703": 87, "26772": 1045, "26786": 1046, "26789": 1046, "268": 278, "26814": 1045, "268147": 267, "26828": 1046, "26830": 1046, "26831": 1046, "26837": 1047, "26840": 1046, "26855": 1046, "26862": 1046, "26893": 1045, "26896": 1046, "269": [111, 509, 1020], "26903": 1045, "26909": 1046, "26913": 1045, "2692": 1009, "26931": 1045, "26934744": 130, "26940": 1045, "26944": 1046, "26957": 1046, "26th": [404, 726, 756, 999], "27": [43, 45, 52, 57, 67, 81, 87, 231, 258, 265, 325, 326, 344, 369, 404, 412, 515, 522, 604, 713, 788, 789, 885, 905, 999, 1009, 1020, 1029, 1031], "270": [194, 326], "27000": 224, "27002": 1045, "27005": 1046, "27006": 1046, "27017": 1046, "27018": 1046, "27044": 1045, "27054655": 221, "27058": 1046, "27096": 1048, "27098": 1046, "27100": 1046, "27104": 1046, "27110": 1046, "27124": 1049, "27137": 1046, "27139": 1046, "2714": 243, "271411": 247, "27161": 1046, "27161955": 160, "27166": 1046, "27167": 1045, "27179": 1046, "27185": 1046, "27204": 1046, "27219": 1046, "272214": 583, "27239": 1046, "27240": 1046, "27243": 1045, "27250": 1046, "27252": 1046, "2727": 556, "27274": 1046, "27277": 1046, "27291": 1046, "27292": 1045, "27301": 1046, "27308": 1046, "27309": 1046, "27311": 1045, "27314": 1046, "27315": 1046, "27328": 1046, "27336": 1046, "2734": 378, "27344": 1047, "27369": 1048, "27372": 1046, "27381": 1048, "27389": 1046, "274": [278, 509, 1020], "27412": 1048, "27417": 1046, "27431": 1046, "27438": 1046, "27456": 1047, "27468": 1045, "27478": 1046, "27490": 1046, "27491": 1047, "27499706": 51, "275": [43, 250, 326, 1032], "27500": 1046, "27526": 1047, "27538": 1046, "27544": 1046, "27556": 1046, "27558": 1046, "27560": 1047, "27566": 1047, "275706": 87, "27573": 1045, "27576": 1047, "27577": 1046, "27580": 1045, "27583": 1045, "27584": 1047, "275851": 247, "2759": [896, 897], "27597342": 115, "276": [54, 264, 605], "27601": 1046, "27614": 1046, "27624": 1046, "2763": [417, 472], "27636": 1047, "27639": 1046, "27645": 1046, "27650": 1046, "27651": 1046, "27657": 1047, "27668": 1046, "27670": 1046, "27675": 1046, "27678": 1046, "277": [1007, 1031], "27700": 1047, "27702": 1046, "27710": 1046, "27718": 1046, "27720": 1046, "27721": 1046, "27734": 1046, "27736": 1048, "27757": 1046, "27760": 1046, "27772182": 52, "278": [369, 844, 845], "2780": 378, "27800": 1047, "27801": 1046, "27817": 1046, "27821": 1046, "27828": 1046, "27834": 1046, "27835": 1046, "27841": 1046, "27844": 1047, "27865": 1046, "27875": 1048, "27898": 1046, "27899": 1046, "279": [176, 995, 1020], "27904": 1047, "27937": 1047, "27966": 1048, "27979": 1046, "27990": 1047, "27e": 687, "28": [43, 99, 146, 163, 183, 222, 243, 258, 273, 301, 325, 326, 369, 378, 404, 408, 447, 454, 862, 1009, 1029, 1032, 1035], "280": 326, "28009951": 827, "2802": 57, "28040": 1047, "28048": 1046, "28051": 1047, "28053": 1047, "28064": 1048, "28074": 1046, "28085": 1047, "28090": 1046, "28092": 1047, "28095": 1046, "28096": 1048, "28102": 1047, "28106": 1048, "28111": 1046, "28121": 1046, "28136": 1047, "28160": 1047, "28165": 1046, "28167": 1046, "28179": 1048, "2818": 467, "28184": 1046, "28187": 1047, "28188": 1046, "28191": 1046, "28195": 1046, "28198": 1046, "282": [178, 1020, 1029], "28205": 1047, "28207552": 221, "28210": 1047, "28222": 1046, "2823": 329, "28233": 1046, "28235": 1046, "28240": 1046, "28241": 1046, "28247": 1046, "2825": 0, "28256": 1046, "28261": 1047, "28262": 1046, "28263": 1046, "28268": 1048, "28295": 1046, "283": [345, 605, 1020], "2830": 0, "28306": 1047, "28327": 1046, "2833": 378, "28351": 1047, "28352": 1047, "28360": 1047, "28365": 1046, "28377": 1046, "28385": 1046, "28399": 1047, "284": 649, "28407": 1047, "28425": 1047, "284315": 258, "28432": 1047, "28435": 1047, "28471": 1047, "284806": 258, "284807": 258, "28483": 1047, "28491": 1047, "28494": 1048, "28498": 1047, "285": [326, 724], "28519": 1048, "28521": 1047, "28552": 1047, "28557": 1047, "28559": 1049, "28582": 1047, "286": 411, "28604": 1047, "28612": 1047, "28622": 1048, "28637": 1048, "28651": 1047, "28664": 1047, "28670": 1047, "28692": 1047, "287": [138, 184, 311, 1011, 1020], "28701": 1048, "28703": 1047, "28712": 1047, "28718": 1047, "28722": 1047, "28756": 1047, "28763": 1047, "28768": 1047, "28773": 1048, "2879": 1036, "288": [533, 539], "28808734": 211, "28822": 1047, "28823": 1047, "28840": 1048, "28843": 1047, "28847": 1047, "289": 183, "28901": 1048, "28915": 1047, "28925": 1047, "28934": 1048, "28936": 1048, "28951": 1047, "28975": [1042, 1048], "28981": 1049, "28988": 1047, "28992": 1048, "28x28": 301, "29": [112, 165, 168, 172, 200, 207, 211, 223, 258, 318, 326, 369, 411, 557, 558, 690, 694, 797, 856, 995, 996, 1013], "290": [326, 348, 688, 689, 693, 996], "290075": 198, "29014": 1048, "29018": 1047, "290584": 300, "29078": 1047, "291": [163, 348, 367, 369, 862], "29105": 1048, "29112": 1048, "29119": 1047, "29124": 1048, "29128": 1048, "29135": 1048, "29136": 1048, "2914": 492, "29141": 1048, "29142": 1048, "29144": 1048, "29151": 1049, "29158": 1048, "29179": 1047, "292": [390, 411, 735], "29207": 1048, "29212": 1048, "29227": 1048, "29235": 1047, "29239": 1048, "29260": 1048, "29265": 1048, "29266": 1048, "29267": 1048, "29269": 1047, "2928359": 221, "29288": 1049, "29300": 1048, "29312": 1048, "29314": 1047, "29316": 172, "29327": 1047, "29329": 1048, "29330": 1047, "29336": 1047, "29354": 1048, "29389": 1048, "2939931": 320, "29400": 1048, "29401": 1047, "29402": 1048, "29404": 1048, "29419": 1048, "29433": 1048, "29437": 1019, "29442": 1048, "29451": 1048, "29462": 1048, "29473397": [844, 845], "29475": 1048, "295": [325, 781, 1020], "295040e": 224, "29519": 1049, "29540": 1048, "29545": 1047, "295518e": 224, "296": 1011, "2961": 651, "29612": 1047, "29634": 1048, "29639": 1048, "296575": 198, "29677": 1048, "29694": 1047, "29696": 1048, "297": 367, "29705": 1048, "29709": 1048, "29710": 1048, "29727": 1049, "29738": 1048, "29751": 1048, "29773": 1048, "29779": 1048, "29780": 1047, "29793": 1048, "29797": 1049, "298": 1007, "29818": 1048, "29835": 1048, "29842": 1048, "29865": 1049, "29868": 1048, "298688": 264, "29869": 1048, "29874": 1048, "29880": 1048, "29884": 1048, "29898468": 221, "299": [135, 680], "29907": 1049, "29920": 1048, "29950": 1048, "299546e": 224, "29978": 1049, "29997": 1048, "29e": 604, "2_": 991, "2_000": 134, "2_2": [646, 647, 652, 653, 654, 655, 656, 660, 661, 662, 663, 672, 681, 682, 683, 684], "2_f": 652, "2_fro": [653, 662, 663, 684], "2_poli": 264, "2_y": 1001, "2c": [643, 652, 672, 673, 674, 675, 687, 991], "2d": [1, 43, 69, 71, 74, 79, 81, 82, 86, 89, 94, 95, 119, 121, 124, 126, 130, 152, 180, 201, 203, 208, 213, 226, 227, 228, 229, 231, 233, 236, 237, 293, 325, 326, 333, 336, 354, 366, 368, 372, 381, 386, 404, 405, 409, 412, 414, 438, 449, 459, 461, 464, 478, 485, 487, 488, 490, 491, 492, 498, 499, 500, 502, 508, 512, 531, 539, 547, 583, 585, 635, 643, 657, 672, 691, 738, 779, 825, 829, 833, 871, 921, 924, 926, 930, 931, 963, 984, 985, 993, 995, 996, 999, 1006, 1010, 1015, 1020, 1029, 1033, 1036, 1037, 1038, 1041, 1043, 1047], "2e": [195, 277, 279, 694], "2e6": 999, "2ec5ac": 308, "2f": [44, 47, 50, 52, 57, 67, 74, 77, 79, 80, 83, 85, 95, 97, 100, 115, 118, 123, 129, 146, 149, 153, 154, 158, 183, 184, 188, 191, 198, 200, 205, 207, 221, 222, 223, 224, 233, 237, 243, 258, 267, 268, 270, 272, 273, 274, 278, 292, 293, 299, 306, 309, 317, 321, 322, 336, 347, 348, 355, 405, 408, 411, 696, 828, 831], "2fbf01908075": 705, "2fx": 252, "2g": [228, 231, 697, 1040], "2h": 410, "2k": 178, "2l": [414, 622], "2n": [696, 991, 1003], "2n_": 995, "2nd": [93, 126, 175, 309, 404, 415, 441, 528, 851, 1009, 1044], "2x": 1029, "2x2": [333, 404, 754], "2x_iy_i": 991, "3": [0, 1, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 351, 352, 353, 354, 355, 360, 361, 366, 367, 368, 369, 370, 372, 373, 374, 376, 377, 378, 384, 385, 386, 390, 395, 396, 397, 398, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 426, 427, 428, 429, 434, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 475, 478, 479, 480, 481, 482, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 499, 500, 502, 503, 504, 505, 508, 510, 513, 514, 515, 516, 517, 519, 521, 523, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 576, 580, 582, 583, 586, 589, 592, 593, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 617, 618, 627, 628, 629, 630, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 687, 688, 689, 690, 692, 693, 694, 696, 699, 700, 702, 703, 704, 705, 707, 709, 710, 713, 716, 717, 721, 723, 724, 725, 726, 728, 729, 730, 731, 733, 734, 735, 736, 737, 741, 743, 744, 745, 746, 748, 750, 751, 752, 753, 754, 756, 757, 768, 769, 775, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 875, 876, 877, 878, 879, 880, 882, 883, 884, 885, 892, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 926, 927, 930, 931, 932, 936, 946, 947, 948, 949, 950, 951, 952, 954, 955, 956, 957, 958, 959, 960, 963, 964, 966, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 984, 988, 989, 992, 993, 994, 995, 996, 997, 999, 1000, 1001, 1002, 1005, 1006, 1009, 1010, 1012, 1014, 1015, 1018, 1020, 1027, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1039, 1041, 1042, 1044, 1046, 1047, 1049], "30": [43, 47, 49, 54, 57, 70, 74, 75, 79, 87, 93, 103, 105, 109, 127, 134, 142, 146, 149, 153, 163, 167, 168, 171, 184, 188, 190, 203, 205, 207, 224, 226, 227, 231, 238, 242, 243, 253, 258, 263, 264, 269, 279, 281, 284, 293, 294, 308, 309, 310, 318, 319, 325, 326, 327, 330, 334, 337, 339, 340, 354, 359, 367, 369, 370, 377, 378, 390, 396, 397, 408, 412, 415, 441, 447, 452, 453, 454, 498, 529, 533, 535, 536, 537, 539, 541, 543, 544, 568, 591, 594, 595, 597, 648, 692, 735, 783, 844, 845, 846, 847, 848, 850, 852, 854, 855, 856, 885, 900, 913, 976, 988, 993, 999, 1000, 1002, 1007, 1029, 1030, 1036, 1037, 1038], "300": [43, 58, 59, 70, 73, 83, 91, 123, 134, 135, 136, 140, 179, 199, 231, 233, 237, 253, 258, 267, 277, 294, 307, 315, 325, 340, 343, 440, 444, 445, 456, 458, 511, 639, 644, 645, 679, 690, 692, 694, 861, 920, 995, 1039], "3000": [52, 97, 229, 896, 897], "30000": 367, "30001": 1048, "30013": 1048, "30022": 1048, "30023": 1048, "300343": 198, "30040": 1048, "30047": 1048, "30057": 1049, "30061": 539, "30097": 1048, "301": [237, 405, 1013], "3010": 147, "30100": 1048, "30122": 1048, "30137": 1048, "30149": 1048, "3015": 57, "30151134": 463, "30152": 1049, "30155": 1049, "30171": 1048, "30172": 1048, "30179": 1049, "30187": 1048, "30196": 1049, "302": [264, 627], "30203": 1048, "30224": 1048, "30227": 1048, "30258509": 414, "303": [224, 635], "30318": 1048, "30340": 1049, "30360": 1048, "30380": 1049, "30395": 1049, "30399": 1049, "304": [69, 163, 308, 354, 369, 1020], "30406": 1049, "30409": 1049, "30414": 1049, "30415": 1049, "30443": 1049, "30451": 1048, "30454": 1048, "30483": 1049, "305": 378, "30506066": 194, "30514": 1049, "30516": 1048, "30521": 1049, "3053": [466, 471], "305438": 146, "30557": 1048, "30573": 1048, "306": 627, "306012": 198, "30616": 1049, "30644": 1049, "30649": 1049, "307": [173, 1020], "30712": 1049, "30730": 1049, "30743": 1049, "30750": 404, "30763": 1049, "30775": 1049, "308": [63, 635], "30819": 1049, "30833": 1049, "30838": 1049, "30858": 1049, "30873": 1049, "30886": 1049, "30897646": 221, "309": 54, "30903": 1049, "30m": 367, "31": [43, 102, 110, 151, 154, 224, 258, 289, 310, 316, 318, 323, 325, 326, 401, 412, 498, 559, 560, 596, 649, 671, 679, 965, 1000, 1029], "310": 63, "31040": 1049, "31065": 1049, "31079": 1049, "3109306": 170, "31094": 1049, "311": 348, "31107": 1049, "31117": 1049, "31146": 1049, "31167": 1049, "31190": 1049, "312": [149, 353, 1020, 1032], "31204": 1049, "3121": 708, "31227": 1049, "31228": 1049, "31241": 1049, "3125": 86, "313": [234, 1020], "31316": 1049, "313280e": 224, "31387": 1049, "314": [339, 1020], "314596": 247, "31459603": 247, "315": [284, 348, 369], "31528": 1049, "31553": 1049, "31556": 1049, "31584": 1049, "316": [172, 176, 611, 614, 625, 880], "3164764": [207, 224], "31685": 1049, "317": [172, 191, 1020], "31760": 995, "318": 447, "318387": 300, "3185838": 155, "319": [54, 168], "31958": 172, "31973683": 221, "31bit": 1040, "31e": 604, "31st": [208, 883], "32": [43, 44, 52, 84, 118, 182, 185, 242, 278, 317, 326, 366, 377, 386, 401, 411, 412, 442, 562, 563, 581, 588, 634, 676, 883, 885, 930, 931, 965, 1007, 1009, 1020, 1029, 1032, 1035, 1037, 1038, 1041, 1042, 1043, 1046], "320": [367, 988, 1013, 1029], "3204": 1035, "321": 348, "321301": 62, "322": [45, 59, 167, 348, 468, 469, 1020], "3221": [692, 996], "323": [107, 1020], "323200": 62, "324": [237, 348, 367], "324084": 198, "3245": [692, 996], "32451034": 320, "3252": 596, "325666e": 224, "32634568": 211, "3264": 46, "327": [63, 730], "3272984419327777": 351, "3273": 746, "327407": 247, "327605": 247, "32767": 1040, "32782448": 170, "3279": 46, "327mb": 347, "328": 730, "3288": 542, "329": 447, "329616": 198, "32987858": 563, "32bit": [1, 359, 965, 1047], "32x32": 369, "33": [43, 111, 207, 318, 326, 354, 367, 369, 377, 378, 404, 412, 458, 530, 637, 648, 712, 713, 729, 730, 738, 743, 783, 784, 787, 806, 828, 830, 832, 891, 915, 973, 980, 995, 999, 1009, 1029, 1037], "330": 326, "331263": 198, "3315057": [826, 827], "3317": 207, "332": [348, 892], "333": [348, 783, 846], "3333": 496, "333333": 224, "33333333": [854, 1009], "334": [45, 170], "33478066": 86, "334795": 267, "335": 43, "335919": 300, "336": [149, 378, 1009], "336188": 300, "3367": 1036, "337": 378, "3375": 318, "338": 243, "3383": 46, "3384": 348, "3387": 348, "3397": [664, 685, 686], "33rd": [901, 1012], "34": [43, 146, 163, 167, 289, 302, 325, 326, 354, 369, 408, 518, 568, 596, 649, 667, 716, 764, 1029], "340": [239, 325], "341": 348, "34118": 367, "34125758": 221, "3415": [664, 685, 686], "341523": 300, "3419": 267, "341949": 198, "342": [184, 822], "34279478": 221, "3433": 46, "3445": 46, "345": [163, 313, 369, 1020], "34545455": 995, "3456": 46, "34586917": 221, "346": [411, 499, 527, 553, 554], "3467": 615, "347717": 146, "34867495": 1000, "349": [134, 348, 378, 551], "34990341": 115, "35": [43, 45, 46, 48, 50, 88, 103, 136, 183, 184, 190, 196, 233, 263, 272, 281, 309, 325, 326, 542, 648, 649, 656, 702, 706, 707, 727, 741, 756, 782, 789, 837, 988, 995, 999, 1005, 1006, 1009, 1029, 1031], "350": 183, "351": [81, 347, 348, 1020], "351390": 264, "352": [264, 378], "352124": 198, "35278655": 221, "3534": 57, "3539": 102, "354394": 146, "3551": 46, "355440": 264, "355445": 146, "356": [140, 1007, 1020], "356497": 146, "3565178": 965, "357": [163, 369, 498, 905], "3573": 827, "35776189065725783": 314, "358": [73, 1020], "3582": 46, "358295": 198, "358990": 198, "359": [348, 999], "3591": 1038, "36": [43, 45, 46, 52, 53, 66, 122, 163, 173, 183, 224, 243, 339, 354, 369, 378, 411, 412, 553, 554, 568, 735, 999, 1029], "360": [134, 551], "360000": 300, "36047253": 221, "361": [367, 411, 553, 554], "362": 163, "362176": 318, "363": 52, "3630784": 155, "3635": 827, "364": [468, 469, 1030], "365": [406, 470], "3659": 1034, "366": [212, 354, 1020], "367": [411, 1029], "36787944": 997, "368": 759, "3680": [611, 614, 625], "3684": 835, "36851234": 816, "368896": 62, "3690483151908911912247722318110": 52, "3696": 613, "3697": 850, "3697178": 52, "37": [43, 57, 194, 267, 278, 325, 354, 367, 411, 522, 716, 884, 895, 1009, 1029], "370000e": 224, "370039": 198, "370738": 62, "371": 348, "372": 348, "37257991": 115, "373": [137, 1020], "373333": 267, "374": 348, "375": [446, 750, 999], "376": 1007, "37647423": 52, "376999": 62, "37741762": 130, "377eb8": [75, 79, 95, 96, 233], "378": [183, 271, 411, 999, 1020, 1029], "37815029": 221, "37845099": 355, "379": [61, 1020], "37967282": 1000, "379710": 183, "379763": 146, "37e": 604, "38": [184, 200, 206, 211, 257, 273, 289, 319, 411, 632, 885, 999, 1029, 1030, 1031], "3800": 198, "3803": 349, "381": [228, 1020], "381327": 367, "382005": 146, "382040e": 224, "38353048": 221, "383973": 267, "384": [121, 696, 905, 1020], "3840": 1037, "384338": 198, "384616559": 381, "384970e": 224, "385": 348, "3854": [664, 665], "3855": 1019, "386": 880, "3862": 868, "38629436": 1009, "38690531511642143152471231333333107": 52, "387": 1029, "387599": 52, "387610e": 224, "388": [947, 1009], "388020e": 224, "3889": 472, "3889873516666431": 52, "389": [592, 593], "3894": 615, "39": [43, 52, 163, 247, 258, 367, 369, 376, 404, 412, 493, 895, 913, 949], "390": 348, "3908844": 827, "391": [230, 696, 1020], "3910350737": 381, "3911": 47, "3928": 467, "394": [102, 176], "3947": 1011, "395": 43, "39524799": 320, "39568399": 534, "396": [102, 163, 369], "3964": [417, 472], "397": 367, "3972": 655, "398": [348, 647], "3986": 224, "3996": 651, "3_": 991, "3_poli": 264, "3bae43c9b14e387f76a61b6d82bf98a4fb5d3ef99ef7e7075ff2ccbcf59f9d30": 47, "3c479a6885bfa0438971388283a1ce32": 366, "3d": [100, 126, 226, 228, 230, 354, 412, 504, 585, 921, 963, 1036, 1037, 1039], "3f": [43, 45, 47, 50, 52, 54, 55, 59, 61, 63, 73, 75, 81, 82, 91, 103, 105, 107, 116, 134, 141, 149, 159, 163, 165, 167, 168, 169, 171, 176, 182, 184, 185, 191, 194, 195, 201, 207, 209, 213, 221, 222, 224, 227, 237, 239, 262, 264, 265, 267, 270, 272, 275, 277, 284, 299, 321, 329, 347, 348, 349, 822, 829, 1007], "3k": 696, "3l": 414, "3llobo": 1044, "3m": 51, "3rd": [126, 175, 839, 882, 1001, 1009], "3ssnporch": 143, "4": [43, 44, 45, 46, 47, 48, 49, 51, 52, 55, 57, 58, 62, 63, 64, 66, 67, 68, 69, 70, 73, 74, 75, 77, 78, 79, 80, 82, 83, 84, 85, 86, 88, 89, 91, 92, 93, 95, 97, 98, 99, 102, 103, 104, 105, 106, 112, 113, 115, 116, 118, 121, 122, 123, 124, 125, 126, 128, 129, 134, 135, 137, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 159, 162, 163, 167, 170, 172, 173, 175, 176, 179, 180, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 205, 206, 207, 208, 211, 213, 214, 216, 219, 220, 224, 233, 237, 238, 239, 240, 241, 242, 243, 245, 247, 249, 250, 251, 252, 254, 255, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 271, 273, 275, 276, 277, 278, 279, 283, 284, 286, 288, 289, 290, 291, 294, 299, 301, 302, 304, 305, 307, 308, 310, 312, 313, 314, 315, 316, 318, 319, 321, 325, 326, 327, 328, 329, 333, 335, 336, 339, 340, 341, 343, 344, 347, 348, 349, 354, 355, 360, 366, 367, 368, 369, 370, 372, 376, 377, 378, 381, 384, 385, 386, 390, 395, 396, 397, 402, 403, 404, 405, 406, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 426, 427, 428, 434, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 488, 494, 502, 510, 511, 514, 515, 516, 522, 524, 525, 526, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 576, 580, 581, 582, 584, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 614, 617, 618, 619, 622, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 651, 652, 653, 655, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 674, 677, 679, 680, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 698, 699, 702, 706, 707, 715, 716, 725, 726, 727, 732, 734, 742, 743, 744, 746, 747, 748, 749, 751, 752, 756, 768, 769, 781, 782, 788, 789, 790, 791, 794, 796, 797, 798, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 825, 826, 827, 828, 830, 832, 833, 834, 835, 838, 839, 840, 841, 843, 848, 851, 852, 853, 856, 860, 861, 862, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 888, 891, 892, 896, 897, 898, 902, 904, 905, 908, 912, 913, 914, 915, 926, 927, 929, 930, 931, 932, 936, 947, 948, 949, 950, 952, 954, 955, 956, 957, 964, 969, 970, 971, 973, 974, 975, 976, 979, 980, 981, 988, 989, 992, 993, 994, 995, 997, 999, 1000, 1001, 1002, 1009, 1010, 1013, 1014, 1020, 1027, 1030, 1031, 1032, 1034, 1035, 1036, 1038, 1042, 1043, 1044, 1047], "40": [43, 52, 54, 66, 87, 99, 109, 120, 126, 150, 167, 178, 184, 194, 200, 201, 203, 223, 228, 230, 241, 243, 253, 265, 290, 296, 301, 306, 325, 326, 334, 335, 337, 339, 341, 342, 354, 360, 367, 408, 443, 493, 515, 516, 799, 844, 845, 849, 861, 862, 988, 1000, 1029, 1030], "400": [44, 63, 83, 120, 148, 153, 167, 213, 231, 276, 300, 342, 348, 367, 409, 493, 1020], "4000": [92, 148, 252], "400000": 267, "400000e": 224, "40134964872774576": 272, "4017": 522, "4018260": 320, "402": [63, 122, 268, 1020], "402344": 378, "4025": 1034, "403": 268, "404": 224, "40597": 283, "406": [163, 689, 693, 996, 1020], "4066": 46, "407": [163, 369], "408": 1009, "40842387": 51, "40887718": 90, "40945": 103, "4096": [120, 367, 409, 493], "40966": 366, "409717": 267, "41": [52, 83, 104, 163, 207, 243, 354, 367, 369, 454, 466, 490, 621, 624, 635, 646, 647, 652, 658, 660, 661, 662, 664, 681, 685, 686, 699, 839, 1001, 1005, 1020], "410": [96, 1020], "41075698": 410, "41076071": 410, "41082": 44, "411": [106, 183, 329, 348, 406, 416, 470, 478, 531, 1020], "4110": 473, "41187": 172, "412": [348, 494, 995], "412021": 146, "41214": [207, 224], "41215": 224, "412304": 198, "414": [220, 224, 405, 516, 726, 756, 880, 892, 999, 1020], "41421356": [763, 769, 1002], "4143": 384, "414810": 247, "414912": 149, "416": [739, 999], "416010": 318, "41666667": 750, "41691605": 130, "417": [283, 781], "41726413": 130, "41888636": 662, "419": [616, 781], "4194": 369, "41e": 604, "42": [43, 44, 45, 52, 58, 61, 62, 63, 64, 66, 67, 79, 80, 89, 109, 115, 118, 122, 127, 134, 141, 143, 144, 146, 147, 149, 150, 154, 159, 160, 179, 183, 185, 186, 188, 190, 198, 203, 204, 209, 213, 214, 220, 221, 223, 226, 227, 228, 229, 233, 238, 239, 240, 243, 246, 258, 263, 265, 268, 277, 278, 284, 290, 291, 292, 299, 304, 305, 306, 307, 309, 311, 313, 315, 317, 328, 334, 336, 347, 348, 355, 360, 377, 378, 386, 395, 404, 408, 411, 412, 415, 434, 441, 475, 485, 490, 509, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 525, 527, 529, 535, 542, 543, 544, 555, 556, 563, 564, 565, 566, 568, 604, 605, 606, 607, 608, 677, 694, 695, 696, 792, 793, 797, 799, 802, 822, 828, 830, 844, 845, 849, 853, 856, 896, 897, 899, 900, 901, 911, 914, 915, 922, 933, 947, 965, 968, 1002, 1009, 1026, 1029], "42074": 310, "421": [726, 756, 999], "421087": 267, "42165": 143, "422": [592, 593, 726, 756, 760, 999], "4226193151": 52, "423": [57, 1020], "4232": [43, 52], "423641": 198, "424": 224, "4242": [43, 52], "42425183539869415": 314, "425": [184, 227, 615], "4254": [163, 369], "4260": [749, 752], "427": [163, 320, 348, 369, 504, 505, 582, 583, 586, 1020], "427329": 247, "428": [315, 1020], "4285714285714286": 999, "429": 281, "4294": 1035, "43": [163, 174, 221, 237, 264, 284, 355, 369, 377, 800, 814, 885], "430": [416, 531], "431": 369, "4310090": 769, "432": [264, 406], "4325": 57, "433": [258, 369], "43348936": 221, "4337": 995, "433725": 0, "43475": 878, "436": [237, 269, 348, 1020], "4362": 1034, "437": [130, 1020], "437362": 198, "4375": 86, "438": [48, 183, 1007, 1020], "43847489": 130, "43873": 349, "4387766": 52, "439": [194, 247, 1020], "4394": 1037, "44": [43, 172, 183, 184, 194, 281, 288, 476, 885, 905, 908, 981, 999, 1006, 1029], "440": [175, 183], "440409": 198, "4406": 470, "44063": 52, "4409": [43, 52], "44139186": 301, "4415": 57, "442": [68, 163, 179, 205, 297, 369, 499, 1020], "4425765": [653, 663, 684], "44300751539296973": 52, "44300752": 52, "443238": 267, "44373091": 1000, "44381023": 211, "444": [152, 1020], "44412786": 534, "445": [175, 200, 258, 1007, 1020], "445978": 198, "446": [348, 726, 756, 999], "447": [113, 208, 227, 1020], "447268": 87, "4472869": 130, "4474": 378, "4478": 1034, "448": [100, 284, 1020], "4486": 542, "449": [44, 409, 533, 781], "4496": [43, 52], "44e": 658, "45": [52, 75, 97, 105, 115, 118, 149, 159, 172, 185, 198, 207, 224, 263, 271, 275, 276, 326, 336, 408, 411, 412, 562, 563, 627, 634, 646, 647, 652, 660, 661, 662, 681, 682, 683, 788, 797, 908, 989, 999, 1007, 1029, 1032], "450": [109, 171, 173, 1020], "4500": 221, "45070924": 666, "451": [70, 646, 1020], "451933": 87, "453": 354, "454": 176, "4544": 43, "455": 310, "4550": 366, "456": [44, 409, 533], "45612256": 660, "45663524": 660, "457": 615, "4576": 835, "458333315172": 52, "459": [404, 439], "459074": 247, "46": [43, 52, 86, 207, 243, 378, 514, 592, 593, 682, 683, 716, 822, 908, 913, 1009], "460": [244, 1020], "46033": 494, "46043": 494, "46081961": 1000, "461": [233, 378, 1020], "462": [54, 1020], "462234": 247, "463": [224, 281, 863], "463088": 52, "464": [326, 1020], "46428631511221642143151251232633109": 52, "465660": 62, "465730": 198, "466": 1006, "4666": 634, "46779927": 51, "468": 91, "46858513287221654": 319, "46874778": [653, 663, 684], "469": 91, "46915237": [653, 663, 684], "4694": 522, "469474": 198, "46958558": 661, "4697": 81, "47": [43, 205, 367, 491, 492, 533, 539, 973], "470": [94, 1020], "471": 369, "47140": 404, "47236": [367, 495], "47330339": 412, "4738": 1034, "474": [222, 351, 1020], "475": 134, "47668": 349, "477": [317, 1020], "478522": 198, "47885": 349, "4792": 224, "47928": 349, "4794": 198, "4795": 198, "4796": 198, "4798": 198, "47985": 494, "47987268e": 192, "4799": 198, "48": [43, 52, 66, 115, 149, 172, 243, 247, 310, 369, 378, 404, 508, 596, 699, 746, 828, 839, 988, 1001, 1009, 1020], "480": [194, 348], "4801": 198, "4802": 198, "4803": 198, "4804": 198, "4805": 198, "4806": 198, "4807": 198, "4809": [198, 267], "481": 348, "4810": 198, "4812": 46, "4815": 198, "48204257": 1000, "4828": 198, "483": 648, "4830": 198, "4831": [198, 655], "4832": 198, "4836": 198, "484": [53, 176, 301, 1020], "4841": 198, "484109": 198, "4846": 198, "485": [347, 696, 1020], "4852": 198, "4855": 198, "4857596147013469": 93, "486": 209, "4860": 198, "4866": 198, "4867": 198, "4869": 198, "487": [52, 724], "4872": 198, "48736655": 667, "4874": 198, "4876": 198, "4880": 198, "4881": [198, 1034], "48841": 494, "48842": 494, "4885": 198, "48858": 378, "4888": 198, "4891": 198, "48938813e": 192, "4894": 198, "48979592": 446, "4898431": [367, 490], "49": [43, 47, 72, 77, 118, 163, 211, 243, 366, 367, 369, 377, 404, 447, 454, 713, 726, 756, 764, 793, 797, 800, 885, 999, 1009, 1032], "490": 258, "491": 696, "492": [258, 643, 992], "4923": 649, "4928": 198, "493": [643, 904, 992], "4936": 198, "4939": 1036, "494021": 490, "4948": 46, "4951": 653, "495761": 378, "49665188": 211, "4967": 522, "49694966": 247, "496950": 247, "4976": 596, "499": [163, 369, 378], "4995": 1035, "49999993": 995, "4daf4a": [79, 95], "4dbd33": 118, "4e": 227, "4e9a06": [92, 97], "4eacc5": [92, 97], "4f": [46, 47, 57, 137, 145, 147, 221, 222, 224, 263, 309, 911], "4hm3d": 1049, "4i": 83, "4th": [163, 175, 369], "4x": [378, 1044, 1048], "4x11": 288, "4x4": [369, 409, 412], "5": [43, 46, 47, 49, 50, 51, 52, 53, 54, 55, 57, 59, 61, 62, 63, 64, 66, 67, 68, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 95, 97, 98, 99, 100, 102, 103, 105, 106, 107, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 127, 129, 132, 136, 137, 138, 139, 140, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 158, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 182, 183, 184, 185, 188, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 207, 208, 209, 210, 213, 214, 217, 218, 219, 220, 221, 222, 224, 227, 228, 229, 231, 233, 236, 237, 238, 239, 241, 242, 243, 244, 245, 247, 249, 250, 251, 252, 253, 254, 255, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 273, 275, 276, 277, 278, 279, 281, 283, 284, 286, 287, 288, 289, 290, 291, 293, 294, 296, 297, 299, 300, 301, 302, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 325, 326, 328, 329, 330, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 347, 348, 349, 351, 352, 353, 354, 355, 367, 368, 369, 370, 372, 376, 377, 378, 380, 384, 385, 386, 390, 396, 397, 398, 402, 403, 404, 405, 408, 409, 411, 412, 413, 414, 415, 416, 419, 434, 435, 436, 437, 439, 441, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 460, 461, 463, 464, 466, 469, 479, 480, 481, 482, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 502, 511, 512, 513, 514, 515, 517, 518, 519, 521, 522, 526, 529, 531, 532, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 550, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 581, 591, 592, 593, 596, 601, 603, 604, 606, 607, 610, 613, 614, 615, 616, 619, 620, 622, 623, 625, 627, 628, 629, 630, 631, 632, 634, 636, 637, 638, 641, 643, 646, 647, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 688, 689, 691, 692, 693, 695, 696, 697, 699, 703, 705, 707, 709, 712, 713, 718, 720, 721, 722, 723, 724, 726, 727, 728, 730, 732, 735, 738, 739, 740, 742, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 769, 770, 778, 781, 782, 784, 785, 787, 788, 789, 790, 791, 794, 796, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 861, 862, 863, 864, 869, 870, 871, 873, 874, 876, 877, 878, 879, 880, 881, 883, 884, 885, 887, 889, 890, 891, 892, 893, 894, 898, 904, 905, 906, 907, 908, 909, 910, 912, 914, 922, 926, 927, 930, 931, 935, 936, 946, 947, 948, 949, 950, 952, 954, 955, 963, 964, 968, 969, 970, 973, 974, 975, 976, 977, 978, 979, 988, 989, 991, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1009, 1011, 1013, 1014, 1020, 1021, 1025, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1039, 1043, 1044, 1045, 1048], "50": [0, 43, 46, 47, 49, 52, 54, 61, 66, 68, 69, 72, 73, 83, 85, 92, 93, 98, 99, 102, 103, 115, 118, 120, 123, 129, 134, 137, 140, 146, 149, 152, 153, 163, 168, 170, 171, 172, 173, 182, 183, 184, 191, 194, 204, 207, 210, 214, 218, 220, 222, 224, 226, 230, 231, 236, 237, 239, 247, 258, 259, 264, 266, 267, 277, 284, 302, 304, 308, 315, 317, 326, 328, 330, 334, 342, 348, 367, 369, 372, 377, 392, 408, 411, 412, 413, 416, 439, 470, 476, 477, 498, 502, 519, 521, 524, 531, 537, 542, 551, 552, 567, 592, 593, 605, 607, 608, 615, 617, 658, 659, 666, 667, 668, 670, 676, 677, 678, 692, 713, 792, 800, 814, 833, 853, 904, 913, 994, 995, 999, 1000, 1002, 1005, 1009, 1022, 1029, 1046, 1049], "500": [49, 79, 83, 90, 93, 94, 96, 115, 116, 127, 129, 138, 140, 147, 155, 162, 167, 188, 219, 220, 227, 244, 245, 249, 250, 254, 258, 264, 267, 277, 278, 284, 290, 296, 308, 314, 319, 320, 340, 359, 411, 417, 466, 467, 471, 472, 473, 478, 479, 480, 481, 611, 613, 614, 616, 621, 624, 625, 650, 651, 654, 655, 656, 680, 682, 683, 988, 1014], "5000": [89, 195, 221, 222, 224, 315, 885], "50000": 61, "500000": 300, "5000000": 55, "50000000": 170, "50000013": 995, "500526": 149, "500x500": 539, "501": [0, 86, 287, 1020], "5012": 1035, "5016": [406, 417, 472], "502": [99, 141, 1020], "5029": [406, 417, 472], "503452": 300, "5036": 1036, "504185": 300, "50447799": 1000, "505": 829, "507": [110, 184, 405, 1020], "50755672": 463, "507943": 267, "5082": 1019, "50941682": 1000, "50_000": [311, 348], "50sampl": 392, "51": [61, 118, 172, 224, 281, 284, 766, 776, 995], "510": [255, 1020], "51082562": 589, "511": [102, 1020], "512": [206, 781], "51227857": 247, "512279": 247, "512281": 254, "512595": 300, "51292546": 612, "513": [853, 1002], "513034": 300, "5131": [46, 1034], "51341712": 997, "514": [135, 1020], "5141": 1035, "51462041": 849, "5149": 46, "515": [43, 54, 171, 1020], "515390": 378, "51570367": 247, "515704": 247, "516": [54, 404], "5166": 673, "5166646": 764, "517": [47, 449, 459], "517272": 254, "5182": 1034, "5186": 1034, "5193": 46, "51958": 172, "51963999": 111, "51e": 604, "52": [43, 47, 172, 207, 404, 633, 797, 1029], "520": [116, 628, 853, 989, 1002, 1020], "52003279": 1000, "5208": 198, "521": [118, 184, 947], "52106591": 130, "5211": 1036, "5212": 198, "522": 905, "5224167": 52, "5229": 1036, "523": 522, "524": [52, 174, 1020], "5243": 412, "52433293": 412, "5244": 198, "525": [436, 628, 989], "5251": 1035, "526": 904, "526599": 198, "527": 529, "5279": 1036, "5282": 1034, "52875032": 661, "5289": 46, "5291": 1035, "5295": 1036, "52955942": 849, "5299": 1035, "53": [43, 47, 77, 86, 243, 404, 411, 533, 539, 544, 792, 793, 1020], "531": [58, 265, 1020], "5315170": 52, "5316": 347, "532489": 267, "533": [183, 239, 263, 1020], "5337": 1034, "534": 183, "535": [289, 1020], "5355": 1034, "5359": 1036, "536": [172, 284], "5360": 1034, "537": [222, 1020], "53777511": 52, "53844117956": 764, "5395559": 221, "53959628e": 192, "54": [66, 163, 188, 194, 207, 210, 243, 367, 369, 488, 516, 1030, 1031], "54035582": 764, "541": [449, 459], "5415": 996, "5417": 224, "542": [163, 369], "5420": 542, "542052": 198, "5425": 522, "543": [194, 306, 1020], "5431": 1034, "543841": 198, "54434690031882": 105, "54488318": 381, "546": [302, 1020], "5460": 1035, "54675220": 52, "5469": 369, "547": [223, 354, 404, 1020], "5488135": 381, "549": 63, "5495": 1034, "54980": 539, "54e": [604, 605], "55": [52, 118, 123, 183, 188, 204, 207, 224, 228, 263, 326, 377, 404, 408, 488, 596, 800, 806, 814, 828, 999, 1029], "550": [184, 1020], "5500": [318, 688, 996], "550213": 198, "551": [168, 1020], "55102041": 446, "5515": 746, "552": [62, 999, 1020], "55212743": 355, "55249": 596, "55390036": 130, "554": [214, 222, 301], "5540": 1035, "55422893": 412, "555": [349, 716], "5558": 46, "558": [185, 1020], "55800226": 221, "559": [125, 616, 1020], "5591": [689, 693, 996], "55968825": 646, "56": [43, 224, 237, 329, 378, 713, 735, 999, 1009, 1029], "560": [207, 515, 516], "561": 404, "561464362648773": 93, "5625": 86, "564": 207, "56479934": 355, "56485654": 130, "565": 264, "566": [207, 226, 646, 647, 652, 660, 661, 662, 681, 1020], "566624": 247, "56662405": 247, "568": [646, 647, 652, 660, 661, 662, 681], "569": [163, 328, 369, 498, 591, 594, 595, 597], "5697": 1036, "56b4e9": 249, "57": [167, 183, 222, 273, 302, 369, 370, 390, 396, 397, 705, 837, 1029], "570": [163, 369], "570655": 198, "5713": 663, "57142857": 721, "572": [145, 264, 781, 1020], "573": 412, "5732": 1036, "57320793": 412, "573491": 198, "574": [91, 532, 539], "5748": 492, "5749": [367, 491, 492], "575": [102, 207], "576": [781, 1009], "5762": 1035, "576989": 247, "577": [163, 369, 761], "578": 348, "579": [522, 999], "58": [99, 110, 140, 272, 369, 406, 417, 472, 764, 1020], "580": [348, 844, 845], "5804131": 130, "5805": 1035, "5807": 1002, "581": 188, "581012": [367, 488], "5814": 1036, "58149261": 412, "58195950e": 192, "582": 905, "5828": [367, 491, 492], "583": [87, 404, 1020], "5833": [738, 999], "583333315172": 52, "58364548": 997, "5857": 1034, "5863": 378, "58667835e": 192, "586798": 198, "5871": 679, "5874": 1035, "5882004012129721": 93, "589": [606, 1009], "589715": 198, "59": [43, 188, 194, 224, 369, 378, 404, 508, 822, 999, 1029], "59122734": 667, "592": [611, 614, 625, 1006], "592373": 318, "5925110": 52, "5929": 1035, "593": 138, "594": [176, 207], "594754": 198, "59489497": 221, "595": [184, 207, 300, 1020], "5956": 1037, "596": 716, "5960": 221, "5963": 1039, "59678424": 86, "597": 207, "598": [91, 127, 168, 349, 539], "5981": 542, "598533": 198, "599": [307, 680, 1020], "5991": 1036, "5_000": 188, "5a": 884, "5d": 47, "5e": [44, 66, 120, 197, 594, 595, 597], "5e5": 207, "5f": 317, "5m": 55, "5n_": 112, "5th": [52, 146, 149, 175, 404], "5x": 1046, "6": [0, 43, 45, 46, 47, 48, 49, 50, 51, 52, 57, 63, 64, 66, 67, 68, 75, 79, 80, 82, 83, 85, 89, 90, 93, 94, 95, 96, 97, 98, 100, 105, 106, 107, 109, 110, 111, 113, 115, 120, 122, 126, 129, 132, 135, 146, 147, 149, 151, 153, 158, 163, 167, 170, 172, 174, 175, 178, 179, 180, 183, 184, 186, 188, 190, 191, 192, 194, 198, 201, 202, 205, 207, 208, 209, 211, 220, 224, 226, 227, 230, 233, 236, 237, 241, 244, 245, 249, 250, 251, 252, 254, 255, 257, 258, 259, 263, 264, 265, 266, 267, 269, 273, 274, 275, 276, 277, 283, 286, 289, 297, 299, 301, 302, 304, 306, 308, 309, 311, 312, 313, 316, 317, 318, 319, 320, 321, 323, 325, 326, 329, 330, 336, 337, 339, 341, 343, 345, 347, 348, 349, 353, 354, 355, 366, 367, 369, 370, 372, 374, 376, 377, 378, 385, 390, 396, 397, 402, 404, 405, 408, 409, 411, 412, 413, 419, 424, 431, 434, 439, 443, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 458, 459, 460, 461, 462, 479, 480, 481, 482, 487, 489, 494, 503, 513, 515, 522, 528, 536, 538, 539, 545, 551, 555, 559, 560, 561, 565, 566, 567, 568, 592, 593, 601, 603, 609, 610, 611, 614, 615, 625, 627, 628, 630, 631, 636, 637, 644, 645, 657, 658, 659, 676, 679, 689, 690, 693, 694, 699, 700, 702, 709, 711, 721, 728, 738, 742, 745, 746, 750, 751, 753, 769, 778, 785, 788, 790, 797, 798, 799, 801, 802, 807, 809, 810, 812, 817, 818, 821, 828, 829, 830, 831, 839, 840, 841, 843, 844, 845, 851, 852, 854, 855, 856, 862, 864, 865, 871, 872, 874, 877, 879, 882, 883, 887, 888, 901, 919, 923, 926, 928, 930, 931, 941, 942, 943, 947, 948, 949, 951, 953, 954, 955, 963, 973, 976, 984, 985, 987, 988, 989, 993, 995, 996, 999, 1009, 1010, 1013, 1014, 1015, 1020, 1027, 1030, 1031, 1032, 1035, 1037, 1042, 1046, 1047, 1049], "60": [43, 45, 92, 105, 113, 207, 218, 224, 226, 227, 247, 252, 272, 277, 326, 339, 347, 366, 404, 408, 447, 454, 713, 800, 999, 1009, 1029, 1032], "600": [63, 83, 91, 144, 153, 154, 349, 367, 680], "6000": [302, 627], "601052": 300, "601707": 198, "60244657": 849, "60276338": 381, "603": [96, 265, 445, 1020], "604": [127, 539], "606": [613, 834, 1000], "607": [163, 304, 1020], "6072758064261095": 167, "607752": 146, "608": [201, 1020], "60809415": 662, "60834549": 90, "60836363e": 192, "609": [176, 378], "61": [112, 184, 224, 366, 369, 378, 455, 539, 558, 713, 822, 949], "610": 349, "6101": 1036, "611": [262, 264, 539], "6114": 827, "6114326": 207, "6114327": 207, "6114328": 207, "6114329": 207, "6114330": 207, "611676": 198, "612": 790, "6121": 1035, "6126": 1036, "6147": 1034, "615373": 183, "616": [841, 1001, 1009], "61611719": 170, "616900e": 224, "617": [91, 188, 267, 404, 769, 1020], "6173": 1035, "617715": 146, "6178": 1035, "618": [91, 262], "6181": 1036, "6182": 1035, "618263": 198, "619": [96, 445], "619052": 367, "61958": 172, "6196": [267, 1034], "6198": 746, "62": [52, 184, 188, 224, 257, 318, 326, 347, 355, 367, 491, 492, 543, 844, 845, 1032], "620": [496, 646, 647, 652, 660, 661, 662, 681], "621": [91, 769], "621645": 198, "622": [91, 539], "62241605": 194, "622811": 146, "623": [841, 1001], "6231": 1019, "6237": 224, "624": 1006, "625": [207, 618, 708], "6250": 1036, "6258": 1034, "626": [82, 195], "6261": 1038, "626286": 198, "62717609": 221, "62722912": 52, "62745778": 1000, "628": 348, "6282": 1035, "628306": 247, "62830616": 247, "6284": 1019, "6288": 1036, "629": [237, 247], "6291456": 86, "63": [45, 258, 322, 369, 411, 555, 556, 563, 564, 699, 726, 800, 814, 822, 914, 915, 999], "630": 724, "63035731": 412, "630382": 318, "6312": 52, "632": [153, 310, 1020], "6331": 43, "6332": 43, "63327171": 194, "6333": 43, "6334": 43, "6335": 43, "6338211367102258": 311, "63394388": 194, "635": [43, 616], "636": [194, 309, 378, 1020], "63667341": 90, "6369216": 155, "637": [646, 647, 652, 660, 661, 662, 681], "6371000": 764, "6374": 1037, "6375861597263857": 946, "638": [348, 378], "638768": 87, "638843": 300, "63bit": 1040, "64": [43, 52, 68, 86, 91, 120, 172, 183, 227, 237, 238, 242, 262, 273, 288, 293, 359, 360, 369, 378, 386, 390, 405, 409, 416, 493, 496, 500, 598, 599, 646, 658, 688, 689, 690, 691, 693, 905, 1002, 1029, 1031, 1037, 1038, 1041, 1042, 1043, 1046], "640": [314, 402, 487, 504, 505, 582, 583, 586, 988, 1020], "640000e": 224, "640460e": 224, "641": 184, "64185414": 666, "641980e": 224, "64236448": 534, "643": 262, "644": [112, 329, 1020], "6440": 221, "645": [91, 607], "6452": 1037, "646": [175, 242, 1020], "6463": 1038, "647": 91, "6472": 1035, "6476": 522, "647689": 198, "648": [273, 1020], "648026": 146, "648fff": 202, "6497": 1035, "64_conda": 380, "64bit": 1029, "64x64": [120, 367, 409], "65": [43, 69, 184, 207, 273, 310, 404, 436, 500, 515, 596, 699, 741, 792, 793, 822, 1006, 1029, 1030, 1031], "650": [154, 349, 402, 1020], "6505186632729437": 93, "6507": 1036, "651": 378, "652": [150, 348, 1020], "652739": 198, "653": [77, 378, 611, 614, 625, 851, 1020], "6545": 1041, "655": [83, 1020], "656": 367, "6567": 851, "657": 264, "6572": 851, "6573": 1036, "65799352e": 192, "658": 116, "6586": 1035, "659": [144, 1020], "65e": 195, "66": [43, 230, 310, 369, 404, 421, 458, 530, 605, 632, 712, 783, 784, 830, 883, 980, 999, 1011], "660797": 247, "661086": 267, "6624": 1041, "662409": 198, "663": [898, 1007, 1011], "664": [163, 211, 247, 369, 1020], "665": 43, "6650": 52, "6651": 1035, "666": [170, 176, 404, 846, 989, 1020], "6660": 1035, "6666": [738, 999, 1035], "66666667": [729, 782, 854, 1009], "666667315174": 52, "6667": 1035, "66670169e": 192, "667": [720, 740, 999], "667219": 146, "668": [319, 1020], "6689": 1037, "669": 247, "6691": 1035, "6697": 1035, "66e": 604, "67": [99, 183, 224, 369, 404, 405, 496, 514, 515, 516, 627, 667, 713, 795, 814, 891, 989, 999, 1013, 1029], "670": [209, 238, 258, 1020], "670090e": 224, "671": 1011, "6719936995475292": 272, "67251877": 666, "673": [116, 348, 378], "67443065": 130, "67451144e": 192, "675": [167, 348], "675318": 87, "6756446": 247, "675645": 247, "676": 669, "6764": 1035, "678": [254, 1020], "678008": 207, "678009": 207, "678010": 207, "678011": 207, "678012": 207, "678013": [207, 224], "678359": 198, "67876527": 86, "67877978": 86, "679": [209, 349, 904], "67e13": 605, "68": [43, 200, 302, 325, 404, 533, 539, 589, 685, 686, 1029], "681": [91, 378], "6814162": 155, "6817": 1035, "682": 378, "6821": 47, "682720e": 224, "683": [266, 1020], "683920e": 224, "684": [103, 111], "6846": 1035, "6848": 1038, "685": [720, 740, 999], "6852": 264, "6860": 145, "687": [475, 1011], "6875": [86, 716], "688": [111, 247], "689015": 300, "689143": 300, "689751": 300, "69": [45, 200, 228, 258, 309, 326, 404, 468, 469, 606, 607, 756, 999, 1009], "690": 209, "6902": 1035, "691": 721, "6913": 1035, "692": [66, 134, 290, 1020], "692470": 300, "692730e": 224, "6929": 1019, "692901": 146, "693": 999, "6931": 868, "69314718": [414, 612, 1009], "694": [98, 293, 1020], "695": [142, 262, 1020], "69513": 91, "6954": 1035, "69545": 91, "695810e": 224, "696": [277, 1020], "697": 176, "69735": 91, "698": [91, 258], "6984743": 170, "69892343": 211, "699691": 367, "69e": 687, "6d": 47, "6f": [55, 124, 269, 737, 795], "6ppm": 172, "6th": 175, "7": [43, 44, 45, 47, 50, 51, 52, 53, 54, 63, 66, 68, 70, 74, 77, 79, 80, 86, 87, 88, 89, 93, 97, 98, 100, 103, 104, 106, 111, 113, 120, 123, 134, 137, 142, 146, 149, 150, 154, 155, 163, 173, 176, 180, 182, 183, 184, 186, 188, 192, 193, 206, 207, 208, 209, 222, 224, 226, 233, 237, 238, 239, 245, 247, 249, 250, 253, 254, 258, 259, 263, 264, 268, 270, 271, 275, 281, 283, 284, 286, 289, 290, 292, 301, 302, 304, 308, 312, 313, 314, 316, 317, 318, 320, 322, 325, 326, 327, 328, 329, 333, 340, 343, 344, 347, 348, 349, 355, 367, 369, 370, 376, 377, 378, 390, 396, 397, 402, 408, 409, 412, 413, 415, 416, 419, 436, 441, 443, 445, 447, 448, 449, 450, 452, 453, 454, 455, 458, 459, 460, 461, 464, 468, 469, 488, 494, 496, 513, 530, 531, 532, 533, 534, 536, 542, 553, 554, 559, 560, 587, 590, 593, 599, 604, 610, 627, 628, 630, 631, 632, 633, 637, 646, 647, 649, 652, 653, 657, 658, 659, 660, 661, 662, 663, 676, 678, 681, 682, 683, 690, 692, 694, 698, 699, 702, 707, 709, 712, 721, 723, 724, 726, 727, 728, 731, 744, 745, 746, 750, 751, 753, 785, 790, 791, 794, 797, 799, 801, 802, 807, 810, 817, 818, 821, 827, 830, 834, 835, 838, 844, 845, 853, 861, 862, 864, 865, 869, 876, 877, 884, 899, 900, 902, 947, 948, 951, 952, 955, 964, 968, 969, 988, 989, 994, 995, 997, 999, 1000, 1002, 1003, 1005, 1009, 1013, 1014, 1020, 1022, 1027, 1030, 1031, 1032, 1035, 1036, 1037, 1038, 1042, 1047], "70": [43, 45, 50, 99, 103, 105, 134, 184, 243, 249, 264, 326, 367, 369, 408, 491, 492, 682, 683, 713, 726, 756, 800, 814, 988], "700": [83, 258, 315], "7000": 224, "701": 91, "702266": 198, "703": [402, 511], "70359377": 194, "70432034": 115, "7049": 1035, "7049787496083262": 93, "706026": 198, "707": [176, 880, 892, 1009], "7071": 1037, "708": [262, 536, 538, 545, 750, 1020], "70814003": 355, "7083": 999, "708333315174": 52, "7089": 1036, "709": 265, "70e": 604, "70x": 1046, "71": [43, 66, 163, 165, 211, 224, 369, 508, 730, 736, 766, 776, 891, 999, 1031], "710": 402, "7101": 1035, "712": [183, 1020], "713": [85, 1020], "714": 999, "7141": 315, "71518937": 381, "7152": 1035, "7154": 1035, "715413": 146, "7159": 1035, "716": 511, "7187": 1035, "718747": 198, "7194": 1035, "71e": 604, "72": [43, 45, 46, 52, 140, 170, 377, 822, 828, 863], "7200": 649, "721": [536, 538, 545], "722124e": 224, "72295655": 115, "723": [91, 186, 239, 1020], "723665": 278, "72384803": 86, "7239": 1035, "724702": 267, "7248": 1035, "7256": 635, "726": 1007, "7260": 1035, "7261": 1035, "726573": 183, "72667194": 1000, "72850319": 1000, "729": 195, "7295": 1035, "7298221281347037": 43, "72e": [604, 658], "73": [52, 66, 268, 326, 800, 814, 830, 850, 913, 1009, 1029, 1031], "730": [169, 1020], "7301": 1035, "730129e": 224, "7313": 46, "73153": 378, "731633e": 224, "732": 209, "7321432711315247203224138160467097": 52, "7323": 1035, "7325": 1035, "732913": 278, "733": 284, "7331": 1036, "7332": 908, "7333": 315, "735": [190, 1020], "7350": 1035, "7353": 1035, "7356": 1036, "736": [123, 1020], "7365": 1036, "73654189": 52, "737": [239, 522], "7376": 1036, "7382": 1019, "7387": 473, "7388": 1036, "739": [143, 292, 478, 1020], "739950": 278, "73e": 176, "74": [43, 52, 222, 325, 326, 369, 589, 736, 800, 814, 883], "740": [252, 1020], "740176e": 224, "7411": [466, 471, 1035], "7419": 1035, "743": 262, "74310541": 170, "7436926291700354": 204, "744": [262, 284], "744029": 278, "744055e": 224, "7441": 1036, "74427358": 247, "744274": 247, "744497e": 224, "74495357": 194, "7459": 1036, "746": [369, 999], "7464": 1036, "746492": 264, "748": [347, 378], "7490": [1035, 1036], "75": [43, 45, 46, 49, 52, 69, 79, 88, 113, 137, 160, 174, 175, 179, 183, 188, 190, 193, 200, 224, 247, 251, 252, 258, 264, 273, 289, 304, 315, 316, 345, 347, 355, 446, 499, 549, 637, 658, 706, 712, 734, 739, 740, 745, 753, 756, 794, 800, 882, 890, 894, 901, 917, 935, 936, 979, 999, 1001, 1009, 1015, 1031], "750": [82, 88, 264], "75000": 207, "7501": 1036, "750348": 146, "750389": 198, "7506": 1036, "752": 347, "752470": 278, "752867": 198, "753": 73, "7532": 486, "7533": [417, 472, 1036], "75474165": 1000, "7548": 1036, "7548291": 320, "7553": 1035, "756": 237, "7565": 1036, "756687e": 224, "7567": 1036, "756752e": 224, "7569": 467, "757": [163, 262, 284, 369], "7573": 1036, "75747153": 211, "7578": [267, 1036], "75788833": 160, "757915": 278, "759": 284, "7593": 1035, "7594": 1035, "75949622": 211, "75th": [243, 882], "76": [43, 188, 207, 228, 326, 347, 355, 369, 378, 777, 830, 864], "760": [43, 149], "7608": 1019, "76195467e": 192, "762": [147, 999, 1020], "7632": 1035, "7638": 995, "764": [347, 721, 781, 999], "764779": 198, "765012": 318, "7655": 1036, "765671": 198, "7660": 1035, "7661": 1036, "7665012035905148": 272, "7668": 1037, "7674": [522, 1036], "767498": 146, "7676": 1035, "768": 86, "7680": 1035, "76823": 45, "7685": 1036, "769": 284, "76995": 367, "77": [43, 45, 47, 66, 79, 86, 163, 188, 273, 322, 326, 366, 369, 532, 707, 775, 822], "77000": 207, "7702": 1036, "770926": 278, "771": 736, "772": [347, 723], "7721": 1036, "7723": 1036, "7724": 1035, "773": [264, 329, 648, 842], "77310": 367, "7732": 1035, "77322639": 115, "7738": 1037, "7739": 1036, "77426368": 51, "775": 57, "7750": 1035, "775047": 676, "775151": 676, "7756": 1035, "77630514": 412, "7768366": 997, "777": 378, "7771": 1036, "77764": 400, "77777215": 115, "778": [43, 1020], "7786": 1035, "779": 347, "7794": 1036, "779751": 278, "7798": 908, "7799": 1035, "78": [43, 47, 52, 188, 224, 273, 326, 491, 492, 653, 655, 664, 665, 685, 686, 800, 806, 822, 828, 830, 999, 1019], "780": [262, 267, 1020], "7812": 1036, "781265": [367, 495], "7814": 1036, "7816": 52, "7819": [404, 1036], "7823": [1036, 1037], "7825": 1036, "7825594": 51, "7826": 369, "782755": 62, "7831": 347, "783149": 103, "7833": 472, "783392": 264, "7838": 1036, "784": 301, "7840": 87, "7849": 1036, "785063": 103, "78571427112143152472031331383346104": 52, "785ef0": 202, "786": [86, 103, 136, 192, 1020], "786015": 103, "7863": 1036, "786432": 86, "787": [646, 647, 652, 660, 661, 662, 681], "7872": 1036, "7880": 1036, "7887550": 52, "788808": 318, "789": [159, 411], "7894": [898, 1011], "79": [43, 45, 66, 68, 111, 112, 118, 123, 163, 188, 302, 326, 369, 377, 406, 471, 522, 596, 822, 842, 1029, 1031], "790": [43, 102], "7906": [622, 649], "79064206": 610, "79084103": 355, "791": 176, "7914": 1036, "791667315161908911936472223112": 52, "79269019073225": 288, "7927845601690917": 311, "7929": [348, 1036], "7943": 1039, "7944": 1036, "7946": 1035, "795": 648, "7954": 1036, "796": 146, "7970": 1036, "7971": 663, "7972": 552, "79769376": 115, "798": [103, 411], "7983": 1036, "798301": 247, "7986": 1036, "7986499491396734": 167, "798982054": 999, "799": [176, 348], "7990": 1036, "7998": 1036, "7_qbz5n2kfra8p0": 390, "7f48a4c1dfc0": 104, "8": [43, 44, 45, 46, 47, 48, 51, 52, 53, 57, 62, 63, 64, 66, 67, 68, 69, 70, 72, 78, 79, 83, 86, 88, 93, 95, 97, 98, 102, 104, 106, 107, 112, 115, 118, 120, 121, 123, 124, 125, 126, 128, 130, 134, 137, 139, 140, 143, 145, 146, 148, 152, 155, 162, 163, 168, 170, 172, 173, 175, 176, 179, 182, 183, 184, 186, 188, 190, 191, 195, 197, 200, 201, 203, 207, 208, 211, 214, 216, 222, 224, 226, 227, 228, 230, 231, 234, 238, 239, 241, 245, 246, 247, 249, 250, 251, 253, 254, 255, 258, 259, 260, 262, 263, 264, 265, 267, 268, 269, 271, 274, 275, 281, 283, 286, 288, 292, 296, 299, 301, 302, 304, 306, 307, 308, 309, 310, 313, 318, 325, 326, 327, 329, 330, 333, 336, 340, 341, 342, 343, 344, 347, 348, 349, 353, 355, 360, 366, 367, 368, 369, 370, 372, 376, 377, 378, 385, 390, 396, 397, 398, 402, 404, 405, 408, 409, 411, 412, 413, 415, 417, 436, 439, 440, 441, 444, 446, 447, 449, 452, 453, 454, 459, 460, 466, 467, 468, 469, 470, 471, 472, 473, 476, 477, 478, 480, 481, 482, 484, 487, 494, 496, 500, 501, 512, 514, 529, 532, 536, 538, 541, 543, 545, 547, 548, 551, 553, 554, 563, 568, 581, 587, 588, 589, 590, 603, 604, 628, 629, 630, 636, 637, 648, 670, 676, 679, 689, 692, 693, 694, 695, 699, 702, 706, 707, 709, 710, 715, 721, 727, 728, 729, 741, 742, 745, 746, 750, 751, 753, 778, 782, 783, 785, 788, 789, 790, 791, 795, 797, 799, 801, 802, 807, 810, 817, 818, 821, 822, 823, 828, 830, 831, 833, 842, 844, 845, 851, 861, 862, 869, 876, 885, 901, 906, 909, 928, 930, 931, 941, 946, 947, 948, 952, 968, 973, 974, 975, 976, 977, 978, 979, 988, 989, 995, 996, 997, 999, 1002, 1007, 1009, 1013, 1023, 1026, 1027, 1030, 1031, 1032, 1036, 1037, 1042, 1043, 1045, 1048, 1049], "80": [43, 45, 50, 64, 66, 100, 112, 123, 154, 160, 173, 184, 190, 241, 310, 325, 339, 341, 347, 353, 355, 367, 369, 372, 402, 408, 413, 415, 441, 476, 508, 539, 713, 800, 814, 822, 885, 898, 917, 988, 994, 995, 999, 1006, 1012, 1015], "800": [83, 316, 367, 583, 692], "8000": [224, 268], "800000011920929": 354, "8000184677460305": 311, "8002": 1036, "8003": 1037, "8005": 1036, "8006": 1036, "8010": 1036, "801775e": 224, "801829268292683": 247, "802": [46, 163, 369], "8022": [46, 470, 1038], "802601": 198, "8028": 1036, "803483": 146, "803882e": 224, "8040": 1035, "804414": [367, 495], "805": 209, "8053": 1036, "8059798": 194, "806": 649, "8061": 1036, "8065": 1036, "8066": 1037, "8068": 1036, "807": [155, 262, 264, 1020], "8075": 1037, "8076774802159501": 314, "808": [197, 1020], "8086": [619, 1036], "8087": 1036, "8093": 1036, "8094": 1036, "80956739": 1000, "80_000": 139, "81": [43, 66, 80, 83, 247, 325, 326, 404, 699, 800, 814, 831, 1000, 1002, 1009], "810": [185, 829], "8100": 1019, "8102": 1037, "810596": 367, "811": 221, "8117": 1036, "812": 1009, "8120": 1036, "8125": [86, 721], "812526": 198, "8129": 1037, "813": [283, 1020], "8133333333333334": 295, "81355169": 412, "8137": 1036, "8139": 1036, "814": 185, "815476315189119122164721021826110": 52, "8157": 1019, "8159": 1036, "816": [265, 299, 468, 469, 761, 1020], "8160": 1036, "8174": 1036, "817724": 198, "8181": 1036, "819": [213, 412, 1020], "8190": 1037, "81940995": 412, "8198": 1036, "82": [43, 86, 91, 142, 160, 165, 210, 243, 295, 306, 325, 788, 800, 814, 999, 1002, 1029], "820": [43, 52, 844, 845], "820705": 198, "8216": 1038, "822": 790, "822097": 183, "8224": 1036, "8225220806196525": 204, "823": 284, "8243": 1019, "825": 750, "8251": 1036, "8253": 222, "8259": 1036, "826": 947, "827917": 146, "828": [284, 788, 999], "8282": 1036, "829429": 254, "8295": 1036, "82e": 658, "83": [45, 47, 66, 70, 74, 325, 369, 707, 786, 920, 994, 999, 1032], "830000": 300, "8306": 1036, "831": [308, 1020], "8316": 1036, "832": [185, 411, 553, 554], "83236428": 412, "83281226": [844, 845], "8333": 496, "83333": 764, "833333": 183, "8335": 1036, "834": 329, "834310": 198, "8344": 1036, "8345": 596, "8353": 46, "8354": [622, 1036], "83548752": 610, "8355": 1035, "836": [336, 1020], "8361": 1037, "836224": 62, "8363": 1036, "837": [120, 1020], "8377": 1036, "83816048": 646, "83822343": 997, "83833": 378, "8387": 835, "839": 680, "84": [43, 45, 47, 102, 160, 200, 224, 306, 325, 355, 369, 385, 411, 412, 814, 1009], "840": 378, "84000": 207, "840000": 300, "8407": 102, "84077985": 194, "841": 103, "84127814": 666, "84253": 1000, "844": [411, 553, 554], "8446": 1036, "8449": 1036, "847": 788, "847222222222214": 204, "8473": 412, "8478": 1038, "8480": 1019, "8481": 1036, "8484": 1037, "848743": 62, "849": 1009, "849835": 87, "85": [45, 47, 55, 68, 83, 88, 102, 123, 160, 221, 224, 263, 275, 302, 326, 355, 411, 436, 496, 498, 553, 554, 596, 652, 658, 745, 753, 800, 828, 999, 1000, 1029], "850": [352, 1020], "850000": 300, "850031": 198, "8508": 1038, "851": [161, 264, 999, 1020], "8512": 1036, "8513": 619, "851348": 62, "8515": [412, 1036], "85151335": 412, "851792": 62, "852": 788, "85253229": 90, "852774": 146, "853174": 62, "853846": 198, "854": [262, 276, 1020], "85418642": 355, "8549": 1036, "855": 47, "8554": 1037, "855465": 300, "857": [265, 348], "857400": 62, "858486250088675": 311, "85857475": 130, "8586": 1036, "859007": 62, "8591": 1036, "86": [52, 68, 102, 160, 200, 306, 325, 326, 403, 912], "860000": 300, "861": [163, 369, 788, 789, 999], "861053": 62, "861106": 62, "861533": 62, "8617": 1037, "861868": 62, "862": [139, 1020], "8626621": 320, "8628": 635, "8631": 263, "8640": 184, "865400": 62, "866": 1007, "866161": 62, "866571": 62, "867": 106, "8672": 1036, "8676": [620, 1036], "8678": 623, "868": [146, 159], "868443": 50, "869": 788, "8697": 263, "8698": 1036, "87": [45, 50, 68, 102, 176, 258, 262, 326, 514, 596, 667, 777, 800, 822, 880, 892, 999], "870": [163, 369], "871": [73, 111, 112, 406, 471], "871277": 62, "871965": 62, "872": [73, 788, 863, 1007], "8720": [554, 1037], "872186": 62, "873": [163, 369], "873724": 62, "87382323": 662, "874": [105, 788, 789, 999], "87421f": 118, "874771": 146, "875": [168, 669], "875315171": 52, "875315173": 52, "875941": 62, "87600388": 170, "8768": 1036, "8769": 1038, "877": [47, 262], "877206": 262, "8773": 1038, "877981": 62, "878": [47, 134, 1020], "878051": 198, "878964": 812, "879": [221, 1020], "87e": 604, "87mb": 347, "88": [43, 45, 68, 80, 200, 211, 263, 302, 321, 325, 326, 351, 367, 369, 372, 403, 406, 470, 646, 647, 652, 660, 661, 662, 681, 864, 973, 1029], "880": [43, 198, 1020], "880191": 198, "880298": 198, "88089948": 412, "88096009": 130, "882": 264, "88213": 367, "882561": 264, "883": 82, "883065": 62, "8833": 496, "8835": 1036, "884": [277, 284], "8845": 1036, "885": [47, 163, 329, 369], "8854": 1036, "887": [330, 947, 1020], "88727338": 155, "8874": 1036, "8878": 835, "8880": 620, "8881": 623, "889": [262, 434], "88978285": 1000, "89": [43, 68, 172, 200, 325, 326, 981, 994, 999, 1009, 1029, 1032, 1040], "890": 262, "891": 47, "8922": 1036, "893055": 198, "8931": 1036, "8936": 1036, "894264": 247, "8947": 914, "8948018": 52, "89483932": 997, "8948621": 1000, "896": [44, 258, 648, 1020], "8963": 267, "8965": 411, "8973": 1036, "89856": 812, "899": [68, 209, 262, 1020], "8992": 1036, "8995": 1036, "8pt": 1009, "8x8": [68, 200, 237, 293, 302, 369, 500], "9": [43, 46, 47, 48, 51, 52, 61, 63, 64, 67, 68, 70, 77, 79, 83, 88, 91, 95, 97, 106, 113, 115, 142, 143, 145, 146, 147, 148, 152, 154, 156, 163, 165, 170, 174, 179, 182, 183, 184, 186, 192, 193, 200, 207, 219, 220, 223, 224, 226, 229, 237, 238, 244, 247, 249, 250, 251, 252, 257, 258, 262, 263, 267, 271, 273, 277, 283, 286, 288, 289, 292, 293, 294, 299, 300, 302, 304, 306, 307, 308, 310, 311, 313, 318, 319, 321, 322, 325, 326, 328, 329, 330, 336, 340, 345, 349, 355, 369, 370, 378, 385, 390, 396, 397, 402, 403, 405, 406, 408, 412, 436, 440, 447, 454, 460, 461, 464, 479, 480, 481, 482, 487, 494, 496, 514, 518, 525, 532, 536, 537, 538, 545, 558, 565, 568, 582, 590, 603, 604, 606, 607, 627, 630, 634, 637, 639, 646, 647, 652, 653, 658, 660, 661, 662, 663, 681, 682, 683, 687, 690, 692, 694, 699, 702, 709, 712, 723, 726, 731, 741, 748, 769, 778, 779, 780, 797, 799, 801, 803, 804, 818, 821, 822, 828, 830, 833, 835, 838, 841, 842, 846, 847, 852, 855, 861, 862, 870, 876, 879, 947, 948, 952, 971, 988, 994, 995, 999, 1003, 1009, 1013, 1014, 1027, 1030, 1031, 1032, 1034, 1043, 1045, 1049], "90": [45, 49, 52, 54, 68, 106, 129, 130, 145, 146, 147, 149, 160, 172, 186, 191, 200, 206, 209, 224, 249, 273, 275, 306, 310, 319, 325, 326, 355, 359, 372, 378, 408, 561, 800, 828, 833, 885, 994, 999, 1044, 1045], "900": [47, 83, 106, 107], "9000": 224, "900000e": 224, "9010": 1035, "9012": 1037, "9015": [663, 1037], "9019": 1036, "902": [151, 1020], "9022": 1036, "9024": 1036, "9026666666666666": 146, "903": [47, 781], "9037": 263, "904": [184, 262, 405], "9041": 1037, "9043": 1037, "9044": [264, 1036], "90453403": 463, "904556e": 224, "904558e": 224, "904747e": 224, "904751e": 224, "905": [262, 343, 1020], "905206": 87, "9067": 1036, "9069": 1038, "9078": 1036, "908": 999, "90809432": 130, "9085": 1037, "9087": 1043, "909": 47, "909293": 300, "90934343": 86, "909909": 146, "90e": 604, "90th": 359, "91": [45, 68, 84, 172, 302, 325, 326, 411, 994], "910": 43, "9100": 1036, "9101": 1037, "9105": 1036, "9108": 1036, "912": 73, "912632": 300, "913": [411, 557], "914370e": 224, "914388e": 224, "9144057": 52, "9145": 1036, "914537e": 224, "914574e": 224, "9146": 263, "9147": 1037, "9149": 1035, "915": 47, "9151": 1037, "9157": 1037, "916": [82, 318, 1020], "91629073": 589, "916579e": 224, "9167": 318, "917": [82, 354], "917281": 146, "917618e": 224, "919": 258, "92": [52, 66, 68, 80, 83, 123, 160, 188, 262, 302, 325, 326, 336, 367, 369, 536, 538, 545, 560, 596, 696, 800, 814, 822, 994], "9206": 1036, "9219": 1036, "9221": 649, "9222": 1037, "923223": 812, "92329566": 130, "9234": 1037, "9239": 1036, "924": 47, "92461872": 128, "925": 999, "9250": 1039, "92529176": 1000, "9257": 1037, "9259": 1036, "9266666666666666": 142, "927": 434, "9274": 1039, "9277": 1036, "9278": 1036, "928": [112, 172, 434, 1020], "9281259293305398": 320, "9284": 1036, "928571": 224, "9288": 1039, "9289": 1036, "93": [45, 66, 68, 163, 207, 228, 247, 262, 326, 347, 369, 777, 788, 800, 822, 828, 912, 994, 999], "9300": 264, "930000": 300, "9302": 1036, "9304": 1037, "931": [243, 1020], "932": 47, "93271427": 170, "933": [47, 106, 408], "933197": 247, "933253": 146, "9333": 408, "933333": 853, "934": [51, 1020], "9341": 263, "935": 1036, "9354": 1037, "936": [47, 434, 999], "936480": 62, "9372": 1037, "937443": 62, "9375": 86, "937532": 62, "937597": 62, "9378": 1037, "938": [47, 785, 999], "938613": 62, "939": [646, 647, 652, 660, 661, 662, 668, 681], "9399": 1037, "93fletcher": 995, "93goldfarb": 995, "93lindenstrauss_lemma": 898, "93shanno_algorithm": 995, "94": [43, 68, 70, 87, 122, 142, 206, 241, 306, 325, 326, 403, 411, 663, 788, 822, 994, 999, 1000, 1009, 1029], "940": 43, "9400": 264, "940000": 300, "940184": 146, "940201": 62, "940373": 62, "9403917": 115, "941": 47, "94114649": [844, 845], "9416": 52, "9417": 671, "942": [47, 1020], "9431": 835, "944": [47, 788], "9456": 1037, "94592424": 662, "946": 112, "94731329": 667, "9473684210526315": 313, "947958": 988, "948": [785, 999], "9484": 1037, "949": [47, 272, 1020], "9490": 369, "9492": 1037, "9493": 263, "9497": 1037, "9499": 638, "95": [45, 47, 52, 54, 68, 79, 85, 90, 100, 123, 142, 146, 149, 174, 183, 190, 207, 209, 224, 243, 251, 252, 255, 263, 264, 265, 289, 297, 306, 310, 317, 326, 336, 355, 411, 525, 632, 633, 636, 647, 661, 748, 788, 822, 901, 995, 999, 1000, 1012, 1032], "950": [47, 89, 1020], "950000047683716": 354, "9502547": 194, "9507": 1036, "9515": 1037, "951958": 988, "952": [47, 82], "9521": 1037, "952289": 198, "9524": 1037, "952914e": 224, "953": [47, 82], "953061": 301, "95373": 367, "954": [880, 892], "95433992": 115, "955": [284, 408, 654], "9558": 1036, "955989": 988, "956": [47, 344, 516, 1020], "956038": 300, "9563": 263, "9565": 369, "9569": 1037, "957": [47, 182, 309, 728, 999, 1020], "9579": 1037, "958": 47, "9583": 403, "9584": [627, 1036], "959": [880, 892], "9593": 1036, "9595": 674, "9597": 1039, "9599": 1037, "95th": [52, 146, 149, 748], "96": [43, 47, 52, 68, 95, 174, 233, 243, 262, 302, 306, 309, 310, 325, 326, 369, 408, 551, 682, 683, 711, 822, 830, 988, 994, 999, 1009, 1029], "9600": 1036, "9604": 1036, "961": 861, "961009": 988, "9612": 1037, "961904": 853, "96190476": 1002, "962": [47, 148, 1020], "96228895": 130, "9623": [263, 1036], "9630": 675, "9641": 1036, "9643": 263, "9647": 1037, "965": [47, 999], "9655": 1037, "9656": 1037, "966": 45, "9662": 263, "9666": 541, "966981": 198, "967": [106, 999], "9677": 1036, "967e": 1003, "968": [172, 182, 262], "9681": 1037, "9685": 263, "9686": 1037, "969": [91, 366, 1020], "9693": 1036, "9694898472080092": 319, "9697": 1036, "96e": 604, "97": [68, 129, 163, 186, 241, 255, 326, 336, 369, 378, 385, 408, 646, 647, 652, 658, 660, 661, 662, 681, 682, 683, 687, 994, 1000, 1009, 1029], "9701": 1037, "9707": 1037, "9711": [263, 1036], "9717": [263, 1036], "9723": 1037, "9726": 1037, "973": [348, 408], "9731": 1037, "9733": [620, 623], "973554": 318, "973770": 198, "974": 354, "974e": 412, "975": [163, 182, 328, 1014, 1020], "9750": 1036, "9759": [47, 263], "976158": 367, "977": [43, 408], "9771": 552, "9772": 1037, "9775": 1037, "977890": 254, "978": [348, 1020], "9781605585161": 404, "978444": 300, "9786": 1037, "9788": 1036, "98": [68, 77, 79, 87, 95, 97, 113, 123, 163, 192, 233, 262, 299, 306, 326, 369, 408, 411, 659, 839, 862, 895, 994, 999, 1001], "980000": 300, "9802": 1036, "981": [163, 369, 999], "9815": 1036, "9816": 1037, "9821": 850, "983": [272, 281, 728, 1020], "9830": 1036, "9832": 1037, "9833": 496, "98350372e": 192, "9836": 263, "983667": 988, "9837": 1037, "9843": 1042, "9847": 1036, "984ea3": [79, 95], "9850": 207, "9851": 1037, "9858": 1037, "98633022": 130, "986429": 301, "9865": 1036, "9866": [610, 619, 622], "9866666666666667": 142, "9868": [898, 1011], "986989": 267, "987": [105, 272, 348, 1020], "9875": 1037, "98809919e": 192, "9884": 679, "9885": 671, "9886": 1037, "989": 272, "989341": 198, "98mb": 347, "99": [45, 52, 62, 68, 79, 84, 95, 120, 224, 233, 237, 243, 249, 251, 262, 265, 304, 326, 360, 365, 369, 408, 412, 490, 647, 661, 671, 682, 683, 788, 822, 851, 968, 994, 999, 1009, 1013, 1025, 1031], "990": [669, 999], "9900": 224, "9903": 263, "9907": 1038, "9908": 1037, "991": [272, 999], "991584977345022": 167, "991653": 300, "9922": 1036, "9924": 539, "99244": 539, "9926": 263, "992766": 300, "993": 263, "9933333333333333": 142, "9935": 835, "9937333333333335": 313, "993879": 300, "9939": 1037, "993919": 50, "994": [272, 284], "9944": 263, "9945": 1036, "9951": 1039, "9969977": 52, "997": [46, 75, 163], "99726573": 155, "9978": 1042, "9979": 43, "9979281": 52, "998": 163, "9980": [43, 1037], "9981": 43, "998142": 52, "998273": 258, "9987": 639, "99891212e": 192, "998e": 1003, "999": [224, 244, 258, 264, 411, 717, 861, 862], "9990": 224, "9991": [664, 665, 1037], "99918858": 130, "9993": [43, 653, 655, 1037], "9994": 663, "9995": 43, "9996": 651, "999791942438998": 314, "9998": [50, 297], "9999": [50, 224, 297, 328, 496, 627, 1037], "99999": 328, "999999": [79, 95], "9b59b6": 263, "A": [0, 1, 19, 25, 41, 53, 55, 56, 62, 64, 67, 71, 73, 74, 75, 76, 79, 80, 82, 86, 87, 89, 90, 92, 93, 94, 95, 97, 100, 107, 109, 112, 116, 118, 121, 122, 123, 135, 136, 141, 143, 153, 156, 160, 162, 167, 170, 172, 174, 175, 176, 180, 183, 184, 194, 196, 205, 208, 211, 216, 220, 221, 224, 227, 240, 243, 252, 258, 261, 264, 265, 267, 271, 279, 281, 299, 304, 306, 309, 313, 315, 318, 323, 326, 327, 328, 330, 336, 340, 341, 347, 348, 349, 354, 355, 359, 361, 366, 367, 369, 372, 374, 375, 376, 377, 380, 384, 385, 386, 387, 389, 395, 399, 401, 402, 404, 405, 406, 407, 409, 410, 411, 412, 413, 415, 416, 417, 418, 427, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 454, 455, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 485, 487, 488, 490, 492, 495, 498, 499, 500, 501, 502, 506, 508, 509, 510, 511, 512, 513, 518, 520, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 606, 607, 609, 610, 611, 617, 620, 627, 628, 629, 630, 632, 633, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 704, 705, 710, 711, 712, 716, 717, 719, 721, 722, 723, 724, 725, 726, 731, 736, 737, 740, 742, 743, 744, 747, 749, 750, 751, 752, 754, 755, 756, 757, 758, 759, 764, 766, 767, 774, 775, 776, 777, 778, 781, 788, 790, 791, 793, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 889, 890, 892, 893, 894, 895, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 941, 943, 946, 947, 948, 956, 957, 959, 960, 983, 987, 988, 989, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1020, 1025, 1029, 1031, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049], "AND": 735, "AS": 416, "AT": [1, 367, 493], "And": [52, 180, 225, 226, 229, 231, 240, 264, 347, 374, 380, 398, 404, 408, 412, 528, 587, 588, 590, 692, 693, 995, 996, 999, 1020, 1036], "As": [0, 30, 43, 46, 58, 62, 75, 78, 86, 88, 90, 91, 99, 113, 116, 125, 134, 135, 141, 143, 144, 145, 147, 149, 153, 155, 158, 161, 167, 172, 173, 179, 183, 185, 186, 188, 190, 193, 194, 198, 200, 207, 211, 214, 224, 231, 240, 252, 258, 259, 261, 262, 264, 265, 267, 283, 289, 305, 316, 321, 322, 328, 336, 340, 348, 349, 351, 353, 355, 359, 360, 367, 371, 372, 374, 377, 384, 385, 386, 398, 402, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 443, 552, 560, 564, 609, 619, 632, 655, 656, 672, 674, 687, 735, 758, 764, 846, 847, 848, 850, 852, 883, 988, 993, 995, 996, 998, 999, 1000, 1002, 1006, 1009, 1013, 1014, 1015, 1018, 1019, 1023, 1029, 1035, 1040, 1045, 1047, 1049], "At": [52, 107, 134, 212, 240, 258, 276, 281, 283, 325, 328, 359, 360, 376, 387, 395, 400, 407, 411, 434, 437, 462, 587, 588, 590, 601, 832, 834, 871, 964, 988, 995, 998, 1000, 1004, 1013, 1023], "Be": [160, 176, 347, 372, 406, 565, 566, 648, 654, 655, 656, 658, 659, 669, 680, 704, 818, 819, 879, 1009, 1030], "Being": [372, 386, 387, 995, 1002], "But": [43, 48, 86, 182, 208, 209, 264, 284, 304, 372, 384, 404, 407, 410, 411, 459, 746, 912, 913, 988, 999, 1014, 1019], "By": [57, 120, 149, 150, 151, 155, 184, 190, 205, 211, 240, 258, 273, 281, 304, 313, 319, 320, 340, 347, 360, 372, 374, 378, 379, 386, 395, 403, 404, 405, 407, 408, 409, 410, 411, 413, 435, 438, 442, 443, 447, 461, 464, 465, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 522, 547, 548, 555, 556, 557, 558, 562, 563, 584, 585, 587, 588, 590, 605, 608, 632, 633, 671, 673, 675, 677, 690, 692, 694, 697, 699, 700, 702, 703, 718, 729, 730, 734, 738, 783, 784, 787, 794, 796, 803, 804, 850, 851, 864, 865, 877, 878, 880, 882, 892, 894, 902, 907, 908, 912, 913, 914, 915, 930, 931, 988, 989, 991, 995, 999, 1006, 1007, 1009, 1011, 1015, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1041, 1043, 1046, 1047, 1048, 1049], "For": [1, 30, 43, 47, 48, 51, 52, 53, 57, 64, 66, 68, 72, 75, 79, 80, 82, 86, 88, 90, 91, 93, 100, 105, 111, 116, 121, 137, 139, 146, 147, 149, 150, 152, 159, 160, 163, 167, 169, 174, 178, 179, 183, 184, 194, 196, 198, 201, 205, 207, 208, 211, 212, 214, 223, 224, 226, 228, 231, 233, 234, 236, 237, 238, 240, 247, 254, 258, 261, 264, 265, 270, 271, 278, 283, 284, 294, 299, 301, 302, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 328, 330, 336, 338, 340, 343, 347, 348, 349, 351, 352, 354, 355, 359, 361, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 384, 385, 386, 387, 395, 400, 401, 402, 403, 404, 405, 408, 409, 411, 412, 413, 414, 415, 420, 427, 434, 435, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 457, 458, 459, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 486, 492, 494, 496, 501, 512, 513, 521, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 547, 548, 549, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 570, 571, 580, 581, 582, 583, 587, 588, 590, 591, 592, 593, 596, 601, 606, 607, 608, 610, 611, 614, 619, 622, 623, 627, 628, 629, 630, 631, 632, 633, 635, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 684, 687, 688, 689, 690, 692, 693, 695, 697, 698, 700, 701, 702, 704, 706, 707, 709, 712, 720, 727, 729, 730, 738, 739, 740, 741, 763, 769, 778, 782, 783, 784, 787, 788, 789, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 814, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 831, 833, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 869, 870, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 889, 890, 891, 892, 893, 894, 895, 896, 897, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 930, 936, 953, 957, 963, 982, 988, 989, 991, 992, 993, 994, 995, 996, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1013, 1014, 1015, 1017, 1022, 1023, 1026, 1029, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "If": [0, 43, 50, 52, 64, 68, 77, 82, 88, 103, 113, 123, 132, 146, 149, 154, 176, 179, 183, 192, 207, 221, 223, 224, 240, 243, 247, 258, 264, 271, 278, 289, 297, 304, 309, 310, 322, 336, 340, 343, 344, 347, 348, 349, 354, 355, 359, 360, 366, 367, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 384, 386, 387, 390, 395, 398, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 425, 428, 429, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 506, 507, 508, 510, 512, 513, 517, 520, 521, 522, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 580, 581, 582, 583, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 606, 607, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 707, 709, 711, 712, 713, 714, 716, 717, 718, 722, 726, 727, 728, 729, 730, 731, 732, 736, 738, 741, 745, 746, 748, 753, 754, 755, 756, 757, 758, 759, 761, 763, 764, 766, 767, 768, 769, 771, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 787, 788, 789, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 806, 812, 814, 817, 820, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 925, 926, 928, 929, 930, 931, 933, 934, 935, 936, 939, 941, 946, 948, 950, 952, 959, 963, 966, 968, 969, 972, 973, 979, 982, 983, 984, 985, 987, 988, 989, 991, 993, 994, 995, 996, 997, 999, 1002, 1003, 1005, 1006, 1009, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1022, 1026, 1029, 1032, 1033, 1034, 1035, 1038, 1039, 1041, 1042, 1043, 1045, 1047], "In": [0, 6, 37, 43, 44, 46, 48, 50, 51, 52, 53, 54, 62, 63, 64, 66, 70, 72, 74, 82, 86, 88, 90, 91, 93, 99, 100, 103, 104, 106, 107, 109, 111, 112, 113, 116, 120, 122, 125, 126, 127, 128, 132, 134, 137, 139, 140, 141, 142, 143, 144, 146, 148, 149, 150, 151, 152, 154, 155, 156, 159, 160, 162, 163, 167, 171, 172, 174, 175, 176, 178, 179, 182, 183, 184, 185, 186, 188, 190, 191, 192, 194, 196, 197, 198, 200, 201, 204, 205, 207, 208, 209, 210, 211, 212, 214, 223, 224, 233, 234, 235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 247, 252, 254, 257, 258, 261, 262, 263, 264, 265, 266, 267, 269, 270, 273, 274, 276, 277, 278, 279, 281, 284, 287, 290, 291, 293, 302, 304, 305, 306, 309, 310, 311, 313, 314, 315, 317, 318, 320, 321, 322, 323, 327, 329, 336, 340, 343, 347, 348, 349, 351, 353, 354, 355, 359, 360, 361, 365, 366, 367, 368, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 384, 385, 386, 387, 389, 390, 391, 395, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 421, 434, 437, 438, 439, 440, 441, 444, 445, 446, 449, 459, 460, 461, 466, 469, 472, 491, 494, 501, 506, 507, 509, 521, 532, 534, 536, 538, 539, 540, 542, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 580, 581, 587, 590, 601, 605, 608, 610, 611, 630, 632, 633, 634, 636, 643, 644, 645, 647, 648, 649, 651, 653, 655, 658, 659, 661, 663, 665, 666, 668, 669, 674, 675, 676, 679, 680, 684, 685, 686, 696, 699, 703, 709, 718, 720, 726, 728, 729, 730, 734, 735, 738, 740, 742, 754, 756, 757, 781, 783, 785, 788, 794, 796, 797, 798, 799, 800, 803, 804, 806, 814, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 838, 839, 840, 841, 842, 843, 846, 847, 848, 850, 851, 852, 854, 855, 856, 861, 869, 871, 877, 878, 882, 883, 885, 889, 890, 892, 893, 894, 895, 896, 897, 899, 900, 901, 904, 905, 906, 909, 912, 914, 919, 929, 931, 942, 948, 987, 988, 989, 991, 992, 993, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1023, 1026, 1029, 1030, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049], "Ines": 1046, "It": [0, 30, 43, 46, 47, 48, 52, 58, 62, 70, 72, 75, 86, 88, 91, 104, 109, 111, 113, 120, 123, 124, 126, 129, 134, 137, 139, 140, 142, 144, 146, 154, 163, 172, 173, 174, 178, 179, 183, 184, 185, 191, 194, 196, 198, 207, 211, 220, 223, 224, 226, 227, 233, 238, 240, 243, 258, 259, 260, 262, 263, 264, 265, 267, 270, 271, 273, 278, 281, 284, 290, 291, 292, 294, 295, 297, 304, 308, 309, 311, 313, 319, 321, 322, 323, 332, 336, 340, 343, 347, 348, 349, 355, 359, 360, 361, 365, 367, 368, 369, 370, 372, 374, 376, 377, 378, 380, 381, 384, 385, 386, 387, 390, 395, 398, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 429, 434, 435, 438, 439, 440, 441, 442, 444, 445, 446, 449, 456, 459, 461, 464, 465, 466, 471, 475, 482, 484, 494, 506, 513, 522, 531, 533, 534, 536, 538, 539, 547, 548, 557, 558, 565, 588, 595, 601, 605, 606, 607, 611, 614, 615, 619, 620, 622, 623, 627, 630, 631, 632, 633, 641, 642, 643, 646, 647, 650, 652, 653, 654, 655, 658, 660, 661, 662, 663, 666, 667, 668, 670, 671, 672, 674, 676, 677, 678, 679, 681, 682, 683, 684, 687, 689, 691, 692, 693, 695, 696, 697, 698, 699, 700, 702, 704, 708, 709, 710, 716, 723, 731, 734, 742, 743, 747, 758, 759, 762, 765, 781, 783, 788, 799, 800, 803, 804, 806, 812, 813, 814, 822, 823, 825, 828, 831, 840, 841, 846, 847, 848, 850, 853, 854, 855, 856, 860, 861, 862, 866, 867, 868, 872, 873, 874, 878, 881, 883, 893, 896, 897, 901, 902, 904, 906, 907, 908, 909, 910, 911, 917, 921, 925, 934, 948, 957, 969, 972, 974, 975, 976, 977, 978, 979, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1009, 1010, 1012, 1013, 1014, 1015, 1017, 1018, 1023, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049], "Its": [109, 262, 266, 368, 386, 409, 414, 536, 921, 994, 995, 999, 1004, 1007, 1013, 1018, 1023, 1032, 1046], "NOT": [240, 290, 369, 375, 561, 810, 844, 845], "Nearness": 627, "No": [61, 148, 165, 194, 213, 214, 240, 258, 267, 326, 343, 369, 380, 390, 398, 404, 471, 557, 558, 589, 590, 609, 635, 645, 664, 676, 678, 685, 686, 797, 941, 995, 1046], "Not": [88, 184, 359, 384, 398, 404, 422, 423, 426, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 466, 467, 468, 469, 470, 471, 472, 473, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 561, 564, 567, 568, 580, 581, 582, 587, 588, 590, 627, 628, 629, 630, 677, 688, 689, 690, 691, 693, 794, 797, 798, 800, 803, 804, 814, 841, 844, 845, 848, 849, 850, 852, 856, 868, 876, 879, 880, 882, 885, 896, 897, 908, 999, 1005, 1018, 1038], "OF": 369, "ON": 318, "ONE": [366, 606, 607], "OR": [304, 404, 415, 441, 1040], "Of": [48, 62, 64, 178, 278, 359, 374, 404, 412, 989], "On": [43, 51, 52, 55, 63, 100, 103, 104, 115, 116, 125, 134, 137, 139, 141, 146, 150, 151, 154, 155, 156, 158, 160, 171, 172, 183, 184, 185, 192, 196, 198, 209, 211, 234, 235, 236, 237, 239, 240, 243, 244, 245, 246, 247, 249, 251, 254, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 271, 276, 278, 302, 304, 306, 308, 309, 310, 314, 315, 317, 318, 320, 323, 327, 336, 343, 353, 354, 359, 370, 372, 373, 374, 376, 384, 386, 400, 402, 404, 408, 409, 411, 413, 414, 643, 656, 691, 735, 761, 869, 885, 988, 992, 995, 998, 999, 1001, 1005, 1007, 1012, 1014], "One": [1, 43, 48, 51, 61, 63, 66, 82, 88, 125, 127, 143, 146, 149, 150, 180, 183, 186, 189, 211, 221, 233, 244, 254, 258, 264, 271, 274, 281, 290, 293, 305, 320, 331, 333, 348, 354, 359, 369, 372, 385, 386, 398, 403, 404, 407, 409, 410, 411, 412, 413, 415, 441, 446, 469, 471, 475, 510, 564, 631, 639, 658, 666, 668, 673, 675, 676, 677, 788, 807, 808, 832, 833, 834, 865, 866, 877, 908, 963, 989, 991, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1006, 1007, 1009, 1014, 1020, 1021, 1025, 1033, 1035, 1042, 1044], "Or": [347, 354, 408, 409, 877, 999, 1005, 1013], "Such": [53, 150, 167, 172, 182, 190, 194, 198, 208, 258, 267, 347, 386, 387, 398, 408, 409, 411, 553, 554, 656, 989, 999, 1002, 1009, 1015, 1039, 1044, 1046], "THE": 369, "That": [52, 64, 120, 134, 149, 163, 183, 198, 233, 264, 268, 348, 349, 360, 366, 374, 380, 386, 403, 408, 413, 414, 440, 443, 444, 555, 562, 592, 818, 912, 913, 988, 996, 997, 1005, 1015, 1038, 1039], "The": [1, 15, 25, 27, 30, 31, 33, 37, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 257, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 279, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 351, 352, 353, 354, 355, 359, 360, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 381, 384, 385, 386, 387, 389, 390, 392, 395, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 424, 426, 427, 429, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 715, 716, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 738, 739, 740, 741, 742, 743, 744, 745, 746, 748, 752, 753, 754, 755, 756, 757, 758, 759, 762, 764, 765, 766, 767, 770, 771, 774, 775, 776, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 920, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 933, 934, 935, 936, 937, 941, 943, 944, 945, 946, 947, 948, 950, 951, 953, 956, 957, 960, 963, 965, 966, 967, 968, 969, 972, 980, 981, 982, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1022, 1023, 1025, 1026, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "Their": [183, 367, 369, 387, 404, 644, 1029], "Then": [103, 135, 139, 149, 154, 155, 156, 160, 183, 188, 194, 196, 205, 207, 211, 230, 234, 240, 246, 258, 266, 267, 281, 347, 354, 366, 376, 378, 380, 390, 391, 401, 404, 407, 409, 412, 413, 555, 556, 568, 592, 719, 756, 800, 814, 904, 905, 989, 998, 999, 1005, 1014, 1015, 1038], "There": [0, 74, 80, 140, 167, 201, 224, 230, 240, 255, 259, 264, 283, 347, 365, 367, 369, 372, 373, 374, 377, 384, 386, 387, 390, 401, 404, 409, 411, 412, 413, 443, 449, 459, 532, 551, 552, 557, 558, 587, 588, 590, 605, 645, 989, 995, 996, 997, 998, 999, 1002, 1006, 1009, 1013, 1014, 1015, 1017, 1022, 1029, 1037, 1048], "These": [10, 17, 25, 32, 38, 43, 44, 46, 64, 84, 120, 122, 139, 142, 180, 184, 198, 201, 207, 208, 209, 234, 258, 281, 284, 288, 302, 304, 311, 312, 317, 323, 326, 328, 355, 359, 360, 365, 368, 369, 372, 374, 376, 379, 381, 384, 386, 390, 395, 398, 401, 402, 403, 404, 407, 409, 411, 412, 413, 414, 439, 443, 445, 496, 506, 507, 513, 536, 565, 566, 601, 602, 668, 676, 677, 699, 706, 733, 778, 794, 800, 803, 804, 806, 814, 823, 825, 826, 827, 828, 829, 831, 849, 850, 869, 902, 943, 988, 990, 993, 995, 996, 999, 1000, 1010, 1012, 1014, 1018, 1026, 1029, 1035, 1037, 1038, 1039, 1042, 1046, 1048], "To": [43, 47, 63, 64, 66, 68, 80, 88, 90, 109, 111, 113, 116, 125, 134, 143, 146, 147, 155, 163, 172, 173, 176, 178, 179, 182, 183, 188, 192, 194, 196, 207, 208, 209, 211, 214, 224, 229, 237, 238, 240, 243, 245, 247, 254, 258, 259, 261, 262, 264, 266, 267, 269, 271, 277, 278, 281, 283, 301, 304, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 345, 348, 351, 355, 359, 360, 365, 366, 370, 372, 373, 374, 376, 377, 378, 380, 384, 386, 387, 390, 398, 400, 401, 404, 405, 406, 407, 408, 409, 411, 412, 443, 445, 446, 447, 458, 461, 464, 490, 494, 500, 501, 505, 506, 507, 529, 535, 536, 537, 539, 541, 542, 543, 544, 555, 556, 557, 558, 562, 563, 567, 596, 611, 627, 632, 646, 647, 652, 653, 656, 658, 659, 660, 661, 662, 663, 684, 700, 702, 712, 728, 763, 785, 793, 803, 804, 821, 826, 833, 864, 875, 880, 894, 895, 904, 905, 909, 912, 913, 914, 915, 937, 948, 985, 988, 989, 991, 994, 995, 996, 997, 999, 1000, 1001, 1002, 1005, 1006, 1009, 1013, 1014, 1015, 1023, 1029, 1032, 1034, 1035, 1036, 1038, 1040], "Will": [372, 495, 532, 627, 644, 645, 646, 652, 656, 657, 660, 661, 662, 663, 664, 665, 673, 675, 707, 714, 788, 869, 873, 883, 884, 1032, 1033, 1035, 1037, 1047], "Willing": [1035, 1036], "With": [61, 70, 79, 100, 107, 125, 126, 149, 151, 159, 165, 180, 184, 207, 209, 232, 234, 239, 241, 247, 264, 288, 359, 367, 370, 372, 374, 386, 395, 404, 405, 408, 411, 413, 434, 436, 499, 539, 581, 632, 633, 658, 862, 865, 867, 878, 884, 885, 911, 913, 992, 995, 999, 1000, 1002, 1003, 1006, 1013, 1015, 1020, 1026, 1032, 1036, 1037, 1039, 1041, 1043], "_": [43, 44, 46, 47, 48, 50, 51, 52, 54, 62, 63, 64, 66, 68, 69, 75, 78, 83, 86, 88, 91, 96, 100, 102, 113, 118, 120, 125, 126, 127, 129, 137, 138, 139, 149, 155, 158, 167, 172, 173, 174, 182, 183, 184, 186, 188, 190, 194, 196, 197, 198, 201, 205, 207, 209, 211, 219, 220, 223, 227, 230, 234, 239, 243, 247, 258, 259, 264, 266, 267, 268, 270, 271, 273, 274, 277, 278, 281, 287, 292, 295, 302, 306, 309, 310, 311, 314, 317, 318, 319, 321, 323, 326, 327, 335, 340, 343, 347, 349, 352, 374, 378, 386, 409, 411, 412, 416, 443, 475, 530, 531, 532, 533, 534, 536, 537, 538, 541, 543, 544, 545, 564, 596, 646, 647, 652, 653, 660, 661, 662, 663, 681, 682, 683, 684, 688, 689, 690, 691, 693, 695, 696, 698, 700, 709, 710, 764, 800, 806, 814, 823, 848, 856, 877, 878, 885, 989, 995, 996, 999, 1001, 1002, 1003, 1006, 1007, 1009, 1014, 1015, 1036], "_0": [206, 685, 995, 999, 1014], "_1": [316, 340, 406, 409, 412, 529, 535, 536, 538, 543, 544, 545, 646, 647, 652, 653, 654, 655, 656, 660, 661, 662, 663, 681, 682, 683, 684, 766, 995, 997, 999, 1014], "_11": 652, "_2": [112, 172, 340, 409, 412, 529, 535, 543, 544, 646, 652, 995, 1003, 1013, 1014], "_21": [646, 647, 652, 653, 660, 661, 662, 663, 681, 684], "__": [105, 265, 386, 405, 418, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 461, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 797, 798, 799, 800, 803, 804, 814, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 988, 1037, 1038], "______________________________________________________________________": 326, "________________________________________________________________________________": [50, 87, 347], "__________________________________________________________________________________": 91, "________________________________________________________ward_tre": 87, "_____________________________________________________f_regress": 87, "__add__": [414, 624], "__array__": [1032, 1039], "__array_function__": [1019, 1039], "__c": 374, "__call__": [175, 336, 386, 412, 414, 463, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 937, 966, 1036], "__class__": [207, 209, 240, 243, 266, 306, 347, 348, 349, 379], "__class_weight": 374, "__dataframe__": [559, 560], "__doc__": [78, 107, 172, 252, 386], "__file__": [47, 49, 1042], "__getitem__": 1047, "__getstate__": [1036, 1044], "__init__": [47, 89, 132, 175, 240, 284, 336, 372, 374, 376, 377, 378, 379, 386, 412, 418, 421, 424, 427, 428, 618, 961, 1030, 1035, 1037, 1042, 1043, 1044, 1045], "__init_subclass__": 374, "__len__": 1038, "__main__": [329, 384], "__metadata_request__fit": 240, "__mul__": 621, "__mul___": 414, "__name__": [46, 62, 94, 207, 209, 240, 243, 247, 259, 266, 306, 329, 347, 348, 349, 379, 384, 877], "__pow__": [414, 616], "__repr__": 1038, "__sklearn_clone__": [374, 429, 1045], "__sklearn_is_fitted__": [89, 131, 180, 374, 418, 421, 982, 1020, 1042, 1043], "__sklearn_tags__": [322, 374, 953, 1048, 1049], "__version__": [147, 186, 313, 376], "_agglom": 87, "_array_api": 400, "_bag": 939, "_base": 250, "_basehmm": 1029, "_bay": 939, "_birch": 1039, "_breast_cancer_dataset": 163, "_build": 372, "_c_step": 1036, "_cfnode": 439, "_check_bounds_param": 1041, "_check_i": 987, "_check_param_grid": 1035, "_check_sample_weight": 1042, "_check_stop_list": 590, "_check_target": 1036, "_check_x": 1039, "_class": 999, "_class_cov": 1037, "_class_mean": 1037, "_classif": 302, "_classifier_ha": 89, "_column_transform": [103, 154], "_compon": [237, 534], "_coo": [584, 585], "_count_nonzero_coeffici": 46, "_criterion": 1037, "_csr": 877, "_cython_bla": 373, "_devianc": 999, "_diabetes_dataset": 163, "_distn_infrastructur": 276, "_doc_link_modul": 374, "_doc_link_templ": 374, "_doc_link_url_param_gener": 374, "_dotbla": 378, "_encod": 1037, "_error": 999, "_estim": 987, "_estimator_typ": [1034, 1048], "_estimator_with_converted_arrai": 400, "_f": [175, 995], "_featur": [409, 536, 538, 545], "_fit_and_scor": 1037, "_fit_stag": [557, 558], "_forest": 372, "_fro": [529, 535, 543, 544, 646, 647, 652, 660, 661, 662, 681], "_g": 175, "_gb": 1039, "_generate_center_coordin": 53, "_get_support_mask": 600, "_get_tag": [1040, 1048], "_get_warnings_filters_info_list": 360, "_h": [536, 538, 545], "_hist_gradient_boost": 376, "_i": [402, 411, 990, 995, 999, 1003, 1014], "_idx": 386, "_init": 191, "_init_t": 1013, "_initialize_nmf": 378, "_intermediate_coef": 374, "_is_fit": 132, "_iter": 376, "_j": [402, 990], "_k": [406, 993, 995], "_l": 999, "_learntselectormixin": 1034, "_level": [414, 625], "_logist": 372, "_loss": [386, 999, 1047], "_m": 1015, "_mean": 310, "_mean_frequency_by_risk_group": 207, "_method": 960, "_more_tag": [322, 1048], "_my": 372, "_n": [412, 999], "_n_cluster": 372, "_n_compon": 545, "_n_features_out": 420, "_name_estim": 1039, "_neg": 378, "_newton_cg": 1040, "_nls_subproblem": 378, "_nmf": 378, "_not_in_sphinx": [47, 49], "_num_thread": 360, "_obj": 960, "_openmp_help": 373, "_pairwis": [1039, 1041], "_param_valid": 267, "_plain_sgd": 1044, "_plot": 325, "_po": 378, "_posterior_mod": 610, "_preprocess_data": 687, "_pvalu": 1029, "_rand": 355, "_rank": 593, "_ratio": [536, 538, 545], "_repr_html": 944, "_request": [240, 395, 1047, 1048], "_required_paramet": 424, "_reset": 47, "_run_search": 1037, "_safe_index": [1, 1042, 1046, 1047, 1049], "_safe_split": 921, "_safe_tag": [1040, 1048], "_sag": 1038, "_sampl": [237, 409, 536, 538, 545], "_samples_gener": 252, "_score": [386, 800, 814, 827, 999, 1029, 1042], "_search": 1035, "_serial": 240, "_sgd_fast": 1044, "_skip_test": 923, "_spars": 378, "_sparse_fit": 1039, "_std": 310, "_supervis": 72, "_support": [162, 593], "_t": 1013, "_tag": 923, "_test": [214, 306, 360, 374, 1042], "_test_scor": [263, 264, 469, 593, 1042], "_train_scor": 263, "_transform_select": 1035, "_tree": [912, 913, 914, 915, 1030, 1032], "_typedef": 373, "_univariate_select": 87, "_validate_data": [322, 1048], "_valu": [414, 613], "_w": [536, 538, 545], "_weight": [53, 224], "_weight_boost": 939, "_weighted_percentil": 1042, "_which_": 184, "_x_is_even": 961, "_xfail_check": [322, 1048], "a16": [1039, 1040], "a65628": [79, 95], "a674e682c281": 377, "a_": [121, 401, 404, 536, 538, 545, 995], "a_column": 719, "a_i": 404, "a_mask": 273, "a_n": 401, "a_row": 719, "a_tru": 273, "aaa": 175, "aaaaff": [289, 292], "aaai": [404, 415, 441, 839, 1001], "aact": 175, "aaffaa": 292, "aagaard": 1033, "aakanksha": 1037, "aapl": 51, "aarch64": 380, "aaron": [492, 995, 1032, 1033, 1034, 1039, 1048, 1049], "aarshai": [1036, 1037], "aashil": 1036, "ab": [51, 55, 75, 107, 124, 130, 136, 143, 154, 159, 163, 186, 200, 217, 219, 222, 224, 229, 264, 304, 321, 334, 345, 404, 536, 538, 545, 627, 844, 845, 879, 999], "ab_mask": 273, "abadi": [1035, 1036], "abandon": 372, "abati": [1044, 1046, 1047, 1048], "abbi": [1039, 1040], "abbrevi": 699, "abdela": 1038, "abdulaziz": [1047, 1048], "abdulelah": 1042, "abdur": 1039, "abenbihi": 1039, "abhi": 1048, "abhijeet": 1031, "abhijeetsingh": 1049, "abhinav": [1039, 1042], "abhishek": [1032, 1033, 1039, 1043, 1045, 1046], "abhyudai": 1036, "abid": 372, "abil": [48, 52, 94, 111, 121, 146, 166, 168, 172, 174, 176, 178, 180, 182, 183, 185, 207, 211, 224, 233, 347, 361, 390, 411, 412, 414, 611, 622, 625, 782, 783, 784, 787, 788, 996, 999, 1002, 1005, 1015, 1020, 1029, 1031, 1036, 1038, 1042, 1043, 1048], "abirami": 404, "abl": [0, 43, 44, 48, 61, 81, 88, 94, 113, 116, 124, 125, 149, 151, 173, 183, 186, 194, 198, 207, 222, 224, 230, 270, 275, 277, 320, 321, 336, 355, 359, 360, 361, 366, 370, 372, 374, 376, 377, 380, 384, 398, 400, 404, 406, 408, 412, 482, 501, 532, 829, 876, 988, 989, 995, 998, 999, 1000, 1005, 1009, 1012, 1015, 1016, 1019, 1035, 1036, 1040, 1047], "ablin": 1044, "abnorm": [220, 233, 290, 335, 367, 490, 561, 850, 1005, 1037], "abo7atm": 1041, "abort": [692, 941], "about": [2, 46, 50, 65, 79, 86, 90, 95, 102, 116, 142, 160, 165, 176, 180, 182, 185, 186, 211, 223, 233, 240, 258, 261, 262, 263, 264, 266, 271, 283, 289, 309, 313, 315, 316, 317, 318, 319, 322, 326, 347, 349, 354, 355, 359, 360, 365, 367, 371, 372, 374, 376, 377, 378, 380, 385, 386, 387, 398, 403, 408, 409, 412, 414, 435, 490, 492, 493, 494, 495, 498, 499, 500, 502, 503, 508, 513, 559, 560, 592, 593, 606, 607, 614, 640, 676, 678, 743, 800, 806, 814, 823, 833, 883, 931, 989, 995, 996, 998, 1000, 1002, 1005, 1006, 1009, 1010, 1012, 1014, 1015, 1018, 1022, 1023, 1034, 1035, 1045, 1047, 1048, 1049], "abov": [43, 62, 63, 64, 72, 79, 99, 102, 136, 139, 140, 146, 149, 155, 156, 162, 163, 165, 183, 184, 195, 207, 209, 213, 217, 237, 240, 241, 258, 261, 264, 270, 281, 289, 306, 309, 310, 314, 316, 320, 322, 340, 348, 349, 354, 355, 359, 360, 361, 366, 367, 369, 370, 371, 372, 374, 376, 378, 384, 386, 387, 400, 402, 404, 405, 406, 408, 409, 410, 411, 412, 414, 438, 442, 461, 464, 486, 493, 494, 495, 521, 589, 631, 634, 704, 755, 800, 804, 812, 814, 825, 867, 868, 881, 887, 893, 901, 963, 988, 989, 991, 993, 995, 996, 999, 1002, 1004, 1006, 1009, 1013, 1014, 1015, 1019, 1035, 1047], "abraham": [1029, 1030, 1035, 1039], "abrahamowicz": 1009, "absenc": [233, 267, 386, 712, 867, 998, 999], "absent": [386, 402, 412, 729, 754, 825], "absgrad": 1040, "absher": 1031, "absolut": [1, 43, 52, 107, 124, 143, 163, 183, 207, 209, 213, 224, 321, 354, 374, 398, 404, 406, 408, 409, 411, 412, 413, 414, 415, 441, 447, 453, 454, 529, 535, 540, 543, 544, 546, 547, 548, 556, 558, 559, 560, 563, 587, 589, 590, 592, 596, 601, 619, 627, 632, 646, 649, 650, 652, 654, 656, 671, 672, 674, 676, 678, 682, 683, 704, 717, 721, 736, 737, 745, 746, 748, 753, 755, 757, 795, 802, 806, 817, 820, 828, 830, 842, 844, 845, 849, 868, 873, 876, 889, 913, 915, 984, 995, 996, 1009, 1013, 1015, 1030, 1035, 1040, 1041, 1042, 1043, 1046, 1049], "absolute_error": [52, 411, 556, 558, 560, 563, 671, 913, 915, 1042], "absolute_loss": 1042, "absolutelynowarranti": 1037, "absp": 860, "abstain": 532, "abstract": [386, 409, 414, 618, 769, 1029], "abstractmethod": 1039, "absurd": 1006, "abund": 367, "ac": [528, 664, 685, 686, 995, 1012], "acad": [689, 693, 996], "academ": [408, 1023], "academi": [111, 851], "acategorypredict": 392, "acc": 145, "acc_clf1": 69, "acc_clf2": 69, "acc_clf3": 69, "acc_histori": 47, "acc_knn": 293, "acceler": [238, 318, 359, 384, 400, 404, 465, 692, 902, 996, 1018, 1023, 1038, 1042, 1044, 1046], "accent": [344, 587, 588, 590, 1039], "accept": [163, 167, 240, 258, 261, 263, 313, 321, 322, 323, 336, 347, 349, 355, 359, 360, 366, 372, 374, 381, 384, 385, 386, 387, 395, 400, 404, 412, 434, 438, 441, 442, 445, 458, 461, 464, 506, 507, 553, 554, 559, 560, 567, 568, 580, 581, 592, 593, 596, 628, 635, 639, 643, 646, 647, 652, 653, 661, 663, 679, 702, 727, 742, 778, 797, 798, 799, 803, 804, 822, 846, 847, 854, 855, 864, 868, 928, 930, 931, 934, 987, 995, 997, 999, 1002, 1007, 1009, 1014, 1018, 1019, 1029, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "accept_large_spars": [930, 931, 1037], "accept_spars": [139, 868, 930, 931, 1036, 1046], "access": [43, 82, 109, 144, 243, 250, 255, 320, 321, 347, 354, 359, 360, 372, 373, 374, 380, 384, 386, 387, 400, 404, 406, 407, 411, 412, 414, 447, 454, 461, 464, 534, 565, 566, 567, 568, 609, 617, 862, 863, 864, 919, 988, 995, 998, 999, 1005, 1006, 1007, 1013, 1014, 1017, 1022, 1023, 1029, 1031, 1035, 1036, 1037, 1038, 1041, 1043, 1044, 1045, 1049], "acciaro": [1048, 1049], "accid": [207, 224], "accident": [400, 1029, 1033, 1038], "accommod": [172, 1037], "accompani": [264, 1037], "accomplish": [240, 402, 544, 996, 1000, 1002, 1023, 1046], "accord": [1, 55, 61, 63, 72, 82, 109, 140, 145, 163, 168, 207, 224, 237, 313, 340, 348, 355, 372, 374, 384, 385, 386, 387, 398, 401, 402, 404, 406, 408, 409, 411, 412, 414, 434, 447, 449, 453, 457, 459, 462, 466, 502, 514, 515, 516, 523, 528, 530, 533, 534, 536, 538, 548, 551, 552, 559, 560, 561, 564, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 641, 642, 644, 645, 649, 658, 659, 670, 680, 691, 695, 735, 779, 780, 800, 801, 802, 803, 804, 807, 808, 809, 814, 825, 839, 840, 841, 842, 843, 848, 850, 851, 852, 853, 854, 855, 856, 857, 858, 867, 874, 882, 894, 896, 897, 904, 905, 906, 907, 909, 910, 993, 995, 999, 1001, 1002, 1009, 1012, 1013, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "accordingli": [149, 184, 243, 340, 372, 376, 377, 1036, 1037, 1044], "account": [0, 52, 53, 88, 122, 128, 134, 149, 172, 178, 183, 224, 240, 258, 264, 287, 293, 343, 348, 359, 368, 372, 386, 387, 395, 404, 407, 408, 409, 411, 412, 460, 559, 560, 565, 566, 627, 628, 630, 632, 633, 649, 673, 679, 704, 707, 728, 729, 730, 738, 743, 756, 783, 784, 787, 788, 801, 805, 818, 878, 988, 991, 993, 997, 999, 1000, 1001, 1002, 1009, 1013, 1015, 1034, 1036, 1037, 1038, 1041, 1042, 1044, 1046, 1047, 1048, 1049], "acctactagaagtt": 384, "acctcctagaag": 384, "accumul": [47, 83, 141, 198, 376, 378, 404, 412, 821, 999, 1030, 1037], "accur": [43, 48, 52, 59, 62, 63, 111, 120, 148, 167, 174, 183, 184, 201, 211, 221, 224, 258, 264, 271, 275, 281, 317, 347, 348, 355, 371, 386, 402, 404, 406, 409, 411, 412, 413, 434, 440, 444, 448, 450, 456, 529, 536, 538, 540, 541, 543, 544, 545, 606, 607, 634, 803, 804, 844, 845, 947, 948, 991, 996, 1015, 1043], "accuraci": [1, 30, 37, 43, 45, 46, 47, 62, 66, 67, 68, 69, 102, 103, 104, 105, 134, 140, 141, 144, 145, 152, 159, 160, 162, 168, 186, 188, 201, 207, 211, 214, 221, 222, 251, 262, 263, 264, 265, 266, 268, 270, 278, 281, 286, 292, 293, 294, 302, 306, 309, 319, 325, 326, 328, 336, 339, 340, 343, 355, 359, 385, 386, 403, 404, 408, 411, 412, 413, 421, 434, 446, 466, 468, 469, 475, 530, 532, 539, 547, 548, 549, 551, 553, 555, 556, 557, 559, 562, 563, 565, 567, 610, 634, 658, 659, 666, 668, 671, 674, 675, 676, 692, 697, 703, 708, 711, 713, 718, 732, 733, 734, 738, 743, 754, 763, 787, 794, 796, 799, 822, 828, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 846, 851, 853, 854, 861, 899, 900, 904, 906, 909, 912, 914, 920, 947, 948, 988, 993, 994, 995, 996, 1000, 1002, 1003, 1007, 1011, 1013, 1015, 1037, 1038, 1047], "accuracy_histori": 47, "accuracy_multinomi": 201, "accuracy_ovr": 201, "accuracy_scor": [1, 66, 134, 168, 268, 309, 328, 347, 355, 385, 395, 400, 421, 555, 562, 708, 711, 729, 730, 734, 738, 783, 784, 787, 794, 796, 940, 988, 999, 1030, 1031, 1032, 1041, 1046, 1047], "accuracy_test": 66, "acf": 143, "achar": [1036, 1037, 1038, 1039], "achiev": [43, 51, 55, 57, 64, 67, 123, 134, 142, 144, 149, 152, 175, 188, 207, 214, 261, 264, 271, 309, 321, 328, 336, 339, 340, 343, 347, 355, 359, 361, 366, 367, 369, 374, 378, 384, 386, 392, 400, 401, 402, 403, 404, 408, 409, 411, 412, 556, 563, 640, 649, 676, 678, 707, 729, 730, 738, 740, 763, 783, 784, 787, 803, 804, 840, 884, 988, 989, 991, 995, 999, 1009, 1012, 1014, 1042], "achin": 1023, "achliopta": [237, 897, 898, 1011], "achraf": 1049, "acid": [309, 369], "acknowledg": [371, 608, 1046], "acl": [901, 1012, 1013], "acm": [366, 367, 404, 415, 441, 447, 454, 457, 509, 561, 676, 726, 756, 850, 999, 1002, 1005, 1011], "acoust": 999, "acq": 47, "acquaint": 372, "acquir": [53, 266, 1041], "acquisit": [401, 719], "acronym": 376, "across": [0, 1, 14, 43, 52, 88, 94, 100, 115, 126, 140, 162, 183, 198, 203, 227, 259, 261, 264, 273, 277, 278, 284, 304, 309, 340, 373, 374, 381, 386, 398, 402, 404, 408, 411, 412, 413, 416, 434, 437, 447, 449, 451, 454, 457, 459, 466, 469, 471, 485, 488, 490, 493, 495, 501, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 549, 551, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 565, 566, 587, 590, 593, 601, 606, 607, 610, 611, 632, 633, 634, 639, 640, 641, 642, 646, 647, 650, 652, 653, 654, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 676, 678, 679, 685, 686, 689, 690, 691, 692, 693, 694, 695, 704, 705, 717, 731, 757, 788, 793, 795, 797, 798, 800, 801, 802, 803, 804, 805, 806, 812, 814, 815, 816, 817, 818, 819, 820, 821, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 849, 853, 860, 861, 862, 869, 873, 874, 881, 882, 884, 885, 893, 896, 897, 899, 900, 904, 905, 906, 909, 912, 913, 947, 948, 969, 972, 988, 995, 997, 999, 1009, 1013, 1015, 1019, 1023, 1029, 1032, 1035, 1036, 1037, 1038, 1039, 1047], "act": [336, 347, 372, 385, 410, 411, 713, 729, 730, 738, 783, 784, 787, 879, 883, 996, 999, 1002, 1014, 1037], "action": [316, 347, 371, 375, 376, 390, 403, 1009, 1039], "activ": [52, 68, 180, 214, 244, 249, 255, 265, 324, 325, 349, 366, 367, 370, 372, 373, 378, 380, 384, 386, 387, 390, 391, 395, 405, 494, 500, 524, 632, 635, 637, 650, 651, 653, 654, 655, 663, 664, 665, 682, 683, 684, 685, 686, 713, 718, 797, 860, 861, 862, 869, 900, 966, 995, 996, 997, 998, 1002, 1003, 1004, 1012, 1020, 1022, 1040], "active_": [650, 651, 654, 655], "active_features_": 1037, "actual": [43, 52, 64, 80, 93, 107, 116, 140, 149, 163, 183, 188, 198, 207, 211, 214, 251, 260, 267, 271, 349, 354, 355, 359, 361, 369, 372, 374, 377, 378, 384, 385, 386, 400, 402, 404, 409, 411, 412, 413, 429, 507, 513, 514, 525, 533, 536, 538, 545, 560, 561, 644, 645, 648, 658, 659, 666, 667, 668, 669, 670, 672, 674, 676, 677, 678, 680, 687, 691, 695, 701, 704, 709, 715, 721, 722, 723, 724, 785, 797, 803, 804, 816, 819, 820, 850, 862, 881, 904, 910, 938, 939, 940, 973, 991, 998, 999, 1002, 1006, 1007, 1015, 1022, 1036, 1037, 1043, 1044, 1045], "actual_vs_predict": [43, 107, 154, 183, 260, 318, 701], "actuari": [402, 999], "ad": [43, 53, 58, 107, 127, 129, 134, 140, 149, 155, 159, 167, 173, 174, 190, 194, 205, 209, 211, 230, 239, 240, 264, 265, 266, 304, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 329, 340, 348, 371, 372, 374, 376, 380, 384, 386, 387, 409, 411, 412, 413, 414, 415, 416, 422, 426, 428, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 456, 457, 458, 459, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 502, 503, 508, 510, 512, 513, 520, 521, 525, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 572, 580, 581, 582, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 700, 701, 702, 704, 708, 709, 711, 712, 713, 714, 718, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 734, 738, 739, 740, 741, 742, 743, 746, 753, 754, 757, 761, 766, 767, 769, 775, 777, 778, 782, 783, 784, 785, 787, 789, 790, 791, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 809, 813, 814, 818, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 890, 893, 894, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 928, 930, 931, 937, 941, 942, 943, 947, 948, 953, 956, 957, 958, 959, 960, 963, 966, 969, 973, 979, 985, 987, 988, 992, 994, 995, 996, 1000, 1002, 1003, 1005, 1019, 1023, 1026, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "adaboost": [1, 67, 115, 133, 137, 142, 150, 153, 154, 156, 170, 180, 218, 322, 353, 517, 549, 551, 552, 557, 631, 703, 830, 912, 913, 1020, 1021, 1025, 1031], "adaboost_clf": 134, "adaboostclassifi": [1, 67, 136, 142, 395, 411, 552, 557, 559, 939, 1031, 1032, 1035, 1036, 1038, 1039, 1042, 1044, 1045, 1046, 1048], "adaboostregressor": [1, 135, 395, 411, 551, 560, 939, 1031, 1032, 1035, 1038, 1039, 1042, 1044, 1045], "adam": [0, 244, 300, 393, 861, 862, 1003, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "adamgonzo": 1043, "adamson": 1041, "adanhawth": [1037, 1038], "adapt": [86, 88, 134, 145, 146, 249, 250, 258, 340, 360, 371, 372, 381, 404, 411, 414, 513, 514, 515, 516, 528, 676, 677, 678, 861, 862, 995, 1001, 1003, 1009, 1013, 1018, 1019, 1037, 1038, 1045, 1046], "adarsh": [1046, 1047], "add": [44, 51, 55, 58, 62, 63, 64, 66, 68, 69, 75, 79, 87, 107, 111, 112, 116, 121, 126, 142, 145, 159, 161, 163, 167, 172, 173, 174, 178, 179, 193, 197, 198, 204, 205, 208, 210, 211, 221, 229, 233, 237, 239, 240, 263, 271, 273, 274, 284, 296, 306, 308, 313, 315, 316, 322, 339, 340, 342, 343, 348, 359, 370, 371, 372, 373, 374, 376, 378, 380, 386, 390, 400, 402, 408, 411, 412, 413, 513, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 601, 627, 628, 630, 632, 658, 659, 694, 697, 821, 844, 845, 901, 937, 957, 958, 988, 989, 998, 999, 1005, 1009, 1012, 1013, 1019, 1026, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "add_2d_scatt": 226, "add_artist": [70, 126, 201, 227, 249, 250, 251, 254, 255], "add_ax": [66, 184, 230, 275], "add_categori": 243, "add_collect": [51, 229, 236], "add_dummy_featur": 1, "add_ind": [103, 154, 179, 185, 235, 245, 314, 317, 627, 628, 630, 989, 1038, 1041, 1045], "add_missing_valu": 179, "add_nois": 173, "add_self_request": [240, 957], "add_subplot": [46, 62, 64, 77, 97, 100, 126, 184, 221, 228, 230, 325, 326, 379], "add_trac": 140, "adddatapointbatch": 284, "addep": 1040, "addison": [589, 730], "addit": [1, 6, 37, 43, 44, 46, 51, 53, 54, 99, 103, 113, 120, 123, 126, 134, 138, 140, 141, 143, 144, 162, 172, 173, 174, 183, 184, 190, 194, 198, 201, 208, 209, 211, 230, 244, 258, 266, 273, 277, 279, 283, 304, 314, 315, 320, 323, 327, 340, 349, 353, 355, 359, 360, 364, 365, 366, 367, 368, 371, 372, 374, 376, 377, 378, 380, 384, 386, 387, 390, 398, 403, 404, 406, 408, 409, 412, 413, 414, 415, 428, 438, 439, 441, 442, 443, 447, 454, 466, 471, 494, 501, 530, 532, 535, 537, 539, 540, 541, 547, 551, 552, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 581, 582, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 609, 611, 612, 619, 628, 630, 631, 635, 638, 639, 640, 641, 642, 643, 644, 645, 670, 687, 688, 692, 698, 699, 702, 742, 758, 759, 788, 792, 797, 798, 806, 823, 833, 835, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 857, 858, 860, 867, 868, 869, 870, 873, 874, 876, 877, 878, 879, 881, 882, 883, 884, 886, 896, 897, 904, 905, 941, 948, 988, 993, 995, 999, 1000, 1002, 1003, 1006, 1009, 1011, 1012, 1013, 1014, 1015, 1018, 1025, 1029, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1047, 1048, 1049], "addition": [86, 104, 136, 149, 183, 207, 224, 240, 314, 316, 348, 372, 384, 402, 412, 610, 611, 646, 652, 671, 881, 988, 989, 999, 1007, 1017, 1018, 1035, 1046, 1049], "additional_nois": 75, "additive_chi2": [620, 638, 765, 774], "additive_chi2_kernel": [1, 400, 638, 759, 765, 991, 1048], "additivechi2sampl": [1, 639, 640, 641, 642, 758, 759, 991, 1043, 1045], "address": [43, 211, 240, 273, 347, 367, 372, 403, 404, 412, 444, 657, 995, 996, 1001, 1002, 1003, 1004, 1005, 1009, 1023, 1037], "adeel": 1048, "adelr": 1037, "adequ": [360, 378, 565, 1042], "adeyemi": [1047, 1048], "adher": [1, 359, 374, 386, 941, 943, 1029, 1030], "adien": 1045, "adijohar": 1043, "adil": 1044, "adimension": 183, "adithya": 1034, "aditi": [1047, 1048], "aditya": [1035, 1037, 1038, 1039, 1043, 1044], "adityadaflapurkar": 1037, "adjac": [404, 409, 449, 459, 584, 585, 635, 691, 695, 954, 996, 1002], "adjacency_matrix": 404, "adjust": [1, 43, 48, 71, 73, 82, 91, 109, 134, 146, 158, 180, 211, 233, 238, 246, 263, 265, 281, 313, 329, 343, 348, 379, 404, 405, 409, 411, 412, 522, 551, 552, 555, 557, 559, 560, 562, 658, 659, 666, 668, 674, 675, 676, 704, 705, 708, 714, 715, 755, 757, 786, 795, 839, 840, 842, 843, 874, 896, 897, 904, 905, 906, 909, 912, 914, 936, 998, 999, 1003, 1009, 1020, 1026, 1029, 1035, 1045, 1049], "adjusted_mutual_info_scor": [1, 72, 73, 82, 91, 404, 705, 715, 733, 755, 757, 786, 999, 1029, 1037, 1041, 1045, 1049], "adjusted_rand_index": 705, "adjusted_rand_scor": [1, 72, 73, 82, 91, 348, 404, 704, 715, 733, 757, 786, 999, 1042], "administr": [390, 391], "admir": [1044, 1045], "admiss": [237, 360], "adopt": [374, 376, 384, 386, 900, 999, 1013, 1037, 1044, 1046], "adoublet": [1044, 1045], "adpot": 319, "adrian": [1042, 1043, 1044], "adriano": 1049, "adrien": [1029, 1049], "adrin": [0, 387, 393, 398, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "adrinjalali": [1032, 1041], "adult": [320, 494, 1009], "advanc": [44, 151, 180, 184, 232, 234, 264, 283, 361, 372, 404, 409, 486, 499, 533, 632, 639, 783, 797, 853, 862, 865, 884, 913, 988, 991, 999, 1002, 1009, 1017, 1020, 1023, 1026, 1031], "advani": 1041, "advantag": [43, 44, 74, 88, 90, 120, 125, 147, 207, 208, 233, 250, 265, 283, 317, 321, 355, 386, 402, 408, 409, 412, 414, 438, 442, 457, 532, 588, 649, 674, 675, 763, 832, 833, 834, 864, 865, 904, 905, 906, 907, 908, 909, 910, 988, 991, 994, 995, 996, 999, 1000, 1002, 1003, 1007, 1009, 1013, 1014, 1015, 1032], "advic": [380, 414, 622, 623], "advik": [1046, 1047], "advis": [52, 208, 240, 355, 372, 404, 412, 434, 646, 652, 654, 660, 662, 672, 687, 991, 995, 1001, 1003, 1014, 1043], "advoc": 1000, "aeberhard": 369, "aeon": 1018, "aesthet": [304, 1015, 1034], "af": 73, "affan": 1035, "affanv14": 1036, "affect": [46, 62, 111, 149, 155, 174, 179, 182, 183, 211, 230, 243, 244, 267, 274, 309, 319, 355, 359, 360, 361, 368, 372, 386, 389, 402, 404, 407, 408, 410, 412, 415, 417, 441, 447, 454, 466, 467, 468, 469, 470, 471, 472, 473, 476, 547, 548, 567, 699, 702, 712, 788, 800, 801, 803, 804, 805, 814, 818, 819, 844, 845, 846, 847, 848, 850, 852, 854, 855, 856, 884, 885, 895, 902, 909, 998, 1002, 1012, 1014, 1029, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1046, 1047, 1049], "affili": 367, "affin": [1, 27, 71, 72, 79, 82, 96, 180, 304, 327, 364, 374, 386, 409, 437, 438, 449, 451, 459, 510, 533, 691, 695, 704, 705, 717, 737, 793, 795, 900, 921, 993, 996, 999, 1020, 1024, 1025, 1029, 1030, 1033, 1039, 1040, 1042, 1044], "affinity_matrix": [691, 695], "affinity_matrix_": [437, 449, 691], "affinity_propag": [1, 51, 79], "affinitypropag": [1, 73, 79, 317, 404, 1029, 1032, 1033, 1037, 1040, 1042, 1043, 1044, 1045, 1046], "affirm": 43, "afnlp": 1013, "afor": [896, 897], "aforement": [360, 408, 1000], "afraid": 390, "africa": 1009, "afroj": 1046, "aft": [310, 1032], "aftab": 1038, "after": [43, 55, 58, 59, 63, 80, 86, 88, 102, 103, 107, 112, 122, 134, 144, 149, 152, 154, 156, 159, 163, 172, 174, 176, 178, 183, 188, 201, 202, 207, 243, 244, 247, 252, 264, 273, 283, 284, 292, 294, 304, 305, 308, 309, 347, 348, 361, 367, 369, 371, 372, 374, 376, 378, 379, 380, 384, 386, 398, 400, 401, 402, 404, 405, 408, 409, 412, 413, 416, 439, 444, 447, 448, 449, 450, 453, 459, 513, 530, 534, 548, 551, 552, 557, 558, 559, 560, 596, 627, 630, 658, 659, 666, 667, 668, 673, 675, 676, 677, 678, 692, 712, 726, 756, 794, 797, 798, 803, 804, 853, 860, 864, 877, 883, 904, 909, 910, 925, 988, 989, 993, 995, 996, 999, 1003, 1004, 1009, 1011, 1013, 1014, 1015, 1019, 1029, 1032, 1036, 1037, 1040, 1041, 1044, 1047, 1048], "afterward": [58, 372, 376, 533, 539, 828], "ag": [103, 163, 183, 185, 196, 198, 207, 224, 244, 245, 247, 258, 304, 316, 317, 318, 320, 367, 369, 494, 1023], "again": [43, 58, 100, 104, 146, 171, 173, 175, 183, 230, 265, 347, 355, 376, 381, 386, 387, 404, 405, 406, 411, 412, 465, 469, 565, 566, 634, 647, 651, 653, 655, 661, 663, 665, 692, 988, 995, 999, 1013, 1026, 1029, 1037, 1046], "against": [64, 72, 116, 129, 137, 147, 158, 188, 200, 201, 215, 223, 224, 240, 273, 310, 313, 336, 367, 372, 387, 398, 400, 402, 404, 408, 412, 435, 507, 540, 546, 549, 676, 678, 755, 757, 788, 802, 807, 809, 829, 833, 966, 991, 995, 999, 1000, 1002, 1014], "agamemnon": [1036, 1037, 1038, 1039, 1041, 1042], "agarw": [1036, 1037, 1039], "agath": 1043, "agc": 175, "agct": 175, "agent": 1023, "agg": 172, "aggarw": 1049, "aggfunc": 275, "agglo": [84, 442], "agglom": [1, 51, 71, 77, 79, 81, 89, 93, 95, 99, 100, 180, 227, 229, 325, 326, 404, 438, 442, 500, 691, 778, 857, 1020, 1032], "agglomer": [1, 44, 45, 68, 71, 83, 104, 159, 161, 180, 193, 206, 242, 288, 325, 326, 364, 404, 412, 442, 500, 599, 605, 645, 800, 805, 864, 1020, 1025], "agglomerativeclust": [1, 74, 75, 76, 79, 81, 85, 89, 95, 100, 386, 404, 437, 439, 442, 1032, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1046], "aggreg": [93, 138, 224, 267, 273, 278, 317, 319, 404, 411, 413, 532, 553, 554, 593, 721, 723, 728, 745, 746, 748, 750, 751, 753, 785, 790, 791, 1000, 1002, 1009, 1045], "aggress": [1, 47, 666, 667, 803, 804, 1021, 1025, 1030], "aggressive_elimin": [276, 803, 804, 988], "agnost": [716, 998, 1007, 1047], "ago": [51, 376, 1019], "agouzoul": 1049, "agraw": [1032, 1037, 1043, 1044], "agre": [25, 158, 380, 387, 404, 786], "agreement": [0, 1, 404, 704, 716, 755, 757, 795, 999], "agricultur": 995, "agriya": 1049, "aguiar": 413, "agundez": 1037, "agyapong": 1049, "ahead": 888, "ahmadi": 1040, "ahmadjubair33": 1043, "ahmedbgh": [1044, 1045], "ahn": 1041, "ahuja": [1036, 1043, 1044], "ai": 408, "ai8rahim": 1032, "aic": [1, 180, 189, 195, 196, 197, 203, 214, 254, 499, 651, 653, 654, 655, 656, 798, 865, 884, 988, 1020, 1029, 1036, 1042, 1043], "aic_criterion": 196, "aid": [261, 404, 792, 793, 996, 1023, 1029, 1041], "aidan": 1037, "aidar": 1043, "aiden": 1049, "aig": 51, "aiko": 1044, "aim": [52, 58, 112, 149, 179, 209, 211, 258, 292, 322, 327, 340, 361, 367, 372, 386, 398, 404, 406, 412, 445, 995, 999, 1002, 1009, 1014, 1018, 1043, 1048], "ain_siz": 263, "air": [172, 764], "airport": 764, "airspe": 372, "aisha": [1047, 1048], "aishgrt1": 1037, "aishwarya": 1037, "aishwaryark": 1036, "aistat": 1012, "aitsaid": 1049, "aivision2020": 1036, "aj": [492, 1043], "ajai": 1049, "ak": [402, 1043, 1044], "aka": [1, 45, 299, 347, 384, 412, 449, 534, 536, 538, 542, 545, 580, 581, 615, 622, 651, 652, 654, 655, 656, 658, 659, 662, 666, 667, 668, 670, 676, 677, 678, 741, 871, 875, 877, 995, 1003, 1013, 1031, 1043], "akai": 1042, "akaik": [196, 198, 254, 656, 798, 988, 995], "akanksha": [1048, 1049], "akash": [1037, 1047], "aki": [1043, 1044, 1045], "akihiro": [1047, 1048], "akin": [43, 208, 386], "akinkunl": 1039, "akitti": 1034, "akshai": [1033, 1036, 1041], "akshay0724": 1036, "akshayah3": 1033, "akshita": 1044, "al": [0, 1, 50, 109, 110, 134, 148, 196, 297, 367, 369, 401, 404, 406, 409, 411, 412, 413, 448, 496, 517, 518, 526, 533, 539, 542, 561, 682, 683, 719, 720, 839, 841, 861, 862, 897, 947, 948, 995, 996, 999, 1005, 1009, 1011, 1014, 1015, 1037, 1042, 1045, 1046], "ala": [1044, 1045], "aladago": 1039, "alam": [1044, 1045], "alan": [1036, 1037, 1040, 1042, 1043, 1047], "alastuei": 1032, "albeit": 62, "albert": [0, 362, 1036, 1037, 1038, 1041, 1042], "alberto": [1038, 1042, 1043, 1047, 1048], "alcalin": 369, "alcohol": [309, 369], "alcorn": 1037, "aldrian": 1033, "aleator": 52, "alec": 1039, "alejandro": [1030, 1035, 1046], "alek": [1042, 1043], "aleksandr": 1036, "aleksandra": 1040, "alemagnani": 1032, "alert": 1036, "alessandro": [1039, 1041, 1044], "alessia": 1042, "alex": [398, 412, 1014, 1029, 1032, 1037, 1039, 1040, 1041, 1043, 1044, 1045, 1046], "alexand": [0, 394, 404, 409, 533, 870, 1031, 1032, 1033, 1035, 1036, 1037, 1041, 1042, 1043, 1046], "alexandercbooth": 1036, "alexandr": [0, 387, 393, 394, 1023, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046], "alexandracraciun": 1041, "alexandru": 436, "alexanmv": 1043, "alexei": 1034, "alexfield": 1035, "alexgoryainov": 1039, "alexi": [1029, 1032, 1033, 1036, 1046, 1047], "alexl": [1045, 1046], "alexqiao": [1047, 1048], "alexryndin": 1037, "alexshack": [1039, 1040, 1041], "alfalfa": 57, "alfano": 1036, "alfaro": [0, 362, 1040, 1041, 1042, 1043, 1044], "alfr": 0, "alfredo": 1049, "algebra": [360, 375, 384, 409, 412, 459, 870, 1009], "algesheim": 404, "algo": [78, 129], "algo_param": [79, 95], "algorithm": [1, 5, 7, 8, 10, 17, 28, 30, 32, 33, 38, 39, 41, 48, 53, 55, 56, 65, 71, 72, 77, 78, 80, 83, 89, 90, 91, 92, 93, 94, 95, 99, 100, 102, 110, 111, 115, 120, 122, 134, 135, 140, 150, 180, 188, 197, 198, 210, 220, 222, 228, 230, 232, 236, 237, 243, 250, 251, 252, 255, 261, 264, 273, 284, 290, 291, 293, 297, 304, 306, 309, 313, 314, 315, 318, 319, 320, 327, 328, 329, 335, 347, 348, 349, 355, 359, 361, 365, 366, 367, 368, 369, 372, 373, 374, 375, 380, 381, 385, 386, 389, 400, 401, 404, 406, 407, 408, 409, 411, 412, 414, 415, 416, 417, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 466, 471, 472, 475, 479, 480, 481, 485, 501, 509, 510, 511, 512, 513, 520, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 542, 543, 544, 545, 546, 551, 552, 553, 554, 557, 558, 561, 590, 602, 603, 610, 611, 635, 637, 639, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 674, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 704, 705, 708, 717, 719, 735, 737, 743, 774, 778, 779, 793, 795, 797, 798, 832, 841, 842, 844, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 857, 860, 865, 869, 871, 884, 888, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 930, 947, 948, 950, 965, 968, 973, 989, 991, 994, 996, 997, 998, 999, 1001, 1004, 1005, 1009, 1012, 1013, 1014, 1018, 1019, 1020, 1021, 1023, 1025, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "algorithm_nam": 78, "ali": [1034, 1037, 1038, 1041, 1042, 1044, 1045, 1046, 1049], "alia": [52, 240, 263, 373, 380, 386, 395, 434, 440, 441, 444, 446, 462, 479, 480, 481, 531, 534, 536, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 589, 610, 611, 617, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 690, 799, 801, 802, 807, 809, 818, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 849, 851, 854, 855, 861, 862, 864, 867, 869, 870, 871, 876, 883, 884, 899, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 972, 1005, 1019, 1029, 1043], "alias": [80, 81, 240, 370, 372, 375, 395, 596, 1029, 1033, 1043, 1048], "aliased_sample_weight": 240, "align": [66, 70, 147, 149, 179, 226, 229, 249, 275, 349, 386, 689, 693, 991, 999, 1002, 1013, 1024, 1025, 1045, 1046], "alihan": [1042, 1048], "alik": [409, 997], "alin": 1042, "alison": 1036, "all": [0, 1, 3, 30, 43, 44, 46, 47, 50, 53, 57, 61, 62, 63, 64, 66, 70, 73, 74, 75, 77, 78, 85, 86, 87, 88, 93, 97, 107, 113, 120, 122, 123, 132, 139, 140, 142, 146, 149, 156, 163, 172, 173, 175, 179, 180, 182, 183, 184, 186, 190, 194, 195, 201, 202, 203, 207, 208, 209, 210, 211, 215, 217, 221, 223, 224, 226, 227, 229, 233, 239, 240, 243, 244, 247, 250, 252, 254, 258, 262, 263, 265, 266, 267, 268, 270, 271, 272, 274, 276, 277, 281, 284, 287, 289, 301, 304, 305, 309, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 325, 327, 328, 329, 333, 336, 340, 341, 343, 344, 345, 347, 348, 349, 352, 354, 355, 359, 360, 361, 365, 367, 368, 369, 370, 372, 374, 376, 377, 378, 380, 381, 384, 385, 386, 387, 391, 395, 398, 400, 401, 402, 403, 404, 405, 408, 409, 411, 412, 413, 414, 415, 416, 418, 419, 421, 422, 423, 424, 426, 427, 428, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 501, 506, 507, 513, 525, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 582, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 687, 688, 689, 690, 691, 692, 693, 694, 697, 698, 699, 700, 701, 702, 705, 713, 714, 715, 716, 717, 718, 720, 721, 723, 726, 727, 728, 729, 730, 732, 733, 735, 736, 737, 738, 742, 745, 746, 748, 750, 751, 753, 756, 761, 769, 774, 778, 781, 782, 783, 784, 785, 786, 787, 788, 790, 791, 793, 794, 795, 797, 798, 800, 801, 802, 803, 804, 806, 807, 809, 810, 812, 814, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 920, 926, 928, 930, 931, 932, 936, 938, 939, 940, 942, 954, 963, 973, 982, 987, 988, 989, 991, 992, 993, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1006, 1007, 1009, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1020, 1022, 1023, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1047, 1048, 1049], "all_class": 47, "all_displai": [1, 381, 1044], "all_estim": [1, 381, 1039, 1040, 1044], "all_funct": [1, 381, 1044], "all_handl": 201, "all_label": [201, 901], "all_model": 146, "all_or_ani": [982, 1039], "all_scor": 733, "all_split": [43, 52], "all_uppercas": 412, "allan": [347, 402, 1041], "allclos": [121, 151, 1011], "allefeld": 1042, "allen": [318, 1032, 1034, 1036, 1039], "allend": [1040, 1042], "allevi": [90, 149, 190, 194, 404, 1001], "allison": 318, "alloc": [1, 42, 45, 62, 94, 180, 276, 315, 368, 372, 373, 400, 404, 412, 440, 444, 456, 485, 534, 536, 538, 583, 587, 590, 646, 652, 660, 662, 803, 804, 806, 823, 828, 831, 988, 1009, 1018, 1020, 1024, 1025, 1033, 1034, 1039, 1040, 1046, 1048], "allouch": 1049, "allow": [0, 25, 43, 58, 66, 89, 91, 106, 107, 124, 125, 126, 137, 138, 144, 152, 155, 165, 167, 172, 173, 174, 176, 184, 197, 201, 203, 207, 211, 224, 227, 234, 237, 244, 246, 247, 249, 258, 263, 264, 277, 278, 283, 313, 314, 315, 316, 318, 321, 322, 323, 340, 341, 347, 354, 355, 359, 366, 367, 372, 373, 374, 376, 379, 380, 381, 384, 386, 387, 395, 398, 400, 402, 403, 404, 405, 407, 408, 409, 411, 412, 413, 414, 415, 434, 440, 441, 443, 444, 446, 461, 462, 463, 464, 479, 480, 481, 494, 521, 522, 531, 532, 534, 536, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 581, 582, 588, 589, 592, 593, 596, 602, 610, 611, 615, 627, 628, 630, 634, 635, 638, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 688, 690, 692, 699, 742, 762, 765, 774, 778, 781, 792, 793, 797, 798, 799, 800, 801, 802, 803, 804, 807, 809, 811, 814, 818, 821, 822, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 849, 850, 851, 854, 855, 859, 861, 862, 864, 866, 867, 869, 870, 871, 876, 883, 884, 888, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 928, 930, 931, 943, 964, 988, 989, 991, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1009, 1011, 1012, 1013, 1014, 1015, 1018, 1019, 1023, 1026, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "allow_nan": [921, 929, 931, 1045], "allow_nd": [930, 931], "allow_non": 711, "allow_single_clust": [79, 443], "allow_unlabel": [118, 241, 521], "allowed_extens": 501, "allwein": 281, "almeida": [1030, 1031, 1042], "almeidayoel": 1043, "almer": 1036, "almost": [43, 70, 140, 145, 209, 214, 240, 243, 258, 279, 309, 321, 328, 355, 365, 367, 376, 378, 384, 385, 386, 395, 404, 408, 409, 467, 468, 469, 470, 472, 473, 474, 797, 988, 994, 995, 998, 999, 1014, 1037, 1042], "almubarak": [1042, 1043], "alon": [183, 211, 270, 336, 386, 402, 648, 669, 680, 1036, 1038], "along": [1, 51, 53, 89, 92, 99, 116, 141, 146, 149, 172, 197, 207, 238, 240, 263, 268, 313, 323, 348, 349, 355, 367, 372, 376, 380, 381, 386, 390, 395, 398, 401, 409, 411, 412, 413, 416, 531, 548, 586, 611, 612, 630, 646, 647, 650, 651, 652, 653, 654, 655, 656, 660, 661, 662, 663, 676, 678, 681, 682, 683, 684, 685, 686, 779, 780, 792, 800, 814, 873, 874, 877, 878, 881, 882, 883, 884, 889, 890, 891, 893, 894, 895, 926, 950, 957, 973, 979, 988, 995, 1002, 1009, 1012, 1023, 1029, 1034, 1035, 1037, 1041, 1042, 1049], "alongsid": [372, 378, 386, 390, 413, 644, 646, 825, 826, 827, 828, 829, 831, 999, 1006, 1018, 1019], "alonso": [1040, 1042], "aloqe": [1047, 1048], "alpaydin": 369, "alpha": [1, 43, 44, 46, 47, 49, 51, 52, 53, 55, 61, 63, 66, 67, 70, 72, 75, 77, 85, 89, 93, 98, 107, 113, 116, 120, 122, 123, 125, 128, 129, 134, 136, 137, 142, 146, 149, 150, 151, 153, 154, 155, 156, 163, 167, 170, 172, 173, 174, 175, 176, 178, 179, 183, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 203, 204, 205, 207, 208, 209, 211, 212, 215, 218, 219, 224, 226, 227, 230, 238, 239, 244, 246, 249, 263, 264, 265, 266, 267, 268, 271, 272, 274, 276, 277, 283, 284, 287, 289, 292, 294, 299, 301, 304, 305, 306, 307, 309, 311, 314, 316, 317, 320, 327, 329, 333, 334, 337, 338, 340, 341, 343, 344, 345, 347, 359, 367, 374, 378, 384, 406, 407, 409, 411, 413, 414, 416, 443, 468, 469, 475, 525, 529, 531, 533, 534, 535, 536, 537, 538, 540, 541, 543, 544, 545, 546, 558, 594, 595, 597, 611, 613, 615, 616, 623, 631, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 660, 661, 662, 663, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 687, 723, 748, 839, 840, 841, 843, 861, 862, 900, 912, 913, 914, 915, 988, 995, 999, 1001, 1003, 1007, 1012, 1013, 1014, 1015, 1026, 1029, 1031, 1032, 1033, 1034, 1036, 1037, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049], "alpha_": [43, 113, 183, 191, 196, 198, 469, 611, 644, 645, 647, 651, 653, 655, 656, 661, 663, 673, 675, 995, 1015, 1029, 1036], "alpha_1": [644, 645, 995], "alpha_2": [644, 645, 995], "alpha_a": 198, "alpha_b": 198, "alpha_bound": [176, 623], "alpha_h": [54, 409, 536, 538, 545, 1042], "alpha_i": [1001, 1014], "alpha_init": [191, 645, 995, 1039], "alpha_max": [646, 647, 652, 653, 660, 661, 662, 663, 681, 684], "alpha_min": [646, 647, 650, 652, 653, 654, 656, 660, 661, 662, 663, 681, 682, 683, 684], "alpha_per_target": [154, 183, 673, 1041], "alpha_w": [54, 409, 536, 538, 545, 1042], "alphabet": [104, 386, 709, 722, 741, 1022], "alphalpha": 57, "alphanumer": [386, 587, 588, 590], "alphas_": [196, 198, 647, 650, 651, 653, 654, 655, 656, 661, 663, 682, 683, 1029, 1032, 1042], "alphas_enet": 197, "alphas_lar": 197, "alphas_lasso": 197, "alphas_positive_enet": 197, "alphas_positive_lar": 197, "alphas_positive_lasso": 197, "alphavantag": 51, "alphonsu": 1039, "alreadi": [1, 43, 45, 49, 88, 91, 125, 126, 134, 149, 154, 163, 183, 234, 241, 243, 246, 258, 265, 271, 284, 316, 319, 372, 373, 374, 376, 377, 384, 386, 400, 402, 403, 406, 408, 410, 411, 416, 434, 489, 497, 521, 531, 565, 566, 634, 646, 649, 664, 665, 666, 667, 668, 674, 676, 677, 678, 685, 686, 727, 768, 778, 839, 859, 867, 873, 874, 876, 881, 901, 904, 905, 933, 959, 988, 991, 1005, 1009, 1010, 1019, 1026, 1030, 1034, 1037, 1041, 1042, 1043, 1044, 1048], "alsadi": 1037, "alsaedi": 1042, "alsalhi": [0, 1032, 1033], "alsawadi": 1042, "also": [0, 1, 25, 30, 43, 46, 50, 52, 55, 57, 58, 61, 62, 63, 64, 66, 68, 80, 86, 90, 91, 93, 97, 102, 103, 109, 111, 115, 116, 120, 127, 129, 134, 137, 140, 143, 144, 145, 146, 147, 149, 152, 154, 159, 160, 161, 163, 167, 169, 172, 179, 180, 183, 184, 185, 186, 188, 191, 192, 198, 201, 202, 207, 208, 209, 211, 212, 215, 223, 224, 226, 236, 238, 240, 243, 244, 255, 258, 262, 263, 264, 265, 266, 267, 269, 270, 271, 273, 274, 275, 277, 278, 281, 283, 284, 292, 295, 296, 297, 299, 304, 305, 306, 308, 309, 313, 314, 315, 316, 320, 321, 322, 323, 330, 332, 333, 334, 336, 338, 340, 347, 348, 349, 351, 352, 353, 354, 355, 359, 360, 361, 365, 366, 367, 368, 369, 371, 372, 374, 376, 378, 380, 381, 384, 385, 386, 387, 390, 392, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 434, 435, 436, 438, 439, 442, 443, 444, 445, 447, 449, 451, 459, 460, 462, 464, 470, 472, 479, 481, 490, 494, 496, 501, 506, 530, 531, 533, 534, 539, 544, 547, 549, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 606, 607, 608, 609, 610, 611, 622, 632, 633, 635, 643, 644, 645, 646, 647, 650, 652, 653, 654, 656, 658, 659, 660, 661, 662, 663, 664, 672, 676, 678, 681, 682, 684, 687, 691, 694, 695, 699, 710, 713, 723, 729, 730, 738, 743, 763, 779, 780, 783, 784, 787, 797, 798, 800, 802, 803, 804, 814, 817, 820, 826, 827, 828, 829, 830, 831, 833, 843, 846, 847, 848, 850, 851, 852, 854, 855, 856, 860, 861, 862, 864, 866, 867, 872, 873, 877, 881, 884, 889, 893, 906, 909, 912, 913, 914, 915, 921, 930, 941, 948, 950, 957, 964, 988, 989, 991, 993, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1009, 1010, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1023, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "alt": [57, 265, 329, 347, 348, 349, 367, 380, 485], "altai": 1039, "alter": [62, 179, 374, 386, 729, 730, 738, 783, 784, 787, 1034, 1038, 1041], "altern": [43, 63, 103, 116, 141, 147, 149, 154, 185, 194, 207, 224, 234, 252, 255, 258, 273, 313, 340, 347, 348, 349, 355, 367, 370, 372, 376, 378, 384, 386, 387, 390, 398, 399, 401, 402, 404, 405, 406, 408, 409, 411, 412, 414, 438, 439, 442, 443, 444, 449, 455, 460, 497, 536, 538, 539, 545, 581, 587, 588, 590, 617, 620, 643, 692, 706, 708, 709, 771, 774, 778, 781, 802, 833, 868, 874, 877, 890, 897, 899, 967, 993, 995, 996, 998, 999, 1002, 1003, 1007, 1009, 1011, 1012, 1014, 1015, 1019, 1025, 1034, 1036, 1042, 1043, 1047, 1048], "alternate_sign": [47, 412, 581, 588, 1036], "although": [43, 48, 62, 141, 154, 182, 224, 233, 251, 283, 340, 355, 361, 374, 376, 380, 386, 404, 405, 409, 412, 494, 875, 998, 1000, 1001, 1002, 1005, 1015, 1029, 1037, 1044, 1049], "altman": [628, 989], "altogeth": [143, 378, 1037], "alva": 1039, "alvaro": [1035, 1037], "alvin": 1037, "alwai": [140, 143, 146, 183, 190, 207, 224, 231, 237, 258, 261, 267, 270, 274, 311, 333, 340, 343, 348, 355, 359, 360, 366, 370, 372, 373, 374, 378, 380, 385, 386, 390, 398, 402, 404, 405, 408, 411, 412, 413, 414, 421, 427, 440, 446, 461, 462, 464, 466, 479, 480, 481, 485, 494, 506, 507, 542, 547, 549, 550, 552, 554, 556, 557, 558, 559, 560, 562, 563, 566, 568, 580, 587, 588, 590, 593, 611, 627, 628, 630, 632, 633, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 670, 671, 672, 673, 676, 678, 679, 695, 705, 712, 715, 721, 722, 723, 724, 727, 732, 734, 735, 739, 782, 785, 786, 789, 797, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 837, 838, 847, 848, 855, 856, 862, 869, 877, 882, 884, 887, 889, 890, 891, 892, 893, 894, 895, 897, 905, 906, 907, 909, 910, 912, 913, 915, 949, 959, 960, 988, 989, 991, 993, 995, 998, 999, 1002, 1005, 1007, 1011, 1012, 1014, 1015, 1023, 1029, 1031, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1046, 1047, 1049], "always_accept_polici": 258, "always_reject_polici": 258, "alyssa": [1032, 1036], "alyssaq": 1035, "am": [102, 107, 111, 154, 184, 347, 377, 406, 471, 1036], "amai": 1045, "aman": [1035, 1036, 1037, 1043, 1044], "amanda": [1037, 1040, 1041, 1042, 1043], "amar": [1043, 1044, 1045, 1047], "amax": 109, "amazon": 51, "amber": 386, "ambient": 230, "ambigu": [265, 377, 412, 570, 712, 948, 1002, 1038, 1040, 1042], "ambival": 93, "ambrosio": 1036, "ambroz": [1039, 1040], "amelia": 989, "amen": [378, 384, 414, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 988], "america": [50, 51, 111, 297, 367, 851, 1009], "american": [50, 51, 102, 112, 367, 404, 406, 410, 411, 412, 466, 471, 731, 884, 999], "amerr": [1047, 1048], "ames_h": 243, "amg": [80, 99, 404, 449, 459, 691, 695, 1039, 1043, 1044], "amherst": 367, "ami": [72, 82, 91, 404, 704], "amicel": [1029, 1032], "amin": [109, 1049], "aminaka": 1033, "amit": [1029, 1043, 1044], "amlan": 1035, "amo": 1032, "amol": 1042, "among": [1, 64, 126, 175, 184, 186, 188, 207, 254, 271, 283, 354, 361, 367, 374, 386, 387, 402, 407, 444, 446, 510, 517, 555, 556, 794, 829, 847, 852, 854, 906, 909, 912, 913, 914, 915, 988, 991, 999, 1000, 1006, 1009, 1014, 1015, 1029, 1035, 1036, 1039, 1046], "amongst": [51, 1015], "amor": [0, 383, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "amormachin": 1032, "amort": 1002, "amount": [37, 38, 47, 51, 66, 86, 99, 109, 112, 120, 124, 135, 137, 173, 183, 194, 211, 224, 229, 238, 258, 277, 315, 321, 322, 325, 328, 330, 336, 343, 349, 359, 360, 361, 374, 384, 404, 406, 409, 411, 412, 413, 440, 451, 466, 536, 537, 539, 541, 561, 595, 646, 647, 650, 651, 652, 653, 654, 655, 656, 660, 661, 662, 663, 665, 681, 684, 692, 803, 804, 844, 845, 850, 885, 900, 901, 914, 915, 988, 994, 995, 998, 1001, 1003, 1009, 1011, 1012, 1013, 1014, 1042, 1046], "amount_fraud": 258, "amount_iter": 328, "amount_label": 328, "amount_test": 258, "amount_train": 258, "amourav": 1038, "amplitud": [146, 172, 174, 203, 995], "amplitude_nois": 75, "amput": 1019, "amrcod": 1043, "amsterdam": [398, 872, 1010], "amy12xx": 1041, "amzn": 51, "an": [0, 1, 25, 29, 37, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 62, 63, 64, 66, 69, 70, 71, 72, 74, 75, 76, 78, 79, 80, 83, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 99, 100, 102, 103, 104, 105, 107, 109, 110, 111, 112, 120, 121, 122, 123, 124, 125, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 152, 153, 154, 156, 159, 163, 165, 167, 168, 169, 172, 173, 174, 176, 177, 178, 180, 182, 183, 184, 185, 188, 189, 190, 191, 194, 196, 197, 202, 204, 205, 207, 208, 209, 211, 212, 214, 220, 222, 223, 224, 226, 227, 228, 229, 231, 233, 234, 236, 237, 238, 239, 240, 241, 243, 247, 249, 250, 252, 254, 255, 257, 258, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 273, 275, 277, 283, 284, 287, 290, 291, 292, 295, 297, 304, 309, 310, 311, 314, 315, 316, 318, 319, 320, 321, 323, 326, 330, 332, 333, 335, 336, 338, 339, 340, 345, 347, 348, 349, 351, 354, 355, 359, 361, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 385, 386, 387, 389, 390, 395, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 425, 428, 429, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 479, 480, 481, 482, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 499, 501, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 573, 574, 575, 579, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 605, 606, 607, 609, 610, 611, 612, 619, 622, 623, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 709, 711, 712, 718, 720, 721, 727, 729, 730, 734, 735, 737, 742, 743, 745, 746, 748, 750, 751, 753, 756, 758, 759, 763, 764, 766, 767, 768, 769, 770, 773, 775, 776, 777, 778, 781, 782, 783, 784, 787, 788, 789, 790, 791, 792, 793, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 811, 812, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 927, 928, 930, 931, 933, 934, 937, 941, 942, 943, 944, 946, 947, 948, 950, 952, 953, 956, 957, 958, 959, 960, 961, 963, 964, 965, 969, 972, 973, 979, 982, 984, 985, 986, 987, 989, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1022, 1023, 1025, 1026, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "ana": [1040, 1042, 1047], "anaconda": [0, 360, 370, 376], "anak": 1041, "analog": [43, 57, 148, 378, 411, 999, 1000, 1014, 1038], "analogi": [998, 999], "analys": [226, 354, 409, 803, 804, 996, 1018, 1023], "analysen": 447, "analysi": [1, 11, 27, 44, 46, 48, 49, 54, 55, 58, 62, 65, 71, 72, 90, 96, 98, 109, 110, 111, 112, 113, 118, 119, 121, 122, 124, 125, 128, 143, 179, 180, 183, 198, 215, 227, 248, 250, 251, 254, 255, 257, 258, 261, 264, 265, 269, 270, 284, 285, 286, 287, 295, 296, 304, 309, 333, 343, 348, 352, 364, 367, 369, 372, 374, 387, 401, 404, 406, 411, 412, 416, 436, 444, 445, 470, 472, 473, 479, 480, 482, 500, 502, 510, 513, 529, 530, 531, 532, 533, 535, 537, 538, 539, 540, 541, 542, 543, 544, 547, 548, 553, 554, 631, 638, 688, 690, 691, 692, 693, 710, 719, 725, 726, 756, 788, 789, 792, 793, 797, 800, 826, 830, 846, 853, 864, 865, 870, 880, 884, 892, 919, 947, 948, 989, 995, 996, 998, 999, 1009, 1017, 1018, 1020, 1021, 1023, 1024, 1025, 1029, 1030, 1031, 1033, 1038], "analyst": 867, "analyt": [125, 409, 414, 530, 620, 708, 989, 993, 999, 1023], "analyz": [43, 46, 55, 194, 265, 266, 273, 318, 347, 349, 377, 378, 404, 412, 501, 587, 588, 590, 788, 996, 999, 1006, 1007, 1015, 1029, 1038], "anam": 1046, "anand": [1037, 1041], "ananiad": 1013, "anantharam": 1043, "anavelyz": 1042, "ana\u00ebl": 1039, "anbari": 526, "anchor": 275, "ander": [1033, 1039], "andersen": [743, 1043], "anderson": [50, 297, 367, 496, 1035, 1041, 1047, 1049], "andi": [1029, 1036], "ando": 1034, "andom_st": [258, 264], "andr": [1036, 1043, 1049], "andrea": [0, 387, 393, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "andreh7": 1036, "andrei": [1044, 1046, 1047], "andrew": [404, 459, 691, 695, 717, 737, 795, 879, 1003, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "andrewww": 1037, "andrii": 1043, "andriushchenko": [1035, 1036], "androutsopoulo": [839, 1001], "andrzej": [536, 538, 545], "andr\u00e1": [1042, 1043, 1044, 1045], "andr\u00e9": [1042, 1043, 1045, 1048], "ands": 875, "andyscanzio": 1046, "ang": 1036, "angel": [0, 394], "angela": [1039, 1040, 1044], "angelaambroz": 1040, "angelotti": 1048, "angermuel": [1033, 1034], "angl": [1, 53, 70, 123, 163, 249, 250, 251, 254, 255, 369, 409, 529, 535, 537, 540, 541, 543, 544, 546, 650, 651, 652, 653, 654, 655, 656, 663, 664, 665, 678, 682, 683, 684, 685, 686, 692, 996, 997, 1021, 1025, 1029], "angmar": 57, "angu": [1036, 1037, 1043], "angular": [410, 692, 764], "anh": [536, 538, 545], "ani": [1, 25, 37, 43, 47, 48, 52, 53, 57, 79, 80, 88, 90, 100, 151, 155, 158, 163, 173, 174, 182, 183, 184, 185, 186, 198, 207, 211, 224, 233, 236, 237, 240, 250, 254, 255, 258, 264, 265, 267, 270, 273, 281, 297, 304, 305, 308, 313, 315, 316, 318, 321, 336, 340, 349, 355, 359, 360, 361, 366, 367, 369, 370, 372, 374, 376, 377, 378, 380, 385, 386, 387, 390, 392, 395, 398, 400, 401, 402, 404, 405, 408, 409, 410, 411, 412, 413, 429, 437, 438, 443, 445, 446, 447, 449, 451, 453, 454, 458, 461, 464, 485, 486, 506, 507, 521, 532, 535, 537, 544, 549, 555, 556, 557, 558, 562, 563, 564, 565, 566, 567, 568, 578, 579, 581, 587, 588, 590, 592, 602, 610, 611, 620, 627, 632, 633, 645, 648, 658, 659, 666, 667, 668, 669, 676, 677, 678, 679, 680, 692, 696, 699, 700, 704, 716, 717, 719, 724, 736, 737, 752, 755, 757, 774, 778, 779, 780, 781, 792, 793, 795, 800, 803, 804, 812, 813, 833, 836, 844, 845, 850, 854, 863, 864, 868, 869, 873, 875, 877, 878, 885, 894, 895, 898, 901, 904, 905, 912, 913, 914, 915, 916, 918, 926, 930, 931, 941, 982, 988, 989, 991, 994, 995, 996, 999, 1000, 1001, 1002, 1005, 1006, 1007, 1009, 1011, 1012, 1013, 1014, 1015, 1018, 1022, 1030, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "aniket": [1044, 1046], "anil": [404, 449, 459], "anim": [347, 412], "anirban": 412, "aniruddha": [1037, 1048, 1049], "anish": [1034, 1035], "anisha": 1039, "aniso": [79, 95], "anisotrop": [90, 169, 414, 617, 619, 622], "anisotropicli": [79, 95], "anjirbag": 1037, "ankan": 1034, "ankerst": [404, 447, 454], "ankit": [1032, 1039, 1041, 1043], "ankit810": 1040, "ankita": 1037, "ankur": [1034, 1045], "ann": [1029, 1041, 1043], "anna": 1037, "annaayzenshtat": 1037, "annal": [163, 194, 196, 369, 411, 471, 514, 515, 516, 557, 558, 656, 995], "annau": 1042, "annegnx": 1045, "anno": [692, 996], "annoi": 360, "annot": [1, 43, 48, 63, 161, 188, 227, 268, 271, 347, 372, 373, 374, 404, 716, 918, 999, 1015, 1038], "annotationbbox": 227, "announc": [0, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 376], "annual": [369, 404, 726, 756, 901, 999, 1012], "anomali": [13, 48, 111, 150, 180, 220, 232, 243, 290, 291, 367, 466, 510, 520, 561, 639, 677, 850, 865, 908, 1005, 1018, 1020, 1035, 1036], "anomaly_algorithm": 233, "anomaly_frac": 243, "anoth": [43, 72, 120, 125, 134, 144, 148, 163, 167, 175, 179, 183, 198, 211, 214, 231, 233, 240, 244, 250, 258, 264, 266, 267, 270, 274, 278, 294, 347, 349, 351, 355, 359, 361, 366, 367, 370, 372, 374, 378, 384, 386, 398, 401, 404, 408, 409, 411, 412, 413, 415, 439, 441, 449, 452, 459, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 506, 536, 538, 545, 673, 676, 692, 719, 806, 822, 823, 863, 864, 885, 957, 988, 989, 994, 995, 996, 999, 1000, 1002, 1005, 1009, 1013, 1014, 1026, 1038, 1039, 1046], "anova": [1, 49, 87, 106, 157, 159, 162, 163, 180, 188, 331, 405, 442, 502, 513, 591, 594, 595, 597, 598, 599, 603, 604, 605, 608, 713, 826, 830, 864, 865, 884, 904, 909, 1014, 1020], "anova__percentil": [87, 339], "anova_filt": 160, "anova_svm": 160, "ansam": 1045, "answer": [182, 264, 372, 384, 398, 403, 726, 756, 999, 1023], "ant": [718, 754, 999], "anthoni": [1034, 1036, 1037], "anthony22": [1044, 1045], "anti": [194, 355, 605, 839, 1001], "anti_alias": [80, 81], "anticip": 52, "antoin": [1029, 1031, 1032, 1033, 1036, 1048, 1049], "antoinebak": [1048, 1049], "antoni": [1033, 1035, 1041, 1044, 1048, 1049], "antonin": 1036, "antonio": [1037, 1039], "anubhav": 1037, "anuja": 1039, "anulekh": 1044, "anupam": [898, 1011, 1044], "anurag": 1048, "any_method": 960, "anymor": [149, 185, 207, 266, 313, 314, 336, 355, 376, 405, 424, 670, 1035, 1038, 1041, 1042, 1043, 1045, 1046, 1048], "anyon": [372, 387, 403, 1022, 1023], "anyth": [349, 378, 386, 395, 405, 408, 960, 964, 1017, 1043], "anywai": [48, 347, 374, 665, 685, 686], "anywher": 305, "anz": 1030, "aoif": [708, 999], "ap": [1, 271, 707, 708, 999], "apart": [183, 316, 336, 384, 386, 395, 405, 407, 413, 725, 1014, 1023, 1037], "api": [0, 51, 83, 89, 131, 180, 232, 234, 240, 244, 245, 261, 266, 273, 274, 284, 320, 321, 348, 349, 361, 365, 366, 372, 375, 376, 381, 382, 384, 385, 387, 390, 398, 399, 403, 409, 411, 412, 414, 418, 421, 422, 423, 426, 428, 435, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 461, 465, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 494, 502, 506, 508, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 553, 554, 561, 562, 564, 565, 566, 567, 568, 578, 579, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 609, 611, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 658, 671, 677, 688, 689, 690, 691, 692, 702, 797, 798, 803, 804, 806, 823, 830, 848, 850, 852, 853, 856, 860, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 902, 908, 909, 923, 941, 943, 966, 982, 985, 988, 997, 998, 1002, 1009, 1013, 1018, 1019, 1020, 1023, 1025, 1026, 1027, 1028, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045], "api_refer": 372, "apk": 390, "apolog": 999, "apostolo": 1044, "appar": [115, 1001, 1023], "appdata": 390, "appeal": 387, "appear": [0, 47, 80, 137, 183, 186, 259, 261, 262, 290, 291, 299, 301, 305, 326, 340, 347, 348, 349, 367, 370, 372, 377, 386, 406, 409, 485, 486, 553, 565, 566, 578, 610, 627, 628, 630, 697, 700, 702, 712, 716, 718, 782, 801, 818, 839, 840, 841, 842, 843, 906, 909, 950, 995, 1001, 1005, 1029, 1037, 1041, 1042], "append": [46, 47, 48, 51, 52, 55, 62, 66, 69, 72, 75, 79, 83, 94, 103, 127, 137, 138, 140, 144, 146, 149, 179, 186, 202, 211, 212, 214, 221, 224, 238, 239, 264, 267, 273, 274, 299, 300, 310, 328, 336, 339, 347, 348, 349, 351, 354, 378, 386, 405, 412, 658, 659, 904, 905, 911, 937, 1009], "appendix": [645, 676, 995, 1009], "appl": [51, 359, 370, 384, 1000], "appli": [1, 32, 48, 54, 57, 62, 64, 68, 75, 79, 80, 81, 88, 89, 91, 95, 103, 107, 116, 120, 121, 126, 128, 130, 139, 140, 144, 146, 159, 167, 183, 185, 194, 198, 201, 205, 211, 212, 220, 226, 227, 228, 233, 238, 240, 263, 264, 265, 267, 276, 277, 278, 283, 293, 304, 308, 309, 314, 336, 340, 349, 354, 355, 359, 364, 372, 374, 376, 380, 384, 385, 386, 395, 401, 402, 404, 405, 406, 408, 409, 411, 412, 413, 414, 416, 437, 443, 449, 459, 461, 462, 464, 465, 466, 471, 479, 480, 481, 482, 506, 507, 514, 515, 516, 522, 529, 530, 531, 532, 533, 535, 537, 539, 540, 541, 546, 547, 548, 551, 552, 555, 556, 557, 558, 562, 563, 564, 587, 588, 589, 590, 627, 632, 633, 638, 639, 641, 642, 658, 659, 668, 676, 677, 678, 691, 699, 701, 702, 707, 711, 726, 756, 758, 759, 781, 788, 792, 793, 800, 814, 830, 833, 839, 840, 841, 842, 843, 851, 853, 863, 864, 873, 880, 881, 884, 889, 890, 892, 893, 894, 895, 900, 911, 912, 913, 914, 915, 925, 930, 936, 939, 947, 948, 970, 989, 991, 995, 996, 997, 998, 999, 1001, 1003, 1005, 1007, 1009, 1013, 1014, 1015, 1016, 1023, 1030, 1033, 1034, 1035, 1036, 1037, 1040, 1041, 1043, 1049], "applic": [42, 44, 57, 82, 88, 111, 180, 188, 207, 223, 228, 257, 258, 267, 304, 321, 359, 361, 367, 369, 372, 374, 378, 381, 384, 386, 402, 403, 404, 408, 409, 410, 411, 414, 416, 441, 443, 449, 494, 530, 531, 532, 551, 552, 629, 688, 689, 690, 694, 712, 729, 730, 738, 783, 784, 787, 830, 924, 988, 995, 996, 997, 998, 999, 1003, 1005, 1011, 1015, 1018, 1019, 1020, 1022, 1023, 1029, 1030, 1035, 1037, 1040], "apply_along_axi": 302, "appr": 619, "appreci": [0, 372, 384], "approach": [44, 47, 91, 96, 99, 124, 163, 167, 178, 183, 186, 193, 196, 201, 207, 209, 214, 224, 226, 258, 263, 273, 281, 310, 340, 347, 348, 349, 361, 371, 372, 378, 381, 386, 390, 392, 398, 402, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 434, 440, 443, 445, 449, 459, 518, 530, 581, 588, 611, 635, 658, 659, 674, 675, 833, 849, 948, 988, 989, 995, 996, 999, 1000, 1002, 1003, 1009, 1013, 1014, 1018, 1023, 1033, 1045], "appropri": [25, 88, 90, 127, 155, 172, 183, 211, 240, 270, 273, 278, 321, 351, 355, 372, 374, 380, 386, 398, 402, 404, 408, 410, 411, 415, 441, 447, 454, 486, 487, 488, 494, 498, 499, 500, 502, 503, 508, 576, 581, 590, 591, 594, 595, 597, 598, 599, 672, 674, 687, 846, 847, 848, 850, 852, 854, 855, 856, 982, 995, 998, 999, 1009, 1033, 1036, 1042, 1045, 1047, 1048], "approv": [372, 387, 411], "approx": [64, 120, 238, 409, 411, 412, 999, 1006], "approxim": [0, 1, 23, 43, 44, 64, 69, 80, 86, 111, 124, 125, 129, 138, 145, 146, 163, 168, 183, 191, 207, 208, 220, 224, 228, 231, 232, 233, 236, 239, 255, 264, 269, 279, 285, 286, 293, 304, 306, 307, 309, 313, 316, 347, 349, 353, 355, 364, 369, 381, 384, 386, 401, 402, 405, 407, 408, 409, 411, 414, 416, 417, 418, 428, 446, 466, 467, 470, 471, 472, 473, 479, 480, 481, 488, 494, 500, 519, 522, 531, 532, 533, 534, 536, 537, 538, 539, 541, 542, 543, 544, 545, 557, 558, 581, 588, 610, 611, 619, 638, 639, 640, 641, 642, 645, 657, 658, 659, 672, 674, 676, 677, 679, 687, 692, 758, 759, 764, 797, 801, 818, 825, 829, 830, 844, 845, 848, 852, 854, 855, 856, 860, 864, 865, 870, 874, 876, 877, 881, 893, 904, 909, 910, 947, 948, 972, 992, 993, 994, 995, 996, 998, 1002, 1003, 1004, 1005, 1006, 1007, 1011, 1013, 1014, 1015, 1018, 1020, 1025, 1029, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1049], "approximate_nearest_neighbor": [284, 1020], "approximateident": 1030, "april": [367, 664, 685, 686, 999, 1033, 1041, 1046], "apriori": 224, "apt": [370, 380, 390], "aptitud": 183, "aqua": 273, "aquantitypredict": 392, "ar": [0, 1, 15, 25, 30, 31, 32, 37, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 68, 70, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 95, 97, 99, 102, 103, 104, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 122, 125, 126, 127, 130, 132, 134, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 152, 153, 154, 155, 159, 160, 162, 163, 165, 167, 171, 172, 173, 174, 175, 176, 178, 179, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 196, 197, 198, 200, 201, 202, 203, 204, 205, 207, 208, 209, 211, 215, 217, 224, 226, 227, 228, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 247, 250, 251, 252, 254, 257, 259, 261, 262, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 283, 284, 286, 289, 290, 294, 297, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 325, 327, 328, 329, 330, 334, 336, 338, 340, 343, 344, 345, 347, 348, 349, 351, 353, 354, 355, 359, 360, 361, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 385, 386, 387, 390, 392, 395, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 420, 424, 425, 428, 429, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 479, 480, 481, 482, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 506, 507, 508, 510, 513, 514, 515, 516, 517, 518, 521, 522, 526, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 704, 705, 707, 709, 711, 712, 713, 715, 716, 717, 718, 720, 721, 722, 723, 725, 726, 727, 728, 729, 730, 731, 734, 735, 736, 737, 738, 740, 741, 742, 743, 745, 746, 748, 750, 751, 753, 754, 756, 757, 761, 762, 763, 765, 767, 768, 769, 773, 774, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 809, 812, 814, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 920, 922, 926, 927, 928, 930, 931, 934, 935, 936, 939, 941, 942, 943, 947, 948, 949, 952, 953, 954, 956, 957, 960, 963, 964, 966, 969, 972, 973, 977, 978, 979, 982, 984, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1022, 1023, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "arab": 627, "arabi": [404, 705, 715, 786], "aradwad": 1040, "arafat": 1035, "arai": 1039, "arang": [43, 50, 52, 53, 75, 91, 93, 98, 105, 110, 111, 127, 130, 142, 143, 145, 147, 148, 152, 159, 167, 169, 174, 175, 178, 179, 186, 194, 207, 210, 212, 215, 236, 238, 259, 264, 267, 272, 275, 283, 284, 297, 299, 306, 316, 325, 326, 328, 330, 336, 342, 345, 347, 349, 353, 354, 355, 384, 401, 408, 412, 462, 542, 830, 879, 883, 994, 995, 1003, 1009, 1013], "aravindh": 1044, "arbitarili": 347, "arbitrari": [1, 43, 52, 88, 116, 120, 121, 122, 139, 165, 174, 190, 207, 223, 224, 262, 304, 308, 310, 315, 321, 322, 347, 354, 372, 384, 386, 398, 405, 408, 409, 411, 412, 416, 443, 447, 452, 454, 462, 530, 531, 557, 558, 580, 639, 648, 669, 680, 688, 727, 742, 789, 801, 802, 807, 809, 844, 845, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858, 868, 870, 883, 988, 990, 991, 995, 996, 999, 1002, 1009, 1019, 1029, 1030, 1033, 1035, 1036, 1037, 1039, 1043, 1045, 1048], "arbitrarili": [168, 250, 255, 347, 386, 414, 427, 462, 479, 480, 481, 550, 552, 554, 556, 558, 560, 563, 566, 568, 611, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 669, 670, 672, 673, 678, 679, 680, 721, 722, 723, 724, 746, 785, 837, 838, 847, 855, 862, 885, 905, 907, 910, 913, 915, 999, 1002, 1009, 1015], "arc": [369, 411], "archana": [1039, 1041], "archit": 1035, "architectur": [370, 374, 380, 384, 390, 398, 465, 902, 1003, 1023, 1029, 1046], "archiv": [47, 281, 366, 367, 369, 370, 404, 439, 498, 500, 508, 671, 758, 759, 997, 1014, 1022], "archive_filenam": 47, "archive_path": 47, "archive_sha256": 47, "arci": [708, 999], "arcidiacono": [1043, 1044, 1046, 1047], "arcsin": [699, 764], "arctan": [70, 250, 255, 368, 516], "arctan2": [249, 251, 254], "ard": [1, 190, 644, 645, 646, 652], "ard_poli": 190, "ard_scor": 190, "ardregress": [1, 190, 194, 645, 939, 995, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1045, 1046], "area": [1, 50, 52, 150, 163, 207, 224, 243, 261, 264, 271, 273, 274, 336, 340, 341, 344, 369, 372, 376, 384, 404, 412, 702, 706, 707, 708, 788, 789, 996, 999, 1002, 1017, 1031], "aren": [15, 240, 347, 367, 376, 390, 726, 756, 1004, 1039, 1041], "arezki": 1029, "arfa": 1035, "arff": [318, 372, 494, 1041, 1044, 1045], "arg": [240, 300, 340, 373, 386, 409, 411, 418, 609, 699, 868, 966, 995, 1001, 1002], "arg_sort_bi": 52, "argentina": 764, "argmax": [63, 127, 155, 263, 277, 374, 411, 567, 832, 912, 1014, 1042], "argmin": [51, 145, 263, 374, 406, 529, 535, 543, 544, 685, 779, 780, 1015], "argpartit": 1036, "argsort": [54, 55, 57, 58, 59, 145, 147, 185, 186, 207, 224, 313, 325, 326, 347, 348, 367, 1007], "argument": [1, 104, 147, 186, 208, 234, 237, 240, 313, 360, 366, 367, 372, 373, 374, 377, 378, 380, 381, 384, 386, 400, 404, 405, 408, 409, 411, 413, 415, 416, 418, 422, 426, 435, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 451, 454, 456, 458, 460, 461, 465, 466, 491, 494, 501, 506, 513, 531, 533, 534, 536, 538, 549, 557, 558, 561, 565, 566, 567, 568, 576, 580, 581, 587, 588, 590, 609, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 631, 639, 643, 646, 647, 650, 651, 652, 653, 654, 655, 656, 660, 661, 662, 663, 666, 668, 676, 677, 681, 684, 688, 692, 696, 698, 699, 700, 701, 702, 714, 719, 735, 742, 763, 779, 780, 806, 823, 825, 826, 827, 828, 829, 831, 832, 833, 836, 846, 847, 848, 850, 852, 853, 854, 855, 856, 857, 858, 861, 864, 865, 868, 902, 908, 918, 928, 937, 943, 967, 968, 982, 988, 991, 995, 996, 997, 999, 1002, 1006, 1007, 1014, 1015, 1029, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "argv": 237, "ari": [72, 91, 348, 404, 705, 1034, 1040], "aria": [1037, 1038, 1044], "aric": 55, "arida": [1038, 1039, 1041, 1043, 1046], "ariel": [45, 367, 1029, 1035], "arif": [1047, 1048], "ariga": 1035, "arik": 1037, "arima": 1018, "aris": [1, 183, 267, 343, 360, 377, 380, 404, 715, 995, 996, 1041], "arisa": [1043, 1044], "arithmet": [239, 378, 380, 404, 549, 648, 669, 680, 704, 717, 736, 737, 757, 795, 851, 999, 1037], "ari\u00f1o": 1032, "arjona": 1038, "arjun": 1049, "arka204": [1042, 1044], "arm": [370, 380, 988], "arm64": [370, 375], "arm64v8": 380, "armstrong": 1041, "arnaud": [0, 394, 1030, 1031, 1032, 1033, 1034, 1035, 1047], "arnaudov": [1041, 1043], "arnaudstiegl": 1039, "arnold": [1029, 1030], "arnoldi": [688, 689, 693], "aroma": 310, "arora": [1037, 1044], "around": [0, 43, 63, 72, 85, 115, 134, 137, 146, 173, 184, 188, 201, 202, 205, 240, 243, 258, 267, 278, 302, 325, 327, 328, 336, 339, 340, 347, 348, 349, 354, 355, 367, 369, 372, 376, 378, 384, 392, 403, 404, 408, 409, 412, 468, 469, 513, 542, 620, 640, 649, 668, 704, 742, 797, 806, 823, 850, 852, 854, 855, 856, 884, 995, 996, 998, 999, 1005, 1009, 1013, 1018, 1019, 1022, 1023, 1033, 1034], "aroyan": 1048, "arpack": [51, 57, 79, 80, 99, 102, 227, 320, 409, 448, 449, 450, 459, 533, 539, 542, 688, 689, 691, 693, 695, 996, 1035, 1036, 1041, 1045, 1046, 1047], "arpanchowdhri": 1039, "arr": 321, "arrai": [1, 45, 46, 47, 49, 50, 51, 52, 53, 57, 68, 69, 70, 75, 79, 80, 86, 87, 94, 95, 97, 102, 104, 112, 115, 118, 121, 122, 145, 147, 149, 150, 153, 155, 160, 163, 168, 169, 170, 175, 183, 190, 192, 194, 202, 203, 207, 208, 223, 227, 228, 233, 237, 240, 243, 244, 247, 249, 250, 251, 253, 254, 258, 259, 260, 262, 263, 264, 265, 268, 269, 273, 283, 297, 307, 313, 316, 317, 319, 320, 326, 332, 339, 340, 347, 353, 355, 359, 360, 365, 366, 367, 372, 373, 374, 375, 377, 378, 380, 382, 384, 385, 386, 398, 401, 403, 404, 405, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 487, 488, 490, 491, 492, 494, 495, 496, 498, 499, 500, 501, 502, 504, 506, 507, 508, 509, 510, 511, 513, 517, 521, 522, 525, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 580, 581, 582, 583, 585, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 921, 923, 926, 927, 928, 929, 930, 931, 932, 935, 936, 946, 947, 948, 949, 950, 952, 954, 955, 962, 963, 964, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 984, 985, 987, 989, 994, 995, 997, 999, 1000, 1002, 1003, 1005, 1006, 1009, 1010, 1011, 1013, 1014, 1015, 1017, 1023, 1025, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "arrang": [1, 58, 283, 632, 835, 836, 837, 838, 999], "array_api": [400, 1048], "array_api_compat": 1048, "array_api_dispatch": [400, 465, 902], "array_api_support": [400, 923], "array_convert": 931, "array_equ": [567, 1036], "array_lik": 946, "array_paramet": 372, "array_sym": 984, "arrayfunc": [1, 381, 927], "arrow": [63, 392, 1043], "arrow_arg": 48, "arrowprop": [48, 63], "arrowstyl": 48, "arroyo": 1043, "art": [315, 378, 649, 692, 1023], "artem": [1033, 1036, 1046], "arth": 1043, "arthur": [404, 444, 457, 1034, 1035, 1036, 1037, 1038, 1041, 1043, 1048], "arthurdbrn": [1048, 1049], "arthurmello": 1043, "articl": [0, 55, 102, 347, 367, 371, 372, 380, 408, 417, 472, 705, 995, 999, 1042], "artiem": 1037, "artifact": [43, 53, 80, 81, 304, 361, 376, 1025], "artifici": [9, 141, 143, 151, 163, 179, 211, 226, 239, 258, 302, 347, 367, 368, 369, 377, 401, 404, 408, 409, 533, 696, 834, 861, 862, 992, 996, 998, 1000, 1006, 1011, 1015, 1019, 1023, 1029], "artist": [379, 435, 632, 698, 700, 701, 702, 806, 823, 918], "artsiom": 1036, "artsion": 1035, "artstein": 716, "artur": [1044, 1045], "arturo": [0, 383, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "arturoamor": 1043, "aruku": [1037, 1038], "arunav": 1040, "arunava": 1037, "arxiv": [372, 459], "arya": 1037, "as_dict": 374, "as_float_arrai": [1, 381, 1048], "as_fram": [43, 44, 103, 107, 126, 140, 143, 149, 154, 172, 183, 184, 185, 186, 196, 198, 207, 214, 222, 224, 243, 247, 258, 278, 281, 284, 287, 301, 309, 310, 313, 315, 317, 318, 366, 367, 486, 487, 488, 490, 494, 498, 499, 500, 502, 503, 508, 830, 1039, 1040, 1041, 1042, 1045], "asanyarrai": 374, "asarrai": [47, 55, 207, 224, 302, 327, 345, 347, 348, 352, 374, 386, 400, 726, 756, 852, 854, 855, 856, 1009, 1014, 1046], "ascend": [58, 103, 185, 310, 411, 447, 453, 593, 627, 635, 916, 917, 918, 1013, 1039, 1045], "ascent": [172, 414], "ascii": [50, 297, 412, 484, 587, 588, 590], "ascontiguousarrai": 539, "asctim": 120, "asdict": 374, "aseem": 1036, "asgd": 1013, "ash": [48, 369, 1032, 1035, 1049], "ashah002": [1044, 1045, 1046], "ashim": 1039, "ashimb9": 1039, "ashimin": 1042, "ashish": [1042, 1045], "ashra": 644, "ashton": 1049, "ashutosh": [1036, 1037, 1039, 1041], "ashvith": 1042, "ashwin": [1044, 1045], "asia": [264, 1009], "asian": 412, "asid": [144, 214, 398, 557, 558, 559, 560, 666, 667, 668, 676, 678, 861, 862], "asish": [1035, 1036], "ask": [0, 178, 179, 264, 371, 372, 376, 377, 380, 386, 387, 398, 413, 846, 847, 848, 850, 852, 854, 855, 856, 1022, 1045], "asnt": 1035, "aspect": [46, 91, 116, 120, 171, 184, 226, 233, 273, 278, 293, 359, 360, 361, 372, 386, 387, 404, 488, 658, 659, 988, 999, 1015, 1023, 1046], "aspir": [163, 369, 372], "ass": [111, 112, 406, 471], "assembl": [283, 311, 349, 864], "assert": [47, 55, 121, 237, 264, 273, 360, 375, 1019], "assert_all_finit": [1, 359, 381, 465, 1048], "assert_allclos": 374, "assert_array_equ": 412, "assert_warn": 1042, "assert_warns_messag": 1042, "assertionerror": 1036, "assess": [44, 52, 63, 72, 93, 134, 144, 146, 183, 207, 224, 243, 260, 261, 263, 267, 402, 411, 701, 743, 998, 999, 1005, 1018, 1019, 1044, 1049], "assia": 1038, "assiaben": 1038, "assign": [47, 55, 58, 63, 70, 72, 80, 82, 90, 91, 93, 134, 139, 150, 152, 159, 161, 169, 219, 224, 233, 238, 241, 258, 299, 306, 311, 321, 330, 343, 345, 348, 367, 372, 374, 386, 401, 408, 409, 411, 412, 413, 414, 437, 438, 439, 440, 442, 443, 444, 445, 446, 449, 451, 453, 456, 457, 458, 459, 513, 534, 559, 560, 562, 563, 592, 593, 606, 607, 610, 658, 659, 666, 667, 668, 676, 677, 678, 704, 705, 715, 716, 717, 719, 720, 729, 730, 731, 738, 739, 743, 755, 757, 783, 784, 786, 787, 793, 794, 795, 800, 803, 804, 806, 809, 814, 823, 825, 826, 827, 828, 831, 848, 854, 856, 857, 858, 871, 899, 900, 904, 905, 906, 907, 908, 909, 910, 935, 993, 995, 998, 999, 1000, 1001, 1002, 1003, 1004, 1009, 1012, 1023, 1029, 1034, 1036, 1037, 1046, 1047], "assign_label": [80, 404, 449, 459], "assist": [0, 372, 384, 403, 1009, 1022, 1023], "associ": [50, 61, 62, 111, 134, 167, 182, 183, 211, 252, 258, 310, 325, 327, 347, 380, 404, 406, 408, 409, 411, 412, 422, 443, 446, 466, 467, 468, 469, 470, 471, 472, 473, 491, 492, 493, 522, 555, 559, 562, 604, 605, 630, 645, 658, 659, 666, 668, 674, 675, 676, 689, 695, 699, 731, 739, 822, 827, 847, 855, 869, 881, 893, 901, 910, 912, 914, 936, 969, 998, 999, 1002, 1009, 1012, 1023, 1029, 1041, 1045], "assum": [48, 70, 88, 90, 174, 178, 182, 183, 198, 207, 224, 233, 236, 243, 255, 264, 273, 304, 343, 349, 360, 371, 372, 374, 378, 384, 385, 386, 389, 398, 401, 402, 404, 406, 408, 409, 411, 412, 414, 415, 420, 425, 436, 441, 443, 447, 454, 460, 466, 467, 468, 469, 470, 471, 472, 473, 501, 506, 507, 530, 540, 546, 547, 559, 560, 565, 566, 586, 587, 588, 590, 620, 632, 643, 644, 646, 647, 652, 658, 659, 660, 661, 662, 666, 667, 668, 671, 672, 676, 677, 678, 681, 685, 687, 688, 692, 709, 722, 726, 735, 741, 756, 764, 769, 774, 778, 781, 800, 803, 804, 814, 840, 846, 847, 850, 852, 854, 855, 860, 871, 884, 960, 974, 975, 976, 989, 993, 995, 997, 998, 999, 1001, 1002, 1004, 1005, 1006, 1009, 1013, 1015, 1035, 1041], "assume_cent": [51, 69, 110, 406, 417, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477], "assume_finit": [359, 360, 465, 902], "assumpt": [32, 43, 48, 52, 62, 64, 71, 78, 109, 110, 123, 172, 176, 180, 182, 207, 209, 233, 260, 283, 304, 378, 384, 385, 389, 402, 404, 406, 408, 409, 412, 414, 444, 448, 450, 485, 501, 510, 530, 532, 539, 650, 654, 798, 800, 803, 804, 814, 841, 896, 897, 993, 995, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1009, 1012, 1015, 1020, 1036, 1042], "assur": [0, 386, 797, 798, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "astel": 1037, "astolfi": 1029, "astrai": 386, "astroml": 1018, "astronom": 1017, "astronomi": 1018, "astropi": 372, "astyp": [43, 53, 72, 76, 79, 86, 93, 95, 99, 112, 143, 145, 155, 182, 184, 199, 200, 224, 229, 239, 243, 258, 275, 284, 311, 398, 412, 989, 995, 1036], "asv": 372, "asv_benchmark": 372, "aswathavicki": [1047, 1048], "asymmetr": [146, 209, 386, 1034], "asymmetri": [209, 347], "asymptot": [109, 110, 198, 359, 406, 471, 534, 730, 995, 998, 1039], "atag": 175, "atanasoska": 1048, "atariah": 1038, "ateif": 1042, "atharva": 1043, "atheism": [57, 265, 329, 347, 348, 349, 367, 485], "atheist": 347, "athena": 1023, "ation": 412, "atla": 359, "atleast_2d": [146, 374], "atmaja": 1049, "atmospher": 172, "atol": [374, 657, 672, 674, 844, 845, 849], "atom": [123, 129, 409, 529, 535, 537, 540, 541, 543, 544, 653, 663, 684, 995, 1029, 1042], "atomic_benchmark": 49, "atomic_benchmark_estim": 49, "atomic_runtim": 49, "atsushi": [1041, 1042], "attach": [47, 347, 429, 849, 1030, 1040], "attack": [243, 367], "attalla": 1043, "attard": 1042, "attempt": [43, 87, 184, 213, 259, 347, 359, 371, 386, 404, 408, 416, 443, 447, 454, 461, 465, 631, 688, 689, 693, 818, 846, 847, 848, 850, 852, 854, 855, 856, 882, 884, 902, 930, 931, 995, 996, 1002, 1015, 1036, 1041, 1046], "attenberg": 412, "attent": [372, 380, 606, 607, 1013], "attenu": 167, "attia": 797, "attr": [47, 89], "attract": [415, 441, 993, 1002, 1018], "attractador": [1036, 1037], "attrgett": [592, 596], "attribut": [1, 47, 62, 68, 82, 103, 128, 132, 134, 141, 144, 159, 163, 207, 214, 240, 254, 262, 263, 268, 276, 293, 297, 316, 340, 349, 354, 361, 365, 366, 367, 369, 372, 375, 379, 384, 398, 400, 401, 402, 404, 405, 406, 407, 409, 411, 412, 413, 414, 419, 420, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 461, 462, 464, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 505, 508, 513, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 578, 579, 580, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 609, 610, 611, 617, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 697, 698, 700, 701, 702, 736, 795, 797, 798, 799, 800, 803, 804, 806, 814, 822, 823, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 918, 919, 921, 961, 982, 987, 991, 993, 995, 1000, 1002, 1003, 1005, 1009, 1012, 1013, 1014, 1015, 1023, 1026, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "attributeerror": [405, 557, 576, 961, 1038, 1039, 1041, 1045, 1046], "attrselect": 1029, "atukorala": 1044, "atuo": [1045, 1046], "au": 315, "aubert": 1036, "auc": [1, 50, 62, 66, 163, 207, 224, 243, 261, 264, 268, 271, 273, 274, 320, 402, 408, 702, 708, 788, 789, 999, 1034, 1037, 1041], "auc_scor": [1029, 1031], "audio": [366, 501], "audrei": [1047, 1048], "aufarkari": 1043, "aug": 1014, "augment": [1, 328, 630, 886, 1007, 1023], "augspurg": [1037, 1039], "august": [163, 369, 404, 509, 532, 1014, 1022, 1029, 1031, 1032, 1036, 1043], "aura": 1041, "aurelienmorgan": 1048, "auroc": 999, "aur\u00e9lien": [1036, 1037, 1038, 1042, 1043], "austin": [0, 1036, 1048], "australian": [149, 390], "author": [0, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 313, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 351, 352, 353, 354, 366, 372, 375, 380, 384, 386, 387, 408, 448, 532, 871, 991, 1018, 1032], "authorit": 387, "authorship": 376, "auto": [57, 63, 69, 90, 91, 103, 104, 118, 139, 150, 151, 154, 160, 163, 171, 183, 184, 185, 226, 231, 235, 244, 245, 258, 263, 271, 276, 284, 287, 292, 310, 313, 314, 315, 316, 317, 318, 321, 323, 332, 333, 339, 342, 349, 366, 367, 374, 411, 414, 415, 434, 438, 441, 442, 443, 444, 446, 447, 449, 452, 453, 454, 456, 459, 494, 506, 507, 533, 536, 538, 539, 542, 545, 547, 555, 556, 559, 560, 561, 562, 563, 565, 592, 593, 596, 601, 606, 607, 629, 631, 632, 633, 635, 646, 647, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 672, 673, 674, 680, 681, 682, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 698, 700, 702, 709, 730, 799, 803, 804, 822, 844, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 857, 858, 861, 862, 877, 878, 885, 896, 897, 901, 904, 905, 906, 907, 908, 909, 910, 914, 915, 947, 948, 966, 968, 990, 993, 995, 996, 1002, 1009, 1018, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049], "auto_examples_jupyt": 180, "auto_examples_python": 180, "auto_viml": 1041, "auto_wrap_output_kei": 374, "autoclass": 369, "autocorrel": 408, "autolabel": 47, "autom": [265, 322, 375, 376, 390, 692, 988, 995, 996, 999, 1018, 1023], "automat": [1, 43, 47, 51, 52, 64, 80, 96, 98, 103, 127, 149, 162, 190, 210, 249, 250, 258, 262, 265, 304, 311, 314, 318, 329, 338, 340, 360, 367, 370, 372, 374, 376, 380, 386, 390, 398, 400, 404, 405, 406, 409, 411, 412, 413, 428, 447, 449, 453, 459, 461, 462, 464, 494, 497, 513, 536, 538, 539, 545, 547, 549, 555, 559, 562, 582, 587, 590, 593, 601, 643, 645, 646, 647, 652, 653, 658, 659, 660, 661, 662, 663, 666, 667, 668, 672, 674, 675, 676, 678, 681, 684, 687, 688, 691, 695, 802, 817, 820, 830, 840, 861, 862, 865, 866, 868, 877, 878, 885, 896, 897, 904, 905, 906, 909, 912, 914, 918, 936, 969, 972, 987, 988, 990, 993, 998, 1003, 1009, 1013, 1015, 1018, 1019, 1029, 1032, 1033, 1034, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "automl": [999, 1018], "automobil": 1023, "autoregress": 367, "autoviml": 1018, "autoviz": 1041, "auxiliari": [321, 1023, 1044], "av": 1037, "avail": [0, 1, 44, 50, 51, 53, 76, 89, 90, 123, 126, 145, 149, 163, 167, 172, 176, 182, 183, 184, 198, 207, 214, 224, 227, 240, 243, 258, 262, 267, 268, 271, 278, 289, 290, 291, 297, 309, 313, 314, 315, 316, 318, 319, 322, 323, 328, 330, 355, 359, 366, 367, 369, 370, 371, 372, 373, 376, 377, 381, 385, 386, 390, 398, 401, 404, 405, 408, 409, 410, 411, 412, 413, 415, 444, 447, 448, 449, 450, 466, 467, 468, 469, 470, 471, 472, 473, 485, 486, 487, 488, 490, 491, 492, 493, 495, 496, 506, 533, 547, 553, 554, 555, 556, 557, 558, 562, 563, 565, 566, 567, 568, 592, 593, 601, 610, 611, 627, 632, 633, 647, 651, 653, 655, 657, 661, 663, 665, 668, 670, 671, 672, 673, 674, 675, 676, 682, 689, 696, 699, 732, 733, 800, 803, 804, 814, 827, 832, 833, 834, 835, 836, 837, 838, 850, 861, 862, 864, 871, 880, 888, 892, 897, 901, 956, 961, 988, 989, 993, 996, 998, 999, 1000, 1001, 1002, 1005, 1009, 1012, 1013, 1014, 1017, 1018, 1019, 1022, 1023, 1025, 1029, 1034, 1035, 1036, 1037, 1038, 1039, 1042, 1043, 1045, 1048], "available_if": [1, 89, 386, 1042, 1043, 1046], "avebedrm": [304, 367, 487], "aventi": 51, "aveoccup": [304, 315, 367, 487], "averag": [1, 43, 52, 62, 63, 64, 72, 74, 75, 79, 85, 93, 95, 137, 138, 142, 146, 149, 150, 155, 156, 163, 172, 184, 192, 198, 207, 224, 243, 258, 267, 269, 272, 274, 278, 283, 304, 313, 319, 321, 329, 347, 355, 359, 367, 369, 384, 401, 402, 406, 408, 412, 413, 415, 416, 434, 435, 438, 441, 442, 443, 444, 446, 487, 491, 492, 521, 529, 530, 531, 535, 536, 538, 539, 543, 544, 545, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 567, 568, 586, 593, 632, 633, 648, 658, 659, 666, 667, 669, 672, 674, 676, 677, 678, 680, 687, 700, 703, 704, 706, 707, 708, 713, 720, 721, 723, 725, 726, 728, 729, 730, 734, 735, 736, 738, 739, 740, 743, 745, 746, 748, 750, 751, 753, 756, 764, 781, 782, 783, 784, 785, 787, 788, 790, 791, 795, 796, 797, 798, 828, 831, 850, 870, 885, 984, 989, 994, 995, 1000, 1003, 1005, 1006, 1013, 1014, 1015, 1029, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1043, 1044, 1045, 1046, 1047, 1048], "average_bike_rent": 184, "average_coef_": 1040, "average_feature_effect": 347, "average_intercept_": 1040, "average_linkag": 79, "average_method": [404, 704, 757, 1037], "average_pr": 149, "average_precis": [271, 700, 707, 999], "average_precision_scor": [1, 271, 700, 706, 708, 782, 788, 999, 1029, 1032, 1036, 1037, 1043, 1045], "average_week_demand": [43, 149], "averaged_inverted_cdf": [66, 207, 224, 305, 306, 307, 318, 869, 1049], "averoom": [304, 315, 367, 487], "avg": [45, 68, 102, 160, 262, 302, 325, 326, 567, 704, 713, 822, 999, 1045], "avg_dist": [75, 781], "avgclaim": 224, "avgclaimamount": 224, "avi": [1041, 1042], "avidar": 1045, "avinash": 1041, "avm19": [1043, 1044, 1046], "avoid": [43, 46, 51, 52, 79, 90, 95, 104, 139, 140, 144, 149, 183, 184, 211, 215, 224, 240, 243, 258, 259, 263, 265, 269, 277, 292, 294, 295, 308, 309, 320, 332, 333, 348, 360, 370, 372, 373, 374, 376, 377, 378, 384, 386, 387, 390, 398, 400, 402, 404, 406, 408, 411, 412, 415, 437, 439, 441, 449, 459, 465, 491, 492, 493, 497, 506, 507, 532, 537, 541, 634, 646, 647, 652, 653, 660, 661, 662, 663, 681, 684, 689, 691, 693, 695, 702, 712, 792, 800, 801, 805, 811, 814, 825, 826, 827, 864, 867, 873, 874, 876, 881, 882, 883, 884, 887, 889, 890, 891, 892, 893, 894, 895, 897, 902, 948, 993, 996, 998, 999, 1002, 1003, 1005, 1007, 1009, 1014, 1015, 1022, 1025, 1026, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049], "aw": 380, "awai": [62, 63, 64, 93, 109, 142, 167, 168, 172, 210, 258, 340, 341, 367, 402, 414, 628, 846, 847, 854, 855, 998, 999, 1014], "await": 314, "awalei": 1037, "awar": [48, 54, 160, 176, 258, 333, 347, 372, 374, 384, 387, 403, 408, 412, 565, 566, 648, 654, 655, 656, 658, 659, 669, 680, 850, 879, 1005, 1009, 1015, 1029, 1030, 1043], "awesom": 1023, "awwwyan": [1047, 1048], "ax": [43, 44, 46, 47, 48, 49, 51, 52, 54, 62, 64, 66, 67, 68, 70, 75, 77, 78, 86, 88, 89, 90, 97, 99, 104, 107, 111, 113, 116, 118, 120, 126, 130, 134, 136, 139, 141, 143, 144, 149, 151, 152, 154, 155, 170, 171, 176, 178, 182, 183, 184, 185, 186, 188, 190, 191, 194, 198, 200, 201, 204, 205, 207, 208, 209, 211, 212, 214, 215, 217, 219, 220, 221, 224, 226, 227, 228, 229, 230, 231, 234, 239, 243, 244, 246, 249, 251, 254, 258, 259, 260, 261, 263, 264, 266, 267, 268, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 283, 284, 286, 287, 288, 289, 292, 294, 295, 299, 300, 301, 304, 306, 307, 308, 309, 310, 311, 313, 314, 317, 318, 320, 332, 333, 334, 335, 337, 338, 340, 342, 343, 344, 345, 347, 348, 349, 351, 352, 368, 375, 409, 414, 435, 532, 539, 548, 631, 632, 697, 698, 700, 701, 702, 718, 806, 823, 918, 921, 999, 1002, 1006, 1026, 1039, 1045, 1046], "ax0": [105, 107, 207, 236, 348], "ax1": [46, 49, 90, 93, 98, 100, 105, 107, 111, 118, 143, 179, 186, 201, 207, 234, 236, 244, 249, 267, 275, 305, 309, 310, 328, 347, 348, 368], "ax2": [46, 90, 93, 98, 100, 111, 118, 143, 179, 186, 201, 207, 234, 244, 249, 267, 275, 294, 305, 309, 310, 328, 347, 368], "ax3": [98, 328], "ax4": 98, "ax_": [150, 257, 267, 271, 273, 277, 287, 309, 313, 379, 435, 631, 697, 698, 700, 701, 702, 806, 823], "ax_bc": 308, "ax_bottom": 379, "ax_calibration_curv": [62, 64], "ax_colorbar": 304, "ax_det": 261, "ax_histi": 304, "ax_histx": 304, "ax_histx_zoom": 304, "ax_histy_zoom": 304, "ax_idx": 266, "ax_max": 66, "ax_origin": 308, "ax_qt": 308, "ax_roc": 261, "ax_row": 70, "ax_scatt": 304, "ax_scatter_zoom": 304, "ax_singl": 66, "ax_top_left": 379, "ax_top_right": 379, "ax_yj": 308, "ax_zoom_in": 304, "ax_zoom_out": 304, "axarr": [155, 304], "axes_": [149, 151, 244, 314, 320, 379, 632], "axes_idx": 308, "axes_list": 308, "axes_row": 200, "axesimag": 697, "axhlin": [127, 199, 263, 267], "axi": [1, 43, 44, 46, 50, 51, 53, 54, 55, 57, 62, 63, 66, 72, 74, 75, 81, 83, 85, 86, 87, 88, 94, 103, 104, 107, 113, 116, 118, 120, 121, 122, 123, 124, 129, 136, 137, 141, 142, 150, 153, 156, 159, 171, 176, 178, 182, 183, 192, 197, 198, 202, 203, 207, 212, 215, 218, 220, 221, 223, 224, 227, 228, 231, 233, 237, 238, 242, 249, 251, 253, 254, 260, 261, 263, 265, 266, 271, 273, 274, 277, 283, 284, 289, 290, 291, 294, 295, 296, 302, 304, 308, 311, 320, 326, 328, 330, 332, 335, 336, 339, 341, 342, 343, 345, 347, 348, 352, 353, 354, 367, 374, 381, 386, 402, 404, 412, 416, 435, 442, 461, 464, 529, 531, 534, 535, 537, 539, 541, 543, 544, 548, 584, 612, 631, 632, 685, 686, 701, 763, 779, 780, 781, 782, 806, 823, 832, 873, 874, 881, 882, 884, 889, 890, 891, 893, 894, 895, 918, 926, 930, 931, 950, 973, 979, 989, 999, 1006, 1009, 1014, 1037, 1039, 1041, 1046, 1047], "axis_idx": 43, "axis_list": 122, "axp": 51, "axvlin": [86, 93, 105, 113, 127, 145, 183, 185, 186, 198, 263, 270, 278, 343], "ayako": 1041, "ayan": 1043, "ayc\u0131": 1047, "aydor": [1036, 1037, 1040], "ayerdi": 1033, "aygeeem": 1048, "aymer": 1030, "aymericbasset": 1045, "ayomid": 1039, "ayoub": 1049, "ayrat": 1049, "ayush": [1037, 1042], "ayzenshtat": [1023, 1037], "azaria": [1044, 1045], "azencott": 1043, "azim": [100, 126, 184, 226, 230], "azur": [0, 372], "azzedin": 1049, "b": [0, 1, 47, 49, 61, 63, 92, 98, 111, 127, 136, 137, 142, 146, 147, 156, 168, 169, 170, 175, 179, 193, 194, 197, 207, 208, 213, 224, 241, 243, 258, 265, 267, 269, 274, 279, 283, 316, 328, 355, 367, 369, 372, 376, 377, 378, 401, 402, 404, 407, 408, 409, 412, 434, 479, 496, 498, 539, 564, 587, 588, 589, 590, 606, 607, 610, 611, 628, 646, 647, 648, 649, 658, 669, 672, 674, 676, 680, 687, 688, 705, 719, 730, 731, 792, 793, 811, 812, 851, 877, 878, 879, 880, 883, 884, 892, 919, 932, 948, 949, 963, 965, 989, 991, 995, 996, 997, 999, 1002, 1004, 1009, 1013, 1014, 1029, 1037, 1040, 1042, 1043, 1044, 1049], "b0noi": 1035, "b0rxington": 1044, "b1": [220, 290, 335], "b12": [207, 224], "b1996": 411, "b1998": 411, "b1999": 411, "b2": [220, 290, 335], "b2001": 411, "b2011": 404, "b2c": 1023, "b30065": 306, "b5": 318, "b7a2ff": 308, "b_1": 1003, "b_2": 1003, "b_column": 719, "b_i": 1004, "b_iv_i": 1004, "b_j": 404, "b_k": 404, "b_mask": 273, "b_row": 719, "b_true": 273, "ba": [51, 861, 862, 1003], "baak": 1043, "baam": [1042, 1043], "babaei": 1049, "babatchev": [1048, 1049], "babil": 315, "babino": [1042, 1043], "bac": 51, "bach": [409, 529, 534, 535, 536, 658, 995], "bachant": 1036, "back": [43, 125, 245, 360, 372, 386, 387, 398, 405, 412, 429, 440, 443, 444, 456, 479, 480, 481, 506, 507, 529, 531, 532, 533, 535, 536, 538, 539, 540, 542, 580, 630, 658, 659, 666, 667, 668, 676, 677, 678, 728, 869, 871, 872, 873, 877, 878, 879, 881, 882, 884, 896, 897, 904, 953, 995, 999, 1003, 1032, 1037, 1039, 1040, 1043, 1047, 1048], "backend": [360, 375, 386, 465, 902, 966, 999, 1032, 1037, 1038, 1039, 1040], "backend_kwarg": 966, "background": [44, 50, 81, 99, 150, 302, 306, 367, 372, 380, 404, 491, 492, 996, 1004, 1013, 1039], "background_point": 50, "backlink": 1034, "backport": [376, 381, 1036], "backprop": [1003, 1013], "backpropag": 1003, "backslash": 1044, "backtick": [372, 377], "backup": [506, 1029], "backward": [163, 240, 315, 375, 376, 386, 413, 494, 576, 601, 614, 615, 618, 619, 620, 622, 623, 917, 926, 1003, 1019, 1029, 1032, 1037, 1038, 1039, 1041, 1043, 1045], "bad": [93, 94, 168, 173, 183, 258, 321, 347, 355, 372, 404, 414, 692, 746, 988, 995, 996, 1001, 1007, 1029], "badaracco": 1042, "badli": [198, 207, 347, 361, 884, 995, 1009], "badr": 1044, "baeza": [589, 730, 1032], "bag": [1, 13, 64, 102, 122, 133, 138, 140, 148, 180, 185, 281, 348, 349, 368, 402, 514, 515, 516, 553, 554, 555, 556, 557, 558, 562, 563, 741, 805, 830, 913, 997, 1000, 1020, 1021, 1025, 1029, 1031, 1032, 1033, 1034, 1035, 1042, 1043, 1045], "bagai": 1042, "baggingclassifi": [1, 386, 395, 411, 554, 914, 939, 989, 1032, 1035, 1036, 1037, 1040, 1044, 1045, 1047, 1049], "baggingregressor": [1, 137, 395, 411, 553, 915, 989, 1032, 1035, 1037, 1040, 1044, 1045, 1047, 1049], "baggipont": [1047, 1048], "bagu": 1049, "baharev": 1034, "bahavior": 347, "bahaviour": 347, "baibak": [1037, 1038], "bail": 1040, "bailei": [404, 704], "bajic": 1044, "baji\u0107": 1044, "baker": [1048, 1049], "bakir2003": 409, "bakiri": [834, 1000], "bak\u0131r": [44, 409, 533], "bala": [1029, 1032], "balakumaran": [1036, 1037], "balanc": [1, 43, 45, 52, 64, 86, 99, 105, 134, 144, 162, 180, 211, 212, 256, 262, 267, 268, 278, 304, 361, 384, 386, 402, 403, 408, 409, 411, 500, 513, 532, 538, 539, 545, 555, 559, 562, 640, 658, 659, 666, 668, 674, 675, 676, 703, 708, 729, 743, 782, 787, 800, 801, 803, 804, 814, 817, 818, 864, 904, 906, 909, 912, 914, 935, 936, 988, 1014, 1015, 1020, 1029, 1031, 1034, 1035, 1038, 1039, 1043, 1049], "balanced_accuraci": [278, 708, 822, 999, 1037], "balanced_accuracy_scor": [1, 703, 787, 999, 1037], "balanced_subsampl": [555, 562, 1037], "balaz": 1033, "baldi": 743, "ball": [102, 289, 297, 404, 410, 445, 692, 844, 845, 849, 852, 854, 855, 856, 1029, 1031, 1034, 1040], "ball_tre": [297, 415, 441, 443, 447, 454, 688, 689, 846, 847, 848, 849, 850, 852, 854, 855, 856, 1002, 1029, 1046], "ballen": 1049, "balltre": [1, 415, 441, 443, 447, 454, 688, 689, 699, 846, 847, 848, 849, 850, 852, 854, 855, 856, 996, 1029, 1031, 1033, 1037, 1042, 1045, 1046], "baloo": 996, "baluyot": 1038, "bamidel": 1039, "banana": [48, 999], "band": [52, 263, 267, 306, 1009], "bandit": 988, "bandol": 310, "bandwidth": [1, 48, 79, 96, 239, 288, 289, 297, 384, 386, 404, 410, 445, 455, 458, 844, 845, 849, 992, 999, 1005, 1040, 1044], "bandwidth_": 849, "banerje": 1049, "bangda": 1037, "banik": 1047, "banilo": [1033, 1034], "bank": [51, 57, 1023], "bannerje": [1045, 1046], "bansal": [1036, 1049], "bansod": [1034, 1035, 1036], "bao": [1035, 1043], "baod": 404, "baptbillard": 1042, "baptist": [1032, 1040], "bar": [47, 49, 54, 104, 140, 141, 143, 144, 147, 159, 163, 175, 178, 184, 190, 249, 254, 263, 265, 269, 283, 309, 310, 317, 318, 348, 374, 407, 414, 580, 632, 648, 669, 680, 999, 1006, 1013, 1015, 1035, 1036, 1037, 1038], "bar_color": 47, "bar_kw": 632, "bar_siz": 347, "baran": 1039, "barang": 1045, "baraniuk": 413, "barankaraku": 1041, "barata": 1045, "barber": 530, "barberogaston": 1041, "barbier": 1048, "bardiya": [1043, 1044], "bare": [367, 996], "barh": [54, 147, 178, 179, 182, 183, 185, 186, 247, 311, 347, 348, 349], "barikbin": 1045, "barkhorn": 1037, "barklei": 1039, "barmalei": [1033, 1034], "barn": [692, 996, 1034, 1036, 1039, 1047], "barnes_hut": [284, 692, 1036, 1037], "barnett": 1037, "barnhil": [592, 593], "barnowski": [1043, 1044], "barreca": [885, 1009], "barreto": 1043, "barri": [367, 1037], "barrier": 412, "barrycg": 1039, "bars_": 632, "bartelheim": 1040, "barth\u00e9lemi": [1045, 1046, 1048], "bartosz": 1038, "bart\u0142omiej": 1044, "barycent": [296, 1029], "basbug": 1036, "base": [0, 1, 13, 19, 23, 30, 31, 32, 34, 40, 44, 51, 52, 53, 54, 55, 58, 62, 63, 64, 70, 82, 89, 90, 91, 100, 102, 103, 107, 111, 120, 121, 126, 132, 134, 135, 140, 144, 145, 146, 147, 149, 152, 154, 155, 156, 157, 160, 161, 167, 172, 173, 175, 184, 185, 186, 189, 190, 195, 197, 198, 201, 203, 207, 208, 214, 223, 224, 226, 233, 240, 241, 243, 261, 262, 267, 273, 277, 281, 283, 284, 297, 302, 304, 305, 307, 309, 315, 317, 321, 330, 334, 340, 348, 351, 359, 366, 367, 368, 369, 370, 373, 375, 376, 380, 384, 386, 387, 389, 398, 400, 402, 403, 405, 409, 410, 412, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 441, 442, 443, 444, 445, 446, 447, 449, 453, 454, 458, 460, 461, 462, 463, 464, 484, 498, 499, 506, 507, 530, 531, 533, 534, 535, 536, 537, 539, 544, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 577, 587, 590, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 605, 606, 607, 610, 611, 616, 617, 618, 621, 624, 632, 633, 635, 636, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 658, 664, 669, 671, 672, 673, 674, 675, 680, 682, 683, 685, 686, 687, 690, 692, 704, 717, 726, 735, 736, 737, 739, 741, 755, 756, 757, 785, 788, 795, 799, 800, 802, 803, 804, 806, 807, 809, 814, 816, 818, 819, 820, 821, 828, 830, 834, 835, 838, 846, 847, 848, 850, 852, 854, 855, 856, 861, 862, 865, 866, 869, 876, 877, 879, 883, 884, 885, 893, 896, 897, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 920, 922, 924, 933, 941, 953, 968, 988, 990, 991, 993, 994, 996, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1009, 1011, 1012, 1013, 1014, 1015, 1018, 1019, 1020, 1023, 1025, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1040, 1047], "base_classifi": [328, 330], "base_clf": 434, "base_estim": [315, 402, 551, 552, 553, 554, 835, 838, 901, 988, 1040, 1042, 1043, 1044, 1045, 1048, 1049], "base_estimator_": [551, 552, 553, 554, 555, 556, 561, 562, 563, 564, 610, 1044], "base_estimator__": 1044, "base_lr": [283, 835], "base_model": 403, "base_x_test": 109, "base_x_train": 109, "basebag": [1035, 1037], "basebal": [57, 367], "basedecisiontre": [1037, 1038, 1041], "basedictionarylearn": 1029, "baseensembl": [1036, 1039], "baseestim": [1, 89, 132, 240, 284, 322, 372, 385, 386, 414, 419, 420, 421, 422, 425, 426, 427, 428, 600, 632, 633, 939, 953, 1029, 1036, 1039, 1041, 1043, 1044, 1048, 1049], "basegradientboost": 1030, "baselabelpropag": 1036, "baselibsvm": 1039, "baselin": [62, 134, 143, 146, 156, 163, 186, 190, 224, 258, 274, 283, 315, 348, 369, 404, 413, 549, 550, 634, 999, 1002, 1045], "baseline_similar": 175, "baseline_similarity_bound": 175, "basemap": [50, 297], "basemixtur": [1037, 1038, 1049], "basemultilayerperceptron": [1037, 1039], "basenb": 1039, "baserandomproject": [896, 897], "basesearchcv": [1036, 1037], "basesgd": 1013, "basesgdclassifi": 1038, "baseshufflesplit": 1042, "bash": [360, 372, 380], "bashrc": 380, "basi": [1, 43, 45, 53, 125, 167, 172, 174, 208, 258, 301, 316, 336, 340, 364, 370, 373, 404, 409, 411, 449, 532, 622, 632, 639, 691, 883, 997, 1009, 1014, 1021, 1025, 1037, 1039, 1042], "basic": [127, 146, 166, 167, 172, 173, 175, 176, 179, 180, 278, 311, 341, 359, 361, 372, 376, 384, 386, 404, 408, 409, 411, 611, 622, 900, 912, 913, 914, 915, 988, 989, 1002, 1013, 1017, 1018, 1019, 1020, 1023], "basicconfig": 120, "basil": 1036, "basilisk": 1018, "basis_1": 208, "basis_2": 208, "basri": 511, "bassett": 995, "bastiaan": [1030, 1031], "bastian": 1037, "batch": [1, 47, 50, 97, 120, 124, 297, 317, 361, 381, 386, 412, 437, 439, 444, 446, 448, 450, 529, 531, 532, 534, 535, 536, 537, 538, 540, 541, 543, 544, 664, 685, 686, 801, 805, 818, 819, 839, 840, 841, 842, 843, 861, 862, 873, 874, 884, 897, 951, 966, 1003, 1004, 1013, 1029, 1033, 1034, 1037, 1038, 1039, 1040, 1042, 1044, 1045], "batch_dict_estim": 120, "batch_pca_estim": 120, "batch_siz": [1, 54, 57, 77, 97, 120, 123, 124, 244, 348, 409, 446, 532, 534, 535, 536, 537, 544, 860, 861, 862, 951, 952, 966, 1030, 1037, 1040, 1042, 1043], "batch_size_": 532, "batchkarov": [1030, 1034], "batiss": 1040, "batista": [1037, 1038, 1042], "batistaki": 404, "batoul": 1042, "battista": 1040, "batula": 1036, "bauk": [1037, 1038], "baum": 443, "baumgartn": 1036, "baxlei": 1036, "bay": [1, 32, 64, 67, 137, 152, 167, 198, 254, 266, 347, 367, 402, 409, 411, 412, 534, 547, 548, 656, 839, 840, 841, 842, 843, 885, 993, 994, 995, 1009, 1021, 1025, 1029, 1030, 1031, 1032, 1037, 1039, 1042, 1044], "bayer": [0, 1029, 1030, 1034, 1047], "bayesian": [1, 46, 64, 87, 118, 178, 179, 180, 189, 194, 196, 208, 213, 248, 250, 254, 255, 267, 279, 289, 294, 305, 309, 345, 409, 434, 522, 526, 530, 611, 644, 645, 656, 657, 797, 798, 865, 867, 879, 884, 988, 1018, 1020, 1021, 1024, 1025, 1035, 1042], "bayesiangaussianmixtur": [1, 249, 250, 255, 798, 998, 1035, 1037, 1038, 1042, 1043, 1047], "bayesianridg": [1, 87, 178, 179, 190, 191, 194, 315, 627, 644, 995, 1036, 1037, 1038, 1039, 1042, 1043, 1045, 1046, 1049], "baz": [374, 580], "baze": 1038, "bbbbbb": 97, "bbox": [48, 51, 66, 70, 249, 250, 251, 254, 255, 306], "bbox_arg": 48, "bbox_to_anchor": [43, 72, 176, 263, 269, 342], "bc": 308, "bcde": 143, "bcross_val": 1029, "bde": 143, "bdegraaff": 1044, "bdt": 136, "beach": 1037, "beam": [137, 1029], "bear": [411, 1018], "bearer": 1037, "beatrizsmg": 1041, "beauchamp": [1030, 1033], "beaugnon": 1039, "becam": [154, 387, 1037], "becaus": [43, 44, 52, 57, 62, 64, 66, 75, 81, 83, 103, 113, 116, 134, 139, 146, 149, 163, 168, 171, 174, 178, 183, 184, 186, 191, 195, 202, 207, 211, 213, 214, 224, 239, 240, 250, 258, 261, 264, 265, 270, 283, 284, 300, 301, 302, 304, 308, 309, 310, 311, 327, 336, 340, 347, 348, 349, 351, 354, 355, 359, 360, 367, 372, 376, 377, 380, 384, 385, 386, 395, 398, 401, 402, 403, 404, 405, 408, 409, 410, 411, 412, 414, 417, 427, 444, 445, 458, 462, 472, 479, 480, 481, 532, 534, 550, 552, 554, 556, 558, 560, 561, 563, 566, 568, 606, 607, 611, 632, 633, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 672, 673, 676, 677, 678, 679, 680, 689, 699, 712, 713, 721, 722, 723, 724, 746, 763, 785, 788, 794, 800, 814, 828, 832, 837, 838, 847, 850, 852, 854, 855, 856, 862, 873, 874, 882, 884, 885, 889, 890, 892, 893, 894, 895, 905, 907, 910, 913, 915, 941, 964, 989, 991, 992, 993, 994, 995, 996, 997, 999, 1000, 1002, 1004, 1006, 1009, 1014, 1015, 1023, 1035, 1036, 1038, 1039, 1040, 1041, 1043, 1045, 1048, 1049], "becker": [404, 1023, 1032, 1041], "becom": [83, 88, 90, 104, 111, 144, 183, 201, 209, 211, 240, 243, 266, 284, 305, 309, 336, 340, 347, 355, 366, 372, 374, 376, 380, 386, 387, 404, 406, 411, 412, 414, 437, 447, 451, 452, 454, 580, 587, 588, 590, 619, 627, 658, 659, 676, 678, 878, 904, 905, 911, 994, 995, 996, 998, 1002, 1009, 1014, 1030, 1037, 1038, 1041, 1042, 1043, 1044, 1046, 1048, 1049], "bednar": 1036, "bedroom": [304, 367], "been": [0, 43, 48, 63, 79, 86, 93, 112, 125, 132, 134, 147, 163, 167, 172, 174, 183, 186, 230, 233, 235, 240, 241, 262, 264, 270, 271, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 327, 347, 355, 360, 366, 367, 369, 370, 371, 372, 374, 376, 378, 380, 381, 384, 385, 386, 387, 395, 398, 400, 401, 402, 403, 404, 406, 408, 409, 411, 414, 429, 466, 468, 469, 471, 475, 484, 521, 532, 534, 547, 548, 565, 566, 580, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 611, 633, 634, 658, 659, 666, 667, 668, 673, 675, 676, 677, 678, 702, 720, 778, 779, 780, 793, 800, 803, 804, 806, 814, 822, 823, 828, 829, 853, 901, 904, 989, 991, 992, 994, 995, 996, 999, 1000, 1002, 1005, 1009, 1011, 1013, 1014, 1019, 1023, 1026, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "befor": [1, 47, 51, 62, 77, 102, 104, 107, 116, 144, 149, 154, 159, 174, 176, 177, 178, 180, 183, 184, 185, 186, 192, 194, 196, 198, 202, 240, 258, 264, 271, 286, 287, 305, 308, 309, 311, 316, 322, 339, 355, 359, 360, 367, 370, 372, 374, 376, 377, 378, 380, 381, 384, 386, 387, 389, 390, 398, 400, 402, 404, 405, 406, 408, 409, 411, 413, 416, 417, 440, 444, 445, 446, 456, 458, 462, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 479, 480, 481, 482, 487, 499, 532, 535, 536, 537, 538, 539, 542, 544, 545, 559, 560, 563, 565, 567, 568, 576, 587, 588, 590, 611, 627, 628, 630, 645, 666, 667, 668, 671, 676, 678, 687, 692, 694, 797, 798, 801, 805, 806, 818, 819, 821, 826, 828, 830, 844, 845, 852, 853, 854, 855, 856, 859, 864, 865, 868, 871, 878, 882, 883, 884, 885, 889, 890, 892, 893, 894, 895, 901, 912, 913, 923, 948, 982, 989, 995, 996, 999, 1005, 1009, 1013, 1014, 1015, 1019, 1020, 1029, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "beforehand": [247, 287, 1015], "begin": [57, 132, 163, 167, 259, 266, 283, 316, 347, 355, 372, 377, 378, 386, 401, 404, 411, 551, 552, 557, 559, 560, 666, 667, 676, 677, 678, 988, 991, 995, 999, 1009, 1011, 1013, 1037, 1043, 1044], "beginn": 1019, "behav": [43, 51, 85, 90, 211, 258, 259, 304, 315, 336, 355, 372, 374, 378, 385, 404, 405, 408, 884, 995, 1009, 1014, 1016, 1019, 1029, 1036, 1038, 1042, 1043, 1049], "behavior": [62, 66, 72, 74, 85, 178, 180, 183, 184, 197, 205, 207, 224, 240, 247, 255, 256, 258, 267, 269, 301, 302, 304, 306, 311, 336, 355, 360, 366, 369, 372, 374, 376, 380, 381, 386, 400, 402, 403, 404, 408, 411, 412, 534, 549, 564, 666, 667, 668, 676, 677, 678, 699, 701, 729, 730, 783, 784, 787, 800, 801, 802, 805, 814, 817, 818, 819, 820, 821, 841, 877, 904, 905, 988, 995, 999, 1000, 1005, 1009, 1014, 1020, 1023, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049], "behaviour": [74, 125, 149, 208, 209, 224, 338, 372, 386, 398, 400, 404, 411, 557, 558, 562, 563, 601, 630, 801, 802, 805, 817, 818, 819, 820, 821, 902, 912, 913, 971, 988, 989, 999, 1009, 1037, 1040, 1041, 1044, 1045, 1048], "behind": [37, 86, 111, 134, 281, 376, 380, 406, 411, 998, 1002, 1011, 1045], "behrend": 1039, "behrouz": 1043, "behzad": 1035, "beier": 1040, "beimportantfew": 392, "being": [61, 64, 70, 85, 88, 113, 116, 125, 134, 138, 149, 151, 167, 172, 185, 188, 203, 240, 243, 257, 264, 302, 308, 309, 336, 340, 347, 349, 370, 371, 372, 374, 377, 384, 386, 387, 403, 404, 406, 408, 411, 412, 413, 414, 415, 417, 438, 439, 441, 442, 447, 453, 466, 472, 491, 521, 567, 640, 649, 656, 672, 674, 687, 702, 712, 718, 734, 736, 783, 797, 844, 845, 850, 852, 854, 855, 856, 879, 897, 949, 988, 989, 995, 998, 999, 1002, 1005, 1006, 1009, 1011, 1013, 1014, 1015, 1029, 1030, 1035, 1036, 1037, 1038, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "beings": 347, "beirouti": 1036, "belatedli": 1036, "belief": [57, 264, 860, 1004], "believ": [347, 348, 380, 384, 1023], "belkin": 996, "belkina": [692, 996], "bell": [1, 519, 1037, 1039, 1041, 1042], "bella": 999, "bella2012": 999, "bellet": [1036, 1037, 1038], "belmont": [912, 913, 1015], "belong": [61, 64, 66, 88, 93, 155, 165, 243, 264, 313, 319, 327, 366, 367, 401, 402, 404, 405, 407, 408, 411, 419, 437, 440, 444, 445, 446, 448, 450, 521, 709, 712, 731, 807, 813, 825, 871, 885, 920, 956, 957, 995, 998, 999, 1001, 1002, 1003, 1005, 1014, 1018], "below": [0, 1, 48, 52, 62, 63, 64, 68, 70, 88, 93, 102, 107, 111, 120, 132, 138, 141, 146, 158, 182, 184, 207, 209, 222, 223, 227, 231, 235, 240, 243, 245, 247, 259, 262, 267, 269, 270, 271, 304, 308, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 341, 347, 354, 355, 360, 365, 366, 370, 372, 374, 376, 377, 381, 386, 387, 390, 392, 400, 404, 406, 407, 408, 409, 411, 412, 413, 414, 441, 443, 445, 465, 468, 469, 475, 488, 490, 492, 493, 494, 495, 496, 498, 499, 500, 502, 503, 508, 529, 535, 540, 546, 581, 594, 595, 596, 597, 598, 599, 633, 646, 652, 658, 659, 667, 668, 673, 675, 692, 699, 705, 743, 763, 797, 798, 800, 811, 814, 833, 864, 867, 877, 878, 881, 887, 893, 902, 988, 989, 993, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1009, 1013, 1014, 1015, 1016, 1018, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1047], "beltran": 1047, "ben": [1031, 1032, 1033, 1036, 1037, 1038, 1041, 1046, 1049], "ben3940": 1043, "benavoli": 264, "benbihi": 1038, "bench_k_mean": 91, "benchmark": [284, 315, 322, 348, 349, 359, 365, 367, 372, 384, 390, 397, 402, 465, 513, 902], "benchmark_estim": 49, "benchmark_influ": 46, "benchmark_throughput": 49, "bend": 340, "benedek": 1045, "benedikt": 1033, "benediktsson": [1029, 1030, 1031], "benefici": [104, 106, 109, 120, 152, 258, 304, 305, 321, 398, 403, 996], "benefit": [43, 80, 89, 106, 107, 134, 135, 144, 149, 155, 183, 220, 230, 236, 238, 258, 286, 317, 322, 359, 372, 381, 386, 402, 404, 445, 458, 465, 506, 565, 566, 658, 659, 666, 667, 668, 676, 677, 678, 835, 902, 904, 988, 994, 1002, 1009, 1023, 1029, 1032, 1033, 1034, 1041, 1042, 1043, 1044], "benev": 0, "benfield": 1036, "bengio": [264, 861, 862, 988, 1012], "bengtsson": 1033, "benhel": 373, "benhur": 1042, "benign": [163, 369, 498], "benjamin": [641, 1031, 1032, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1049], "benjamini": [594, 1035, 1036], "benjaminirv": 1034, "benjastudio": [1037, 1038], "benn": 1037, "bennett": [163, 369, 999], "benni": 1043, "benoit": 1046, "beno\u00eet": 1042, "benson": 57, "bentlei": 1002, "benyamna": 1049, "bera": 1044, "berei": 1043, "beren": 692, "berenbaum": 1045, "bereng": 1042, "berg": [367, 1030, 1031, 1041, 1046], "bergman": [1046, 1047], "bergstra": [988, 1029, 1030], "berk": 1029, "berkecanrizai": 1044, "berkelei": [641, 912, 913], "berlin": [172, 404, 409, 533, 696, 726, 756, 999], "bernardo": 1035, "bernd": 1044, "bernhard": [44, 409, 533, 835, 870, 900, 1000, 1005, 1014, 1035], "bernhardsson": 1023, "berni": 1040, "bernoulli": [1, 302, 412, 413, 839, 840, 841, 842, 843, 860, 861, 862, 867, 995, 1009, 1021, 1025, 1029], "bernoullinb": [1, 152, 361, 840, 841, 842, 843, 1000, 1001, 1030, 1031, 1033, 1036, 1041, 1042, 1044], "bernoullirbm": [1, 302, 861, 862, 1004, 1009, 1031, 1032, 1041, 1043, 1046], "bertin": 1023, "bertoncelj": 1040, "bertrand": [0, 394, 1029, 1035, 1036, 1041, 1042], "bertrandhaut": [1037, 1038], "bes": 263, "besid": [154, 236, 278, 372, 377, 588, 988, 1037], "bessel": [414, 619], "bessi": 318, "besson": [1034, 1035], "best": [0, 43, 45, 47, 51, 52, 53, 57, 61, 63, 64, 75, 80, 87, 88, 94, 102, 103, 104, 105, 109, 115, 120, 124, 127, 128, 129, 137, 140, 143, 145, 146, 147, 149, 154, 156, 163, 167, 168, 173, 178, 183, 190, 194, 196, 198, 201, 212, 220, 221, 222, 226, 229, 233, 238, 239, 243, 250, 251, 255, 257, 258, 262, 263, 264, 265, 268, 271, 272, 275, 276, 279, 283, 288, 293, 305, 310, 315, 316, 321, 336, 339, 340, 347, 348, 349, 353, 354, 359, 360, 366, 369, 371, 372, 375, 378, 385, 386, 390, 395, 398, 401, 402, 403, 404, 408, 409, 411, 412, 413, 414, 427, 440, 443, 444, 446, 448, 449, 450, 456, 459, 462, 469, 479, 480, 481, 536, 543, 544, 550, 552, 554, 555, 556, 557, 558, 560, 562, 563, 564, 566, 568, 592, 593, 596, 601, 610, 611, 635, 637, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 667, 669, 670, 671, 672, 673, 675, 676, 678, 679, 680, 688, 689, 690, 693, 694, 703, 708, 712, 719, 720, 721, 722, 723, 724, 728, 729, 739, 740, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 756, 783, 784, 785, 787, 790, 791, 792, 793, 794, 796, 797, 798, 800, 803, 804, 814, 827, 829, 832, 837, 838, 847, 855, 861, 862, 905, 907, 910, 912, 913, 914, 915, 988, 993, 994, 995, 996, 999, 1002, 1003, 1005, 1013, 1015, 1018, 1019, 1023, 1029, 1032, 1035, 1037, 1038, 1039, 1042, 1043, 1044, 1045, 1047], "best_alpha": 1029, "best_c": 343, "best_c_scal": 343, "best_clf": 105, "best_compon": 263, "best_estim": [800, 803, 804, 814], "best_estimator_": [45, 87, 104, 105, 106, 109, 127, 239, 254, 258, 262, 263, 264, 265, 268, 276, 288, 800, 803, 804, 814, 988, 1036], "best_idx": [57, 263], "best_index": [262, 268], "best_index_": [263, 268, 800, 803, 804, 814], "best_loss": [676, 678], "best_loss_": [861, 862, 1044], "best_low_complex": 263, "best_mean_scor": 263, "best_n_it": 456, "best_paramet": 265, "best_parameters_": 254, "best_params_": [103, 105, 146, 167, 239, 254, 262, 268, 315, 336, 385, 800, 803, 804, 814, 988], "best_recal": 262, "best_recall_std": 262, "best_recall_threshold": 262, "best_scor": [263, 268], "best_score_": [103, 105, 239, 258, 265, 268, 269, 336, 403, 673, 675, 800, 803, 804, 814, 822, 1040], "best_score_idx": 263, "best_threshold_": [258, 278, 321, 822], "best_validation_score_": [861, 862, 1044], "beta": [1, 80, 115, 182, 211, 378, 402, 404, 407, 534, 536, 538, 545, 644, 729, 730, 736, 742, 783, 795, 797, 999, 1031, 1034, 1036, 1038, 1039], "beta_": [211, 409], "beta_1": [244, 861, 862], "beta_2": [244, 861, 862], "beta_k": 409, "beta_loss": [54, 536, 538, 545, 1036], "betatim": 1044, "better": [43, 44, 48, 52, 57, 58, 61, 63, 67, 83, 88, 106, 107, 109, 110, 111, 112, 116, 120, 123, 126, 137, 140, 144, 145, 146, 149, 154, 155, 158, 171, 172, 173, 175, 178, 183, 185, 191, 194, 195, 198, 201, 207, 208, 209, 214, 221, 223, 224, 230, 238, 239, 240, 243, 254, 257, 258, 263, 264, 266, 267, 270, 273, 274, 277, 281, 283, 302, 308, 309, 317, 318, 336, 343, 347, 348, 349, 351, 355, 359, 367, 371, 372, 373, 374, 377, 378, 380, 386, 389, 392, 400, 402, 404, 406, 408, 409, 410, 411, 412, 414, 446, 447, 536, 538, 545, 557, 558, 559, 560, 606, 607, 630, 671, 677, 692, 709, 725, 734, 739, 742, 763, 798, 829, 839, 840, 841, 842, 843, 844, 845, 850, 861, 862, 881, 882, 885, 893, 896, 897, 904, 905, 988, 989, 991, 992, 993, 995, 996, 998, 999, 1001, 1002, 1003, 1007, 1009, 1012, 1013, 1015, 1019, 1023, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1049], "better_prob": 264, "between": [1, 25, 37, 43, 44, 47, 48, 50, 51, 52, 58, 70, 72, 73, 74, 75, 77, 78, 86, 93, 94, 99, 115, 123, 125, 126, 128, 134, 137, 140, 143, 144, 146, 149, 158, 167, 172, 173, 175, 180, 182, 183, 184, 185, 190, 194, 195, 197, 200, 201, 204, 207, 208, 209, 211, 212, 214, 224, 226, 229, 233, 238, 240, 243, 256, 258, 260, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 276, 277, 278, 281, 283, 286, 290, 291, 293, 294, 304, 309, 311, 316, 321, 328, 336, 340, 343, 347, 348, 349, 354, 355, 359, 360, 367, 372, 374, 376, 380, 381, 384, 385, 386, 387, 395, 398, 400, 401, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 425, 437, 438, 440, 441, 442, 443, 444, 447, 449, 450, 451, 453, 454, 455, 460, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 500, 512, 513, 519, 522, 525, 532, 533, 534, 535, 536, 537, 538, 539, 544, 545, 547, 548, 551, 552, 557, 558, 560, 561, 562, 563, 583, 587, 589, 590, 591, 592, 593, 594, 595, 597, 598, 599, 601, 603, 604, 605, 606, 607, 608, 611, 620, 627, 632, 633, 634, 639, 642, 645, 646, 647, 652, 653, 656, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 670, 676, 678, 679, 681, 684, 688, 690, 692, 694, 695, 696, 699, 701, 703, 704, 705, 707, 709, 710, 714, 715, 716, 717, 719, 724, 725, 726, 729, 730, 731, 734, 736, 737, 743, 752, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 786, 787, 792, 793, 795, 796, 797, 798, 800, 801, 802, 803, 805, 809, 817, 818, 819, 820, 821, 829, 830, 832, 834, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858, 861, 862, 868, 871, 872, 874, 875, 877, 878, 881, 882, 883, 885, 890, 893, 894, 898, 904, 905, 909, 912, 913, 914, 915, 917, 945, 957, 958, 968, 988, 991, 993, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1019, 1020, 1029, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048], "bewar": 413, "beyond": [43, 64, 208, 209, 258, 359, 361, 371, 372, 384, 402, 411, 729, 730, 738, 783, 784, 787, 909, 996, 1000, 1009, 1014, 1037], "beyst": 1043, "bezuidenhout": 1042, "bf5fff": 118, "bfg": [300, 610, 611, 648, 649, 658, 669, 672, 674, 680, 687, 1002, 1003, 1044], "bgm": 797, "bharat": [408, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048], "bharathi": 1040, "bhardwaj": [1036, 1037], "bhargav": 1035, "bhaskaran": [1036, 1037], "bhat": [1042, 1044, 1045, 1046], "bhattacharya": 1037, "bhattarai": 1039, "bhavika": 1041, "bhoomika": 1044, "bhsu": 1033, "bhtsne": [692, 1036], "bi": [88, 412], "bia": [43, 64, 66, 109, 122, 133, 141, 146, 149, 180, 183, 185, 190, 191, 193, 269, 299, 340, 343, 355, 367, 386, 402, 406, 410, 411, 414, 522, 554, 557, 558, 606, 607, 614, 642, 648, 649, 658, 659, 669, 670, 680, 861, 862, 877, 879, 883, 889, 890, 892, 893, 894, 895, 913, 922, 994, 995, 998, 999, 1003, 1004, 1007, 1013, 1020], "bianca": 64, "bianp": 378, "bias": [48, 113, 123, 146, 153, 182, 183, 185, 269, 367, 389, 402, 411, 522, 547, 860, 884, 895, 994, 998, 1007, 1013, 1015], "bibhash": [1039, 1040], "bibl": 348, "bibliograph": 372, "bibtex": 0, "bic": [1, 180, 189, 195, 196, 197, 203, 214, 413, 499, 651, 653, 654, 655, 656, 798, 865, 884, 988, 998, 1020, 1029, 1036, 1042, 1043], "bic_criterion": 196, "bicker": 1039, "biclust": [1, 5, 59, 102, 327, 329, 347, 348, 349, 412, 419, 446, 448, 450, 485, 509, 511, 590, 719, 795, 999, 1020, 1024, 1025, 1031, 1035], "bicluster_ncut": 57, "biclustermixin": 1, "biclusters_": [58, 59, 419, 448, 450], "bidu": [1042, 1043], "biernat": 1041, "big": [43, 79, 93, 95, 212, 227, 243, 255, 360, 372, 378, 387, 406, 412, 416, 536, 559, 560, 562, 563, 806, 828, 839, 840, 841, 842, 843, 1019, 1023, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "bigg": [414, 619], "bigger": [47, 75, 93, 219, 264, 302, 340, 345, 348, 358, 360, 412, 435, 436, 506, 536, 850, 1025], "biggest": [404, 407, 409, 440], "biggest_inertia": [404, 440], "biggio": 1040, "bigram": [265, 412, 587, 588, 590], "bigram_vector": 412, "bijil": 1043, "bike": 1006, "bike_shar": 43, "bike_sharing_data_fil": 52, "bike_sharing_demand": [43, 184], "bilbro": 1036, "bill": [1039, 1040], "billaud": 1037, "billi": 1033, "billing": [1032, 1033, 1034], "billion": 1023, "bimod": [308, 410], "bin": [1, 43, 62, 64, 66, 86, 107, 136, 140, 207, 237, 243, 258, 270, 289, 304, 305, 306, 307, 308, 310, 311, 370, 380, 390, 402, 410, 411, 435, 436, 445, 458, 559, 560, 603, 867, 869, 883, 950, 1037, 1038, 1039, 1043, 1047, 1048], "bin_cent": [86, 207], "bin_edg": 86, "bin_edges_": [86, 305, 869], "bin_seed": [79, 96, 445, 458, 1040], "binar": [1, 36, 271, 273, 274, 364, 366, 400, 754, 839, 868, 869, 871, 875, 877, 885, 888, 999, 1001, 1025, 1043, 1045, 1049], "binari": [1, 30, 47, 53, 62, 64, 138, 140, 150, 152, 155, 160, 175, 183, 188, 200, 201, 202, 207, 214, 227, 234, 243, 246, 258, 261, 262, 265, 267, 273, 278, 281, 288, 322, 336, 340, 354, 355, 366, 367, 368, 376, 377, 386, 390, 398, 401, 402, 403, 404, 411, 412, 414, 434, 435, 436, 449, 484, 498, 506, 507, 518, 521, 547, 548, 551, 553, 557, 559, 564, 565, 566, 580, 587, 588, 590, 592, 593, 601, 610, 627, 628, 629, 630, 631, 632, 633, 658, 659, 666, 668, 673, 674, 675, 676, 700, 703, 707, 708, 709, 712, 713, 715, 718, 720, 722, 727, 729, 730, 734, 735, 738, 739, 740, 741, 743, 782, 783, 784, 787, 788, 789, 794, 796, 799, 800, 801, 803, 804, 805, 806, 814, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 839, 850, 860, 871, 875, 877, 885, 888, 904, 906, 909, 920, 963, 989, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1009, 1010, 1011, 1013, 1014, 1015, 1026, 1030, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1043, 1044, 1046, 1047, 1049], "binary_crossentropi": 1043, "binary_eros": 53, "binary_onli": [1039, 1040], "binarytre": [849, 1033, 1037, 1041], "bincount": [386, 408, 555, 559, 562, 658, 659, 666, 668, 674, 675, 676, 904, 906, 909, 912, 914, 935, 936, 1036], "bind": [390, 1018, 1029, 1036, 1037], "binder": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 351, 352, 353, 354], "binesh": [1045, 1046], "binet": [1039, 1044], "bing": [1035, 1036], "bingham": 1011, "binned_numer": [207, 224], "binom": 995, "binomi": [145, 148, 411, 551, 557, 559, 995, 1043, 1046], "bio": 267, "biocsklearn": 1018, "bioinformat": [628, 989], "biola": [1047, 1048], "biologi": 50, "biometrika": [880, 892], "biostatist": [406, 475], "bipartit": [401, 450, 509, 1004], "biprateep": 1041, "birch": [1, 71, 79, 97, 180, 317, 361, 386, 443, 446, 510, 1020, 1024, 1025, 1033, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1048], "birch_model": 77, "bird": [581, 718, 754, 999], "birodkar": [1034, 1035, 1037], "bischl": 366, "bisect": [1, 71, 75, 90, 91, 92, 93, 94, 176, 180, 260, 440, 444, 510, 1020, 1043], "bisect_km": 317, "bisect_mean": 440, "bisecting_strategi": [404, 440], "bisectingkmean": [1, 78, 404, 444, 1043, 1044, 1045], "bisector": 70, "bishop": [530, 532, 539, 741, 797, 995, 1000, 1014], "bisht": 1049, "bistochast": [401, 448], "biswadip": 1039, "biswaroop": 1044, "bit": [43, 52, 64, 86, 109, 123, 209, 281, 304, 336, 348, 355, 359, 367, 376, 386, 390, 392, 411, 412, 581, 588, 658, 834, 930, 931, 996, 1000, 1017, 1029, 1032, 1035, 1037, 1038, 1041, 1042, 1043, 1046, 1047], "bithash": 640, "bithash_": 640, "bitli": 1023, "bitmap": 369, "bittarello": 1042, "bjerr": 1037, "bla": [359, 360, 373, 378, 380, 778, 1029, 1037, 1038, 1040, 1041, 1047], "black": [43, 48, 49, 50, 52, 63, 70, 79, 82, 88, 89, 111, 112, 118, 120, 122, 142, 146, 158, 161, 167, 168, 172, 173, 176, 179, 183, 184, 190, 196, 198, 199, 201, 207, 208, 209, 213, 215, 218, 219, 224, 233, 243, 249, 252, 261, 289, 299, 300, 302, 330, 345, 352, 353, 372, 404, 411, 414, 553, 554, 631, 1005, 1006, 1015], "blackberri": 310, "blackburn": [1032, 1035], "blackd0t": 1039, "blair": [45, 367], "blakeflei": 1035, "blame": 372, "blanc": 310, "blanchard": [1033, 1034], "blank": [93, 377, 989, 1015], "blazestorm001": 1048, "bldgtype": 143, "bleck": 1049, "bleed": 1023, "blei": [409, 534, 797], "bleich": [184, 1006], "bleki": 1041, "blend": [142, 154, 310, 386, 408], "bli": [360, 384], "blind": [119, 122, 180, 202, 206, 347, 409, 531, 539, 1020], "blindli": 63, "blink": 336, "blis_num_thread": 360, "blob": [1, 61, 69, 70, 77, 79, 90, 95, 97, 380, 404, 445, 510], "blobbi": 66, "blobs_param": 233, "block": [1, 289, 304, 317, 323, 367, 369, 372, 377, 380, 386, 401, 404, 407, 410, 449, 450, 459, 470, 476, 477, 485, 486, 509, 511, 695, 948, 1002, 1004], "block_siz": [470, 476, 477, 1033], "blocker": [376, 1047], "blocknum": 47, "blockwis": [401, 995], "blog": [317, 359, 372, 378, 380, 387, 1040], "blogpost": 377, "blondel": [0, 394, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1042], "blood": [163, 234, 369], "bloom": [381, 965], "blown": 339, "blue": [46, 48, 52, 58, 59, 63, 66, 70, 111, 118, 120, 134, 137, 141, 148, 149, 151, 154, 155, 161, 172, 174, 188, 191, 196, 198, 205, 229, 237, 257, 258, 259, 263, 264, 300, 309, 314, 320, 327, 353, 369, 404, 409, 1046], "blueski": 376, "blueviolet": [220, 290, 335], "blum": 1036, "blyston": [1039, 1040], "bmaisonn": 1041, "bmalezieux": 1042, "bmatrix": [401, 991], "bmc": 1009, "bme": [1047, 1048], "bmi": [163, 196, 198, 244, 369, 1007], "bmreinig": 1043, "bmug": 57, "bmva": 671, "bmvc": [671, 995], "bo": [63, 1041], "board": 0, "boat": 318, "bob": [1030, 1036], "bobyrev": 1036, "boca": 995, "bodega": 310, "bodenhof": [401, 719], "bodi": [47, 102, 163, 244, 318, 369], "body_bow": 102, "body_stat": 102, "boe": 51, "boechat": 1036, "boenisch": 1040, "boerner": 1043, "boersma": 1035, "bogazici": 369, "bogdan": 1029, "boggavarapu": 1041, "bohl": [1041, 1043], "bohn\u00e9": 1042, "boil": [134, 375, 386, 406], "boilerpl": [240, 374, 1023], "boisberrang": [0, 393, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "bold": [93, 146, 198, 204, 372], "boll": [995, 1049], "bolleddula": [1047, 1048], "bolmier": [1040, 1041, 1045], "boltzmann": [1, 66, 105, 180, 199, 201, 221, 298, 500, 658, 713, 830, 860, 861, 862, 864, 890, 1020, 1024, 1025, 1031], "bommarito": [1032, 1033], "bonald": 1044, "bonami": 1049, "bone": [219, 345], "bonei": [1048, 1049], "bonferroni": 264, "bonu": [224, 370, 372], "bonusmalu": [207, 224], "boo": [163, 369], "book": [102, 440, 444, 446, 834, 839, 843, 995, 996, 997, 1000, 1041], "booktitl": 0, "bool": [82, 99, 112, 179, 224, 354, 372, 374, 416, 417, 418, 419, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 456, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 506, 507, 508, 509, 510, 511, 512, 513, 517, 520, 521, 522, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 573, 580, 581, 582, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 697, 698, 700, 702, 703, 707, 708, 709, 711, 712, 713, 714, 726, 727, 728, 729, 730, 731, 738, 741, 742, 754, 756, 761, 763, 767, 769, 774, 778, 782, 783, 784, 785, 787, 789, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 814, 818, 819, 822, 823, 824, 827, 828, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 926, 928, 929, 930, 931, 941, 942, 943, 948, 949, 962, 963, 965, 969, 971, 979, 984, 985, 986, 987, 989, 1038, 1041, 1042], "bool_": 209, "boolean": [1, 132, 240, 354, 367, 372, 374, 381, 405, 411, 412, 413, 461, 559, 560, 580, 581, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 606, 607, 629, 632, 633, 636, 649, 671, 699, 778, 833, 839, 860, 867, 887, 921, 926, 982, 989, 995, 1001, 1006, 1009, 1015, 1029, 1032, 1034, 1035, 1036, 1038, 1039, 1040, 1042, 1043, 1044, 1047], "boom": 1047, "boost": [1, 13, 46, 52, 66, 103, 133, 134, 135, 138, 139, 141, 151, 154, 156, 174, 180, 185, 186, 191, 209, 214, 265, 300, 305, 308, 310, 317, 320, 373, 378, 386, 403, 413, 445, 463, 464, 487, 494, 499, 518, 551, 552, 557, 558, 559, 560, 562, 563, 632, 633, 634, 635, 741, 742, 748, 750, 790, 800, 803, 804, 805, 821, 827, 830, 865, 877, 878, 995, 999, 1018, 1020, 1021, 1025, 1029, 1030, 1032, 1034, 1035, 1036, 1038, 1042], "booster": 1034, "boosting_error": 134, "boostingcolumntransform": 154, "boostingdecis": 411, "booth": 1036, "bootstrap": [63, 137, 138, 141, 145, 150, 154, 156, 178, 185, 245, 267, 276, 315, 320, 408, 411, 552, 553, 554, 555, 556, 561, 562, 563, 936, 969, 995, 1029, 1030, 1032, 1034, 1037, 1039, 1042], "bootstrap_featur": [411, 553, 554], "bootstrap_indic": 267, "borchmann": 1044, "border": [443, 1039], "borderaxespad": [111, 263], "borderpad": 352, "borderwidth": 140, "borg": [690, 694, 996], "borgn": 1042, "bori": [1033, 1041, 1045], "borja": 1033, "born": 1035, "borovec": 1043, "borovikova": 1040, "bosch": 1042, "bossan": [1041, 1043, 1044, 1045, 1047], "bossch": [0, 394, 1036, 1037, 1038, 1042], "boston": 1023, "bot": [376, 1004, 1043, 1046, 1047, 1048, 1049], "botelho": 1041, "both": [30, 43, 44, 46, 48, 49, 52, 54, 58, 62, 63, 64, 66, 70, 77, 87, 88, 97, 103, 109, 111, 115, 116, 125, 127, 132, 137, 140, 141, 143, 144, 149, 153, 154, 156, 158, 159, 161, 163, 167, 174, 176, 182, 183, 184, 185, 190, 194, 195, 196, 198, 201, 205, 207, 208, 209, 211, 212, 213, 214, 224, 229, 230, 239, 240, 241, 249, 250, 251, 252, 253, 254, 258, 263, 264, 265, 266, 267, 270, 271, 273, 275, 277, 284, 296, 304, 308, 309, 313, 315, 319, 322, 327, 328, 333, 338, 340, 347, 348, 349, 354, 355, 359, 360, 361, 365, 366, 367, 372, 374, 376, 378, 379, 381, 384, 385, 386, 387, 390, 395, 398, 400, 401, 402, 404, 405, 406, 407, 408, 409, 411, 412, 414, 417, 434, 443, 449, 459, 465, 472, 479, 480, 481, 482, 485, 486, 494, 495, 498, 500, 503, 505, 506, 507, 532, 536, 538, 545, 549, 553, 554, 555, 562, 563, 564, 565, 576, 587, 588, 590, 596, 606, 607, 627, 632, 633, 643, 657, 658, 659, 672, 674, 676, 678, 687, 699, 704, 712, 716, 729, 730, 731, 736, 738, 757, 761, 767, 783, 784, 787, 788, 789, 795, 803, 804, 806, 823, 833, 861, 862, 876, 878, 880, 892, 897, 902, 904, 905, 912, 914, 921, 934, 939, 949, 963, 973, 987, 988, 989, 990, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1009, 1012, 1013, 1014, 1015, 1018, 1019, 1023, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "botstein": [628, 989], "bottleneck": [359, 378, 411, 445, 861, 862], "bottom": [45, 47, 51, 53, 54, 70, 72, 74, 77, 79, 84, 86, 95, 97, 118, 144, 152, 156, 207, 217, 233, 249, 251, 252, 255, 261, 264, 275, 289, 304, 326, 328, 336, 372, 402, 404, 410, 586, 916, 993, 995, 999, 1007, 1019], "bottom_h": 304, "bottou": [676, 677, 678, 1003, 1013], "bou": [1044, 1045], "boucaud": 1037, "boucher": 1036, "bouckaert": 264, "boukhobza": 1047, "boulard": 1046, "bouldin": [1, 725], "bouleng": [1048, 1049], "boulogn": 1032, "boulton": 1049, "boun": 369, "bound": [1, 64, 88, 171, 173, 175, 180, 209, 224, 229, 232, 263, 376, 379, 404, 409, 412, 414, 415, 441, 486, 500, 510, 521, 534, 561, 594, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 632, 635, 637, 650, 654, 658, 677, 705, 735, 788, 797, 798, 844, 845, 881, 893, 896, 897, 898, 906, 907, 908, 911, 934, 995, 998, 999, 1002, 1011, 1013, 1014, 1016, 1020, 1037, 1040, 1041, 1043, 1049], "bound_": 534, "boundari": [1, 50, 53, 62, 63, 64, 67, 70, 91, 93, 136, 142, 152, 168, 169, 171, 180, 184, 189, 208, 221, 233, 238, 241, 267, 279, 281, 292, 294, 295, 297, 299, 304, 306, 309, 324, 329, 331, 332, 333, 334, 335, 336, 338, 342, 344, 345, 352, 368, 402, 411, 412, 414, 447, 453, 502, 510, 534, 547, 548, 587, 588, 590, 631, 658, 735, 761, 800, 833, 846, 852, 854, 855, 856, 879, 883, 900, 901, 906, 908, 909, 934, 993, 995, 1000, 1002, 1005, 1009, 1012, 1013, 1014, 1020, 1029, 1031, 1033, 1042, 1043, 1044, 1046, 1049], "bounding_ax_": [379, 632], "boundscheck": [360, 373], "bourassa": 411, "bourbeau": [1036, 1037, 1038], "bourboux": 1040, "bourguignat": 1034, "bournhonesqu": 1039, "bousquet": 900, "boutili": 1011, "boutsidi": 409, "bow": 405, "bown": 1035, "bowyer": 1047, "box": [43, 49, 88, 184, 185, 227, 281, 304, 308, 379, 409, 411, 510, 553, 554, 880, 892, 916, 918, 999, 1000, 1006, 1009, 1015, 1037, 1045], "boxcox": 1048, "boxplot": [49, 111, 147, 183, 186, 278, 313], "boxplot_runtim": 49, "boxstyl": [48, 306], "boy": 1043, "boyd": 995, "boyl": [1046, 1047], "boyuan": [1033, 1034, 1035], "bp": [49, 147, 163, 196, 198, 369, 1007], "bpo": 878, "br": 136, "bracket": [372, 995], "bradi": 1036, "bradlei": [163, 369, 995], "bradshaw": [1032, 1033, 1036], "bradypu": [50, 297, 367, 496], "bradypus_variegatus_0": 50, "brain": 366, "branch": [359, 370, 372, 375, 376, 404, 411, 439, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 912, 913, 914, 915, 917, 1002, 1006, 1015], "branching_factor": 439, "brand": [387, 390], "brandon": [1035, 1036, 1043, 1044], "brandt": 1040, "brandyn": 1029, "brault": 1036, "braun": 1037, "bravi": 1035, "braycurti": [447, 454, 699, 778, 779, 780, 1002], "braycurtisdist": 699, "brc": [404, 439], "brdav": [1047, 1048], "bre": [1, 634, 1015], "bread": 1023, "breadth": [844, 845, 849, 1023, 1031], "breadth_first": [844, 845, 849], "break": [1, 55, 74, 80, 102, 112, 180, 198, 213, 240, 251, 281, 316, 326, 331, 347, 349, 372, 376, 378, 385, 404, 466, 510, 639, 774, 778, 781, 797, 877, 884, 889, 906, 909, 995, 998, 1007, 1009, 1014, 1019, 1020, 1029, 1030, 1036, 1037, 1039, 1041, 1045], "break_ti": [245, 246, 262, 264, 315, 344, 906, 909, 1014, 1039], "breakdown": [111, 112, 223, 679, 995], "breakdown_": 679, "breast": [1, 163, 365, 498, 1007, 1025, 1034], "breast_canc": 328, "breast_cancer_data": 163, "brecht": 641, "bredin": 1033, "bredlund": 1048, "breiman": [185, 408, 411, 514, 515, 516, 553, 554, 562, 563, 634, 912, 913, 1007, 1015], "brekk": 1044, "brendan": [73, 437, 451, 1045, 1046, 1047], "brenden": 1043, "brenner": 999, "breno": [1036, 1037], "brent": [1033, 1037, 1038], "brentfagan": 1038, "bresson": [1048, 1049], "brett": [1032, 1034, 1035, 1036, 1037, 1044], "brettingen": 1035, "breuer": 1040, "breunig": [404, 447, 454, 850, 1005], "breve": 1045, "brevin": [1045, 1046], "brew": [145, 370, 390], "brian": [0, 394, 708, 999, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1039, 1040, 1042, 1043], "brice": [1041, 1042], "bridg": [384, 996], "brief": [372, 997], "briefli": [273, 371, 385, 411, 988, 1039], "brier": [1, 61, 62, 63, 64, 402, 709, 1049], "brier1950": 999, "brier_scor": 61, "brier_score_loss": [1, 61, 62, 63, 165, 402, 999, 1037, 1038, 1039, 1047, 1049], "brigata": 369, "bright": 336, "brighter": 175, "brigi": [1040, 1041], "brigitta": [1039, 1040, 1041, 1045, 1047, 1048], "bring": [183, 304, 409, 676, 678, 996, 1023], "british": 412, "brittl": [74, 404], "broad": [372, 386, 1018], "broadcast": 627, "broader": [306, 995, 1022], "broadli": [386, 404], "brocchini": 1041, "brochart": 1046, "brockherd": 1031, "brodersen": 708, "broke": 1036, "broken": [390, 408, 598, 599, 635, 720, 926, 999, 1015, 1032, 1036, 1037, 1038, 1040, 1043], "brook": [1032, 1033, 1041], "brought": 182, "brown": [50, 118, 297, 367, 496, 628, 989, 1034, 1036, 1037, 1038, 1041], "browser": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 351, 352, 353, 354, 372, 380, 1009, 1046], "broyden": 995, "brr": 190, "brr_poli": 190, "brr_score": 190, "bruce": [1039, 1040], "brucher": [0, 394, 1029], "brummitt": [1036, 1037], "brunak": 743, "brunner": 1033, "bruno": [1040, 1041, 1042, 1047], "brutal": 336, "brute": [284, 384, 399, 408, 415, 441, 443, 447, 454, 632, 633, 688, 689, 844, 845, 846, 847, 848, 850, 852, 854, 855, 856, 1006, 1025, 1033, 1037, 1041, 1044, 1045, 1046, 1047], "bry": 215, "bryan": [1029, 1032, 1038, 1039, 1042], "br\u00f6mmel": [1043, 1044], "br\u00fblade": 310, "bsa": 764, "bsas_in_radian": 764, "bscikit": 1029, "bsd": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 313, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 351, 352, 353, 354, 378, 384], "bsh": 1044, "bsmtfinsf1": [143, 154], "bsmtfinsf2": 143, "bsmthalfbath": 143, "bsmtunfsf": 154, "bspline": 883, "bsplines_": [208, 883], "bsr": [930, 931, 1042], "bt": 412, "btol": [657, 672, 674], "buck": 627, "budarz": 1042, "buddha": 1034, "budget": [143, 839, 840, 841, 842, 843, 988], "bueno": 764, "buffer": [83, 1042, 1047], "buffer_mb": 1029, "bug": [240, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 370, 374, 375, 376, 377, 380, 384, 386, 1019, 1029, 1030, 1031, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "bugfix": [376, 690, 694, 1029, 1043], "buguen": 1029, "buhmann": 708, "build": [0, 1, 6, 16, 35, 43, 46, 55, 68, 78, 88, 100, 106, 124, 134, 142, 144, 151, 156, 160, 162, 177, 178, 180, 183, 214, 269, 272, 281, 283, 284, 301, 302, 305, 310, 311, 349, 355, 359, 360, 361, 368, 375, 376, 377, 378, 386, 390, 397, 404, 408, 411, 412, 439, 487, 499, 501, 522, 551, 552, 553, 554, 555, 556, 557, 558, 561, 562, 563, 564, 584, 585, 587, 588, 590, 627, 628, 630, 645, 691, 713, 714, 801, 805, 809, 818, 824, 826, 865, 882, 884, 912, 913, 914, 915, 917, 944, 948, 988, 989, 996, 999, 1003, 1005, 1009, 1014, 1015, 1018, 1019, 1020, 1022, 1023, 1029, 1032, 1034, 1035, 1036, 1038, 1041], "build_analyz": [412, 587, 588, 590, 1039], "build_preprocessor": [412, 587, 588, 590, 1039], "build_projection_oper": 53, "build_token": [57, 412, 587, 588, 590], "build_tool": [372, 376, 380], "builder": [47, 49, 343, 376], "built": [1, 25, 116, 132, 134, 135, 142, 144, 185, 214, 267, 281, 297, 313, 322, 352, 354, 359, 367, 370, 372, 373, 376, 378, 380, 381, 384, 385, 386, 390, 398, 404, 405, 408, 411, 413, 442, 501, 551, 552, 553, 554, 557, 558, 559, 560, 587, 588, 592, 596, 639, 640, 641, 642, 643, 646, 647, 652, 658, 660, 661, 662, 663, 672, 673, 674, 675, 681, 803, 804, 811, 835, 838, 844, 845, 914, 915, 953, 982, 995, 999, 1000, 1012, 1013, 1015, 1018, 1023, 1029, 1032, 1033, 1035, 1041, 1047], "builtin": 1014, "buitinck": [0, 394, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "bulk": [273, 415, 441], "bulk_benchmark": 49, "bulk_benchmark_estim": 49, "bulk_runtim": 49, "bull": [1036, 1048], "buluttekin": 1039, "bumblebe": 1042, "bump": 375, "bunch": [1, 50, 126, 240, 365, 366, 367, 461, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 505, 508, 513, 565, 566, 567, 568, 632, 633, 634, 863, 864, 912, 913, 914, 915, 957, 960, 1023, 1034, 1036, 1039, 1041, 1045], "bundl": [1037, 1038], "bupu": 184, "burden": [372, 876, 1019], "bureau": 367, "buri": 372, "burjek": 1029, "burk": [0, 356, 1044], "burkhart": 1049, "burn": [1036, 1037], "burovski": 1049, "burst": 999, "busch": [1037, 1038, 1040], "bush": [45, 367], "busi": [43, 207, 264, 273, 321, 380, 384, 403, 788, 995, 999, 1023], "business_metr": 258, "business_scor": 258, "bussonni": [1029, 1041], "butler": [471, 1032, 1040, 1041], "butlerdavi": 471, "butter": 1023, "button": [323, 372, 380], "butyugina": 1045, "buuren": [627, 989], "buzenet": [1044, 1045], "bv_bunch": 50, "bwignal": 1032, "by_kei": 274, "bypass": [403, 405, 598, 646, 652, 822, 912, 913, 914, 915, 1045], "byproduct": 230, "byrd": 658, "byron": 1041, "byte": [86, 412, 484, 501, 506, 507, 581, 587, 588, 590, 965, 1029, 1036, 1037, 1044, 1047], "bz2": [55, 506, 507], "bz2file": 55, "bzip2": 1029, "b\u00e9gude": 310, "c": [0, 1, 43, 45, 46, 47, 50, 51, 52, 57, 61, 62, 64, 66, 67, 70, 74, 75, 77, 78, 85, 89, 90, 92, 93, 94, 98, 103, 104, 106, 116, 118, 125, 126, 134, 136, 137, 139, 142, 143, 150, 152, 153, 155, 160, 163, 168, 169, 170, 171, 175, 188, 197, 199, 200, 201, 202, 204, 205, 215, 217, 218, 219, 220, 222, 223, 226, 228, 230, 231, 234, 235, 238, 239, 241, 245, 246, 247, 250, 252, 253, 254, 255, 257, 258, 259, 261, 262, 263, 264, 267, 269, 271, 273, 275, 278, 284, 287, 290, 292, 293, 294, 295, 297, 299, 300, 302, 304, 305, 306, 309, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 327, 330, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 347, 352, 353, 359, 360, 366, 368, 369, 370, 372, 373, 375, 377, 380, 381, 384, 390, 391, 395, 401, 402, 404, 405, 406, 407, 408, 409, 411, 413, 417, 434, 439, 440, 443, 444, 446, 456, 465, 472, 521, 526, 532, 536, 538, 539, 545, 547, 548, 589, 606, 607, 610, 631, 639, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 670, 672, 673, 679, 685, 686, 688, 689, 692, 693, 708, 709, 714, 715, 718, 730, 731, 735, 741, 742, 758, 759, 800, 814, 823, 829, 831, 839, 840, 841, 842, 843, 844, 845, 851, 853, 860, 875, 877, 878, 879, 883, 885, 899, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 915, 919, 930, 931, 963, 988, 991, 992, 994, 995, 996, 997, 999, 1001, 1002, 1004, 1006, 1009, 1011, 1013, 1014, 1015, 1018, 1023, 1026, 1029, 1030, 1032, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1045, 1047, 1048], "c0": [143, 236, 310], "c1": [98, 143, 175, 236, 310], "c2": [98, 143, 175, 236, 310], "c22": 318, "c26": 318, "c3": [98, 143, 310], "c4": [98, 310, 1021, 1025], "c5": [98, 1021, 1025], "c56poni": 1039, "c6": 98, "c99": 1018, "c_": [50, 62, 63, 64, 91, 111, 121, 142, 145, 151, 152, 169, 205, 219, 222, 233, 290, 307, 309, 330, 336, 344, 404, 659, 714, 715, 718, 999], "c_0": [991, 997], "c_2": 404, "c_2d_rang": 336, "c_e": 404, "c_i": [404, 1002], "c_j": [404, 1004], "c_jh_j": 1004, "c_k": 547, "c_option": 104, "c_p": 995, "c_q": 404, "c_rang": 336, "c_scale": 343, "ca": [163, 369, 404, 439, 912, 913, 1011, 1015], "cabernet": 310, "cabin": 318, "cablevis": 51, "cabrera": 1039, "cach": [1, 52, 87, 99, 180, 265, 284, 285, 287, 292, 296, 322, 359, 360, 367, 374, 386, 438, 442, 447, 465, 483, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 500, 506, 507, 800, 846, 848, 864, 865, 902, 906, 907, 908, 909, 910, 983, 1002, 1014, 1020, 1032, 1036, 1037, 1038, 1039, 1041, 1042, 1044, 1045, 1047, 1048], "cache_path": 1002, "cache_s": [245, 246, 262, 264, 315, 465, 902, 906, 907, 908, 909, 910, 1014], "cached_pip": [104, 405], "cachedir": [87, 104, 381, 405], "caching_dir": 983, "caherrera": 1042, "cai": 1042, "caicedo": 1029, "cailean": [1047, 1048], "cainei": [1047, 1048], "caio": [1035, 1037, 1039], "caj": 51, "caje": 1030, "cal_clf": 63, "cal_clf_prob": 63, "cal_hous": 367, "cal_loss": 63, "calcot": 1042, "calcul": [1, 46, 69, 80, 92, 111, 132, 134, 138, 155, 179, 186, 211, 212, 223, 238, 240, 263, 264, 270, 273, 274, 279, 283, 334, 340, 341, 355, 359, 374, 379, 386, 395, 401, 402, 404, 408, 409, 411, 415, 435, 440, 441, 443, 445, 447, 448, 450, 452, 453, 468, 469, 475, 478, 534, 545, 561, 567, 596, 611, 620, 632, 633, 634, 644, 645, 646, 647, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 672, 673, 674, 675, 679, 681, 684, 688, 692, 707, 712, 716, 729, 730, 735, 736, 738, 744, 754, 764, 769, 771, 772, 773, 774, 778, 781, 783, 784, 787, 788, 789, 792, 793, 795, 806, 807, 809, 825, 829, 842, 844, 845, 869, 882, 883, 884, 890, 894, 904, 905, 936, 950, 991, 993, 995, 996, 997, 999, 1001, 1002, 1003, 1007, 1009, 1012, 1014, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "cald": 899, "caleb": 1041, "calibr": [1, 52, 66, 137, 149, 155, 201, 224, 236, 258, 264, 266, 386, 395, 434, 435, 436, 510, 513, 562, 567, 609, 658, 659, 676, 709, 729, 741, 784, 787, 788, 799, 822, 830, 842, 901, 904, 938, 988, 995, 999, 1012, 1014, 1020, 1021, 1025, 1026, 1033, 1035], "calibrated_classifi": [63, 165], "calibrated_classifiers_": [63, 402, 434], "calibrated_clf": 434, "calibrated_df": [62, 64], "calibrated_forest": 988, "calibrated_scor": 165, "calibratedclassifiercv": [1, 61, 62, 63, 165, 355, 386, 395, 402, 676, 799, 822, 988, 1014, 1033, 1035, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "calibratedclassifiercvifit": 63, "calibration_curv": [1, 402, 434, 435, 1038, 1043, 1047], "calibration_displai": [62, 64], "calibrationdisplai": [1, 62, 64, 66, 402, 436, 938, 1042, 1043, 1047, 1048], "california": [1, 144, 175, 178, 179, 304, 310, 315, 365, 369, 487, 1025], "calinski": [1, 710, 1035], "calinski_harabasz_scor": [1, 404, 1037], "calinski_harabaz_scor": [1035, 1037], "cali\u0144ski": 404, "call": [52, 53, 55, 80, 83, 87, 103, 118, 132, 139, 145, 160, 165, 167, 171, 173, 175, 182, 184, 196, 201, 207, 208, 211, 224, 240, 244, 246, 247, 258, 264, 265, 273, 277, 279, 281, 284, 286, 309, 311, 315, 316, 322, 323, 347, 348, 349, 354, 359, 360, 361, 367, 372, 373, 374, 377, 378, 379, 380, 381, 384, 385, 386, 387, 390, 395, 400, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 414, 416, 427, 437, 440, 443, 444, 446, 447, 448, 449, 450, 451, 454, 457, 459, 461, 462, 465, 466, 471, 479, 480, 481, 485, 488, 490, 493, 495, 501, 506, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 576, 581, 582, 587, 588, 590, 596, 601, 606, 607, 609, 610, 611, 614, 620, 627, 628, 629, 630, 631, 632, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 689, 690, 691, 692, 693, 694, 695, 697, 699, 700, 701, 704, 732, 742, 755, 771, 774, 778, 779, 780, 781, 793, 797, 798, 800, 801, 802, 803, 804, 805, 806, 812, 814, 815, 816, 817, 818, 819, 820, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 849, 850, 853, 855, 860, 861, 862, 863, 864, 867, 868, 869, 871, 873, 874, 876, 881, 884, 885, 888, 893, 894, 895, 896, 897, 901, 904, 905, 906, 907, 909, 910, 913, 915, 923, 925, 937, 941, 947, 948, 957, 958, 960, 966, 967, 969, 972, 982, 987, 988, 989, 991, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1007, 1009, 1011, 1012, 1014, 1015, 1018, 1023, 1025, 1026, 1029, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "callabl": [1, 254, 263, 268, 321, 386, 403, 408, 411, 412, 413, 415, 416, 438, 440, 441, 442, 443, 444, 446, 447, 449, 454, 456, 457, 461, 462, 463, 464, 529, 531, 533, 535, 537, 543, 544, 555, 556, 557, 558, 559, 560, 562, 563, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 610, 611, 620, 628, 630, 634, 639, 643, 659, 671, 673, 675, 688, 691, 692, 696, 711, 719, 730, 732, 742, 771, 774, 778, 779, 780, 781, 792, 793, 800, 803, 804, 806, 814, 822, 823, 826, 827, 828, 829, 831, 844, 845, 846, 847, 848, 850, 852, 853, 854, 855, 856, 868, 877, 899, 900, 906, 907, 908, 909, 910, 941, 942, 943, 961, 967, 982, 988, 1009, 1029, 1033, 1036, 1037, 1038, 1039, 1041, 1043, 1045, 1048], "callback": [529, 535, 537, 543, 544, 853, 941, 966, 1019, 1045, 1048], "callbl": 846, "calle": [1, 240, 958], "caller": [1, 240, 405, 646, 647, 652, 660, 661, 662, 681, 894, 895, 957, 958, 974, 975, 976, 1038], "callgrin": 378, "callgrind": 375, "calm": 51, "caltech": 347, "calvin": [1032, 1033], "calvo": [1037, 1038], "cambridg": [367, 409, 589, 839, 843, 995, 997, 1001], "came": 998, "camera_ind": 53, "camil": [1037, 1045, 1046, 1048, 1049], "camila": 1039, "camilaagw": 1039, "camilo": 1035, "campello": [404, 443], "campustrampu": 1036, "can": [0, 10, 19, 25, 37, 43, 44, 46, 47, 48, 49, 51, 52, 54, 57, 58, 61, 62, 63, 64, 66, 67, 68, 69, 72, 75, 77, 78, 80, 82, 86, 88, 89, 90, 91, 93, 94, 95, 96, 98, 102, 103, 104, 105, 109, 110, 111, 112, 113, 116, 121, 123, 124, 125, 126, 127, 129, 130, 132, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 162, 163, 165, 167, 172, 173, 174, 178, 179, 180, 182, 183, 184, 185, 186, 188, 190, 191, 192, 194, 196, 198, 200, 201, 202, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 222, 223, 224, 226, 227, 228, 233, 234, 235, 236, 237, 239, 240, 243, 244, 247, 249, 250, 251, 252, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 273, 275, 276, 277, 278, 279, 281, 283, 284, 286, 288, 289, 290, 291, 293, 300, 301, 302, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 326, 327, 329, 330, 333, 334, 336, 339, 340, 343, 347, 348, 349, 353, 354, 355, 359, 360, 361, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 380, 381, 385, 386, 387, 389, 390, 391, 392, 395, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 427, 429, 434, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 451, 453, 454, 455, 456, 458, 459, 461, 462, 463, 464, 465, 469, 479, 480, 481, 484, 494, 497, 501, 506, 507, 510, 519, 522, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 578, 579, 580, 581, 582, 583, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 605, 606, 607, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 630, 631, 632, 633, 634, 635, 638, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 687, 689, 691, 692, 693, 694, 695, 698, 699, 700, 701, 702, 704, 707, 709, 711, 712, 718, 720, 721, 722, 723, 724, 726, 727, 729, 730, 732, 733, 737, 738, 739, 740, 743, 746, 752, 755, 756, 757, 758, 759, 763, 779, 780, 782, 783, 784, 785, 787, 788, 789, 794, 795, 797, 798, 799, 800, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 814, 815, 816, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 854, 855, 856, 861, 862, 863, 864, 865, 867, 868, 869, 871, 872, 873, 877, 878, 879, 882, 883, 884, 889, 896, 897, 901, 902, 904, 905, 906, 907, 909, 910, 912, 913, 914, 915, 916, 917, 920, 921, 923, 924, 926, 928, 930, 934, 936, 945, 947, 948, 955, 957, 960, 963, 966, 969, 972, 979, 982, 983, 987, 988, 989, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1022, 1023, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "canberra": [447, 454, 699, 778, 779, 780, 1002], "canberradist": 699, "cancel": [411, 412, 763], "cancer": [1, 163, 365, 403, 498, 592, 593, 851, 1007, 1025, 1034], "candela": 369, "candid": [106, 254, 262, 265, 272, 315, 361, 372, 376, 404, 411, 445, 447, 800, 803, 804, 812, 814, 995, 1002, 1015, 1035], "candidate_idx": 263, "cannon": 1044, "cannot": [43, 52, 75, 89, 107, 113, 120, 125, 183, 184, 194, 207, 224, 240, 277, 304, 336, 343, 361, 371, 373, 378, 384, 386, 387, 392, 398, 400, 404, 405, 406, 408, 409, 411, 412, 414, 462, 519, 536, 537, 538, 541, 545, 609, 610, 613, 614, 615, 617, 619, 620, 622, 623, 625, 651, 655, 692, 702, 711, 717, 778, 803, 804, 851, 852, 854, 855, 856, 864, 865, 874, 875, 886, 928, 930, 931, 941, 988, 989, 993, 995, 996, 999, 1000, 1005, 1009, 1014, 1015, 1019, 1023, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "canon": [1, 51, 386, 402, 411, 479, 480, 482, 768, 1019, 1021, 1025], "canonic": 386, "cant": [1046, 1047], "cantor": [628, 989], "canuma": 1042, "canva": 51, "cao": 404, "cap": [401, 404, 755, 999, 1038], "capabl": [88, 89, 116, 149, 172, 211, 230, 374, 386, 390, 1000, 1003, 1014, 1015, 1023, 1029, 1038, 1046], "capac": [149, 167, 185], "capit": [49, 62, 320, 494, 806, 823], "capitain": 1047, "cappion": [692, 996], "cappuzzo": 1046, "capsiz": 328, "caption": 102, "captur": [1, 43, 48, 51, 52, 72, 74, 116, 146, 151, 158, 172, 183, 190, 194, 201, 207, 211, 255, 277, 283, 314, 336, 340, 380, 404, 411, 412, 413, 569, 587, 588, 590, 850, 967, 999, 1004, 1012, 1016, 1041], "car": 207, "carbal": [1046, 1049], "card": 1037, "cardin": [72, 141, 147, 185, 186, 310, 311, 319, 404, 411, 460, 679, 877, 878, 885, 999, 1000, 1007, 1009, 1043, 1044], "cardiotocogram": 243, "care": [47, 88, 147, 183, 258, 281, 340, 359, 361, 376, 378, 384, 386, 387, 398, 403, 404, 406, 412, 434, 457, 466, 640, 658, 659, 666, 667, 668, 676, 677, 678, 695, 904, 996, 1014, 1023, 1026, 1045], "carefulli": [278, 359, 402, 409, 1014], "carei": [1032, 1033, 1034, 1035, 1036, 1048], "carett": 1036, "cari": 1041, "carl": [172, 414, 610, 611, 614, 619, 622], "carla": 1045, "carlo": [0, 238, 362, 411, 414, 611, 641, 642, 991, 1004, 1029, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048], "carlson": 1036, "carlsson": 1032, "carmen": 310, "carnegi": 899, "caro": 1034, "carodorum": 310, "carol": [1035, 1036], "carolin": 1003, "caro\u00e7o": 1048, "carrascosa": [1023, 1033], "carre\u00f1o": 1044, "carri": [51, 67, 134, 258, 264, 267, 272, 277, 300, 306, 349, 387, 412, 555, 556, 557, 558, 562, 563, 564, 912, 913, 914, 915, 1023], "carrillo": 1034, "carsten": 1042, "cart": [1021, 1025], "carter": [1035, 1036, 1044, 1047, 1048], "cartesian": [103, 401, 633, 1002, 1044], "cartman_nabana": 1039, "cartograph": 188, "cartographi": 995, "caruana": [62, 64, 402, 434, 436], "carvaj": 1029, "casado": 1040, "casagrand": [1037, 1038], "casalegno": 1041, "cascad": 369, "case": [1, 30, 43, 46, 47, 52, 62, 64, 66, 70, 72, 82, 85, 88, 90, 94, 99, 103, 104, 112, 116, 125, 127, 137, 139, 140, 146, 147, 154, 155, 160, 162, 163, 165, 167, 174, 179, 183, 184, 186, 194, 195, 198, 200, 207, 208, 209, 211, 212, 214, 220, 222, 223, 224, 233, 237, 238, 239, 240, 243, 244, 254, 257, 258, 261, 263, 264, 265, 267, 270, 271, 273, 281, 284, 287, 291, 301, 304, 306, 309, 311, 313, 316, 321, 322, 340, 347, 348, 349, 353, 354, 355, 359, 360, 361, 366, 367, 372, 373, 374, 376, 377, 378, 379, 381, 384, 385, 386, 387, 390, 395, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 434, 437, 440, 441, 443, 444, 448, 450, 460, 461, 462, 464, 471, 494, 506, 507, 513, 537, 539, 540, 541, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 580, 581, 587, 590, 592, 593, 596, 601, 605, 608, 610, 611, 625, 627, 628, 630, 631, 632, 647, 648, 653, 656, 657, 658, 659, 661, 663, 666, 668, 669, 672, 674, 675, 676, 680, 682, 683, 684, 685, 686, 687, 699, 703, 708, 712, 718, 720, 721, 723, 726, 727, 728, 729, 730, 734, 735, 738, 742, 743, 745, 746, 748, 750, 753, 754, 756, 763, 778, 781, 783, 784, 785, 787, 788, 790, 794, 796, 798, 800, 803, 804, 806, 814, 818, 823, 824, 825, 826, 827, 828, 829, 831, 833, 841, 844, 845, 846, 847, 848, 850, 851, 852, 853, 854, 855, 856, 864, 871, 873, 874, 877, 878, 879, 882, 883, 884, 885, 888, 894, 895, 896, 897, 904, 906, 909, 912, 913, 919, 924, 926, 936, 942, 948, 949, 987, 988, 989, 991, 993, 994, 996, 997, 998, 1000, 1001, 1002, 1003, 1005, 1006, 1009, 1013, 1014, 1015, 1018, 1019, 1023, 1026, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "caselli": [1037, 1038], "cash": 995, "cashman": 1039, "casino": [1043, 1044], "caspersen": 1048, "cass": 1035, "cassi": 310, "cast": [50, 52, 86, 207, 227, 366, 387, 412, 494, 644, 645, 646, 652, 656, 657, 660, 661, 662, 663, 664, 665, 673, 675, 965, 1036, 1037, 1038, 1039, 1042, 1044, 1046, 1049], "castachick": 1040, "castello": 1033, "castor": 1040, "castro": [1048, 1049], "caswel": [1042, 1045], "cat": [51, 103, 184, 185, 243, 316, 317, 318, 319, 320, 321, 367, 412, 485, 581, 712, 718, 754, 783, 885, 999, 1009, 1038, 1039, 1041], "cat_column": 243, "cat_linear_processor": 154, "cat_proc": [235, 314], "cat_selector": 154, "cat_str": 57, "cat_tree_processor": 154, "catajara": 1039, "catalfo": 1037, "catalin": 642, "catastroph": [258, 311, 763, 1019], "catch": [79, 95, 301, 360, 380, 381], "catch_warn": [79, 95, 240, 300, 301], "categor": [1, 43, 103, 133, 139, 149, 154, 180, 183, 184, 185, 207, 224, 243, 245, 247, 258, 311, 316, 318, 319, 322, 361, 364, 366, 367, 377, 386, 400, 405, 412, 463, 464, 486, 487, 494, 503, 559, 560, 580, 581, 606, 607, 632, 633, 648, 658, 659, 669, 680, 827, 839, 840, 841, 842, 843, 865, 867, 871, 872, 875, 877, 878, 885, 899, 900, 921, 989, 995, 999, 1006, 1007, 1015, 1018, 1019, 1020, 1021, 1022, 1023, 1025, 1029, 1030, 1033, 1034, 1037, 1039, 1041, 1044, 1045, 1046, 1047, 1049], "categori": [1, 25, 57, 79, 95, 102, 103, 139, 143, 154, 183, 184, 185, 207, 214, 221, 235, 243, 245, 258, 265, 300, 301, 306, 310, 311, 314, 315, 318, 320, 329, 347, 348, 349, 366, 367, 381, 400, 404, 405, 411, 412, 414, 485, 494, 495, 501, 559, 560, 648, 658, 659, 669, 680, 743, 758, 759, 840, 877, 878, 885, 941, 942, 943, 989, 995, 996, 997, 1001, 1007, 1018, 1035, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048], "categorical_column": [43, 143, 183, 185, 243, 464], "categorical_columns_selector": 243, "categorical_columns_subset": 143, "categorical_crossentropi": [1039, 1043], "categorical_encod": 185, "categorical_featur": [43, 103, 143, 149, 151, 154, 184, 258, 310, 315, 316, 317, 318, 320, 323, 377, 384, 411, 559, 560, 632, 633, 1006, 1037, 1041, 1044, 1046, 1049], "categorical_preprocessor": [245, 310], "categorical_transform": 103, "categoricaldtyp": 384, "categoricalnb": [1, 839, 841, 842, 843, 1001, 1039, 1040, 1041, 1042, 1044, 1049], "categories_": [877, 878, 885, 1009, 1037, 1044], "categoris": [941, 943], "category_1_fold": 501, "category_2_fold": 501, "category_count_": 840, "category_s": 348, "caterpillar": 51, "cathi": [1033, 1039], "catindex": 184, "catplot": 254, "caught": [353, 372, 380, 398], "caus": [43, 62, 64, 146, 168, 183, 207, 211, 212, 224, 283, 311, 340, 349, 355, 370, 377, 402, 404, 409, 410, 412, 414, 440, 444, 446, 456, 507, 530, 581, 588, 610, 611, 778, 839, 840, 841, 843, 868, 877, 879, 882, 883, 930, 931, 989, 995, 999, 1007, 1009, 1012, 1019, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1045, 1046, 1047, 1048], "causal": [180, 181, 204, 657, 785, 830, 1020], "causat": 183, "caution": [183, 258, 376, 437, 451, 1037], "cautiou": 1036, "caveat": [408, 413, 414], "cawlei": [269, 999], "cax": [66, 170, 275], "ca\u00f1ardo": 1032, "cb": [170, 237, 253], "cbar_ax": 275, "cbar_kw": [190, 194], "cc": 370, "cc18": 366, "cc_home": [912, 913], "cca": [1, 241, 407, 480, 482, 1000, 1033, 1037, 1038, 1039, 1041, 1043, 1047], "ccat": 367, "ccf2002": 991, "cclauss": 1037, "cco": 347, "ccp_alpha": [63, 141, 154, 156, 185, 245, 276, 313, 315, 320, 351, 353, 354, 555, 556, 557, 558, 562, 563, 912, 913, 914, 915, 1015, 1039], "ccp_path": [912, 913, 914, 915], "cd": [51, 120, 163, 369, 370, 372, 376, 378, 409, 468, 469, 475, 529, 535, 537, 538, 541, 543, 544, 545, 995, 1034, 1044], "cdef": 373, "cdf": 264, "cdist": 1042, "cdivis": 373, "cdot": [264, 340, 401, 404, 409, 410, 414, 614, 615, 619, 622, 623, 870, 991, 993, 999, 1003, 1009], "cdrig": 1043, "cdt": 57, "cea": [839, 1001], "ceballo": 1043, "ceder": [788, 999], "ceethinwa": [1041, 1042], "ceh": 1044, "ceil": [149, 243, 555, 556, 557, 558, 561, 562, 563, 564, 593, 671, 803, 804, 912, 913, 914, 915, 1013], "celelibi": 1038, "celeo": 1033, "celeux": 526, "cell": [50, 51, 58, 63, 68, 103, 104, 139, 141, 150, 151, 154, 155, 156, 160, 163, 172, 183, 184, 185, 192, 234, 235, 236, 240, 244, 245, 246, 247, 254, 258, 262, 263, 264, 265, 271, 276, 278, 297, 302, 310, 314, 315, 317, 318, 320, 323, 327, 353, 354, 369, 377, 692, 999, 1000, 1035, 1043], "cellular": 53, "celsiu": [184, 1006], "cemlyn": 1047, "cen": 743, "censor": 1018, "censu": 367, "center": [0, 1, 36, 43, 46, 47, 48, 53, 61, 63, 69, 70, 72, 73, 75, 77, 78, 82, 83, 86, 88, 89, 92, 93, 94, 96, 97, 112, 125, 129, 144, 145, 146, 147, 161, 163, 179, 184, 192, 201, 202, 203, 207, 208, 217, 218, 229, 230, 233, 234, 243, 249, 252, 253, 259, 265, 275, 289, 292, 294, 300, 304, 306, 307, 317, 327, 334, 336, 337, 338, 342, 348, 349, 367, 368, 369, 377, 404, 406, 407, 409, 410, 411, 417, 437, 439, 440, 443, 444, 445, 446, 449, 451, 456, 457, 458, 459, 460, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 479, 480, 481, 482, 499, 510, 522, 532, 533, 539, 542, 548, 605, 608, 610, 611, 632, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 672, 673, 674, 675, 676, 678, 690, 694, 696, 797, 869, 870, 873, 882, 884, 894, 895, 904, 905, 993, 995, 996, 998, 1006, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1040, 1041, 1042, 1043, 1046], "center1": 99, "center2": 99, "center3": 99, "center4": 99, "center_": 882, "center_box": [93, 510], "centers_0": 307, "centers_1": 307, "centers_init": 92, "cento": 370, "centr": 153, "central": [0, 53, 209, 367, 373, 404, 1005, 1018], "centrality_scor": 55, "centroid": [1, 77, 90, 91, 109, 180, 285, 292, 307, 317, 348, 368, 395, 404, 439, 440, 443, 444, 445, 446, 449, 456, 457, 459, 502, 547, 631, 851, 1020, 1021, 1025, 1029, 1033, 1036, 1041, 1045], "centroids_": [439, 443, 851], "ceo": 1023, "cerda": 1043, "certain": [52, 66, 88, 144, 149, 183, 212, 223, 240, 264, 284, 308, 340, 355, 367, 368, 374, 376, 386, 389, 398, 400, 404, 409, 413, 638, 649, 653, 658, 663, 684, 864, 869, 904, 988, 991, 995, 996, 999, 1000, 1003, 1009, 1014, 1018, 1034, 1038, 1041, 1044], "certainli": [86, 102, 183, 348, 403], "certainti": [264, 374, 999], "ceshin": 1035, "cest": 999, "cetina": 1041, "cf": [311, 403, 404, 407, 439, 700, 995, 1009, 1019], "cflag": 370, "cft": 404, "cftree": 439, "cg": [302, 658, 659, 672, 674, 687, 995, 1033, 1034, 1036, 1040, 1042, 1043, 1046, 1047], "cga": 175, "cgi": 897, "cgohlk": [1032, 1033], "cgroup": [1042, 1043], "cgsavard": [1039, 1040], "ch6": 528, "chacon": 705, "chac\u00f3n": [404, 705], "chad": 1046, "chadi": 1037, "chai": [1041, 1044, 1045, 1048, 1049], "chain": [1, 35, 101, 107, 134, 180, 236, 263, 272, 275, 281, 282, 284, 287, 302, 355, 364, 384, 386, 414, 494, 500, 539, 611, 627, 658, 738, 800, 830, 833, 835, 836, 837, 838, 864, 865, 884, 988, 989, 1000, 1004, 1016, 1020, 1023, 1025], "chain_jaccard_scor": 283, "chain_method": [835, 1047], "chain_method_": 835, "chaitanya": 1040, "chaitanyamog": 1041, "chakhchoukh": 112, "chakravarti": [635, 637], "chalearn": 999, "challeng": [51, 154, 167, 184, 190, 201, 224, 233, 361, 367, 368, 398, 404, 406, 459, 469, 999, 1005, 1023], "chalmer": 1043, "chalmerlow": 1032, "chalulu": 1044, "chan": [0, 362, 842, 884, 1047, 1048, 1049], "chanc": [1, 71, 73, 82, 134, 158, 180, 186, 207, 214, 221, 224, 264, 270, 273, 274, 310, 343, 348, 355, 371, 403, 404, 408, 700, 702, 704, 705, 708, 716, 755, 757, 786, 795, 829, 999, 1007, 1015, 1020, 1045], "chance_level_": [700, 702, 1045], "chance_level_kw": [243, 700, 702, 1045, 1049], "chance_level_kwarg": 702, "chandra": [1039, 1040, 1043], "chang": [1, 46, 62, 63, 64, 120, 124, 125, 137, 140, 147, 165, 168, 178, 182, 183, 186, 197, 208, 209, 211, 212, 244, 245, 258, 259, 264, 271, 274, 278, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 326, 336, 340, 349, 353, 354, 355, 359, 360, 361, 367, 374, 375, 376, 377, 380, 384, 386, 395, 404, 408, 411, 412, 414, 416, 424, 429, 434, 437, 440, 441, 444, 446, 449, 451, 456, 459, 461, 462, 464, 465, 468, 469, 475, 479, 480, 481, 491, 492, 494, 502, 506, 507, 510, 511, 512, 520, 525, 529, 531, 533, 534, 535, 536, 537, 538, 539, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 574, 576, 577, 578, 579, 580, 581, 587, 588, 589, 590, 592, 593, 596, 601, 610, 611, 613, 614, 615, 617, 619, 620, 622, 623, 625, 627, 630, 631, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 687, 690, 692, 694, 698, 700, 702, 704, 707, 712, 716, 717, 727, 729, 730, 736, 737, 755, 757, 778, 783, 784, 785, 787, 789, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 809, 814, 818, 819, 821, 822, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 854, 855, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 876, 877, 883, 884, 885, 892, 893, 898, 899, 900, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 918, 928, 930, 931, 943, 948, 959, 966, 967, 988, 989, 990, 998, 999, 1000, 1002, 1009, 1012, 1013, 1014, 1015, 1019, 1027, 1028], "changed_onli": 1040, "changedbehaviorwarn": 1041, "changedbehaviourwarn": 1038, "changelog": [318, 372, 376, 380, 386, 1027, 1048, 1049], "changing_param": 46, "changing_param_valu": 46, "changyao": [1044, 1045], "channel": [360, 367, 370, 372, 390, 412, 491, 492, 582, 583, 585, 586, 1017, 1022], "channel_prior": 370, "chapman": 995, "chapter": [120, 355, 374, 404, 409, 411, 414, 528, 530, 532, 614, 619, 622, 643, 989, 992, 995, 1014, 1015], "char": [412, 587, 588, 590, 1029], "char_wb": [412, 587, 588, 590], "charact": [349, 372, 377, 386, 412, 501, 506, 507, 587, 588, 590, 916, 1004, 1029, 1042, 1044], "character": [75, 224, 351, 404, 408, 996], "characteris": 1002, "characterist": [1, 79, 95, 163, 172, 180, 233, 234, 246, 256, 258, 259, 261, 304, 355, 367, 369, 377, 402, 403, 408, 411, 414, 501, 502, 623, 638, 658, 702, 706, 708, 727, 782, 788, 789, 819, 827, 830, 833, 871, 909, 995, 1020], "chardet": 412, "chardetect": 412, "charg": [0, 258, 372, 1017], "charikar": 991, "charl": [64, 258, 764, 1029, 1032, 1035, 1039, 1041, 1044], "charli": [1036, 1037, 1045], "charlton": 1036, "charra": [1044, 1046, 1047], "charron": [1023, 1032, 1033, 1040, 1041, 1042], "charset": [1029, 1031], "charset_error": 1031, "chart": [72, 144, 263, 269, 392, 1000, 1032], "chartbeat": 1023, "chase": [51, 1029], "chasnovski": 1040, "chat": 1023, "chatterje": 1040, "chaudhuri": 443, "chauhan": [1037, 1038, 1044, 1045, 1048], "chaumond": [1023, 1037], "chauvin": 743, "chave": 1049, "chavez": [45, 367], "chawla": 1039, "chayant": 1036, "chazalon": 1043, "cheaper": [184, 404, 414, 673, 991, 995], "cheat": [52, 336, 392, 1003, 1013, 1031], "chebee7i": 1033, "chebyshev": [447, 454, 699, 778, 779, 780, 1002], "chebyshevdist": 699, "check": [1, 41, 43, 44, 47, 55, 80, 86, 89, 124, 132, 140, 154, 155, 167, 180, 182, 184, 185, 195, 196, 198, 207, 227, 240, 250, 256, 258, 273, 281, 316, 322, 327, 354, 359, 360, 370, 371, 372, 373, 374, 375, 376, 378, 379, 381, 382, 384, 385, 386, 390, 391, 395, 398, 405, 418, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 461, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 488, 500, 506, 507, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 573, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 609, 610, 611, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 687, 688, 689, 690, 691, 692, 693, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 828, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 930, 931, 932, 941, 942, 943, 953, 955, 956, 957, 961, 962, 982, 983, 984, 986, 987, 994, 995, 996, 999, 1014, 1015, 1020, 1023, 1025, 1029, 1030, 1032, 1036, 1040, 1041, 1042, 1043, 1044, 1046, 1048, 1049], "check_arrai": [1, 322, 374, 381, 465, 532, 902, 987, 1033, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "check_classifier_multioutput": 1039, "check_consistent_length": [1, 400, 1049], "check_cv": [1, 386, 1034], "check_decision_proba_consist": 1036, "check_estim": [1, 313, 322, 374, 386, 942, 943, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1048], "check_estimator_sparse_arrai": 1047, "check_estimator_sparse_data": 1047, "check_estimator_sparse_matrix": 1047, "check_estimator_sparse_tag": 1048, "check_estimators_fit_returns_self": 943, "check_estimators_pickl": 1046, "check_fit_idempot": 1038, "check_increas": 1, "check_input": [532, 546, 646, 647, 652, 660, 661, 662, 681, 687, 912, 913, 914, 915, 1037], "check_invers": [139, 183, 405, 462, 868, 1009, 1037, 1043, 1044], "check_is_fit": [1, 89, 132, 240, 375, 381, 386, 1039, 1042, 1043, 1048], "check_memori": [1, 381, 386, 1036], "check_metadata": 240, "check_methods_sample_order_invari": [1041, 1043], "check_methods_subset_invari": [1037, 1043], "check_nam": [573, 941, 942, 943, 1048], "check_non_neg": 1048, "check_pairwise_arrai": [1038, 1048], "check_param": 987, "check_random_st": [1, 94, 222, 228, 236, 242, 374, 381, 386], "check_regressor_multioutput": 1039, "check_requires_y_non": 1043, "check_sample_weight_equivalence_on_dense_data": 1048, "check_sample_weight_equivalence_on_sparse_data": 1048, "check_sample_weights_invari": 1048, "check_sample_weights_pandas_seri": 1037, "check_scalar": [1, 1043], "check_scor": [1, 386, 1047, 1048], "check_set_param": 1037, "check_symmetr": 1, "check_transformer_data_not_an_arrai": 1039, "check_transformers_unfitted_stateless": 1045, "check_x_i": [1, 381, 987, 1033, 1037, 1038, 1043, 1048], "checked_cv": 824, "checker": [1, 376, 824], "checkerboard": [1, 58, 401, 448, 450, 509, 511], "checking_statu": 258, "checkingclassifi": 1039, "checklist": [375, 376], "checkout": [370, 372, 376, 380], "checksum": [489, 1041], "cheeseman": 369, "chege": 1043, "chem": 1049, "chemic": 369, "chemometr": 369, "chen": [109, 110, 406, 411, 417, 472, 726, 756, 991, 999, 1032, 1035, 1036, 1037, 1039, 1042, 1043, 1044, 1045, 1048], "chenal": [1038, 1039, 1041], "cherkasski": 995, "chernei": [1047, 1048], "chernyi": 1043, "cherri": 376, "cherti": 1033, "cherubin": 1035, "chestervil": 318, "cheuk": [1037, 1038], "cheung": 1030, "chevali": 1041, "chevalli": 1046, "chevron": 51, "chi": [1, 103, 111, 134, 308, 364, 413, 517, 591, 594, 595, 597, 598, 599, 603, 604, 605, 608, 638, 639, 640, 641, 642, 758, 759, 1025, 1029, 1034, 1035], "chi2": [1, 103, 412, 413, 449, 580, 591, 594, 595, 597, 598, 599, 604, 605, 608, 620, 638, 639, 640, 641, 642, 643, 759, 765, 774, 1029, 1036, 1043], "chi2_featur": 642, "chi2_kernel": [1, 400, 638, 642, 758, 765, 997, 1030, 1048], "chi2_stat": 603, "chi2sampl": 638, "chiang": 1037, "chiara": [0, 363, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "chibuik": 1042, "chicco": [1047, 1048], "chief": 1023, "chieh": [1036, 1037], "chigurupati": 1041, "chih": [658, 1034], "chilamkurthi": 1035, "child": [149, 240, 347, 354, 360, 374, 384, 386, 395, 404, 411, 439, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 912, 913, 914, 915, 957, 958, 960, 1015, 1036, 1048], "child_idx": 76, "children": [354, 404, 411, 438, 442, 460, 564, 1033, 1046], "children_": [76, 438, 442, 460], "children_left": 354, "children_right": 354, "chime": 371, "chin": [369, 1033], "china": [404, 504, 505, 583, 586], "chines": 1018, "chinmaya": 1036, "chinthala": 1036, "chiotelli": 1038, "chip": [400, 1023], "chisquar": 308, "chistyakov": 1048, "chitteti": 1043, "chkoar": 1036, "chloe": 1043, "cho": 1040, "choe": 1038, "choi": [995, 1047], "choic": [1, 43, 46, 64, 75, 80, 88, 98, 102, 109, 127, 149, 167, 168, 174, 178, 179, 198, 208, 209, 243, 257, 258, 262, 264, 267, 278, 289, 311, 315, 345, 347, 348, 355, 359, 370, 377, 386, 390, 404, 406, 408, 410, 411, 413, 414, 449, 459, 468, 469, 470, 471, 472, 473, 475, 536, 538, 539, 545, 557, 638, 647, 648, 656, 658, 659, 661, 669, 680, 692, 705, 742, 833, 846, 847, 852, 854, 855, 881, 884, 893, 895, 904, 905, 934, 988, 993, 995, 996, 997, 998, 999, 1000, 1002, 1005, 1007, 1012, 1013, 1014, 1015, 1036, 1039, 1040, 1044, 1045], "choleski": [110, 207, 224, 381, 468, 469, 475, 525, 611, 648, 650, 651, 654, 655, 656, 658, 659, 669, 672, 674, 680, 682, 683, 687, 788, 797, 798, 995, 1032, 1036, 1038, 1041, 1044, 1045, 1048], "cholesky_delet": 381, "cholesterol": [163, 369], "chong": 534, "choo": [1044, 1045], "choos": [43, 50, 51, 79, 80, 83, 86, 93, 95, 99, 109, 142, 154, 163, 183, 186, 202, 241, 258, 259, 269, 273, 276, 351, 355, 359, 360, 361, 374, 377, 380, 385, 386, 398, 402, 403, 404, 406, 408, 411, 412, 415, 440, 441, 444, 446, 456, 521, 530, 536, 557, 558, 581, 601, 658, 659, 672, 674, 679, 687, 688, 689, 693, 726, 756, 800, 803, 804, 814, 871, 904, 905, 912, 913, 914, 915, 988, 989, 990, 994, 995, 996, 997, 998, 999, 1002, 1009, 1012, 1013, 1014, 1025, 1031, 1032, 1036, 1038, 1040], "choose_check_classifiers_label": 1039, "choose_random_sampl": 374, "choraria": 1041, "chose": [77, 183], "chosen": [47, 58, 80, 105, 154, 168, 183, 184, 198, 208, 223, 241, 257, 258, 259, 267, 278, 348, 355, 359, 384, 403, 404, 406, 407, 411, 414, 437, 443, 446, 448, 450, 451, 457, 494, 521, 533, 555, 556, 557, 558, 559, 560, 562, 563, 647, 653, 656, 658, 659, 661, 663, 671, 676, 677, 678, 679, 680, 690, 694, 794, 797, 798, 800, 803, 804, 814, 834, 853, 904, 905, 912, 913, 914, 915, 948, 988, 991, 993, 995, 996, 998, 999, 1000, 1005, 1006, 1013, 1015, 1037, 1045, 1046], "chou": [1036, 1037], "choudhari": [1033, 1034, 1043, 1045], "choudhri": 1047, "chowdhuri": [1037, 1043], "choyal": [1036, 1037], "chri": [0, 394, 1029, 1032, 1037, 1038, 1039, 1040, 1043], "chrissobel": 1042, "christ": 57, "christian": [0, 57, 347, 348, 367, 393, 1023, 1029, 1030, 1033, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "christianwaldmann": 1044, "christin": [1044, 1045, 1048, 1049], "christo": [1038, 1039, 1041, 1043, 1046], "christof": [1033, 1034], "christoph": [184, 409, 414, 530, 610, 611, 614, 619, 622, 797, 995, 1000, 1030, 1034, 1037, 1040, 1041, 1042, 1043, 1044], "christopherlim98": 1043, "chrome": 1009, "chronolog": [367, 495], "chu": [851, 1045], "chuan": 1003, "chugh": 1041, "chuliang": 1042, "chun": [1040, 1041, 1043, 1044, 1045], "chung": [1036, 1037], "chunk": [1, 47, 83, 359, 360, 404, 409, 415, 441, 446, 465, 536, 778, 781, 832, 833, 839, 840, 841, 842, 843, 902, 1001, 1036, 1037, 1038, 1039, 1040], "chunk_siz": 1030, "chunker": 412, "church": [897, 1011], "chyi": [1032, 1033, 1034, 1035, 1036], "ci": [88, 360, 375, 376, 400, 1001, 1035, 1037], "ciccolella": [692, 996], "cice": [1006, 1043], "cichocki": [409, 536, 538, 545], "cimport": [373, 381, 1037], "cindi": [1034, 1042, 1046, 1047], "cio": 366, "cipri\u00e1n": 1043, "circl": [1, 58, 70, 93, 125, 152, 153, 180, 231, 241, 291, 294, 300, 304, 306, 324, 340, 345, 353, 368, 376, 380, 404, 449, 459, 512, 520, 764, 900, 1012, 1014, 1020], "circle1": 99, "circle2": 99, "circle3": 99, "circle4": 99, "circleci": [0, 52, 72, 171, 173, 175, 250, 267, 302, 372], "circuit": [57, 996], "circular": 53, "circumst": [127, 224, 1002, 1018], "circumstanti": 207, "cisco": 51, "citat": [0, 366, 369, 384], "cite": [366, 384, 404], "citi": [405, 412, 463], "citizen": 1009, "city_categori": 405, "city_london": 405, "city_pari": 405, "city_sallisaw": 405, "cityblock": [75, 79, 404, 447, 454, 762, 778, 779, 780, 1002], "cividi": 75, "ciyou": 658, "cj": [1001, 1032, 1033, 1034, 1035, 1036], "cjlin": [188, 366, 484, 506, 507, 658, 1032], "ckdtree": [415, 441, 1031], "cl": [47, 51, 379, 386, 914], "clabel": [170, 217], "clae": 1037, "clai": 1029, "claim": [180, 189, 372, 461, 494, 550, 648, 669, 680, 706, 745, 750, 752, 830, 865, 868, 869, 877, 884, 995, 1020], "claimamount": 224, "claimnb": [207, 224], "clair": 1029, "clamp": [900, 1012], "clang": [370, 373], "clara": [366, 1041], "clare": 1039, "clarifi": [380, 387, 793], "clariti": [161, 372, 380], "clark": 51, "class": [1, 3, 27, 30, 43, 47, 48, 49, 50, 53, 57, 60, 61, 62, 64, 66, 70, 75, 88, 89, 91, 103, 104, 115, 118, 124, 125, 126, 128, 132, 133, 139, 140, 149, 150, 154, 155, 163, 165, 167, 168, 170, 171, 173, 175, 176, 178, 179, 180, 183, 184, 185, 188, 189, 199, 200, 201, 202, 206, 214, 218, 221, 222, 227, 233, 235, 240, 241, 243, 245, 249, 250, 251, 256, 257, 258, 259, 261, 264, 265, 266, 270, 274, 275, 278, 281, 283, 284, 287, 289, 290, 292, 293, 294, 295, 300, 309, 310, 313, 314, 317, 319, 320, 321, 322, 323, 325, 327, 328, 331, 332, 334, 336, 337, 340, 344, 345, 347, 348, 349, 352, 354, 361, 364, 366, 367, 368, 369, 372, 373, 374, 376, 377, 378, 379, 381, 384, 385, 390, 395, 398, 399, 400, 402, 404, 405, 407, 409, 413, 414, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 458, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 484, 485, 486, 488, 490, 491, 492, 493, 494, 495, 498, 500, 501, 502, 506, 507, 508, 510, 512, 513, 517, 520, 521, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 572, 574, 576, 580, 581, 582, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 712, 713, 714, 715, 716, 717, 718, 720, 722, 727, 729, 730, 731, 733, 735, 736, 737, 738, 739, 740, 741, 743, 754, 755, 757, 782, 783, 784, 786, 787, 788, 789, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 827, 828, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 935, 936, 937, 938, 939, 941, 943, 953, 956, 957, 958, 961, 966, 969, 982, 988, 989, 990, 991, 993, 994, 995, 996, 998, 1000, 1001, 1003, 1006, 1007, 1009, 1010, 1012, 1015, 1019, 1020, 1021, 1023, 1025, 1026, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "class_0": [214, 369, 508], "class_1": [214, 369, 508], "class_2": [369, 508], "class_count_": [839, 840, 841, 842, 843], "class_id": [273, 274], "class_index": 88, "class_label": [386, 555, 559, 562, 658, 659, 666, 668, 674, 675, 676, 799, 822, 912, 914, 936, 1014], "class_likelihood_ratio": [1, 267, 999, 1044, 1049], "class_log_prior_": [839, 840, 841, 843], "class_memb": 73, "class_member_mask": 82, "class_nam": [136, 257, 885, 916, 917, 918, 1015, 1045], "class_name0": [420, 439, 440, 442, 444, 446, 479, 480, 481, 482, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 639, 640, 641, 642, 688, 689, 692, 848, 853, 856, 860, 870, 896, 897], "class_name1": [420, 439, 440, 442, 444, 446, 479, 480, 481, 482, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 639, 640, 641, 642, 688, 689, 692, 848, 853, 856, 860, 870, 896, 897], "class_name2": [420, 439, 440, 442, 444, 446, 479, 480, 481, 482, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 639, 640, 641, 642, 688, 689, 692, 848, 853, 856, 860, 870, 896, 897], "class_of_interest": [66, 273, 631, 1046], "class_prior": [265, 367, 839, 840, 841, 843, 1030, 1033], "class_prior_": [549, 842, 851], "class_protein_loc": 281, "class_sep": [162, 294, 345, 513, 799, 822], "class_weight": [1, 45, 63, 103, 104, 139, 141, 155, 160, 185, 234, 235, 245, 246, 247, 258, 262, 263, 264, 271, 276, 278, 302, 314, 315, 317, 320, 323, 338, 354, 386, 555, 559, 562, 658, 659, 666, 668, 674, 675, 676, 677, 904, 906, 909, 911, 912, 914, 935, 936, 988, 1013, 1014, 1029, 1030, 1032, 1033, 1034, 1035, 1037, 1043, 1044, 1049], "class_weight_": [906, 909, 1044], "class_weight_vect": 935, "classes_": [132, 215, 234, 240, 273, 325, 326, 372, 374, 386, 429, 434, 435, 547, 548, 549, 551, 553, 555, 557, 559, 562, 565, 567, 592, 593, 610, 631, 658, 659, 666, 668, 674, 675, 676, 697, 700, 702, 788, 799, 800, 803, 804, 814, 822, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 846, 851, 854, 861, 864, 871, 872, 875, 885, 899, 900, 901, 904, 906, 909, 912, 914, 917, 999, 1010, 1013, 1026, 1030, 1033, 1034, 1036, 1039, 1041], "classic": [55, 204, 230, 249, 255, 340, 369, 376, 406, 408, 409, 440, 444, 446, 456, 490, 498, 502, 508, 539, 632, 633, 914, 915, 993, 995, 998, 1001, 1009, 1018, 1029, 1030, 1034, 1043], "classif": [1, 13, 19, 30, 31, 38, 40, 42, 45, 46, 49, 50, 54, 57, 60, 61, 62, 64, 67, 70, 72, 103, 104, 105, 109, 110, 115, 118, 123, 134, 136, 138, 140, 141, 142, 147, 149, 150, 152, 155, 158, 159, 160, 162, 163, 166, 172, 173, 183, 184, 188, 189, 199, 200, 201, 202, 207, 214, 216, 217, 218, 219, 221, 232, 234, 238, 239, 243, 246, 252, 253, 256, 257, 261, 262, 263, 264, 265, 273, 278, 279, 281, 282, 285, 286, 292, 293, 294, 296, 297, 298, 299, 301, 306, 307, 308, 309, 325, 330, 331, 332, 336, 339, 341, 342, 343, 344, 346, 348, 349, 355, 359, 361, 365, 366, 367, 369, 374, 377, 381, 385, 386, 399, 402, 403, 404, 405, 408, 409, 411, 412, 413, 421, 434, 435, 466, 472, 479, 484, 485, 486, 488, 490, 491, 492, 493, 494, 495, 497, 498, 500, 501, 502, 508, 510, 512, 513, 517, 518, 520, 521, 539, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 562, 563, 564, 565, 567, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 603, 604, 605, 608, 609, 610, 611, 613, 614, 622, 631, 632, 633, 639, 643, 658, 659, 666, 668, 674, 675, 676, 697, 703, 705, 708, 709, 712, 713, 715, 716, 718, 726, 727, 729, 730, 734, 735, 738, 741, 743, 754, 756, 758, 759, 761, 782, 783, 784, 786, 787, 788, 789, 794, 796, 799, 800, 801, 803, 804, 805, 806, 814, 818, 819, 820, 822, 823, 824, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 846, 851, 853, 854, 860, 861, 862, 864, 865, 868, 869, 871, 876, 877, 878, 879, 883, 884, 885, 888, 890, 899, 900, 901, 904, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 920, 933, 936, 945, 988, 989, 991, 992, 993, 996, 997, 1001, 1004, 1006, 1007, 1009, 1010, 1012, 1018, 1020, 1021, 1022, 1023, 1025, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "classifi": [1, 30, 45, 46, 47, 48, 60, 63, 65, 68, 70, 89, 102, 103, 104, 105, 106, 125, 134, 135, 136, 137, 138, 141, 142, 145, 152, 155, 159, 160, 161, 162, 169, 180, 185, 186, 188, 199, 200, 205, 207, 215, 218, 221, 224, 233, 236, 238, 240, 241, 246, 257, 258, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 281, 282, 286, 292, 293, 295, 299, 302, 306, 315, 316, 320, 322, 324, 325, 326, 328, 329, 331, 332, 334, 335, 337, 338, 339, 340, 344, 345, 349, 367, 369, 372, 374, 377, 384, 386, 395, 403, 404, 405, 408, 412, 413, 414, 421, 429, 430, 431, 433, 434, 435, 436, 485, 486, 494, 502, 510, 512, 513, 520, 529, 534, 535, 540, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 561, 562, 564, 565, 566, 567, 568, 592, 593, 601, 605, 610, 622, 629, 631, 632, 633, 649, 658, 659, 666, 668, 671, 672, 673, 674, 675, 676, 697, 698, 700, 702, 703, 707, 708, 709, 711, 712, 713, 718, 720, 722, 726, 727, 729, 730, 732, 734, 735, 738, 739, 740, 741, 743, 754, 756, 782, 783, 784, 787, 788, 789, 794, 796, 799, 800, 803, 804, 806, 814, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 851, 852, 854, 855, 860, 861, 862, 865, 871, 884, 885, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 918, 920, 923, 924, 939, 941, 988, 989, 991, 994, 995, 996, 999, 1000, 1001, 1004, 1007, 1009, 1012, 1013, 1014, 1015, 1018, 1019, 1020, 1021, 1023, 1025, 1026, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049], "classification_data": 46, "classification_report": [1, 45, 68, 102, 160, 262, 302, 325, 326, 822, 999, 1031, 1033, 1037, 1038, 1039, 1041, 1045, 1047, 1048], "classificationcriterion": 1037, "classifier_": [89, 240], "classifier_01": 321, "classifier_05": 321, "classifier__c": 103, "classifier__criterion": 245, "classifier__max_depth": 245, "classifier__max_featur": 245, "classifier__min_samples_leaf": 185, "classifier__n_estim": 245, "classifier__n_neighbor": 286, "classifier_idx": 66, "classifier_model": 286, "classifier_other_threshold": 799, "classifier_tag": [923, 1048], "classifier_tun": 822, "classifierchain": [1, 283, 386, 395, 836, 838, 1036, 1041, 1044, 1046, 1047, 1049], "classifiermixin": [1, 132, 240, 372, 374, 386, 408, 924, 1040, 1048], "classifiertag": [1, 923], "classify__c": 104, "classmethod": [372, 379, 435, 631, 632, 697, 698, 699, 700, 701, 702, 806, 823], "classnameprefixfeaturesoutmixin": [1, 374, 428, 1044], "claudio": [369, 1043, 1044, 1046, 1047, 1048, 1049], "claus": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 313, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 351, 352, 353, 354, 384], "clauss": 1046, "clb": 184, "clean": [85, 103, 206, 355, 364, 370, 410, 1005, 1009, 1039], "cleaner": 99, "cleanli": [95, 1029], "cleanup": [372, 1029], "clear": [43, 88, 93, 104, 183, 184, 309, 367, 371, 372, 374, 384, 385, 386, 402, 405, 410, 918, 919, 988, 993, 1040, 1041, 1042, 1047], "clear_data_hom": 1, "clearer": [231, 1014, 1048], "clearli": [43, 93, 123, 184, 205, 238, 340, 371, 372, 384, 386, 409, 411, 1000, 1006], "clegg": 1032, "clemen": 1033, "clement": [1036, 1037, 1041], "clenaghan": [1034, 1035], "cleveland": 367, "cleverless": 1031, "clf": [45, 49, 50, 51, 61, 62, 63, 64, 67, 68, 73, 84, 87, 91, 96, 103, 138, 145, 148, 150, 155, 159, 160, 162, 169, 171, 186, 199, 202, 205, 211, 215, 218, 219, 220, 221, 222, 234, 235, 238, 241, 247, 253, 261, 265, 269, 270, 272, 275, 276, 287, 290, 291, 292, 295, 299, 306, 309, 313, 314, 315, 323, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 347, 351, 352, 354, 359, 367, 385, 386, 398, 405, 408, 411, 413, 435, 547, 548, 551, 553, 555, 557, 559, 561, 562, 565, 592, 593, 596, 609, 632, 634, 638, 639, 640, 641, 642, 644, 645, 648, 652, 658, 659, 660, 661, 662, 666, 668, 669, 672, 673, 674, 675, 676, 677, 680, 697, 698, 700, 702, 711, 788, 800, 803, 804, 814, 832, 833, 834, 836, 839, 840, 841, 842, 843, 850, 851, 861, 904, 906, 908, 909, 912, 916, 918, 989, 991, 995, 999, 1000, 1002, 1003, 1005, 1006, 1013, 1014, 1015, 1026], "clf1": [69, 155, 411, 567], "clf2": [69, 155, 374, 411, 567], "clf3": [69, 155, 374, 411, 567], "clf__": 265, "clf__alpha": 265, "clf__c": 405, "clf_descr": 347, "clf_disp": 1026, "clf_en_lr": 200, "clf_err": 138, "clf_isoton": 61, "clf_isotonic_scor": 61, "clf_l1_lr": 200, "clf_l2_lr": 200, "clf_list": [62, 64], "clf_name": [49, 347], "clf_no_weight": 345, "clf_pf": 842, "clf_prob": 63, "clf_sample_weight": 240, "clf_score": [61, 165], "clf_sel": 186, "clf_select": 159, "clf_sgd": 220, "clf_sigmoid": 61, "clf_sigmoid_scor": 61, "clf_weight": 345, "click": [235, 245, 265, 314, 320, 323, 372, 374, 380, 392, 1023], "clickabl": 1043, "client": 374, "clifford": 1042, "cliffordemmanuel": 1042, "clim": 170, "climatologi": 402, "climb": [404, 445, 458], "clinton": 57, "clip": [62, 64, 104, 224, 236, 304, 336, 635, 676, 741, 874, 1009, 1033, 1040, 1041, 1048], "clmbst": 1041, "clock": 43, "clone": [1, 89, 146, 175, 184, 240, 302, 320, 355, 370, 372, 375, 376, 378, 380, 386, 402, 405, 414, 434, 462, 567, 568, 596, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 806, 823, 828, 831, 835, 838, 864, 865, 901, 1029, 1035, 1037, 1041, 1045, 1046, 1048], "clone_kernel": [610, 611, 1039], "clone_with_theta": [175, 414, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625], "cloned_classifi": 429, "close": [7, 47, 51, 55, 61, 62, 64, 73, 74, 80, 87, 93, 99, 109, 110, 113, 125, 137, 143, 146, 150, 154, 155, 167, 168, 171, 172, 173, 174, 175, 183, 185, 194, 211, 213, 227, 233, 239, 243, 249, 255, 264, 265, 277, 278, 290, 291, 304, 313, 336, 340, 341, 348, 355, 367, 372, 374, 375, 376, 384, 386, 387, 402, 404, 407, 408, 411, 414, 447, 452, 469, 506, 507, 530, 561, 628, 643, 647, 661, 672, 674, 687, 705, 746, 797, 818, 819, 839, 840, 841, 843, 850, 931, 988, 992, 993, 995, 996, 998, 999, 1000, 1002, 1005, 1006, 1009, 1014, 1018, 1023, 1032, 1036, 1037, 1038], "close_pric": 51, "closer": [43, 72, 123, 125, 153, 163, 167, 184, 190, 211, 340, 349, 402, 404, 409, 446, 551, 628, 712, 846, 847, 852, 854, 855, 856, 999, 1014, 1036], "closest": [64, 80, 97, 211, 374, 404, 437, 439, 440, 444, 445, 446, 456, 653, 779, 780, 834, 844, 845, 846, 847, 848, 850, 852, 854, 855, 856, 990, 993, 1000, 1002], "closest_observ": 869, "closur": 55, "cloud": [78, 115, 119, 121, 180, 380, 409, 531, 539, 692, 999, 1018, 1020], "cloudpickl": 1025, "cls_info": 49, "cls_name": [47, 49], "cls_runtim": 47, "cls_stat": 47, "cls_valu": 49, "club": 369, "clue": [367, 380, 996], "clump": 230, "clust": [98, 447, 454], "cluster": [1, 48, 53, 54, 55, 56, 58, 61, 77, 78, 80, 83, 84, 86, 87, 90, 92, 94, 95, 102, 111, 132, 136, 142, 150, 158, 175, 186, 227, 229, 230, 231, 237, 243, 249, 250, 251, 252, 265, 290, 291, 293, 307, 314, 318, 325, 326, 327, 328, 329, 338, 346, 347, 349, 354, 361, 365, 367, 369, 372, 374, 377, 384, 386, 399, 400, 405, 410, 412, 415, 418, 419, 422, 430, 431, 433, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 485, 500, 501, 502, 509, 510, 511, 512, 513, 520, 528, 539, 542, 551, 562, 564, 588, 589, 590, 631, 691, 692, 695, 704, 705, 710, 714, 715, 717, 719, 725, 731, 736, 737, 755, 757, 778, 779, 786, 792, 793, 795, 797, 798, 856, 857, 865, 869, 876, 884, 923, 939, 941, 961, 982, 989, 996, 998, 1002, 1005, 1007, 1009, 1012, 1016, 1018, 1019, 1020, 1023, 1024, 1025, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "cluster_1": 150, "cluster_2": 150, "cluster_al": [445, 458], "cluster_cent": [73, 94, 96, 97, 458], "cluster_center_indic": [437, 451], "cluster_centers_": [77, 78, 83, 91, 93, 94, 96, 97, 120, 317, 348, 437, 440, 444, 445, 446], "cluster_centers_indic": [73, 451], "cluster_centers_indices_": [73, 437], "cluster_data": 92, "cluster_doc": 57, "cluster_hierarchy_": [404, 447], "cluster_id": [186, 348], "cluster_id_to_feature_id": 186, "cluster_label": [89, 93], "cluster_method": 447, "cluster_optics_dbscan": [1, 98, 404], "cluster_optics_xi": 1, "cluster_qr": [80, 404, 449, 459, 1043], "cluster_s": 348, "cluster_selection_epsilon": 443, "cluster_selection_method": 443, "cluster_std": [63, 73, 79, 82, 88, 89, 90, 92, 93, 95, 96, 97, 218, 233, 252, 307, 338, 368, 510], "cluster_word": 57, "clusterer_": 89, "clustering_algorithm": [78, 79, 95], "clustering_metr": 91, "clustermixin": [1, 374, 1046], "clusters_std": 338, "clyde": 1034, "cl\u00e9ment": [1038, 1042, 1044], "cm": [43, 45, 50, 51, 53, 58, 59, 61, 66, 67, 68, 73, 74, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 93, 94, 100, 111, 113, 120, 123, 136, 142, 161, 170, 171, 184, 215, 218, 219, 222, 227, 228, 229, 234, 237, 238, 242, 247, 257, 258, 259, 284, 287, 288, 290, 294, 297, 299, 301, 302, 304, 306, 315, 318, 325, 326, 330, 332, 333, 334, 336, 337, 338, 344, 345, 352, 369, 405, 697, 830, 917, 999, 1009, 1015], "cm2013": 404, "cm_bright": [67, 299, 306], "cm_displai": 234, "cm_piyg": 306, "cmap": [43, 44, 45, 50, 51, 53, 58, 59, 66, 67, 68, 70, 74, 75, 80, 81, 83, 84, 86, 87, 91, 111, 113, 120, 123, 130, 136, 142, 155, 161, 170, 171, 184, 190, 194, 200, 215, 218, 219, 220, 222, 227, 228, 229, 237, 238, 242, 257, 259, 284, 288, 290, 292, 293, 295, 297, 299, 301, 302, 304, 306, 325, 326, 330, 332, 333, 334, 335, 336, 337, 338, 341, 344, 345, 352, 500, 631, 697, 1049], "cmap_bold": [292, 295], "cmap_cv": 259, "cmap_data": 259, "cmap_light": [292, 295], "cmcsa": 51, "cmu": 899, "cname": 77, "cnb": 1001, "cnp": 373, "cnx": 1037, "co": [1, 43, 51, 53, 56, 58, 74, 75, 102, 151, 153, 172, 180, 183, 208, 228, 264, 279, 317, 329, 347, 348, 349, 353, 376, 410, 412, 446, 448, 450, 485, 509, 590, 699, 719, 764, 795, 994, 1009, 1020, 1023, 1024, 1025], "co2": [166, 174, 180, 414, 494, 611, 615, 622, 623, 625, 1020, 1036], "co2_data": 172, "co2_kernel": 172, "coars": [43, 142, 378, 445, 458], "coarser": [142, 146], "coast": [50, 297], "coastlin": [50, 163, 297, 369], "coca": 51, "cock": [154, 1038], "cockburn": 1031, "coclust": [57, 401, 448, 511], "cocoa": 1023, "code": [1, 30, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 351, 352, 353, 354, 355, 359, 360, 366, 370, 371, 373, 375, 376, 381, 384, 386, 387, 390, 395, 398, 400, 403, 404, 411, 412, 439, 440, 444, 446, 456, 494, 524, 528, 529, 535, 536, 540, 541, 543, 544, 546, 564, 570, 580, 581, 646, 647, 650, 651, 652, 653, 654, 655, 656, 660, 661, 662, 663, 664, 665, 682, 683, 685, 686, 711, 832, 833, 834, 871, 878, 942, 988, 996, 1000, 1009, 1011, 1013, 1014, 1018, 1019, 1020, 1022, 1023, 1029, 1031, 1032, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "code_blood": 1049, "code_book_": 834, "code_init": [529, 543], "code_s": [281, 834, 1000], "codebas": [319, 355, 372, 373, 412, 1029, 1035], "codebook": [281, 564, 834], "codecov": 380, "codeofconduct": 372, "coder": [129, 540, 716], "codevig": 1035, "coe": 1049, "coef": [49, 87, 129, 182, 183, 190, 194, 200, 201, 203, 206, 210, 211, 212, 215, 221, 222, 247, 277, 301, 319, 344, 522, 646, 647, 649, 652, 653, 659, 660, 661, 662, 663, 669, 672, 674, 680, 681, 682, 683, 684, 685, 686, 687, 1003], "coef0": [155, 188, 245, 246, 262, 264, 315, 340, 342, 449, 533, 639, 640, 643, 775, 777, 906, 907, 908, 909, 910, 997, 1014], "coef_": [46, 49, 53, 87, 115, 159, 160, 163, 182, 183, 190, 193, 194, 195, 197, 199, 200, 201, 202, 203, 204, 206, 210, 211, 212, 215, 221, 222, 241, 247, 277, 278, 311, 317, 334, 341, 344, 347, 355, 367, 374, 386, 407, 413, 462, 479, 480, 481, 547, 592, 593, 596, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 904, 905, 906, 907, 908, 909, 910, 982, 993, 995, 1013, 1014, 1029, 1031, 1034, 1036, 1041, 1043, 1046, 1047, 1048, 1049], "coef_agglomeration_": 87, "coef_en_lr": 200, "coef_i": 183, "coef_init": [646, 647, 652, 653, 660, 661, 662, 663, 666, 667, 668, 676, 677, 678, 681, 684], "coef_l": 197, "coef_l1_lr": 200, "coef_l2_lr": 200, "coef_lar": 197, "coef_lasso": 197, "coef_lasso_": 203, "coef_multi_task_lasso_": 203, "coef_p": 197, "coef_path": [653, 663, 684], "coef_path_": [650, 651, 654, 655, 995], "coef_path_continu": [653, 663, 684], "coef_path_lar": [653, 663, 684], "coef_pl": 197, "coef_positive_lar": 197, "coef_ridg": 193, "coef_selection_": 87, "coeff": 680, "coeff_diff": 195, "coeffici": [1, 25, 46, 49, 73, 82, 91, 93, 109, 110, 113, 120, 123, 160, 167, 180, 181, 182, 189, 193, 194, 195, 197, 200, 202, 203, 204, 205, 209, 210, 221, 224, 247, 264, 278, 301, 311, 315, 316, 317, 340, 343, 347, 348, 349, 359, 368, 374, 386, 389, 406, 407, 409, 413, 414, 417, 427, 449, 462, 464, 470, 472, 473, 475, 476, 477, 478, 479, 480, 481, 494, 522, 524, 525, 529, 533, 535, 537, 540, 541, 546, 550, 552, 554, 556, 558, 560, 563, 566, 568, 581, 588, 592, 596, 608, 611, 614, 627, 635, 636, 639, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 691, 701, 703, 716, 719, 729, 734, 738, 743, 750, 753, 775, 777, 785, 786, 788, 792, 793, 796, 815, 827, 830, 837, 838, 847, 855, 862, 865, 877, 884, 904, 905, 906, 907, 908, 909, 910, 913, 915, 990, 993, 995, 1013, 1014, 1020, 1029, 1033, 1034, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1046], "coefs_": [202, 301, 861, 862, 1003, 1034], "coefs_cf": 311, "coefs_enet": 197, "coefs_lar": 197, "coefs_lasso": 197, "coefs_no_cf": 311, "coefs_path": 659, "coefs_paths_": [659, 1039], "coefs_positive_enet": 197, "coefs_positive_lar": 197, "coefs_positive_lasso": 197, "coelho": [1030, 1032, 1033, 1037], "coelhudo": 1041, "cognit": [163, 369], "cohen": [1, 716, 1037], "cohen_kappa_scor": [1, 999, 1034, 1036], "coher": 404, "cohort": 156, "coin": [51, 53, 55, 59, 71, 74, 75, 76, 79, 86, 87, 89, 95, 99, 100, 123, 180, 404, 412, 438, 459, 1011, 1020], "coincid": [171, 209, 414, 999], "col": [52, 57, 62, 64, 73, 77, 82, 88, 92, 96, 97, 102, 105, 140, 155, 172, 226, 243, 263, 344, 509, 511], "col_compl": 57, "col_idx": 59, "col_idx_shuffl": 58, "col_ind": [419, 448, 450], "col_indic": 149, "col_nam": 52, "col_split": 52, "cola": [51, 1049], "colab": 400, "cold": 284, "cole": 1038, "coleman": [1030, 1031], "colgat": [51, 55], "colin": [45, 367, 1035, 1049], "collabor": 372, "collaps": [43, 184, 243, 304, 336, 384], "colleagu": 264, "collect": [1, 41, 46, 49, 51, 52, 57, 62, 105, 138, 149, 150, 156, 163, 172, 179, 186, 196, 202, 229, 236, 267, 271, 322, 348, 349, 359, 367, 369, 376, 386, 390, 408, 409, 411, 412, 443, 461, 551, 552, 553, 554, 555, 556, 557, 558, 561, 562, 563, 564, 567, 568, 580, 582, 583, 587, 588, 589, 590, 632, 729, 730, 738, 778, 783, 784, 787, 802, 806, 807, 809, 823, 969, 972, 988, 994, 995, 999, 1005, 1010, 1019, 1023, 1031, 1041], "colleg": [0, 182], "college_degre": 182, "collei": [1048, 1049], "collid": 412, "collin": 1032, "collinear": [183, 186, 212, 224, 411, 565, 648, 669, 680, 702, 789, 877, 995, 1029, 1048], "collis": [348, 349, 412, 581, 588], "collot": [1043, 1044], "colombia": [50, 297, 367, 496], "colon": 372, "coloni": 367, "color": [0, 43, 46, 47, 48, 49, 50, 51, 52, 58, 61, 62, 63, 64, 66, 67, 69, 70, 73, 75, 77, 79, 80, 81, 82, 86, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 100, 109, 110, 111, 112, 113, 116, 118, 120, 121, 122, 124, 126, 127, 128, 129, 134, 135, 140, 142, 143, 145, 148, 149, 150, 151, 152, 154, 155, 161, 167, 169, 170, 171, 172, 173, 174, 175, 176, 179, 183, 185, 186, 190, 191, 193, 194, 196, 197, 198, 199, 202, 203, 205, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 220, 223, 224, 227, 228, 229, 231, 233, 237, 238, 239, 241, 244, 249, 250, 251, 252, 253, 254, 255, 258, 259, 261, 263, 265, 267, 268, 269, 270, 271, 273, 274, 275, 277, 278, 283, 286, 289, 290, 291, 292, 295, 296, 297, 299, 304, 305, 306, 308, 309, 310, 314, 320, 327, 328, 330, 334, 335, 336, 337, 338, 340, 342, 343, 344, 352, 353, 367, 369, 380, 404, 412, 491, 492, 504, 582, 583, 631, 1013, 1015, 1034, 1039, 1041, 1046, 1048, 1049], "color_continuous_scal": 265, "color_intens": 48, "color_it": [250, 254, 255], "color_map": 330, "color_of_interest": 631, "color_palett": [72, 135, 149, 254], "colorbar": [43, 50, 66, 75, 120, 130, 150, 155, 161, 168, 170, 171, 173, 184, 226, 237, 253, 275, 304, 336, 697, 1041], "colorbarbas": 304, "colorblind": [72, 135, 149, 202], "coloring_matrix": [109, 110], "colormap": [120, 155, 175, 336, 631, 697, 1042, 1049], "colors_": 77, "colors_list": 140, "colour": [252, 369, 412, 586, 1000], "colt": [726, 756, 999], "colton": 991, "columbia": 0, "column": [1, 43, 47, 52, 58, 59, 66, 93, 101, 104, 107, 141, 142, 143, 146, 149, 151, 154, 155, 163, 172, 178, 180, 182, 183, 184, 185, 186, 198, 207, 208, 211, 214, 224, 235, 242, 243, 244, 247, 254, 258, 263, 264, 265, 275, 276, 278, 283, 301, 309, 310, 311, 315, 316, 317, 318, 320, 321, 347, 348, 349, 359, 366, 367, 369, 372, 374, 378, 381, 384, 385, 386, 401, 404, 405, 407, 408, 409, 411, 412, 413, 416, 419, 448, 450, 461, 463, 464, 468, 469, 475, 484, 485, 486, 487, 488, 490, 492, 494, 498, 499, 500, 502, 503, 506, 507, 508, 509, 511, 513, 524, 529, 532, 535, 539, 540, 546, 553, 555, 556, 559, 560, 562, 563, 564, 565, 580, 581, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 606, 607, 610, 627, 630, 632, 633, 634, 646, 648, 652, 658, 660, 662, 664, 665, 669, 680, 685, 686, 697, 709, 713, 718, 719, 729, 730, 738, 754, 763, 768, 769, 770, 773, 783, 784, 787, 788, 800, 803, 804, 814, 825, 830, 835, 838, 839, 840, 841, 842, 843, 844, 845, 864, 868, 869, 870, 871, 877, 878, 879, 883, 884, 885, 886, 888, 889, 890, 894, 895, 904, 906, 909, 912, 914, 921, 926, 930, 931, 936, 948, 963, 974, 975, 977, 985, 988, 989, 991, 995, 997, 999, 1000, 1007, 1009, 1014, 1019, 1020, 1026, 1029, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049], "column_labels_": [58, 59, 401, 448, 450], "column_nam": 224, "column_or_1d": [1, 381, 1040, 1044], "column_result": 265, "column_stack": [76, 299, 306], "column_to_drop": 183, "column_tran": [224, 405], "column_transform": 321, "columnar": [366, 461, 1018], "columns_": [57, 401, 419, 448, 450], "columns_to_drop": 258, "columntransform": [1, 43, 102, 103, 154, 183, 184, 185, 207, 224, 235, 243, 245, 247, 310, 314, 316, 317, 318, 320, 364, 366, 384, 385, 395, 463, 464, 629, 869, 988, 989, 1025, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "columntransformerinot": [154, 184], "columnwis": 409, "com": [45, 51, 102, 284, 347, 367, 370, 372, 376, 377, 378, 380, 384, 404, 439, 532, 539, 671, 705, 1036], "coma": 1023, "comaniciu": [96, 404, 445], "comb": 1043, "combat": [299, 409], "combett": [1048, 1049], "combin": [1, 19, 43, 51, 52, 58, 62, 64, 94, 102, 103, 105, 106, 107, 120, 126, 128, 129, 133, 135, 143, 144, 148, 149, 155, 156, 167, 173, 178, 179, 180, 183, 194, 201, 207, 211, 223, 224, 230, 233, 235, 238, 264, 265, 273, 275, 276, 293, 300, 310, 315, 316, 318, 339, 340, 349, 352, 359, 364, 368, 369, 372, 377, 385, 386, 400, 401, 402, 404, 405, 408, 409, 410, 411, 412, 413, 414, 416, 417, 442, 461, 463, 464, 470, 472, 473, 476, 477, 478, 486, 494, 506, 507, 513, 519, 522, 524, 529, 535, 536, 538, 540, 545, 547, 558, 560, 563, 565, 566, 610, 614, 616, 621, 624, 630, 634, 643, 646, 647, 652, 653, 658, 659, 660, 661, 662, 663, 666, 668, 672, 673, 674, 675, 676, 678, 679, 681, 684, 692, 701, 730, 788, 800, 803, 804, 811, 812, 825, 827, 831, 848, 863, 864, 865, 869, 877, 878, 879, 884, 904, 972, 988, 991, 992, 995, 999, 1000, 1002, 1005, 1009, 1012, 1013, 1015, 1016, 1020, 1023, 1029, 1034, 1037, 1040, 1041, 1042, 1044, 1045], "combinator": 810, "combined_featur": 106, "combsccod": 1043, "comcast": 51, "come": [82, 100, 102, 111, 116, 125, 163, 167, 201, 238, 278, 313, 347, 348, 359, 361, 365, 369, 372, 373, 374, 376, 380, 384, 386, 390, 398, 403, 404, 408, 411, 412, 436, 447, 453, 469, 548, 705, 795, 821, 906, 909, 953, 988, 989, 993, 996, 998, 1002, 1005, 1014, 1029, 1040, 1043, 1045], "comedi": 875, "comfort": [88, 411], "command": [237, 359, 360, 370, 372, 376, 378, 380, 390, 412, 506, 1018, 1031], "commensur": 0, "comment": [80, 347, 370, 371, 372, 373, 375, 376, 380, 484, 578, 999], "commerc": 1023, "commerci": [408, 1023], "commit": [375, 376, 380, 1022, 1029, 1030, 1031, 1032], "committ": 1029, "commod": 999, "common": [1, 52, 54, 55, 57, 123, 160, 163, 180, 181, 182, 205, 211, 212, 259, 263, 264, 271, 281, 315, 322, 340, 347, 349, 354, 359, 366, 372, 374, 380, 382, 384, 385, 389, 390, 395, 401, 402, 404, 405, 408, 410, 413, 414, 444, 462, 464, 494, 573, 589, 632, 653, 672, 673, 701, 746, 753, 769, 801, 802, 805, 815, 817, 818, 819, 820, 821, 827, 830, 865, 867, 875, 876, 877, 882, 884, 889, 890, 892, 893, 894, 895, 921, 923, 950, 953, 988, 989, 995, 999, 1002, 1005, 1009, 1014, 1015, 1018, 1019, 1020, 1023, 1025, 1029, 1037, 1039, 1040, 1044], "common_nod": 354, "common_node_id": 354, "common_param": [90, 146, 149, 184, 239, 266, 267, 340], "common_scatter_plot_param": 155, "commonli": [207, 261, 277, 340, 365, 386, 404, 405, 414, 614, 758, 759, 797, 833, 876, 997, 999, 1000, 1002, 1045], "commun": [240, 365, 371, 377, 380, 386, 387, 404, 411, 536, 538, 545, 692, 710, 876, 989, 996, 1002, 1009, 1013, 1017, 1018, 1022, 1023, 1037, 1038], "commut": [43, 52], "comp": [57, 115, 116, 123, 130, 263, 302, 329, 347, 348, 349, 367], "comp_cov": [466, 467, 468, 469, 470, 471, 472, 473], "compact": [163, 188, 304, 359, 369, 844, 845, 1015, 1031], "compani": [0, 207, 224, 403, 404, 1022, 1023], "companion": [372, 1009], "companioni": 1029, "compar": [43, 44, 48, 52, 57, 58, 61, 62, 64, 70, 71, 72, 74, 75, 76, 78, 81, 82, 85, 87, 88, 89, 90, 91, 97, 100, 103, 104, 105, 106, 111, 112, 114, 116, 123, 127, 129, 133, 134, 135, 137, 139, 142, 143, 144, 146, 148, 149, 150, 152, 154, 156, 163, 171, 178, 179, 180, 183, 184, 185, 186, 189, 191, 193, 194, 196, 197, 198, 201, 202, 204, 207, 208, 210, 211, 213, 214, 216, 220, 223, 224, 226, 227, 230, 232, 235, 238, 241, 243, 244, 245, 246, 251, 252, 256, 259, 262, 263, 265, 267, 269, 271, 273, 275, 276, 277, 279, 281, 284, 285, 286, 287, 289, 290, 291, 293, 294, 295, 296, 298, 301, 303, 305, 308, 309, 311, 315, 340, 345, 347, 348, 349, 353, 354, 355, 361, 367, 369, 372, 374, 398, 400, 401, 402, 403, 404, 406, 407, 408, 409, 411, 413, 414, 437, 438, 439, 441, 442, 443, 445, 446, 447, 449, 455, 460, 461, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 487, 494, 500, 502, 510, 512, 520, 522, 526, 529, 535, 537, 539, 543, 544, 549, 550, 559, 560, 561, 562, 563, 631, 639, 644, 645, 652, 653, 655, 657, 663, 676, 677, 684, 695, 705, 712, 715, 731, 738, 743, 786, 798, 800, 805, 814, 821, 827, 830, 837, 846, 850, 853, 857, 861, 862, 864, 865, 872, 873, 874, 876, 877, 878, 879, 880, 881, 882, 884, 885, 889, 890, 891, 892, 893, 894, 895, 904, 905, 906, 908, 909, 988, 991, 992, 993, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1005, 1009, 1010, 1013, 1014, 1015, 1018, 1020, 1029, 1031, 1036, 1037, 1042], "comparison": [47, 51, 53, 57, 60, 61, 62, 63, 65, 66, 69, 71, 73, 75, 77, 83, 90, 91, 92, 93, 94, 96, 102, 110, 119, 121, 122, 124, 126, 130, 134, 136, 137, 140, 146, 149, 152, 155, 156, 157, 166, 172, 173, 174, 176, 180, 185, 193, 194, 195, 196, 197, 200, 201, 207, 211, 221, 224, 225, 228, 229, 230, 231, 232, 236, 251, 256, 258, 259, 260, 261, 263, 268, 270, 276, 278, 283, 293, 299, 306, 308, 309, 313, 315, 330, 333, 342, 346, 347, 348, 355, 367, 369, 386, 402, 404, 406, 407, 409, 413, 414, 434, 435, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 449, 459, 479, 480, 481, 485, 502, 510, 512, 513, 520, 523, 533, 539, 547, 548, 551, 562, 563, 580, 581, 587, 588, 589, 590, 605, 607, 610, 611, 615, 622, 625, 631, 639, 643, 657, 658, 659, 672, 688, 689, 690, 691, 692, 704, 738, 743, 779, 788, 798, 800, 801, 802, 803, 805, 806, 814, 816, 817, 818, 819, 820, 821, 830, 839, 842, 846, 861, 862, 865, 877, 878, 882, 884, 885, 889, 890, 891, 892, 893, 894, 895, 904, 906, 907, 909, 910, 912, 988, 991, 992, 993, 996, 999, 1001, 1002, 1005, 1014, 1020, 1026], "compat": [240, 267, 284, 314, 322, 323, 366, 370, 374, 375, 381, 382, 384, 386, 390, 395, 398, 412, 460, 466, 506, 564, 576, 588, 602, 609, 614, 615, 618, 619, 620, 622, 623, 632, 633, 634, 658, 659, 673, 675, 774, 778, 801, 802, 805, 807, 808, 809, 810, 813, 815, 816, 817, 818, 819, 820, 821, 848, 849, 864, 869, 877, 878, 916, 917, 923, 926, 941, 943, 963, 1002, 1004, 1018, 1019, 1023, 1025, 1029, 1032, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1048, 1049], "compens": [112, 182, 184, 188, 207, 224, 265, 406, 409], "compet": [43, 183], "competit": [43, 66, 146, 347, 411, 644, 999, 1002], "compil": [154, 284, 349, 359, 360, 373, 374, 375, 376, 380, 381, 384, 1018, 1029], "compl": 91, "complain": 1047, "complement": [1, 184, 274, 347, 632, 633, 802, 817, 820, 830, 839, 840, 841, 842, 843, 1006, 1021, 1025, 1037], "complementari": [43, 412], "complementnb": [1, 265, 347, 839, 840, 842, 843, 1001, 1037, 1041, 1042, 1044], "complet": [0, 1, 43, 72, 73, 74, 79, 82, 85, 91, 95, 116, 149, 152, 158, 160, 163, 180, 185, 186, 213, 232, 233, 240, 243, 258, 262, 309, 311, 313, 348, 355, 367, 372, 376, 377, 380, 384, 405, 408, 409, 411, 412, 438, 442, 446, 449, 459, 460, 461, 464, 493, 534, 535, 536, 537, 542, 544, 556, 567, 568, 580, 586, 587, 588, 590, 627, 628, 629, 630, 645, 649, 657, 671, 673, 704, 705, 715, 716, 717, 729, 731, 736, 737, 757, 786, 795, 832, 835, 838, 847, 863, 864, 865, 866, 933, 983, 993, 995, 999, 1000, 1002, 1014, 1015, 1018, 1020, 1029, 1032, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1049], "completed_fac": 242, "completeness_scor": [1, 73, 82, 91, 314, 348, 404, 736, 737, 795, 999], "complex": [42, 48, 49, 52, 54, 58, 105, 154, 162, 167, 172, 178, 180, 201, 211, 220, 223, 232, 239, 240, 243, 256, 262, 268, 273, 305, 313, 316, 317, 321, 323, 324, 336, 340, 349, 350, 354, 368, 372, 377, 384, 404, 405, 409, 411, 415, 437, 441, 444, 445, 447, 464, 486, 498, 499, 500, 512, 532, 539, 549, 555, 556, 557, 558, 560, 562, 563, 603, 630, 638, 656, 658, 676, 677, 734, 750, 800, 803, 804, 814, 817, 830, 832, 860, 864, 865, 869, 877, 884, 900, 907, 910, 912, 913, 914, 915, 988, 989, 991, 992, 994, 996, 998, 999, 1000, 1005, 1009, 1012, 1019, 1020, 1021, 1023, 1025, 1030, 1032, 1038, 1039, 1042], "complexity_comput": [46, 49], "complexity_label": [46, 49], "compli": [372, 386, 941, 1019], "complianc": [149, 372], "compliant": [318, 372, 1047, 1048, 1049], "complic": [64, 240, 299, 378, 414, 694, 1002], "compon": [1, 10, 43, 44, 55, 79, 91, 95, 102, 105, 114, 115, 119, 121, 122, 124, 125, 127, 128, 130, 152, 172, 180, 182, 194, 215, 226, 237, 238, 241, 249, 250, 251, 253, 254, 255, 257, 263, 265, 270, 284, 285, 286, 287, 295, 296, 302, 309, 315, 333, 352, 359, 364, 367, 372, 374, 378, 381, 398, 400, 404, 405, 407, 412, 414, 416, 418, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 459, 460, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 500, 502, 513, 519, 524, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 571, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 695, 797, 798, 799, 800, 803, 804, 814, 822, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 894, 895, 896, 897, 898, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 919, 947, 948, 991, 996, 998, 1009, 1011, 1014, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1029, 1031, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "component_1": 254, "component_2": 254, "component_indices_": [639, 1042], "components_": [45, 54, 91, 116, 120, 122, 123, 130, 237, 238, 302, 309, 317, 386, 405, 409, 441, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 541, 542, 639, 853, 860, 896, 897, 991, 1011, 1033, 1035, 1041, 1044, 1047], "components_col": 105, "compos": [1, 43, 44, 62, 101, 102, 103, 107, 116, 136, 143, 154, 180, 183, 184, 185, 207, 209, 224, 235, 243, 245, 247, 278, 281, 310, 314, 316, 317, 318, 320, 321, 385, 395, 404, 405, 408, 461, 462, 463, 464, 513, 551, 612, 998, 1000, 1020, 1029], "composit": [6, 35, 235, 314, 364, 408, 658, 788, 989, 995, 1008, 1025, 1030], "compound": [43, 224, 412, 610, 612, 680, 724, 752, 995], "compoundkernel": [1, 610, 1043], "comprehens": [340, 380, 412, 758, 759, 997, 1023, 1037], "compress": [42, 50, 55, 99, 162, 180, 281, 304, 367, 398, 404, 409, 412, 413, 652, 672, 692, 834, 877, 969, 972, 984, 995, 1000, 1009, 1020, 1029, 1038], "compressed_raccoon_kmean": 86, "compressed_raccoon_uniform": 86, "compris": [102, 146, 262, 347, 348, 349, 367, 384, 409, 411, 513, 807, 996], "compromis": [48, 64, 184, 359, 372, 647, 679, 1002, 1032], "comput": [1, 27, 43, 45, 46, 50, 52, 53, 58, 63, 72, 74, 76, 77, 80, 85, 87, 90, 91, 93, 94, 102, 104, 110, 111, 112, 113, 121, 129, 137, 141, 144, 145, 146, 147, 148, 149, 155, 162, 163, 167, 172, 174, 175, 178, 183, 184, 185, 186, 188, 191, 192, 194, 195, 196, 197, 198, 207, 209, 211, 214, 220, 223, 224, 227, 229, 230, 234, 236, 237, 239, 243, 244, 246, 258, 260, 262, 264, 265, 266, 267, 271, 273, 274, 275, 284, 286, 288, 290, 291, 293, 294, 297, 304, 313, 317, 318, 321, 326, 328, 336, 340, 343, 347, 348, 349, 354, 360, 361, 366, 367, 369, 372, 374, 377, 378, 379, 381, 384, 385, 386, 389, 390, 398, 399, 400, 401, 402, 404, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 454, 456, 458, 459, 460, 462, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 514, 529, 530, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 572, 581, 584, 585, 588, 589, 590, 592, 593, 598, 599, 602, 603, 604, 605, 606, 607, 608, 610, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 627, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 715, 716, 717, 718, 719, 720, 725, 726, 727, 729, 730, 731, 734, 736, 738, 739, 740, 743, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 792, 793, 794, 796, 797, 798, 799, 800, 803, 804, 806, 814, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 860, 861, 862, 869, 870, 873, 874, 879, 880, 881, 882, 883, 884, 888, 889, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 906, 909, 911, 912, 913, 914, 915, 945, 946, 947, 948, 965, 966, 971, 973, 979, 988, 991, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1009, 1011, 1012, 1013, 1014, 1015, 1018, 1019, 1023, 1025, 1026, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "computation": [37, 53, 109, 120, 140, 145, 154, 167, 284, 340, 347, 358, 373, 384, 404, 405, 408, 409, 411, 414, 536, 632, 633, 671, 763, 800, 802, 803, 804, 814, 827, 995, 996, 998, 1006, 1007, 1011, 1025, 1033], "compute_class_weight": [1, 386, 1032, 1043, 1049], "compute_corrected_ttest": 264, "compute_dist": [438, 442, 1041], "compute_full_tre": [438, 442, 1033], "compute_import": 1031, "compute_inverse_compon": [896, 897, 1011], "compute_inverse_transform": 1043, "compute_label": [439, 446], "compute_node_depth": 354, "compute_optics_graph": [1, 452, 453, 1046], "compute_sample_weight": [1, 1043], "compute_scor": [107, 127, 190, 191, 644, 645, 1038], "compute_score_for": 178, "compute_sourc": 416, "computed_scor": 645, "con": [398, 588, 998], "concat": [43, 103, 139, 154, 178, 182, 183, 184, 198, 224, 235, 245, 314, 317, 877], "concaten": [1, 63, 70, 74, 83, 94, 101, 104, 112, 136, 150, 159, 175, 180, 190, 193, 201, 220, 221, 227, 233, 249, 253, 254, 260, 269, 271, 272, 273, 274, 289, 302, 308, 311, 326, 335, 339, 347, 405, 461, 464, 502, 507, 529, 535, 539, 540, 598, 781, 800, 863, 864, 866, 869, 877, 909, 1000, 1020, 1030], "concav": [163, 321, 369], "concentr": [46, 48, 118, 125, 134, 152, 172, 179, 180, 231, 248, 250, 255, 294, 306, 327, 368, 372, 411, 440, 517, 797, 998, 1005, 1020], "concentrations_prior": 249, "concept": [1, 112, 140, 144, 240, 273, 384, 404, 410, 412, 991, 999, 1002, 1015, 1017, 1023], "conceptu": [369, 411, 997], "concern": [37, 56, 71, 108, 114, 117, 119, 131, 133, 157, 164, 166, 177, 180, 187, 189, 225, 248, 254, 258, 280, 282, 285, 298, 303, 324, 331, 346, 350, 359, 374, 398, 996, 1011], "concis": [64, 207, 372, 377, 1040, 1042], "conclud": [66, 134, 183, 191, 224, 264, 317, 349, 355, 387, 864], "conclus": [43, 125, 183, 185, 207, 209, 264, 266, 355, 411], "concomit": [649, 995], "concret": [211, 373, 387, 403, 413, 674, 675, 896, 897, 995, 1013, 1018, 1048], "concurr": [386, 412, 966, 1041, 1043], "cond": 1048, "conda": [313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 360, 372, 373, 375, 376, 378, 380, 390, 391, 397, 398, 1015], "conda_prefix": 378, "condarc": 370, "condens": [188, 443], "condit": [1, 43, 51, 52, 62, 64, 113, 146, 180, 181, 183, 198, 201, 209, 212, 224, 240, 244, 267, 316, 354, 378, 384, 389, 400, 401, 402, 403, 404, 406, 409, 411, 413, 448, 461, 468, 469, 470, 475, 494, 511, 521, 522, 534, 537, 538, 539, 541, 543, 545, 547, 548, 560, 627, 632, 633, 643, 650, 651, 652, 654, 655, 656, 670, 672, 673, 674, 675, 682, 683, 687, 697, 712, 717, 718, 736, 737, 795, 821, 839, 840, 841, 842, 843, 862, 865, 868, 877, 878, 881, 885, 948, 970, 993, 995, 996, 997, 999, 1001, 1002, 1004, 1009, 1015, 1020, 1025, 1030, 1032, 1033, 1034, 1036, 1037, 1039, 1041, 1043, 1044, 1045, 1047], "condition": [51, 64, 207, 402, 406, 758, 993, 999], "condition2": 154, "conduct": [182, 264, 414, 1022, 1043], "conf": [46, 64, 376, 402, 408, 839, 1001, 1043], "confer": [258, 264, 367, 404, 409, 415, 436, 441, 447, 509, 533, 561, 696, 708, 726, 756, 860, 861, 862, 999, 1005, 1011, 1015], "confid": [52, 61, 62, 63, 64, 66, 149, 172, 174, 250, 264, 267, 328, 387, 402, 414, 636, 658, 659, 666, 668, 671, 674, 675, 676, 698, 702, 707, 720, 726, 727, 739, 740, 756, 789, 832, 871, 904, 906, 909, 995, 998, 999, 1000, 1005, 1012, 1013, 1014, 1023, 1039], "config": [52, 360, 370, 372, 373, 380, 626, 1037], "config_context": [1, 247, 322, 359, 360, 400, 626, 902, 1036, 1042, 1045], "configur": [1, 2, 46, 49, 64, 66, 103, 104, 184, 240, 245, 247, 258, 278, 311, 347, 358, 370, 372, 374, 378, 384, 386, 390, 395, 400, 405, 412, 413, 428, 434, 439, 440, 441, 442, 444, 446, 449, 459, 461, 462, 465, 479, 480, 481, 482, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 580, 581, 582, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 610, 611, 626, 627, 628, 629, 630, 632, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 694, 695, 788, 799, 800, 801, 802, 807, 809, 814, 818, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 851, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 966, 967, 996, 999, 1009, 1014, 1018, 1025, 1033, 1036, 1037, 1038, 1039, 1041, 1043, 1044, 1045, 1046], "confirm": [43, 52, 66, 116, 137, 143, 146, 149, 162, 185, 207, 209, 258, 267, 270, 273, 309, 349, 376, 988, 1009, 1037], "conflict": [370, 375, 376, 380, 390, 1036, 1037], "conform": [52, 372, 580, 628, 832, 833, 999, 1018, 1019, 1036, 1042], "confound": [182, 183], "confus": [1, 68, 180, 234, 256, 258, 273, 325, 326, 347, 386, 465, 502, 631, 652, 697, 713, 715, 718, 729, 730, 738, 754, 784, 787, 830, 902, 909, 1020, 1029, 1030, 1034, 1038, 1039, 1041, 1042, 1043, 1044], "confusingli": 370, "confusion_matrix": [1, 68, 234, 257, 258, 321, 325, 326, 697, 713, 754, 799, 827, 999, 1030, 1035, 1036, 1039, 1040, 1042, 1046], "confusion_matrix_scor": 999, "confusionmatrixdisplai": [1, 45, 68, 257, 316, 321, 325, 347, 631, 718, 999, 1039, 1040, 1042, 1043, 1044, 1048], "congruenc": [654, 655, 656, 682, 683], "conjug": [264, 449, 459, 672, 674, 687, 695, 995], "conjunct": [395, 404, 593, 702, 806, 822, 823, 825, 826, 827, 828, 831, 967, 989, 995, 1044], "connect": [1, 51, 74, 79, 81, 84, 87, 95, 99, 100, 370, 372, 381, 386, 406, 438, 442, 449, 459, 460, 584, 585, 695, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858, 997, 999, 1002, 1004, 1012, 1022, 1033, 1042, 1046], "connected_compon": 1036, "connectionist": [861, 862], "conner": 1042, "connor": [1037, 1042, 1046, 1047, 1049], "connossor": [1037, 1038], "conocophillip": 51, "conort": 1023, "conquer": 948, "conrad": [1029, 1030, 1044, 1047, 1048], "conroi": 1044, "consecut": [134, 144, 208, 384, 402, 408, 412, 440, 444, 446, 447, 449, 453, 456, 459, 535, 536, 537, 544, 601, 645, 666, 667, 668, 676, 677, 678, 797, 798, 805, 839, 840, 841, 842, 843, 861, 862, 988, 1009, 1037], "consensu": [1, 58, 59, 72, 371, 372, 387, 401, 404, 649, 671, 678, 679, 719, 999], "consensus_scor": [1, 58, 59, 401, 1031], "consequ": [90, 127, 224, 264, 265, 304, 322, 333, 355, 402, 403, 409, 411, 559, 560, 562, 563, 564, 655, 656, 989, 999, 1007, 1015, 1038, 1040, 1045, 1047], "conserv": [50, 376, 386, 581, 588, 896, 897, 998, 1011], "consid": [0, 43, 51, 52, 53, 58, 62, 74, 88, 99, 103, 112, 120, 124, 126, 143, 146, 158, 162, 163, 179, 184, 201, 207, 209, 240, 258, 264, 267, 271, 273, 275, 278, 284, 287, 290, 291, 304, 315, 321, 333, 340, 341, 343, 347, 355, 359, 360, 361, 364, 371, 372, 374, 378, 380, 384, 386, 387, 395, 398, 400, 403, 404, 409, 410, 411, 412, 413, 414, 415, 416, 435, 441, 443, 447, 454, 471, 506, 507, 519, 531, 539, 547, 548, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 584, 585, 587, 588, 590, 592, 606, 607, 620, 631, 632, 633, 646, 652, 658, 659, 660, 662, 671, 679, 688, 689, 690, 692, 693, 694, 696, 700, 702, 705, 707, 715, 726, 730, 734, 756, 786, 788, 794, 846, 847, 848, 850, 852, 854, 855, 856, 859, 861, 862, 867, 877, 878, 885, 899, 900, 909, 910, 912, 913, 914, 915, 925, 982, 988, 994, 995, 996, 997, 999, 1000, 1002, 1005, 1006, 1007, 1009, 1013, 1014, 1015, 1026, 1032, 1033, 1037, 1041, 1042, 1044, 1045, 1046], "consider": [148, 149, 168, 171, 243, 259, 265, 271, 367, 372, 403, 414, 619, 800, 803, 804, 814, 822, 988, 995, 1001, 1005, 1013, 1023, 1046], "consist": [0, 1, 43, 46, 63, 68, 72, 89, 90, 102, 111, 118, 120, 140, 143, 149, 150, 156, 162, 163, 170, 172, 175, 179, 186, 201, 207, 224, 239, 243, 270, 273, 301, 309, 313, 316, 343, 348, 355, 359, 365, 367, 369, 372, 374, 378, 379, 380, 381, 385, 386, 387, 400, 402, 404, 406, 410, 411, 412, 422, 423, 426, 427, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 460, 461, 462, 464, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 487, 495, 529, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 552, 554, 556, 558, 560, 561, 563, 564, 565, 566, 567, 568, 580, 581, 582, 587, 588, 590, 611, 627, 628, 629, 630, 635, 638, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 674, 677, 678, 679, 687, 688, 689, 690, 691, 700, 735, 797, 798, 807, 832, 833, 834, 836, 837, 838, 839, 847, 848, 850, 852, 855, 856, 862, 867, 868, 869, 871, 875, 876, 879, 880, 882, 883, 885, 896, 897, 900, 904, 905, 907, 908, 910, 913, 915, 921, 930, 932, 955, 969, 972, 987, 988, 991, 992, 993, 995, 996, 998, 999, 1000, 1002, 1003, 1009, 1012, 1014, 1015, 1019, 1023, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "consol": 142, "consolid": [0, 386, 387, 1029], "consolidate_scor": 52, "consortium": [0, 1023], "constant": [1, 43, 129, 137, 149, 155, 170, 173, 174, 179, 183, 196, 208, 209, 211, 224, 235, 240, 244, 245, 261, 267, 296, 300, 302, 305, 307, 314, 343, 345, 355, 364, 374, 381, 386, 401, 411, 414, 427, 443, 462, 479, 480, 481, 509, 511, 532, 536, 538, 545, 547, 548, 549, 550, 552, 554, 556, 558, 560, 563, 566, 568, 589, 605, 608, 611, 613, 627, 630, 632, 633, 635, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 676, 677, 678, 679, 680, 687, 689, 693, 695, 721, 723, 724, 728, 732, 775, 777, 785, 799, 822, 837, 838, 847, 855, 861, 862, 869, 880, 883, 892, 904, 905, 906, 907, 908, 909, 910, 911, 913, 915, 991, 993, 995, 999, 1001, 1002, 1009, 1013, 1015, 1025, 1032, 1037, 1039, 1041, 1042, 1043, 1045, 1047, 1048], "constant_": 550, "constant_valu": [414, 613, 617], "constant_value_bound": [414, 611, 613, 617], "constantini": 1045, "constantkernel": [1, 170, 176, 414, 611, 617, 621, 624], "constantli": [72, 207, 1023], "constitu": 369, "constitut": [83, 386, 408, 411, 447, 453, 587, 588, 590, 1003], "constrain": [25, 81, 120, 143, 149, 151, 184, 200, 277, 299, 314, 320, 334, 336, 365, 386, 404, 409, 411, 507, 559, 560, 635, 658, 659, 690, 694, 822, 829, 995, 998, 1033], "constrained_layout": [120, 184, 226, 310, 311, 318], "constraint": [88, 90, 100, 120, 133, 180, 197, 204, 211, 243, 244, 259, 300, 301, 302, 314, 372, 384, 409, 412, 484, 506, 507, 555, 556, 557, 558, 559, 560, 562, 563, 632, 635, 657, 818, 819, 912, 913, 914, 915, 968, 988, 990, 995, 996, 1013, 1020, 1033, 1036, 1037, 1040, 1042, 1044, 1046], "constru": 412, "construct": [1, 43, 50, 102, 104, 134, 136, 138, 154, 163, 224, 234, 240, 245, 247, 297, 305, 307, 314, 317, 366, 369, 374, 381, 386, 404, 405, 408, 409, 411, 412, 415, 429, 438, 439, 441, 442, 447, 449, 454, 460, 462, 464, 517, 533, 539, 542, 553, 554, 580, 586, 639, 688, 690, 691, 814, 844, 845, 846, 847, 848, 850, 852, 854, 855, 856, 863, 864, 865, 866, 868, 909, 929, 931, 947, 948, 959, 963, 988, 989, 991, 995, 996, 999, 1000, 1002, 1009, 1012, 1014, 1015, 1019, 1034, 1036, 1037, 1040, 1043], "construct_grid": [50, 297], "constructor": [30, 31, 104, 236, 360, 374, 386, 400, 405, 412, 461, 464, 547, 548, 553, 565, 566, 567, 568, 580, 581, 587, 588, 596, 668, 676, 677, 800, 814, 846, 847, 848, 850, 852, 854, 855, 856, 863, 864, 865, 866, 988, 1000, 1009, 1014, 1019, 1029, 1030, 1032, 1033, 1034, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1046], "consult": 999, "consum": [1, 120, 355, 366, 374, 386, 395, 404, 408, 411, 446, 803, 804, 864, 865, 956, 957, 966, 995, 1023, 1034, 1046], "consumpt": [47, 359, 386, 404, 532, 555, 556, 562, 563, 800, 814, 825, 826, 827, 912, 913, 914, 915, 966, 1029, 1031, 1035, 1037, 1038, 1043], "contact": [384, 1018], "contain": [1, 49, 57, 61, 64, 69, 75, 82, 89, 91, 102, 103, 126, 136, 138, 149, 150, 155, 173, 183, 184, 186, 188, 200, 211, 224, 233, 240, 243, 244, 247, 254, 258, 262, 264, 270, 273, 274, 277, 283, 290, 291, 293, 304, 316, 323, 326, 329, 347, 348, 365, 366, 367, 369, 372, 373, 374, 376, 377, 378, 379, 380, 381, 384, 386, 398, 400, 402, 404, 405, 407, 408, 409, 411, 412, 413, 414, 416, 418, 428, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 459, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 484, 485, 486, 487, 488, 490, 491, 492, 494, 498, 500, 501, 502, 506, 507, 508, 512, 513, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 580, 581, 582, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 685, 686, 688, 689, 690, 691, 692, 696, 697, 698, 700, 701, 702, 709, 712, 735, 736, 737, 772, 779, 780, 788, 794, 797, 798, 799, 800, 803, 804, 806, 814, 818, 819, 822, 823, 827, 828, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 926, 929, 930, 931, 944, 951, 952, 955, 956, 957, 963, 966, 967, 968, 969, 988, 989, 991, 997, 999, 1000, 1003, 1005, 1007, 1009, 1010, 1012, 1015, 1018, 1022, 1029, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047], "container": 398, "container_fold": 501, "container_path": 501, "contamin": [48, 111, 112, 150, 233, 243, 290, 291, 466, 561, 850, 1005, 1037, 1045, 1046], "content": [1, 6, 55, 265, 309, 347, 349, 367, 372, 376, 378, 398, 412, 483, 501, 506, 507, 587, 588, 590, 671, 918, 1008, 1017, 1023, 1030, 1039], "context": [1, 91, 247, 258, 273, 277, 284, 321, 359, 360, 366, 371, 373, 385, 386, 404, 405, 410, 411, 412, 414, 415, 434, 441, 443, 445, 447, 449, 454, 455, 458, 461, 464, 465, 469, 529, 533, 534, 535, 537, 540, 541, 542, 543, 544, 546, 553, 554, 555, 556, 561, 562, 563, 564, 565, 566, 567, 568, 593, 601, 606, 607, 610, 626, 627, 630, 632, 634, 639, 647, 651, 653, 655, 657, 658, 659, 661, 663, 665, 666, 668, 676, 679, 688, 689, 690, 691, 692, 693, 694, 774, 778, 781, 800, 803, 804, 806, 814, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 836, 837, 846, 847, 850, 852, 854, 855, 857, 858, 863, 866, 899, 900, 902, 904, 905, 906, 907, 908, 909, 910, 989, 995, 999, 1005, 1009, 1013, 1022, 1023, 1029, 1036, 1037, 1042, 1045], "contigu": [43, 59, 374, 384, 401, 408, 412, 440, 444, 446, 456, 646, 647, 652, 653, 660, 661, 662, 663, 681, 684, 781, 819, 844, 845, 904, 906, 907, 908, 909, 910, 1014, 1032, 1039, 1043, 1047], "contin": [410, 1009], "conting": [1, 714, 715, 731, 755, 1035], "contingency_matrix": [1, 404, 755, 1037], "continu": [0, 1, 52, 55, 57, 77, 118, 143, 167, 180, 184, 191, 208, 214, 224, 227, 230, 243, 244, 246, 250, 254, 255, 301, 303, 309, 310, 315, 316, 354, 360, 367, 370, 374, 375, 376, 377, 380, 384, 386, 387, 390, 404, 409, 411, 465, 490, 591, 594, 595, 598, 599, 603, 606, 607, 608, 632, 646, 647, 652, 653, 657, 660, 661, 662, 663, 726, 756, 812, 814, 867, 869, 871, 873, 874, 883, 884, 885, 901, 902, 913, 941, 963, 988, 995, 996, 999, 1000, 1002, 1003, 1009, 1015, 1019, 1020, 1023, 1029, 1031, 1032, 1037, 1042, 1043, 1044, 1046, 1048], "continuous_featur": 377, "contour": [48, 50, 70, 80, 81, 111, 142, 163, 170, 171, 173, 217, 218, 219, 220, 233, 238, 253, 290, 297, 334, 335, 337, 338, 340, 341, 369, 379, 631, 632, 1005, 1013, 1049], "contour_kw": 632, "contourf": [50, 142, 220, 238, 290, 297, 299, 306, 307, 330, 335, 341, 631, 632], "contours_": [379, 632], "contract": [207, 224, 340, 360, 386, 1019], "contradict": 186, "contrari": [43, 53, 183, 227, 231, 243, 249, 267, 304, 347, 366, 404, 494, 542, 605, 802, 817, 885, 995, 1001, 1005], "contrast": [128, 184, 205, 209, 239, 243, 264, 266, 293, 309, 348, 386, 402, 404, 407, 411, 414, 446, 449, 459, 619, 643, 814, 860, 989, 992, 994, 995, 999, 1002, 1004, 1007, 1009, 1012, 1013, 1015, 1039], "contrib": [319, 372, 374, 380, 384, 386, 404, 443, 1018, 1019, 1045], "contribut": [0, 53, 58, 147, 172, 194, 211, 273, 309, 369, 370, 375, 376, 380, 386, 387, 390, 409, 410, 411, 444, 446, 551, 552, 557, 558, 726, 729, 756, 993, 999, 1002, 1007, 1014, 1018, 1019, 1022, 1023, 1029, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "contributor": [360, 375, 376, 377, 380, 384, 386, 999, 1017, 1019, 1030, 1031, 1032, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "control": [37, 51, 70, 94, 124, 125, 140, 172, 174, 194, 201, 205, 208, 211, 214, 236, 237, 265, 267, 281, 286, 302, 314, 316, 340, 351, 353, 359, 360, 365, 368, 372, 374, 377, 380, 384, 386, 390, 403, 404, 407, 408, 409, 410, 413, 414, 429, 437, 446, 451, 468, 469, 475, 529, 534, 535, 536, 537, 538, 541, 543, 544, 545, 546, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 592, 593, 595, 611, 614, 619, 625, 627, 632, 634, 639, 641, 642, 646, 647, 649, 650, 651, 652, 654, 655, 656, 672, 674, 676, 677, 682, 683, 687, 692, 701, 797, 798, 800, 801, 802, 803, 804, 805, 806, 814, 815, 816, 817, 818, 819, 820, 822, 823, 825, 826, 827, 828, 830, 831, 834, 835, 838, 861, 862, 883, 885, 896, 897, 902, 904, 905, 906, 907, 909, 910, 912, 913, 914, 915, 918, 941, 966, 985, 988, 995, 996, 998, 999, 1000, 1002, 1005, 1006, 1009, 1011, 1013, 1014, 1015, 1018, 1019, 1021, 1025, 1029, 1031, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1047, 1048, 1049], "convei": [67, 231, 306], "conveni": [52, 88, 211, 243, 322, 364, 380, 384, 405, 408, 412, 414, 440, 444, 446, 448, 450, 461, 486, 611, 676, 678, 699, 728, 785, 863, 864, 972, 989, 991, 995, 996, 1006, 1023, 1029], "convent": [1, 132, 149, 258, 264, 372, 374, 375, 376, 378, 386, 400, 422, 423, 426, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 466, 467, 468, 469, 470, 471, 472, 473, 506, 507, 529, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 545, 561, 564, 567, 568, 580, 581, 582, 587, 588, 590, 627, 628, 629, 630, 677, 688, 689, 690, 691, 718, 797, 798, 832, 833, 848, 850, 852, 856, 868, 876, 879, 880, 882, 885, 896, 897, 908, 941, 943, 999, 1029, 1036, 1037, 1040, 1042, 1043, 1045, 1046], "convention": [334, 386, 900], "converg": [1, 55, 90, 94, 109, 110, 144, 146, 149, 167, 173, 202, 209, 214, 222, 250, 252, 300, 301, 304, 309, 322, 326, 361, 381, 386, 401, 404, 409, 412, 414, 416, 437, 440, 443, 444, 445, 446, 449, 451, 456, 457, 458, 459, 468, 469, 475, 479, 480, 481, 531, 533, 534, 535, 536, 537, 544, 569, 610, 644, 645, 646, 647, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 668, 672, 674, 676, 678, 682, 683, 687, 688, 690, 691, 694, 695, 797, 798, 853, 861, 862, 899, 900, 906, 989, 994, 995, 996, 998, 1003, 1013, 1029, 1032, 1033, 1034, 1036, 1037, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1049], "converged_": [797, 798, 1047], "convergence_it": [437, 451], "convergencewarn": [1, 171, 173, 175, 214, 221, 250, 300, 301, 306, 381, 386, 797, 798, 1037, 1038, 1041, 1049], "convers": [1, 55, 146, 200, 347, 355, 361, 366, 372, 374, 380, 384, 386, 398, 412, 570, 859, 868, 876, 930, 931, 984, 996, 1023, 1037, 1038, 1039, 1042, 1045, 1049], "convert": [1, 55, 70, 80, 99, 103, 123, 155, 172, 186, 207, 226, 243, 246, 250, 251, 254, 255, 278, 297, 321, 354, 359, 366, 367, 381, 384, 386, 398, 400, 412, 437, 440, 441, 444, 446, 447, 448, 449, 456, 461, 462, 494, 532, 539, 551, 552, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 570, 580, 581, 587, 588, 589, 590, 592, 593, 605, 627, 628, 629, 630, 646, 652, 658, 659, 660, 662, 666, 667, 668, 670, 674, 676, 677, 678, 692, 746, 778, 799, 822, 859, 868, 869, 871, 875, 877, 878, 879, 881, 904, 912, 913, 914, 915, 928, 930, 931, 955, 983, 984, 988, 995, 996, 997, 999, 1009, 1010, 1014, 1015, 1029, 1031, 1032, 1033, 1034, 1035, 1037, 1039, 1040, 1041, 1044, 1045, 1046, 1047], "convex": [129, 146, 180, 189, 219, 226, 344, 348, 404, 406, 409, 417, 443, 449, 459, 470, 472, 473, 476, 477, 478, 658, 676, 692, 995, 996, 1002, 1003, 1013, 1020, 1042], "convinc": 183, "convolut": [45, 175], "convolv": 302, "coo": [386, 551, 552, 692, 871, 926, 930, 931, 1002, 1030, 1046], "coo_matrix": [53, 195, 449, 584, 585, 969, 972], "cook": [369, 492, 1029, 1035], "cookbook": [414, 622, 623], "cool": [412, 1029], "coolwarm": [259, 333], "cooman": 369, "cooper": 1049, "coord": [584, 1000], "coordin": [1, 50, 51, 53, 87, 125, 153, 171, 197, 226, 265, 297, 359, 367, 409, 414, 440, 444, 445, 446, 458, 468, 469, 475, 529, 535, 536, 537, 538, 540, 541, 543, 544, 545, 546, 548, 584, 614, 646, 647, 651, 652, 653, 654, 655, 656, 658, 660, 661, 662, 663, 681, 682, 683, 684, 688, 689, 690, 693, 694, 698, 706, 727, 764, 769, 904, 957, 995, 996, 1014, 1029, 1032, 1033, 1034, 1038, 1040, 1042, 1043, 1044, 1049], "cop": 51, "cope": [233, 361, 367, 995], "copeland": [1037, 1038], "copi": [44, 51, 55, 79, 95, 103, 104, 107, 123, 137, 149, 154, 155, 163, 178, 179, 183, 184, 185, 195, 202, 213, 222, 224, 227, 234, 235, 240, 244, 245, 247, 258, 263, 271, 278, 284, 314, 317, 323, 325, 326, 328, 330, 348, 352, 360, 369, 372, 374, 376, 377, 378, 384, 386, 400, 429, 434, 437, 439, 440, 441, 443, 444, 446, 451, 456, 479, 480, 481, 482, 498, 500, 508, 530, 531, 532, 533, 539, 546, 551, 552, 557, 559, 560, 570, 589, 596, 606, 607, 610, 611, 628, 630, 644, 645, 646, 647, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 665, 671, 672, 674, 679, 681, 684, 685, 686, 732, 769, 792, 800, 814, 844, 845, 859, 867, 870, 873, 874, 875, 876, 880, 881, 882, 884, 887, 889, 890, 891, 892, 893, 894, 895, 899, 900, 904, 906, 907, 908, 909, 910, 919, 928, 930, 931, 959, 969, 971, 972, 1009, 1014, 1015, 1019, 1029, 1032, 1035, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "copy_": 1029, "copy_cov": 546, "copy_gram": [682, 683, 686], "copy_x": [154, 156, 183, 192, 236, 440, 444, 456, 533, 644, 645, 646, 647, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 672, 674, 679, 681, 682, 683, 684, 685, 1031, 1037, 1038, 1048], "copy_x_train": [172, 610, 611], "copy_xi": 686, "copybutton": [372, 390, 397], "copyright": [0, 55], "corani": 264, "cordier": 1036, "core": [42, 49, 82, 88, 98, 103, 134, 140, 142, 180, 183, 184, 258, 263, 318, 358, 360, 372, 375, 380, 386, 390, 398, 404, 409, 411, 412, 415, 441, 443, 446, 447, 452, 454, 494, 497, 536, 588, 593, 658, 659, 666, 668, 676, 839, 840, 841, 842, 843, 848, 856, 995, 1002, 1005, 1014, 1017, 1019, 1020, 1021, 1023, 1025, 1031, 1033, 1034, 1036, 1039, 1043, 1044, 1045], "core_dist": [98, 452, 453, 454], "core_distances_": [98, 447, 452, 454], "core_sampl": 415, "core_sample_indices_": [82, 441], "core_samples_mask": 82, "corei": [1030, 1037, 1038, 1049], "corentin": 1043, "cori": 1034, "corneil": 1042, "corner": [50, 53, 63, 86, 182, 261, 265, 273, 274, 297, 320, 367, 372, 496, 916, 918, 999, 1043], "cornerston": 1023, "cornflowerblu": [153, 203, 210, 216, 250, 252, 255, 271, 273, 289, 295, 353], "corollari": 374, "corona": 1042, "corpora": 409, "corpu": [54, 348, 349, 367, 409, 587, 588, 589, 590, 1030], "corr": [115, 186, 264], "corrcoef": [115, 130, 229], "correct": [1, 30, 52, 63, 64, 90, 112, 134, 144, 175, 183, 194, 198, 207, 224, 249, 257, 258, 264, 271, 273, 281, 283, 336, 338, 347, 355, 369, 372, 374, 376, 387, 400, 402, 404, 408, 409, 411, 412, 421, 427, 447, 453, 466, 471, 485, 499, 501, 635, 667, 676, 678, 703, 704, 708, 712, 713, 718, 721, 723, 724, 728, 729, 730, 734, 738, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 783, 784, 785, 787, 790, 791, 794, 796, 832, 833, 834, 841, 849, 875, 983, 995, 999, 1000, 1014, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "correct_covari": [466, 471], "corrected_std": 264, "corrected_var": 264, "correctli": [1, 158, 162, 207, 224, 240, 271, 273, 279, 294, 311, 327, 336, 372, 381, 386, 409, 411, 421, 434, 466, 547, 548, 549, 551, 553, 555, 557, 559, 562, 565, 567, 610, 658, 666, 668, 674, 675, 676, 703, 794, 796, 799, 822, 832, 833, 834, 835, 839, 840, 841, 842, 843, 846, 851, 854, 861, 884, 899, 900, 904, 906, 907, 908, 909, 910, 912, 914, 949, 996, 999, 1002, 1003, 1009, 1014, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049], "correl": [1, 51, 64, 113, 115, 116, 130, 141, 147, 149, 151, 159, 162, 172, 180, 181, 182, 184, 185, 194, 198, 201, 204, 205, 224, 264, 283, 310, 314, 315, 328, 365, 368, 369, 377, 386, 389, 401, 406, 408, 413, 447, 454, 479, 480, 482, 491, 492, 498, 522, 562, 605, 608, 627, 634, 635, 636, 644, 646, 652, 682, 683, 743, 757, 778, 779, 780, 830, 844, 845, 881, 882, 884, 893, 990, 995, 1000, 1006, 1009, 1013, 1015, 1020, 1021, 1025, 1029, 1030, 1031, 1042, 1043], "correlation_coeffici": 608, "correlation_model": 1036, "correspond": [1, 50, 52, 53, 58, 63, 64, 68, 76, 86, 98, 109, 113, 122, 134, 137, 140, 141, 142, 150, 155, 159, 162, 163, 168, 173, 176, 183, 198, 201, 207, 208, 211, 215, 224, 234, 239, 240, 247, 254, 258, 261, 265, 267, 268, 273, 274, 278, 297, 309, 315, 316, 317, 322, 348, 351, 352, 354, 355, 360, 366, 367, 368, 371, 372, 374, 376, 379, 380, 385, 386, 387, 401, 402, 403, 404, 406, 407, 408, 409, 411, 412, 413, 414, 419, 425, 434, 436, 438, 442, 445, 448, 450, 456, 458, 460, 461, 469, 479, 480, 481, 487, 488, 490, 491, 492, 493, 494, 532, 539, 542, 543, 544, 547, 548, 550, 553, 555, 557, 558, 559, 562, 581, 583, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 610, 611, 617, 628, 630, 632, 633, 635, 643, 646, 647, 648, 652, 658, 659, 660, 661, 662, 668, 669, 671, 672, 673, 674, 675, 676, 678, 680, 681, 682, 683, 687, 690, 691, 692, 694, 703, 709, 710, 713, 724, 725, 734, 738, 742, 746, 752, 754, 774, 778, 782, 788, 789, 794, 796, 797, 798, 799, 800, 803, 804, 806, 814, 822, 823, 825, 833, 835, 836, 839, 840, 841, 842, 843, 844, 845, 849, 850, 851, 853, 861, 862, 871, 874, 875, 877, 878, 881, 885, 893, 902, 904, 905, 906, 909, 912, 913, 914, 915, 925, 935, 941, 957, 960, 973, 988, 989, 991, 992, 993, 995, 996, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1009, 1010, 1013, 1014, 1026, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049], "correspondingli": 1046, "corri": 1040, "corrobor": 384, "corrupt": [44, 127, 194, 213, 223, 384, 860, 995, 1007], "cort": [1040, 1041, 1044, 1045], "cortex": 409, "cos_transform": 43, "cosin": [1, 43, 75, 279, 284, 289, 364, 367, 386, 404, 409, 410, 438, 442, 447, 454, 533, 589, 590, 620, 696, 760, 761, 762, 765, 770, 771, 774, 778, 779, 780, 844, 845, 849, 876, 1002, 1015, 1025, 1039], "cosine_dist": [1, 400, 696, 762, 1002, 1035, 1048], "cosine_similar": [1, 340, 400, 760, 765, 997, 1034, 1048], "cosinesimil": 284, "cosmo": 57, "cost": [0, 43, 74, 123, 140, 149, 165, 167, 180, 188, 226, 234, 238, 256, 266, 268, 271, 273, 278, 313, 321, 336, 348, 349, 350, 354, 372, 378, 380, 384, 400, 403, 404, 411, 475, 494, 498, 535, 536, 537, 544, 549, 555, 556, 557, 558, 559, 562, 563, 601, 609, 610, 619, 627, 646, 647, 652, 653, 658, 660, 661, 662, 663, 668, 672, 674, 676, 678, 687, 688, 692, 700, 702, 718, 742, 784, 787, 799, 800, 822, 830, 865, 884, 902, 904, 905, 906, 909, 912, 913, 914, 915, 948, 991, 995, 996, 999, 1002, 1012, 1013, 1014, 1020, 1021, 1025, 1035, 1038, 1039], "cost_complexity_pruning_path": [351, 912, 913, 914, 915], "costa": [1037, 1042], "costin": 1029, "costli": [104, 109, 141, 178, 258, 265, 344, 360, 373, 376, 378, 404, 440, 627, 808, 810, 896, 897, 948, 999, 1002, 1011, 1019], "costlier": 671, "costs_": [468, 469, 1045], "could": [43, 48, 52, 53, 64, 66, 72, 77, 86, 103, 104, 120, 123, 135, 136, 143, 146, 149, 160, 167, 172, 179, 182, 183, 184, 207, 208, 211, 215, 224, 230, 238, 239, 240, 257, 258, 264, 270, 277, 283, 292, 295, 316, 332, 333, 347, 351, 354, 361, 372, 378, 380, 386, 390, 398, 402, 408, 411, 412, 416, 471, 531, 536, 606, 607, 629, 671, 802, 807, 809, 989, 995, 996, 999, 1006, 1007, 1009, 1014, 1019, 1026, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1049], "couldn": [1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "count": [1, 23, 43, 52, 54, 62, 64, 76, 82, 86, 102, 103, 118, 183, 184, 207, 209, 224, 237, 247, 258, 278, 281, 284, 310, 314, 315, 322, 348, 349, 367, 369, 376, 381, 386, 387, 402, 404, 409, 411, 412, 443, 446, 486, 494, 534, 542, 580, 587, 588, 589, 590, 593, 603, 617, 640, 697, 705, 715, 718, 729, 730, 738, 754, 783, 784, 786, 787, 839, 843, 844, 845, 853, 856, 867, 916, 918, 950, 965, 987, 988, 991, 995, 999, 1001, 1002, 1009, 1015, 1023, 1029, 1032, 1034, 1037, 1038, 1040, 1041, 1046], "count_nonzero": [46, 49, 359], "count_onli": [844, 845], "counter": [57, 134, 271, 404, 676, 677, 678, 1042], "counterpart": [988, 996, 1014], "countlagged_count_1hlagged_count_2hlagged_count_3hlagged_count_1dlagged_count_1d_1hlagged_count_7dlagged_count_7d_1hlagged_mean_24hlagged_max_24hlagged_min_24hlagged_mean_7dlagged_max_7dlagged_min_7di64i64i64i64i64i64i64i64f64i64i64f64i64i6416nullnullnullnullnullnullnullnullnullnullnullnullnull4016nullnullnullnullnullnullnullnullnullnullnullnull324016nullnullnullnullnullnullnullnullnullnullnull13324016nullnullnullnullnullnullnullnullnullnull1133240nullnullnullnullnullnullnullnullnullnull111332nullnullnullnullnullnullnullnullnullnull21113nullnullnullnullnullnullnullnullnullnull3211nullnullnullnullnullnullnullnullnullnull8321nullnullnullnullnullnullnullnullnullnull14832nullnullnullnullnullnullnullnullnullnul": 52, "countlagged_count_1hlagged_count_2hlagged_count_3hlagged_count_1dlagged_count_1d_1hlagged_count_7dlagged_count_7d_1hlagged_mean_24hlagged_max_24hlagged_min_24hlagged_mean_7dlagged_max_7dlagged_min_7di64i64i64i64i64i64i64i64f64i64i64f64i64i642472032241571601697013593": 52, "countri": [310, 320, 494, 996], "counts_": 1041, "countvector": [1, 54, 329, 349, 367, 377, 405, 409, 412, 461, 486, 534, 581, 588, 589, 590, 1029, 1031, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1047], "coupl": [54, 85, 86, 88, 227, 366, 367, 372, 401, 402, 404, 413, 588, 910, 988, 1014], "cournapeau": [0, 394, 1029, 1032], "cours": [47, 48, 188, 278, 359, 372, 374, 384, 403, 409, 412, 413, 989, 994, 995, 1017, 1023], "coursecentr": [404, 439], "coursel": 1048, "courtesi": 372, "couvreur": [1038, 1039], "cov": [70, 113, 116, 136, 254, 372, 386, 390, 397, 407, 417, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 517, 530, 532, 539, 546], "cov_": [50, 113], "cov_class_1": 70, "cov_class_2": 70, "cov_init": 1045, "cov_test": 50, "cov_train": 50, "cov_typ": [251, 488], "covar": [249, 250, 255], "covari": [1, 48, 51, 65, 69, 110, 115, 127, 130, 148, 150, 167, 174, 210, 233, 248, 250, 252, 253, 254, 255, 271, 295, 320, 381, 386, 395, 404, 407, 409, 414, 417, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 502, 513, 517, 525, 530, 532, 539, 546, 547, 548, 561, 610, 611, 613, 622, 623, 631, 644, 645, 650, 654, 656, 682, 683, 686, 689, 693, 797, 798, 800, 819, 998, 1005, 1009, 1020, 1021, 1024, 1025, 1029, 1031, 1032, 1033, 1034, 1036, 1038], "covariance_": [51, 70, 111, 113, 466, 467, 468, 469, 470, 471, 472, 473, 547, 548, 993, 1036], "covariance_correct": [466, 471], "covariance_eigh": [321, 539, 1047], "covariance_estim": [69, 547, 993, 1041], "covariance_prior": [255, 797], "covariance_prior_": 797, "covariance_reweight": [466, 471], "covariance_typ": [79, 250, 251, 253, 254, 255, 797, 798, 1045, 1049], "covariances_": [249, 250, 251, 254, 255, 797, 798, 1036], "cover": [85, 188, 207, 224, 355, 364, 367, 372, 385, 635, 720, 794, 821, 999, 1000, 1017], "coverag": [1, 50, 52, 146, 149, 207, 224, 297, 367, 375, 400, 496, 627, 720], "coverage_error": [1, 999, 1033, 1043], "coverage_fract": 146, "coverages_land": 50, "covertyp": [1, 365, 488, 1025], "covtyp": 188, "cow": 1030, "cowlei": 1039, "cowton": 1043, "cox": [304, 308, 880, 892, 1009, 1037, 1045], "cpo": [163, 369], "cppflag": 370, "cpu": [0, 94, 265, 284, 318, 359, 360, 378, 380, 386, 390, 400, 412, 494, 561, 632, 647, 651, 653, 655, 658, 659, 661, 663, 665, 666, 668, 676, 679, 800, 814, 825, 826, 827, 848, 856, 897, 999, 1034, 1043, 1044, 1046, 1047, 1048], "cpu_count": [77, 140, 284], "cpuexecutionprovid": 398, "cpython": [372, 373, 378, 1044], "craeton": [1047, 1048], "craft": 375, "craig": [1011, 1032, 1037], "crall": [1036, 1042], "crammer": [666, 667, 735, 995, 999, 1014], "crammer06a": [666, 667], "crammer_sing": [904, 1000, 1014, 1029], "cranenburgh": 1033, "crash": [51, 372, 398, 465, 894, 895, 902, 1009, 1033, 1037, 1045, 1046, 1048, 1049], "crawl": [519, 939], "craze": 1036, "crc": 995, "creat": [1, 43, 44, 47, 50, 58, 59, 63, 64, 68, 70, 72, 74, 76, 78, 79, 80, 82, 85, 91, 93, 95, 103, 104, 111, 116, 122, 125, 126, 136, 139, 142, 143, 144, 146, 150, 153, 162, 167, 169, 172, 173, 174, 176, 179, 182, 184, 190, 192, 195, 202, 205, 208, 209, 218, 219, 228, 238, 240, 243, 244, 246, 254, 258, 259, 260, 262, 263, 264, 274, 278, 292, 294, 295, 306, 308, 309, 313, 316, 317, 330, 332, 333, 337, 338, 341, 343, 344, 349, 351, 355, 360, 367, 368, 370, 371, 372, 374, 376, 377, 378, 379, 380, 381, 385, 386, 390, 391, 398, 402, 404, 405, 408, 410, 411, 412, 414, 435, 448, 450, 462, 463, 497, 513, 514, 515, 516, 544, 551, 555, 556, 557, 558, 561, 562, 563, 564, 587, 588, 590, 596, 628, 630, 631, 632, 633, 697, 698, 700, 701, 702, 730, 782, 800, 802, 806, 810, 814, 818, 823, 825, 826, 834, 865, 877, 906, 909, 912, 913, 914, 915, 919, 928, 951, 952, 959, 971, 983, 989, 995, 998, 1000, 1002, 1006, 1009, 1010, 1011, 1013, 1014, 1015, 1017, 1018, 1023, 1026, 1029, 1030, 1032, 1035, 1039, 1042, 1043, 1044, 1045, 1046, 1047], "create_ax": 304, "create_species_bunch": 50, "createindex": 284, "creation": [374, 509, 510, 511, 513, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 528, 656, 844, 845, 1023, 1036, 1037, 1038, 1042], "creativ": 366, "creator": [163, 366, 369], "cred_int_df": 264, "cred_interv": 264, "credibl": 264, "credit": [367, 411, 995, 1023], "credit_amount": 258, "credit_card": 258, "credit_gain": 258, "credit_gain_scor": 258, "credit_histori": 258, "creighton": 318, "crispinlogan": [1041, 1044, 1045, 1047], "cristian": 642, "cristina": 1041, "criteria": [90, 140, 180, 189, 198, 214, 254, 264, 380, 404, 413, 438, 463, 479, 480, 481, 499, 555, 556, 557, 558, 562, 563, 646, 652, 656, 658, 659, 671, 692, 865, 884, 904, 905, 912, 913, 914, 915, 989, 998, 999, 1003, 1013, 1020, 1032, 1037, 1040], "criterion": [63, 64, 109, 110, 141, 154, 156, 185, 186, 196, 214, 245, 254, 276, 314, 320, 353, 354, 374, 381, 386, 404, 409, 438, 442, 446, 449, 456, 459, 530, 535, 537, 544, 555, 556, 557, 558, 562, 563, 593, 601, 605, 627, 634, 644, 645, 648, 656, 657, 666, 667, 668, 669, 671, 672, 674, 676, 677, 678, 680, 690, 691, 694, 695, 710, 711, 798, 800, 803, 804, 806, 814, 823, 826, 827, 828, 829, 831, 901, 906, 907, 908, 909, 910, 912, 913, 914, 915, 995, 998, 999, 1007, 1012, 1015, 1021, 1025, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1045, 1046, 1049], "criterion_": [196, 198, 656], "critic": [366, 372, 376, 385, 411, 692, 996, 999, 1007, 1014, 1023, 1040], "crockett": 1044, "crombach": 1031, "crop": [380, 1044], "cross": [1, 8, 29, 52, 53, 63, 64, 70, 87, 90, 91, 103, 105, 106, 107, 109, 113, 116, 127, 140, 142, 143, 145, 146, 149, 157, 160, 161, 163, 183, 184, 189, 194, 195, 196, 197, 203, 207, 209, 214, 224, 241, 246, 251, 252, 254, 256, 261, 264, 265, 266, 268, 270, 271, 272, 273, 276, 278, 279, 281, 288, 302, 303, 305, 310, 313, 315, 320, 328, 336, 343, 353, 367, 372, 381, 384, 385, 386, 398, 399, 402, 405, 406, 409, 411, 412, 413, 414, 434, 468, 469, 470, 471, 472, 473, 475, 479, 480, 481, 482, 491, 499, 500, 502, 513, 539, 565, 566, 574, 592, 593, 596, 601, 605, 608, 642, 643, 646, 647, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 672, 673, 674, 675, 676, 678, 679, 681, 682, 683, 684, 685, 686, 701, 702, 706, 713, 728, 730, 741, 785, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 838, 846, 854, 864, 865, 869, 884, 885, 902, 906, 909, 921, 955, 998, 999, 1002, 1003, 1007, 1009, 1014, 1015, 1019, 1020, 1021, 1023, 1025, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1046, 1047], "cross_decomposit": [1, 114, 115, 116, 180, 241, 479, 480, 481, 482, 1000, 1020, 1033, 1034, 1036, 1037, 1038], "cross_val": 1029, "cross_val_predict": [1, 154, 260, 313, 395, 402, 408, 411, 434, 565, 566, 826, 827, 1033, 1034, 1035, 1036, 1038, 1040, 1042, 1046, 1048], "cross_val_scor": [1, 52, 127, 178, 179, 180, 256, 260, 269, 279, 319, 339, 355, 372, 384, 395, 408, 411, 469, 518, 574, 703, 742, 800, 825, 827, 846, 854, 912, 913, 988, 999, 1020, 1029, 1030, 1031, 1032, 1033, 1036, 1037, 1038, 1041, 1042, 1045, 1046, 1048], "cross_valid": [1, 43, 52, 143, 149, 154, 183, 209, 240, 260, 267, 274, 278, 281, 310, 320, 323, 372, 385, 395, 400, 574, 702, 825, 826, 999, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1044, 1045, 1046, 1048, 1049], "crossentropi": 559, "crossvalid": [264, 279], "crowd": [380, 387, 996, 1019], "crucial": [51, 149, 182, 211, 259, 273, 359, 371, 372, 386, 387, 404, 414, 1014], "crude": 1040, "crunch": 378, "cruz": 175, "crypt": [57, 367], "cryptograph": 381, "cs_": 659, "cs_note": 413, "cs_point": 142, "csail": [404, 666, 667, 676, 841], "csc": [1, 359, 384, 386, 412, 525, 549, 551, 552, 670, 692, 871, 873, 879, 884, 887, 889, 895, 926, 930, 931, 963, 973, 974, 976, 977, 978, 979, 1002, 1009, 1037, 1038, 1040, 1043], "csc_matrix": [449, 555, 556, 561, 562, 563, 564, 881, 912, 913, 914, 915, 989, 1009, 1015, 1034], "csco": 51, "csgraph": [386, 1042], "csie": [188, 366, 484, 506, 507, 658], "csizsek": 1036, "csr": [1, 55, 321, 349, 359, 366, 367, 381, 384, 386, 412, 415, 440, 443, 444, 446, 447, 456, 495, 506, 521, 525, 551, 552, 555, 556, 562, 563, 564, 589, 630, 658, 692, 714, 768, 792, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858, 859, 867, 871, 873, 875, 876, 877, 879, 882, 883, 884, 887, 888, 889, 891, 894, 897, 912, 913, 914, 915, 926, 930, 931, 955, 963, 973, 974, 975, 976, 977, 978, 979, 980, 981, 1002, 1009, 1013, 1029, 1030, 1035, 1037, 1038, 1044, 1045, 1046], "csr_arrai": 980, "csr_matrix": [284, 314, 437, 441, 449, 494, 532, 542, 555, 556, 557, 558, 561, 562, 563, 564, 587, 592, 593, 714, 830, 859, 877, 879, 906, 907, 909, 910, 912, 913, 914, 915, 949, 955, 970, 973, 974, 975, 976, 977, 978, 979, 980, 981, 984, 1000, 1009, 1013, 1014, 1015, 1044], "css": 1041, "cst": 993, "cstride": 184, "csv": [51, 366, 369, 377, 1037, 1042], "csytraci": 1032, "ct": [53, 175, 247, 405, 461, 463, 464], "ctc": 175, "cttt": 175, "cube": [416, 531], "cubic": [111, 414], "cuda": [384, 400], "cue": 998, "culprit": 384, "cultiv": 369, "cultur": 367, "cum_claim": [207, 224], "cum_exposur": [207, 224], "cumsum": [145, 207, 224, 1036], "cumtim": 378, "cumul": [1, 145, 207, 224, 404, 726, 735, 756, 881, 893, 1009, 1013, 1036, 1038, 1039], "cumulated_claim": 207, "cumulated_exposur": 207, "cumulative_claim_amount": 224, "cumulative_exposur": 224, "cunha": [1030, 1031], "cup": [367, 999], "cupi": [318, 321, 322, 323, 384, 400, 1046, 1047, 1048], "cupy_to_ndarrai": 400, "curat": [372, 375], "cure": 995, "curic": [1037, 1038], "current": [0, 1, 6, 47, 80, 134, 172, 183, 224, 304, 313, 360, 361, 367, 372, 373, 377, 381, 384, 386, 387, 400, 401, 404, 408, 411, 412, 413, 414, 437, 443, 447, 465, 466, 467, 468, 469, 470, 471, 472, 473, 530, 533, 539, 551, 552, 555, 556, 557, 558, 560, 562, 563, 564, 575, 590, 592, 610, 617, 626, 627, 630, 646, 667, 671, 675, 676, 677, 678, 788, 797, 798, 849, 853, 861, 862, 880, 892, 902, 912, 913, 914, 915, 918, 920, 921, 922, 967, 973, 988, 993, 995, 999, 1002, 1003, 1009, 1019, 1022, 1037, 1041, 1043, 1044, 1045], "current_count": 76, "current_month": 172, "current_sklearn_vers": 575, "current_sz_mb": 47, "currentcontrolset": 390, "currentmodul": 372, "curs": [347, 348, 404, 410, 1001, 1002], "cursor": [140, 265], "curv": [1, 29, 47, 50, 60, 61, 63, 66, 72, 107, 109, 137, 139, 140, 145, 165, 180, 189, 190, 199, 207, 224, 226, 228, 231, 232, 234, 236, 243, 244, 248, 249, 250, 251, 253, 254, 256, 258, 264, 274, 277, 300, 305, 313, 321, 340, 353, 379, 399, 403, 408, 410, 434, 435, 436, 500, 508, 513, 519, 523, 549, 562, 632, 645, 658, 698, 700, 702, 706, 707, 708, 709, 727, 729, 741, 782, 784, 787, 788, 789, 797, 798, 806, 817, 823, 828, 830, 831, 842, 865, 884, 904, 909, 995, 996, 998, 999, 1005, 1015, 1020, 1021, 1023, 1025, 1026, 1031, 1032, 1035, 1039, 1041, 1042, 1043, 1044, 1045, 1049], "curvatur": 299, "curve_kwarg": [243, 246, 258, 261, 273, 274, 702, 1026], "curve_kwargs_list": 274, "cusick": 1039, "custom": [1, 14, 30, 41, 131, 160, 162, 165, 180, 215, 244, 256, 258, 263, 265, 268, 271, 272, 276, 286, 291, 295, 313, 331, 333, 334, 336, 337, 339, 347, 349, 364, 367, 370, 374, 379, 380, 381, 384, 385, 386, 395, 398, 404, 405, 408, 414, 465, 486, 491, 492, 500, 502, 536, 538, 545, 547, 555, 556, 562, 563, 569, 571, 630, 631, 690, 699, 713, 778, 800, 830, 868, 902, 909, 942, 982, 993, 1002, 1018, 1019, 1020, 1023, 1025, 1029, 1033, 1034, 1036, 1037, 1039, 1040, 1041, 1044, 1045, 1046, 1047, 1048], "custom_combin": 877, "custom_cv": 408, "custom_cv_2fold": 408, "custom_fnames_enc": 877, "custom_nam": 347, "custom_scor": 321, "custom_scorer_modul": 999, "custom_scoring_funct": 999, "custom_valu": [184, 632, 633, 1049], "customari": 709, "customestim": 132, "customkernel": 618, "customvector": 412, "cut": [57, 66, 78, 80, 98, 99, 162, 163, 165, 180, 228, 256, 267, 281, 321, 328, 376, 384, 401, 403, 404, 443, 449, 450, 459, 494, 587, 590, 658, 691, 695, 816, 822, 827, 865, 884, 1009, 1020], "cut_dist": [88, 443], "cutler": [912, 913], "cutoff": [190, 954, 1009, 1038], "cutoffs_x0": 304, "cutoffs_x1": 304, "cv": [1, 43, 51, 52, 61, 62, 63, 64, 87, 103, 104, 105, 106, 109, 127, 140, 143, 145, 149, 154, 162, 178, 179, 183, 198, 206, 209, 240, 245, 254, 258, 260, 262, 263, 264, 265, 266, 267, 269, 270, 274, 276, 278, 279, 281, 310, 318, 320, 321, 322, 323, 336, 343, 385, 386, 395, 402, 403, 408, 411, 413, 434, 469, 565, 566, 593, 601, 647, 651, 653, 655, 659, 661, 663, 665, 673, 675, 702, 730, 800, 802, 803, 804, 805, 806, 814, 815, 816, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 831, 835, 838, 846, 854, 885, 912, 913, 988, 991, 994, 995, 999, 1009, 1031, 1035, 1036, 1037, 1038, 1039, 1041, 1043, 1045, 1046, 1047, 1048, 1049], "cv_alpha": [651, 655], "cv_alphas_": [198, 651, 655, 1041], "cv_best_it": 145, "cv_clf": 145, "cv_color": 145, "cv_estim": 145, "cv_line": 145, "cv_mape_scor": 52, "cv_model": 183, "cv_result": [43, 52, 103, 140, 149, 162, 262, 263, 265, 267, 274, 323, 395, 702, 827, 999], "cv_results_": [103, 104, 105, 113, 140, 162, 254, 258, 262, 263, 264, 265, 268, 272, 275, 276, 286, 336, 469, 593, 673, 675, 800, 803, 804, 814, 822, 1035, 1039, 1041, 1042, 1047, 1048], "cv_results_ecoc": 281, "cv_results_lr": 209, "cv_results_ovo": 281, "cv_results_ovr": 281, "cv_results_qr": 209, "cv_results_tre": 281, "cv_results_tuned_model": 278, "cv_results_vanilla_model": 278, "cv_score": [145, 278], "cv_test_scor": 828, "cv_train_scor": 828, "cv_valu": 1037, "cv_values_": [673, 675, 1047], "cvc": 51, "cve": 1042, "cvx": 51, "cwitt": 1037, "cxx": 370, "cxxflag": 370, "cyan": [109, 137, 183, 295], "cybernet": 769, "cycl": [0, 15, 43, 77, 79, 83, 95, 120, 197, 250, 255, 271, 273, 316, 317, 372, 376, 395, 409, 578, 579, 627, 803, 804, 926, 988, 989, 1037, 1038, 1039, 1041, 1042, 1043, 1044], "cycler": 73, "cyclic": [43, 154, 192, 646, 647, 652, 653, 660, 661, 662, 663, 1041], "cyclic_cossin_linear_pipelin": 43, "cyclic_cossin_linear_predict": 43, "cyclic_cossin_transform": 43, "cyclic_hour": 43, "cyclic_month": 43, "cyclic_spline_interactions_pipelin": 43, "cyclic_spline_linear_pipelin": 43, "cyclic_spline_linear_predict": 43, "cyclic_spline_poly_pipelin": 43, "cyclic_spline_poly_predict": 43, "cyclic_spline_transform": 43, "cyclic_weekdai": 43, "cyl": [50, 297], "cynthias13w": 1046, "cyt": 281, "cython": [41, 317, 359, 360, 370, 372, 375, 381, 384, 390, 397, 400, 404, 411, 506, 1009, 1010, 1013, 1014, 1018, 1019, 1029, 1032, 1033, 1035, 1041, 1044, 1045, 1046, 1047], "cython3": 370, "cythonx": 373, "c\u00e1rdena": 1048, "c\u00e8sar": 999, "d": [0, 1, 45, 46, 47, 49, 50, 51, 52, 54, 55, 67, 68, 72, 73, 77, 82, 83, 93, 94, 96, 102, 103, 113, 118, 120, 123, 127, 129, 165, 167, 175, 183, 207, 214, 222, 224, 231, 236, 237, 238, 239, 252, 264, 272, 278, 283, 290, 291, 297, 301, 322, 325, 326, 329, 336, 340, 341, 349, 366, 367, 369, 372, 374, 378, 384, 402, 404, 406, 407, 409, 411, 412, 414, 415, 441, 443, 444, 449, 457, 460, 485, 491, 501, 524, 532, 534, 555, 556, 563, 564, 580, 581, 589, 609, 614, 615, 619, 622, 623, 628, 644, 645, 648, 669, 670, 671, 680, 688, 689, 692, 693, 697, 699, 705, 708, 721, 722, 723, 724, 726, 756, 764, 778, 781, 788, 812, 839, 841, 843, 844, 845, 860, 871, 875, 877, 878, 880, 892, 897, 914, 915, 919, 941, 991, 993, 995, 996, 997, 998, 999, 1001, 1007, 1009, 1011, 1014, 1015, 1032, 1034, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1045, 1047, 1049], "d120af76829af0d256338dc6dd4be5df4fd1f35bf3a283cab66a51c1c6abd06a": 52, "d1997": 411, "d2": [722, 723, 999], "d2_absolute_error_scor": [1, 723, 999, 1043], "d2_log_loss_scor": [1, 999, 1047, 1049], "d2_pinball_scor": [1, 999, 1043], "d2_pinball_score_08": 999, "d2_tweedie_scor": [1, 400, 999, 1042, 1048, 1049], "d2_tweedie_score_15": 999, "d55e00": 249, "d81b60": 308, "d83": 369, "d_": [111, 404, 409, 648, 669, 680, 778, 996, 1001], "d_c": 404, "d_chunk": 781, "d_fit": 688, "d_fix": 129, "d_m": 404, "d_multi": 129, "da": [367, 1044, 1045, 1047], "dagm": 991, "dagstuhl": 999, "dai": [0, 43, 51, 52, 149, 172, 184, 208, 369, 372, 883, 999, 1023, 1035, 1036, 1043, 1044], "daiki": 1033, "daili": [51, 149, 1023], "dakota": 1039, "dale": 1042, "dalla": 1037, "dalmia": [1035, 1036, 1037], "damag": 412, "damicelli": 1044, "damink": 1046, "daml": [404, 449, 459], "damp": [79, 404, 437, 451], "dan": [55, 1029, 1033, 1034, 1035, 1037, 1038, 1049], "danek": 1049, "danfrankj": 1033, "dang": [679, 995, 1047], "danger": [208, 408], "dangi": 1046, "dangl": 55, "dangonite57": [1044, 1045], "daniel": [318, 359, 885, 1009, 1023, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1039, 1041, 1043, 1046, 1048, 1049], "daniela": [1043, 1044], "danielgaerb": 1044, "danielsen": 1036, "danielweitzenfeld": 1032, "daniil": 1036, "danil": 1037, "dani\u00ebl": 1040, "danna": 1039, "danni": [1032, 1033, 1034], "dantzig": 343, "danylo": 1038, "dao": 1037, "daphn": 1040, "dare": 1039, "darioka": [1041, 1043, 1044], "dariu": [1036, 1037], "dark": [137, 183, 336, 367, 1046], "dark2": [62, 64, 227], "darkblu": 295, "darker": 155, "darkorang": [110, 124, 128, 129, 208, 217, 229, 250, 251, 252, 255, 271, 273, 289, 295, 296, 327, 353], "darkorchid": 216, "darkr": [220, 290, 335], "darpa": 367, "darren": [1043, 1044], "darshan": 1041, "dart": 1018, "dartmouth": 0, "dasarathi": 369, "dasgupta": [412, 443, 898, 1011], "dash": [69, 111, 134, 145, 167, 170, 172, 183, 204, 208, 209, 215, 218, 219, 243, 258, 264, 274, 338, 1013], "dashdot": [145, 167, 170, 243], "dask": [1019, 1037], "data": [0, 1, 9, 16, 22, 26, 36, 37, 38, 42, 45, 47, 50, 52, 53, 54, 57, 59, 62, 64, 67, 68, 69, 71, 72, 74, 75, 76, 77, 78, 79, 80, 84, 85, 86, 87, 89, 92, 93, 94, 95, 98, 101, 103, 104, 106, 110, 112, 118, 120, 123, 124, 126, 128, 130, 132, 134, 137, 139, 140, 142, 143, 145, 146, 151, 152, 153, 156, 160, 165, 166, 167, 168, 169, 171, 172, 174, 176, 178, 180, 183, 184, 189, 190, 193, 194, 197, 198, 199, 204, 206, 207, 208, 209, 210, 213, 214, 215, 219, 220, 222, 223, 224, 226, 227, 228, 229, 230, 233, 236, 237, 238, 240, 242, 243, 244, 247, 249, 250, 251, 252, 253, 255, 257, 258, 262, 263, 264, 266, 267, 268, 269, 272, 278, 279, 281, 283, 284, 288, 290, 292, 293, 294, 295, 297, 300, 301, 303, 305, 306, 307, 311, 313, 315, 317, 318, 319, 321, 326, 327, 329, 330, 332, 333, 335, 340, 341, 345, 347, 352, 353, 354, 358, 360, 364, 365, 366, 367, 368, 369, 372, 374, 375, 378, 379, 380, 381, 385, 390, 392, 395, 398, 400, 401, 402, 403, 406, 407, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 421, 422, 423, 427, 428, 429, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 511, 512, 513, 518, 519, 520, 521, 522, 524, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 605, 606, 607, 608, 610, 611, 617, 618, 622, 625, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 696, 697, 698, 699, 700, 701, 702, 704, 705, 707, 708, 710, 711, 713, 717, 718, 720, 725, 727, 728, 729, 730, 731, 734, 736, 737, 738, 740, 741, 754, 755, 757, 761, 763, 764, 769, 778, 783, 784, 785, 787, 788, 789, 793, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 920, 921, 923, 924, 925, 926, 928, 929, 930, 931, 934, 935, 936, 945, 947, 948, 963, 966, 969, 970, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 985, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1025, 1026, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "data1010": 1034, "data_filenam": [499, 503], "data_hom": [483, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 1036, 1045], "data_home_path": 497, "data_id": [44, 143, 172, 183, 207, 224, 234, 258, 278, 281, 310, 366, 494], "data_ind": 53, "data_max": 1034, "data_max_": [874, 1034], "data_min": 1034, "data_min_": [874, 1034], "data_modul": 126, "data_nam": 390, "data_path": 47, "data_rang": 1034, "data_range_": [874, 1034], "data_sampl": 54, "data_set": 300, "data_size_mb": 349, "data_stream": 47, "data_test": [238, 258, 265, 347, 507], "data_test_size_mb": 347, "data_train": [238, 258, 265, 347, 507], "data_train_size_mb": 347, "data_transform": 639, "data_transpos": [1043, 1045], "data_unravel_indic": 53, "data_vers": 390, "databas": [47, 163, 309, 359, 361, 367, 369, 404, 409, 411, 412, 415, 439, 441, 508, 553, 554, 897, 1011], "dataclass": 374, "dataconversionwarn": 1, "datadimensionalitywarn": 1, "datafram": [1, 43, 52, 62, 66, 102, 103, 104, 134, 140, 143, 146, 151, 155, 162, 172, 178, 182, 183, 184, 185, 190, 194, 198, 211, 214, 224, 244, 247, 254, 258, 262, 263, 264, 265, 267, 275, 276, 278, 281, 309, 310, 311, 316, 317, 318, 343, 347, 348, 366, 367, 372, 374, 377, 386, 405, 411, 428, 439, 440, 442, 444, 446, 461, 463, 464, 465, 479, 480, 481, 482, 486, 487, 488, 490, 494, 498, 499, 500, 502, 503, 508, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 559, 560, 564, 565, 566, 567, 568, 580, 581, 582, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 688, 689, 692, 800, 803, 804, 814, 830, 848, 853, 856, 860, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 902, 926, 955, 969, 972, 987, 988, 989, 1018, 1019, 1032, 1033, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1049], "datalim": 251, "datapoint": [43, 77, 85, 89, 171, 174, 238, 239, 243, 259, 264, 283, 414, 443, 500, 555, 556, 557, 558, 562, 563, 564, 611, 912, 913, 914, 915, 992], "datarollhexasphericon": 1048, "dataset": [1, 37, 45, 46, 48, 49, 50, 53, 54, 55, 57, 58, 59, 63, 64, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 97, 100, 103, 104, 105, 106, 107, 111, 112, 113, 116, 119, 122, 123, 124, 125, 129, 130, 133, 135, 136, 137, 138, 139, 141, 144, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 159, 160, 161, 162, 163, 165, 166, 168, 170, 175, 178, 179, 185, 186, 188, 189, 192, 195, 196, 197, 199, 200, 202, 205, 206, 210, 211, 212, 214, 216, 217, 218, 219, 220, 221, 222, 223, 228, 230, 231, 232, 234, 237, 239, 241, 242, 246, 247, 249, 251, 252, 253, 255, 257, 259, 260, 261, 264, 265, 266, 267, 268, 269, 272, 273, 274, 275, 276, 277, 284, 286, 287, 288, 290, 291, 292, 293, 294, 295, 297, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 331, 332, 334, 336, 337, 338, 339, 341, 343, 344, 345, 348, 349, 350, 351, 354, 355, 360, 361, 375, 376, 378, 385, 386, 389, 390, 398, 400, 401, 402, 403, 404, 405, 408, 409, 410, 411, 412, 413, 416, 419, 424, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 455, 456, 466, 467, 470, 471, 472, 473, 475, 478, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 543, 544, 547, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 582, 583, 586, 587, 588, 589, 591, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 628, 631, 632, 633, 634, 635, 638, 639, 640, 643, 645, 646, 647, 649, 651, 652, 653, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 672, 673, 674, 675, 676, 677, 679, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 700, 701, 702, 703, 704, 708, 710, 711, 729, 755, 757, 787, 788, 792, 793, 795, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 814, 815, 816, 817, 818, 819, 820, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 846, 847, 848, 850, 852, 853, 854, 855, 856, 857, 860, 861, 862, 864, 865, 868, 869, 877, 878, 882, 884, 886, 894, 895, 896, 897, 898, 899, 900, 901, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 922, 930, 931, 935, 936, 988, 989, 991, 992, 993, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1011, 1012, 1013, 1014, 1015, 1018, 1019, 1020, 1023, 1025, 1026, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "dataset_44063": 52, "dataset_nam": [243, 284], "datasets_0004_44063": 52, "datasets_nam": 243, "datastructur": [1037, 1041], "datastuctur": 1046, "datatyp": [384, 461, 463, 1036, 1039], "date": [43, 102, 149, 163, 172, 184, 367, 369, 372, 376, 387, 405, 1018, 1019], "dateco2datef641958": 172, "daten": [447, 1037, 1038], "datenbergwerk": 1039, "datetim": [43, 55, 172, 184], "datta": 1048, "dauphin": 1031, "dave": [1029, 1036, 1037, 1043, 1045], "davi": [1, 471, 725, 999, 1033], "david": [0, 112, 367, 394, 404, 411, 414, 459, 530, 534, 565, 566, 622, 623, 628, 725, 797, 901, 989, 995, 1003, 1012, 1023, 1029, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "davidblnc": [1044, 1045], "davidleon123": 1047, "davies_bouldin_scor": [1, 404, 1037], "davis2006": 999, "daw": [0, 394, 1029, 1030, 1031, 1032, 1033], "dawson": [1033, 1047, 1048], "dayn": [1044, 1045], "db": [82, 88, 404], "dbauer9": 1040, "dberenbaum": 1045, "dbg": 378, "dbpedia": 55, "dbpedia_resource_prefix_len": 55, "dbscan": [1, 71, 72, 73, 79, 88, 93, 96, 98, 180, 319, 327, 384, 386, 443, 447, 449, 452, 510, 704, 705, 717, 737, 793, 795, 856, 884, 1002, 1020, 1024, 1025, 1029, 1031, 1033, 1034, 1036, 1037, 1038, 1045, 1046], "dbscan_clust": 443, "dc267f": 202, "dcc": 367, "dcg": [726, 756, 999, 1036], "dcg_score": [1, 756, 999, 1036, 1039], "dd": [50, 51, 152, 297, 496], "ddof": [264, 884, 895], "de": [51, 154, 310, 369, 635, 688, 764, 995, 996, 1019, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1049], "dea": [1043, 1044, 1045, 1048, 1049], "deactiv": [245, 366, 373, 378, 390, 405, 803, 804, 1043], "dead": 1047, "deadlock": 387, "deal": [62, 90, 103, 149, 178, 183, 194, 230, 273, 278, 281, 340, 349, 372, 377, 405, 412, 413, 414, 471, 494, 703, 708, 763, 787, 870, 948, 995, 1023, 1032, 1044, 1045], "dealloc": 1046, "dean": [154, 1037, 1043, 1045, 1047], "death": 367, "debian": [0, 359, 370, 378], "debias": 129, "deborah": [1035, 1036, 1046], "debug": [1, 355, 360, 373, 375, 378, 386, 389, 400, 627, 903, 1037, 1041], "debugg": [375, 380], "dec": [208, 281, 677, 883, 908, 1014], "decad": [183, 1019], "decai": [172, 542, 861, 862, 948, 999, 1013, 1033], "decal": 1041, "decemb": [112, 149, 172, 367, 664, 685, 686, 1029, 1037, 1039, 1041, 1042, 1044, 1048], "decent": [233, 263, 367, 1001], "deci": 273, "decid": [43, 50, 90, 93, 103, 144, 149, 165, 255, 261, 264, 271, 367, 372, 376, 387, 398, 403, 412, 414, 447, 454, 557, 558, 611, 635, 646, 647, 650, 651, 652, 653, 654, 655, 656, 660, 661, 662, 663, 671, 681, 684, 797, 846, 847, 848, 850, 852, 854, 855, 856, 867, 998, 1005, 1023, 1042, 1045, 1048], "decil": [632, 1040], "deciles_hlines_": 632, "deciles_vlines_": 632, "decim": [62, 173, 468, 469, 917, 1036, 1037], "decis": [0, 1, 40, 43, 62, 64, 67, 70, 76, 89, 91, 93, 124, 126, 128, 133, 136, 137, 138, 139, 144, 152, 153, 154, 156, 162, 163, 169, 171, 183, 189, 193, 215, 216, 219, 221, 233, 234, 236, 241, 244, 256, 267, 268, 270, 271, 281, 292, 295, 299, 304, 305, 306, 309, 324, 328, 329, 332, 333, 334, 335, 336, 337, 338, 344, 345, 347, 359, 368, 369, 372, 374, 386, 398, 399, 402, 404, 411, 434, 466, 494, 498, 502, 510, 517, 534, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 592, 593, 609, 631, 632, 633, 644, 645, 646, 647, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 672, 673, 674, 675, 676, 677, 698, 700, 702, 703, 707, 718, 720, 726, 727, 735, 739, 740, 742, 756, 782, 784, 787, 788, 789, 794, 799, 800, 803, 804, 814, 816, 822, 827, 830, 832, 833, 835, 846, 851, 865, 884, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 993, 995, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1012, 1013, 1014, 1018, 1019, 1020, 1021, 1023, 1025, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1042, 1043, 1045, 1046, 1047, 1049], "decision_funct": [48, 50, 62, 64, 89, 136, 150, 165, 218, 219, 220, 234, 243, 258, 271, 278, 290, 291, 299, 306, 320, 334, 335, 336, 340, 341, 345, 374, 386, 402, 403, 408, 411, 434, 466, 547, 548, 551, 553, 557, 559, 561, 565, 592, 593, 631, 632, 633, 658, 659, 666, 668, 674, 675, 676, 677, 698, 700, 702, 707, 720, 726, 727, 735, 739, 740, 742, 756, 782, 788, 789, 794, 799, 800, 803, 804, 814, 822, 825, 832, 833, 834, 835, 850, 851, 864, 871, 901, 904, 906, 908, 909, 923, 995, 999, 1005, 1006, 1013, 1014, 1026, 1029, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1046, 1048, 1049], "decision_function_shap": [245, 246, 262, 264, 313, 315, 344, 906, 909, 1014, 1034, 1035, 1038, 1039], "decision_path": [354, 555, 556, 562, 563, 564, 912, 913, 914, 915, 1035, 1040], "decision_threshold": [258, 278], "decision_tre": [916, 917, 918, 1015], "decision_tree_learn": [912, 913, 1015], "decisionboundarydisplai": [1, 48, 66, 67, 70, 89, 136, 150, 155, 201, 215, 220, 267, 287, 292, 295, 309, 332, 333, 334, 335, 337, 338, 340, 345, 352, 1043, 1044, 1046, 1047, 1049], "decisiontre": [142, 551, 1034], "decisiontreeclassifi": [1, 67, 134, 136, 142, 268, 281, 319, 351, 352, 354, 374, 386, 403, 411, 551, 553, 555, 557, 559, 562, 631, 711, 806, 828, 913, 914, 916, 917, 918, 989, 1000, 1015, 1030, 1031, 1033, 1034, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "decisiontreeclassifierifit": 354, "decisiontreeregressor": [1, 135, 137, 244, 305, 313, 319, 353, 377, 552, 554, 556, 557, 558, 560, 563, 632, 633, 912, 915, 917, 943, 989, 1000, 1015, 1030, 1031, 1034, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "decisiontreeregressorifit": [315, 353], "declan": 1041, "declar": [89, 227, 240, 355, 372, 373, 378, 386, 440, 443, 444, 456, 468, 469, 475, 690, 694, 1036, 1040, 1049], "decod": [47, 297, 367, 386, 501, 567, 587, 588, 590, 1029, 1030], "decode_error": [47, 265, 412, 501, 587, 588, 590, 1031], "decompos": [10, 120, 124, 137, 306, 532, 536, 825, 948, 994, 995, 999, 1016, 1024, 1025], "decomposit": [1, 8, 44, 45, 54, 55, 83, 91, 102, 104, 105, 106, 116, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 133, 152, 226, 227, 229, 238, 241, 242, 245, 263, 288, 293, 309, 317, 320, 321, 348, 361, 365, 378, 381, 386, 400, 401, 402, 405, 411, 416, 446, 448, 449, 450, 459, 479, 480, 481, 493, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 554, 611, 650, 651, 652, 653, 654, 655, 656, 663, 664, 665, 672, 673, 674, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 797, 798, 853, 860, 863, 866, 882, 913, 947, 948, 995, 996, 999, 1016, 1018, 1020, 1021, 1024, 1025, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "decompress": [398, 1029], "decor": [1, 184, 313, 372, 373, 374, 381, 806, 823, 937, 941, 943, 961, 967, 1039, 1042, 1045, 1047], "decoupl": [411, 1001], "decreas": [63, 74, 80, 88, 91, 99, 107, 149, 151, 162, 163, 175, 183, 184, 186, 214, 236, 237, 266, 271, 299, 306, 309, 313, 351, 359, 361, 372, 402, 404, 411, 438, 442, 460, 519, 532, 533, 539, 555, 556, 557, 558, 559, 560, 562, 563, 564, 601, 635, 636, 637, 676, 677, 678, 706, 712, 727, 782, 789, 861, 862, 912, 913, 914, 915, 988, 990, 991, 995, 996, 999, 1002, 1003, 1006, 1007, 1013, 1014, 1023, 1031, 1036, 1039, 1042], "dede00": [79, 95, 96], "dedic": [43, 262, 370, 376, 378, 384, 387, 400, 404, 583, 672, 674, 687, 988, 995, 1018, 1037, 1046], "deduc": 46, "deduct": [0, 1003], "dedupl": 1033, "deeksha": 1041, "deem": [272, 532, 1007, 1042], "deep": [207, 374, 386, 398, 411, 418, 429, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 461, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 769, 797, 798, 799, 800, 803, 804, 814, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 1003, 1004, 1018, 1019, 1023, 1034, 1040, 1041, 1043], "deepak": [1048, 1049], "deeper": [347, 1015], "deepest": [559, 560, 1040], "deeplook": 1039, "deeppink": 273, "deepyaman": 1048, "def": [43, 44, 45, 46, 47, 49, 50, 52, 53, 54, 55, 57, 62, 64, 69, 70, 72, 75, 76, 85, 88, 89, 91, 94, 102, 107, 118, 120, 122, 123, 127, 129, 132, 134, 137, 139, 143, 145, 146, 149, 154, 170, 173, 175, 176, 178, 179, 186, 191, 196, 198, 201, 207, 208, 214, 215, 216, 224, 226, 227, 240, 241, 243, 249, 250, 251, 252, 254, 255, 258, 259, 262, 263, 264, 265, 267, 272, 275, 279, 284, 289, 291, 294, 297, 300, 302, 304, 306, 309, 310, 313, 321, 329, 332, 336, 340, 345, 347, 348, 349, 359, 367, 372, 374, 378, 379, 384, 405, 408, 412, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 506, 507, 531, 596, 600, 610, 611, 618, 781, 877, 937, 941, 943, 961, 999, 1006, 1014], "default": [43, 52, 54, 62, 77, 80, 88, 92, 120, 126, 140, 155, 159, 167, 178, 179, 184, 190, 191, 198, 205, 207, 208, 224, 235, 237, 243, 245, 247, 252, 258, 259, 261, 267, 273, 278, 283, 284, 304, 308, 311, 313, 314, 318, 320, 321, 323, 340, 343, 344, 347, 348, 349, 351, 354, 355, 359, 360, 366, 367, 370, 374, 375, 376, 377, 378, 379, 380, 381, 384, 385, 386, 390, 395, 398, 402, 403, 404, 405, 408, 409, 411, 412, 413, 415, 416, 417, 418, 420, 421, 423, 425, 426, 427, 428, 429, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 707, 708, 709, 711, 712, 713, 714, 716, 718, 719, 720, 721, 722, 723, 724, 726, 727, 728, 729, 730, 731, 734, 735, 736, 738, 739, 740, 741, 742, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 766, 767, 768, 769, 771, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 811, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 928, 929, 930, 931, 934, 935, 936, 937, 939, 941, 942, 943, 947, 948, 949, 950, 951, 952, 953, 954, 963, 965, 966, 968, 969, 971, 972, 973, 979, 982, 984, 985, 987, 988, 989, 991, 993, 995, 998, 999, 1000, 1002, 1003, 1005, 1006, 1009, 1011, 1013, 1014, 1015, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "default_bas": [79, 95], "default_rng": [155, 267], "default_scor": 377, "default_target_attribut": 366, "default_tim": [221, 252], "defaultdict": [49, 52, 62, 186, 267, 348, 349], "defazio": [658, 995], "defens": 281, "defer": 372, "defici": [548, 996, 1013, 1047, 1048], "defin": [7, 27, 46, 51, 64, 70, 86, 88, 90, 99, 102, 103, 105, 116, 120, 125, 132, 134, 135, 154, 155, 163, 167, 174, 175, 176, 184, 185, 186, 190, 208, 214, 223, 224, 233, 237, 240, 244, 246, 249, 254, 258, 263, 264, 265, 267, 271, 273, 274, 275, 276, 278, 281, 284, 302, 304, 314, 320, 321, 323, 336, 340, 343, 345, 347, 348, 359, 368, 371, 372, 373, 374, 378, 379, 381, 384, 385, 386, 398, 399, 400, 401, 403, 404, 405, 406, 408, 409, 410, 411, 412, 414, 419, 420, 421, 423, 425, 426, 427, 428, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 453, 456, 460, 461, 462, 465, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 486, 517, 518, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 605, 608, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 622, 623, 627, 628, 629, 630, 631, 632, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 696, 697, 699, 708, 709, 710, 712, 716, 721, 722, 723, 724, 725, 728, 731, 738, 741, 745, 746, 748, 750, 751, 753, 754, 757, 760, 766, 781, 785, 790, 791, 792, 793, 797, 798, 799, 800, 803, 804, 814, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 864, 865, 867, 868, 869, 870, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 891, 896, 897, 898, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 934, 936, 939, 946, 957, 958, 960, 982, 988, 989, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1009, 1011, 1013, 1014, 1015, 1019, 1025, 1026, 1031, 1035, 1036, 1037, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048], "definit": [1, 91, 112, 196, 207, 261, 271, 284, 348, 372, 373, 374, 386, 389, 404, 406, 407, 409, 525, 527, 533, 611, 628, 692, 708, 718, 728, 746, 758, 797, 798, 988, 991, 993, 995, 997, 999, 1002, 1013, 1017, 1025, 1033, 1037, 1044, 1049], "definitelyuncertain": 1035, "deflat": [183, 407, 416, 531], "defoi": 1042, "deform": [150, 254, 345], "degener": [118, 250, 416, 437, 451, 531, 720, 995, 999, 1038, 1042, 1043], "degrad": [149, 184, 233, 304, 343, 348, 410, 778, 1007], "degre": [43, 70, 122, 136, 155, 172, 178, 182, 183, 184, 188, 190, 194, 196, 198, 208, 211, 239, 245, 246, 249, 250, 251, 254, 255, 262, 264, 279, 302, 315, 316, 333, 340, 342, 409, 413, 443, 449, 496, 533, 539, 639, 640, 643, 656, 775, 797, 800, 850, 879, 883, 906, 907, 908, 909, 910, 991, 992, 994, 995, 996, 997, 999, 1000, 1002, 1005, 1006, 1009, 1012, 1014, 1032, 1038, 1042, 1043, 1046], "degrees_of_freedom_": 797, "degrees_of_freedom_prior": 797, "degrees_of_freedom_prior_": 797, "dei": 1041, "deil": [1030, 1040, 1041], "dein": 412, "dekel": [666, 667, 995], "del": [55, 378, 1041, 1042], "delai": [1, 372, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 800, 814, 825, 826, 1043, 1044, 1047], "delalleau": 1012, "delanou": 1040, "delattr": 1041, "delayed_funct": 966, "delbert": [73, 437, 451], "deleg": [89, 378, 428, 429, 609, 917, 987, 1033, 1035, 1041], "delet": [1, 104, 326, 328, 376, 377, 466, 471, 483], "delete_index": 326, "delete_indic": 326, "deleteri": 1036, "deli": 398, "deliber": 995, "delimit": [372, 1005, 1044], "deliv": [359, 1023], "deliveri": 376, "dell": 51, "delong": [1041, 1042], "delta": [407, 449], "delta_": 996, "delta_k": 407, "delteil": 1033, "delv": [861, 862], "demand": [145, 149, 386, 412, 800, 814, 825, 826], "demarc": 93, "demiraj": [1044, 1045], "demo": [52, 53, 56, 71, 72, 74, 75, 76, 79, 80, 86, 87, 89, 90, 92, 93, 94, 95, 97, 100, 150, 180, 186, 194, 237, 252, 254, 265, 273, 319, 327, 328, 347, 348, 374, 401, 404, 412, 415, 437, 438, 441, 443, 444, 445, 447, 448, 450, 451, 452, 455, 458, 500, 509, 510, 511, 539, 704, 705, 717, 719, 737, 793, 795, 865, 884, 885, 1020], "demo_param": 374, "demonstr": [46, 52, 57, 58, 59, 62, 68, 71, 75, 78, 88, 94, 102, 104, 134, 138, 144, 147, 155, 160, 161, 175, 176, 180, 186, 201, 208, 209, 213, 240, 246, 247, 251, 255, 256, 260, 263, 267, 270, 273, 279, 286, 289, 296, 303, 305, 306, 308, 309, 311, 315, 324, 326, 327, 330, 334, 340, 344, 347, 348, 349, 353, 355, 361, 367, 368, 372, 377, 384, 395, 400, 404, 408, 411, 444, 500, 510, 518, 558, 644, 697, 703, 713, 742, 798, 800, 847, 869, 900, 912, 988, 989, 993, 999, 1000, 1001, 1002, 1009, 1012, 1015, 1020], "dem\u0161ar": [264, 1048], "den": [0, 394, 1030, 1031, 1036, 1037, 1038, 1041, 1042], "dendrit": [404, 710], "dendro": 186, "dendro_idx": 186, "dendrogram": [71, 100, 180, 186, 354, 404, 438, 442, 502, 1020, 1041], "denero": 735, "deng": [1033, 1034, 1035], "dengemann": 1030, "dengyong": 900, "deni": [1031, 1032, 1036, 1037, 1038, 1044, 1045], "denni": 1043, "denois": [42, 68, 83, 84, 86, 119, 125, 129, 180, 409, 494, 533, 535, 539, 583, 586, 830, 874, 1020], "denomin": [271, 411, 412, 417, 472, 589, 704, 757, 993], "denot": [161, 381, 386, 390, 402, 404, 408, 411, 587, 588, 590, 800, 806, 814, 823, 877, 878, 983, 988, 991, 995, 997, 999, 1000, 1009, 1012, 1046], "dens": [51, 66, 88, 180, 189, 194, 197, 203, 317, 318, 329, 359, 381, 386, 404, 409, 411, 413, 440, 443, 444, 446, 461, 464, 494, 521, 522, 525, 532, 533, 542, 564, 606, 607, 629, 630, 652, 657, 658, 659, 666, 667, 668, 672, 673, 676, 677, 678, 687, 688, 689, 692, 693, 760, 761, 767, 779, 792, 861, 862, 869, 876, 877, 879, 881, 882, 883, 884, 893, 894, 895, 896, 897, 904, 905, 906, 907, 909, 910, 949, 969, 972, 989, 992, 995, 996, 999, 1000, 1002, 1005, 1009, 1011, 1012, 1013, 1014, 1015, 1020, 1029, 1031, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "dense_lasso": 195, "dense_output": [761, 767, 897, 949, 1037], "denser": 441, "densif": 1038, "densifi": [386, 658, 659, 666, 667, 668, 676, 677, 678, 904, 989, 1031], "densiti": [1, 50, 82, 88, 93, 98, 107, 129, 161, 163, 170, 180, 195, 207, 221, 224, 230, 233, 237, 248, 249, 255, 264, 270, 281, 285, 290, 291, 304, 336, 347, 367, 369, 381, 386, 404, 411, 415, 423, 441, 443, 445, 447, 449, 461, 464, 496, 500, 534, 539, 547, 548, 797, 798, 800, 844, 845, 849, 850, 897, 993, 995, 998, 1002, 1004, 1005, 1011, 1018, 1020, 1021, 1024, 1025, 1031, 1033, 1037, 1038, 1044, 1045], "density_": 897, "density_estim": [423, 923], "densitymixin": 1, "denton": 1031, "deodhar": 1041, "deoli": 1042, "depart": [175, 404], "depend": [1, 25, 43, 44, 46, 52, 64, 72, 86, 107, 124, 140, 143, 146, 147, 149, 151, 154, 158, 162, 173, 178, 180, 181, 183, 186, 188, 191, 194, 224, 227, 232, 233, 239, 243, 254, 258, 264, 265, 269, 270, 271, 273, 278, 284, 300, 304, 309, 315, 318, 321, 333, 340, 343, 348, 349, 355, 359, 360, 361, 365, 370, 372, 374, 375, 380, 381, 384, 385, 386, 387, 389, 390, 397, 398, 400, 404, 406, 408, 409, 411, 412, 413, 414, 415, 435, 436, 437, 441, 443, 444, 446, 447, 449, 451, 454, 456, 457, 459, 461, 466, 481, 486, 487, 488, 491, 494, 498, 499, 500, 502, 503, 508, 532, 533, 539, 542, 549, 553, 557, 558, 560, 587, 588, 589, 590, 601, 603, 606, 607, 611, 627, 632, 633, 638, 640, 648, 658, 659, 669, 671, 673, 676, 677, 678, 680, 687, 691, 695, 711, 729, 730, 738, 778, 781, 783, 784, 787, 792, 793, 797, 798, 819, 829, 846, 847, 848, 850, 852, 853, 854, 855, 856, 862, 863, 865, 877, 878, 881, 884, 898, 905, 906, 909, 913, 928, 987, 988, 989, 991, 992, 993, 995, 996, 998, 999, 1001, 1002, 1003, 1004, 1007, 1011, 1013, 1014, 1015, 1020, 1025, 1026, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1044, 1045, 1046, 1049], "dependabot": [1047, 1048, 1049], "dependen": 343, "depict": [134, 266, 411, 998], "deploi": [258, 321, 359, 389, 398, 403, 1019, 1023], "deploy": [380, 398, 1018, 1019, 1023], "depot": 51, "deprec": [1, 15, 103, 139, 147, 154, 155, 183, 184, 185, 186, 234, 235, 245, 247, 258, 263, 278, 302, 310, 313, 314, 315, 316, 317, 323, 360, 374, 375, 376, 381, 386, 395, 434, 439, 444, 447, 454, 456, 461, 464, 534, 551, 567, 568, 578, 579, 581, 627, 647, 653, 658, 659, 661, 663, 679, 702, 712, 731, 742, 778, 779, 780, 803, 804, 828, 829, 831, 835, 838, 851, 863, 901, 906, 909, 926, 928, 930, 931, 941, 943, 988, 989, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "deprecated_api_refer": 372, "deprecationwarn": [1039, 1048], "dept": 369, "depth": [43, 139, 143, 147, 150, 281, 351, 353, 354, 359, 370, 372, 376, 385, 411, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 844, 845, 849, 912, 913, 914, 915, 916, 918, 954, 1004, 1005, 1015, 1031, 1032, 1040], "der": [692, 696, 996, 1032, 1033, 1037], "derek": 1037, "deriv": [43, 57, 129, 130, 145, 155, 172, 175, 185, 196, 198, 202, 208, 360, 367, 406, 408, 410, 411, 412, 414, 416, 438, 442, 443, 462, 489, 531, 605, 617, 622, 648, 669, 676, 680, 861, 862, 866, 877, 883, 904, 905, 993, 995, 996, 999, 1003, 1005, 1014, 1026, 1029, 1030, 1031, 1036, 1037, 1038, 1044], "deros": 1040, "derouich": 1029, "derweh": 1047, "desai": [1036, 1038, 1041, 1042, 1044, 1045], "desalvo": 988, "descamp": 1037, "descend": [142, 627, 1039], "descent": [1, 46, 53, 144, 180, 189, 196, 197, 233, 238, 290, 316, 335, 409, 411, 468, 469, 475, 485, 494, 501, 529, 535, 536, 537, 538, 540, 541, 543, 544, 545, 546, 631, 639, 646, 647, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 668, 672, 674, 676, 677, 678, 681, 682, 683, 684, 687, 694, 830, 861, 862, 865, 904, 908, 972, 996, 1003, 1005, 1014, 1020, 1021, 1025, 1029, 1032, 1033, 1034, 1036, 1038, 1040, 1042, 1043, 1044], "descr": [126, 163, 365, 366, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 498, 499, 500, 501, 502, 503, 505, 508, 513, 1037], "describ": [1, 43, 52, 89, 154, 163, 183, 224, 238, 264, 273, 355, 359, 360, 365, 367, 369, 371, 372, 374, 377, 380, 386, 387, 400, 401, 404, 406, 407, 408, 409, 411, 412, 414, 459, 466, 470, 471, 488, 493, 494, 495, 498, 499, 500, 501, 502, 503, 508, 514, 515, 516, 526, 606, 607, 645, 659, 668, 714, 797, 798, 839, 841, 877, 879, 902, 948, 988, 991, 994, 995, 998, 999, 1001, 1005, 1013, 1014, 1015, 1022, 1037, 1039], "descript": [1, 52, 163, 183, 310, 365, 366, 371, 372, 376, 377, 380, 386, 404, 412, 449, 459, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 498, 499, 500, 501, 502, 503, 505, 508, 513, 542, 630, 676, 762, 765, 778, 999, 1013, 1014, 1022, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "descriptor": [386, 506, 507], "deseri": 398, "deserv": [372, 378], "deshmukh": 1042, "deshpand": [1034, 1035], "design": [0, 1, 53, 58, 111, 134, 154, 170, 182, 183, 192, 240, 254, 258, 304, 310, 354, 361, 366, 372, 377, 384, 385, 386, 387, 389, 390, 392, 397, 398, 400, 404, 411, 413, 513, 526, 632, 633, 648, 665, 669, 676, 680, 685, 800, 818, 819, 839, 841, 989, 995, 996, 999, 1000, 1009, 1017, 1018, 1023, 1031, 1038, 1047], "desir": [50, 61, 136, 163, 179, 207, 209, 263, 273, 304, 308, 321, 365, 372, 380, 392, 398, 401, 404, 407, 408, 409, 413, 414, 501, 536, 538, 542, 545, 565, 592, 601, 602, 664, 670, 685, 686, 699, 708, 736, 844, 845, 849, 864, 869, 871, 874, 875, 877, 878, 880, 881, 885, 888, 890, 892, 893, 934, 968, 991, 993, 996, 1002, 1009, 1013, 1014, 1015, 1029, 1037, 1038, 1039, 1042], "desislava": 1043, "desktop": 370, "despin": [271, 273, 700, 702, 1048], "despit": [64, 116, 173, 201, 207, 224, 239, 293, 386, 395, 406, 627, 628, 630, 995, 1002, 1023, 1037, 1038], "dessyvv": 1043, "dest": 318, "destin": 1023, "destroi": [270, 412, 795, 873, 1009], "det": [1, 180, 246, 256, 273, 274, 372, 406, 513, 549, 562, 698, 702, 727, 789, 830, 865, 884, 904, 946, 1020, 1041, 1049], "det_curv": [1, 261, 698, 782, 789, 999, 1041, 1042, 1047, 1049], "detail": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 64, 90, 134, 135, 137, 141, 142, 147, 154, 180, 184, 196, 198, 211, 231, 235, 238, 239, 243, 245, 247, 255, 258, 262, 271, 278, 287, 290, 291, 310, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 351, 353, 355, 359, 360, 361, 364, 365, 366, 367, 372, 374, 376, 377, 378, 380, 384, 385, 386, 387, 390, 398, 400, 403, 404, 407, 408, 409, 411, 412, 413, 414, 415, 428, 429, 434, 440, 441, 443, 444, 445, 447, 448, 449, 450, 454, 455, 456, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 494, 502, 522, 529, 533, 534, 535, 537, 539, 540, 541, 542, 543, 544, 546, 547, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 592, 593, 596, 601, 606, 607, 610, 614, 619, 622, 627, 628, 630, 631, 632, 634, 639, 640, 645, 646, 647, 651, 653, 655, 656, 657, 658, 659, 661, 663, 665, 666, 668, 671, 672, 673, 674, 675, 676, 678, 679, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 701, 705, 711, 713, 730, 774, 778, 779, 780, 781, 798, 800, 803, 804, 806, 814, 816, 818, 819, 820, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 836, 837, 842, 846, 847, 849, 850, 852, 854, 855, 857, 858, 860, 863, 864, 866, 868, 869, 881, 885, 893, 899, 900, 901, 902, 906, 909, 912, 913, 914, 915, 941, 966, 985, 988, 989, 993, 995, 997, 998, 999, 1000, 1002, 1003, 1005, 1007, 1012, 1015, 1021, 1022, 1023, 1025, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "detcurvedisplai": [1, 261, 316, 727, 1041, 1042, 1046, 1047, 1049], "detect": [1, 13, 42, 47, 49, 58, 70, 96, 98, 111, 112, 113, 141, 143, 150, 180, 192, 211, 220, 232, 246, 256, 258, 264, 267, 273, 274, 285, 304, 310, 321, 335, 367, 372, 376, 384, 386, 402, 403, 404, 406, 408, 412, 426, 443, 446, 461, 463, 466, 467, 470, 471, 472, 473, 485, 486, 488, 490, 494, 508, 510, 513, 520, 535, 536, 537, 544, 549, 561, 562, 587, 590, 595, 631, 639, 677, 698, 702, 727, 789, 830, 850, 854, 865, 874, 877, 878, 882, 883, 884, 904, 908, 991, 995, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1029, 1032, 1035, 1036, 1037, 1039, 1041, 1042, 1044, 1045, 1048, 1049], "detection_error_tradeoff": 999, "detector": [1, 367, 386, 432, 850], "determin": [1, 48, 50, 53, 57, 80, 88, 111, 134, 136, 140, 149, 161, 172, 183, 190, 191, 201, 205, 210, 264, 277, 304, 309, 340, 349, 354, 355, 371, 372, 374, 381, 385, 386, 401, 402, 404, 408, 409, 411, 412, 413, 414, 427, 434, 438, 439, 440, 442, 444, 446, 447, 453, 456, 457, 458, 462, 466, 467, 469, 470, 471, 472, 473, 479, 480, 481, 485, 488, 490, 493, 495, 501, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 535, 537, 540, 541, 550, 551, 552, 554, 556, 557, 558, 559, 560, 561, 563, 565, 566, 568, 581, 582, 583, 587, 590, 593, 601, 606, 607, 610, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 627, 635, 636, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 669, 670, 672, 673, 674, 675, 676, 678, 679, 680, 687, 689, 690, 692, 693, 694, 702, 707, 711, 723, 729, 730, 738, 783, 784, 785, 787, 788, 793, 800, 802, 803, 804, 806, 814, 822, 823, 824, 825, 826, 827, 828, 829, 831, 835, 837, 838, 840, 847, 849, 850, 855, 860, 861, 862, 868, 869, 877, 878, 879, 881, 885, 893, 904, 905, 907, 910, 913, 915, 918, 946, 963, 968, 969, 972, 988, 991, 993, 998, 1002, 1004, 1005, 1007, 1009, 1012, 1013, 1015, 1029, 1034, 1037, 1038, 1040, 1041, 1042, 1048, 1049], "determinist": [91, 146, 360, 368, 386, 404, 440, 444, 446, 448, 449, 450, 455, 456, 459, 549, 557, 558, 562, 563, 582, 583, 691, 695, 811, 812, 860, 912, 913, 923, 991, 995, 999, 1030, 1033, 1035, 1037, 1038, 1041, 1044, 1045], "detlefsen": 1043, "detomaso": 1036, "detriment": [46, 66, 162, 278, 360, 413, 995], "dev": [176, 183, 224, 269, 274, 370, 372, 376, 378, 380, 941, 943, 999, 1023, 1036, 1041, 1044, 1045], "dev0": [370, 376], "dev514": 1043, "devansh": [1036, 1037], "devanshkyada27": 1046, "devashish": 1035, "devel": 370, "develop": [0, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 313, 319, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 351, 352, 353, 354, 359, 367, 371, 372, 376, 378, 384, 386, 387, 389, 395, 398, 400, 401, 406, 407, 411, 412, 418, 421, 428, 491, 800, 941, 943, 982, 995, 999, 1002, 1015, 1018, 1019, 1020, 1022, 1023, 1029, 1037, 1038, 1039, 1044, 1047, 1048], "developing_estim": 1020, "devi": 1041, "devianc": [1, 145, 148, 207, 224, 319, 411, 551, 556, 557, 559, 560, 563, 648, 669, 680, 721, 723, 724, 747, 749, 752, 862, 913, 915, 995, 1015, 1030, 1039, 1040, 1042, 1043, 1045], "deviant": [213, 1005], "deviat": [52, 58, 70, 94, 111, 137, 140, 141, 142, 144, 163, 167, 172, 174, 176, 183, 190, 213, 243, 261, 262, 263, 264, 265, 267, 290, 291, 304, 309, 364, 368, 369, 377, 381, 386, 408, 411, 414, 447, 469, 499, 509, 510, 511, 512, 514, 515, 516, 520, 522, 523, 528, 550, 593, 611, 634, 644, 645, 671, 724, 752, 806, 823, 850, 851, 873, 874, 884, 893, 894, 895, 995, 999, 1005, 1009, 1035, 1036, 1037, 1040, 1041, 1042], "deviations_": 851, "devic": [408, 581, 985, 1018, 1047], "devnani": 1041, "deweight": 950, "dexter": 1039, "dezub": 1036, "df": [43, 52, 62, 64, 149, 154, 182, 184, 190, 194, 207, 224, 254, 264, 308, 310, 320, 348, 377, 412, 463, 589, 590, 988, 989, 1046], "df_": 224, "df_freq": 224, "df_max_": [62, 64], "df_min_": [62, 64], "df_out": 320, "df_sev": 224, "df_std": 348, "df_test": [207, 224], "df_train": [207, 224], "dfrac": [1003, 1009], "dgemm": 359, "dgesdd": 378, "dhanshre": 1044, "dhifallah": 1049, "dhillon": [1, 57, 401, 448, 450, 509], "dhingra": [1037, 1038, 1041, 1046], "dhyei": 1049, "di": [386, 404, 409, 529, 535, 664, 685, 686, 897, 1033, 1042], "dia": 1046, "diabet": [1, 46, 147, 156, 163, 179, 196, 198, 205, 260, 365, 411, 499, 825, 826, 827, 1007, 1025], "diadochokinet": 1044, "diag": [51, 113, 175, 251, 254, 409, 414, 530, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 797, 798, 995, 1044, 1049], "diag_kind": [182, 183], "diagnos": [163, 267, 369, 380, 389, 405], "diagnosi": [163, 267, 369, 851], "diagnost": [163, 186, 267, 365, 386, 403, 498, 712, 826, 827, 999, 1007, 1018, 1019, 1025], "diagon": [1, 43, 62, 64, 75, 113, 115, 126, 224, 243, 251, 254, 255, 257, 261, 336, 401, 404, 406, 414, 450, 468, 469, 475, 478, 509, 511, 525, 530, 548, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 650, 651, 654, 655, 656, 682, 683, 701, 715, 792, 797, 798, 848, 856, 991, 993, 995, 998, 999, 1002, 1009, 1035, 1037, 1038, 1039], "diagram": [1, 62, 64, 103, 245, 314, 320, 374, 402, 404, 435, 436, 465, 902, 1009, 1040, 1041, 1046, 1047], "diamet": 404, "diamond": 252, "diaz": 1037, "dice": [447, 454, 699, 778, 779, 780, 1002], "dicedist": 699, "dichotomis": 1015, "dickerson": 1030, "dickson": 1036, "dico": 123, "dict": [48, 49, 50, 51, 55, 63, 74, 102, 105, 106, 140, 144, 146, 148, 155, 205, 213, 233, 242, 243, 246, 251, 258, 261, 262, 263, 265, 268, 271, 273, 274, 284, 288, 306, 310, 317, 329, 336, 340, 348, 349, 361, 364, 366, 374, 384, 386, 405, 408, 415, 416, 418, 422, 426, 428, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 454, 461, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 494, 513, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 697, 698, 700, 701, 702, 711, 712, 713, 762, 765, 771, 779, 780, 797, 798, 799, 800, 803, 804, 806, 811, 812, 814, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 919, 921, 935, 936, 941, 942, 954, 957, 960, 987, 988, 999, 1009, 1025, 1029, 1035, 1036, 1045, 1046, 1047], "dict_count_vector": 349, "dict_init": [529, 535, 543, 544], "dict_kei": [126, 626], "dict_learn": [1, 381, 529, 535, 544, 1030, 1037, 1039, 1042, 1043, 1045], "dict_learning_onlin": [1, 543, 1030, 1039, 1042, 1043, 1046], "dict_pos_code_estim": 120, "dict_pos_dict_estim": 120, "dict_pos_estim": 120, "dict_typ": 580, "dictat": 404, "dictionari": [1, 44, 45, 46, 47, 71, 84, 86, 119, 149, 151, 180, 206, 240, 242, 258, 348, 349, 365, 366, 367, 374, 384, 386, 404, 412, 446, 461, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 505, 508, 513, 524, 529, 535, 536, 537, 538, 540, 541, 542, 543, 544, 546, 565, 566, 567, 568, 580, 581, 583, 586, 587, 588, 593, 632, 633, 634, 664, 685, 686, 701, 702, 711, 713, 800, 803, 804, 811, 812, 814, 822, 827, 863, 868, 877, 912, 913, 914, 915, 919, 921, 935, 941, 942, 943, 957, 960, 988, 995, 999, 1014, 1020, 1024, 1025, 1029, 1037, 1040, 1041, 1042, 1043, 1044, 1048], "dictionarylearn": [1, 409, 535, 537, 538, 540, 541, 542, 543, 544, 1030, 1034, 1036, 1039, 1042, 1043, 1044, 1045, 1049], "dictlearn": 1034, "dictvector": [1, 47, 57, 102, 180, 346, 347, 348, 367, 412, 485, 581, 587, 588, 589, 590, 877, 1020, 1029, 1030, 1033, 1039, 1041, 1042, 1045, 1046], "did": [146, 167, 183, 186, 207, 214, 224, 250, 258, 311, 348, 367, 398, 627, 712, 819, 906, 1030, 1031, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1044], "didact": [66, 372, 1019], "didi": [1035, 1036, 1037, 1038], "didn": [240, 355, 386, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "die": 996, "diebold": 264, "diederik": [861, 862, 1003, 1044], "diederikwp": 1044, "diego": [1030, 1031], "diegodlh": [1036, 1037], "diemert": [1023, 1031, 1032], "diesel": [207, 224], "dietterich": [264, 834, 1000], "diff": [375, 999], "diff_embed": 294, "differ": [1, 25, 43, 44, 46, 49, 51, 53, 54, 58, 61, 64, 66, 67, 70, 71, 72, 74, 76, 77, 78, 80, 81, 82, 85, 86, 88, 89, 90, 91, 93, 97, 98, 99, 100, 102, 103, 104, 106, 111, 115, 116, 118, 120, 122, 123, 125, 127, 128, 129, 134, 137, 139, 140, 142, 143, 144, 146, 148, 149, 154, 155, 156, 158, 163, 165, 166, 167, 168, 169, 172, 173, 174, 178, 179, 180, 182, 183, 185, 188, 190, 191, 195, 196, 197, 198, 200, 201, 207, 208, 209, 211, 212, 213, 214, 223, 224, 226, 227, 228, 229, 231, 233, 235, 238, 239, 240, 243, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 277, 278, 279, 281, 283, 284, 287, 290, 291, 293, 299, 300, 303, 305, 306, 308, 309, 313, 321, 323, 330, 331, 332, 334, 335, 336, 338, 339, 342, 343, 344, 347, 348, 349, 353, 355, 359, 360, 361, 366, 367, 369, 371, 372, 375, 376, 377, 379, 380, 381, 385, 386, 390, 392, 398, 400, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 417, 429, 434, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 455, 456, 459, 461, 472, 475, 487, 491, 492, 494, 501, 502, 506, 507, 510, 512, 520, 535, 536, 537, 538, 544, 545, 547, 548, 553, 554, 561, 580, 581, 587, 588, 589, 590, 593, 611, 613, 614, 615, 619, 622, 623, 627, 631, 632, 633, 634, 638, 643, 644, 645, 647, 649, 651, 653, 655, 657, 658, 661, 666, 667, 672, 674, 676, 677, 678, 680, 690, 692, 694, 698, 700, 701, 704, 705, 706, 707, 709, 715, 717, 718, 727, 728, 729, 730, 731, 734, 735, 737, 743, 757, 758, 759, 761, 778, 782, 783, 784, 786, 787, 789, 792, 793, 795, 798, 800, 802, 803, 804, 805, 806, 809, 814, 815, 816, 818, 819, 820, 822, 823, 825, 827, 828, 831, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 854, 857, 860, 864, 869, 873, 874, 876, 877, 878, 879, 880, 881, 882, 884, 885, 889, 890, 891, 892, 893, 894, 895, 904, 905, 906, 907, 909, 910, 912, 913, 914, 915, 957, 964, 988, 989, 991, 992, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1009, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1023, 1025, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "difference_plot": 269, "differenti": [126, 271, 411, 414, 557, 558, 619, 622], "difficult": [88, 134, 183, 214, 243, 372, 380, 402, 409, 411, 551, 552, 557, 559, 560, 994, 996, 998, 1002, 1004, 1006, 1015, 1023, 1029, 1043], "difficulti": [48, 64, 224, 304, 361, 372, 402, 861, 862, 998, 1002], "diffus": 172, "digest": [322, 372, 1044, 1048], "digg": [1023, 1036], "digicosm": 0, "digit": [1, 44, 51, 52, 65, 66, 71, 74, 80, 84, 86, 89, 90, 92, 94, 95, 97, 104, 105, 123, 139, 161, 163, 180, 199, 200, 201, 221, 222, 225, 226, 228, 230, 237, 238, 252, 257, 262, 266, 288, 293, 294, 298, 300, 301, 319, 324, 327, 348, 365, 372, 378, 404, 410, 411, 413, 438, 442, 444, 500, 539, 542, 547, 564, 658, 688, 689, 690, 691, 692, 697, 704, 705, 713, 717, 718, 737, 793, 795, 830, 853, 860, 864, 865, 874, 884, 890, 897, 900, 909, 916, 917, 918, 996, 999, 1002, 1004, 1012, 1020, 1025, 1033], "digraph": 916, "dijkstra": [381, 688, 996], "dikramasrour": 1049, "dilemma": 994, "dillon": [1037, 1038, 1039], "dilut": [186, 369], "dilutedsauc": 1037, "dim": [215, 237, 292, 293, 295, 332, 333, 525, 699, 1046], "dim_reduction_method": 293, "dimens": [1, 37, 48, 51, 52, 54, 72, 75, 86, 113, 115, 120, 126, 163, 169, 171, 173, 175, 184, 194, 205, 228, 230, 233, 237, 238, 244, 250, 251, 288, 289, 293, 307, 340, 347, 348, 349, 367, 369, 373, 386, 404, 409, 410, 414, 416, 439, 440, 442, 444, 445, 446, 449, 461, 462, 479, 480, 481, 491, 492, 513, 522, 523, 527, 528, 531, 539, 547, 581, 582, 583, 584, 586, 588, 596, 611, 619, 622, 641, 644, 659, 690, 691, 692, 694, 695, 699, 764, 774, 778, 825, 844, 845, 849, 863, 896, 897, 898, 906, 907, 908, 909, 910, 930, 931, 932, 963, 969, 972, 989, 991, 993, 995, 996, 997, 1000, 1002, 1003, 1005, 1011, 1014, 1018, 1036, 1038, 1039, 1041], "dimension": [1, 10, 37, 45, 48, 49, 57, 67, 75, 79, 87, 88, 90, 91, 95, 101, 103, 105, 106, 115, 116, 118, 120, 126, 127, 128, 134, 139, 152, 163, 167, 169, 170, 174, 180, 194, 208, 223, 225, 227, 228, 230, 233, 237, 238, 241, 250, 251, 263, 285, 288, 292, 294, 306, 333, 340, 347, 355, 359, 364, 367, 368, 369, 372, 381, 386, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 442, 444, 446, 462, 466, 469, 470, 479, 480, 481, 482, 485, 486, 487, 488, 490, 491, 492, 493, 495, 498, 499, 500, 502, 503, 508, 513, 517, 530, 532, 533, 536, 537, 538, 539, 542, 545, 547, 561, 564, 571, 598, 606, 631, 640, 641, 642, 652, 688, 689, 690, 691, 692, 693, 694, 696, 699, 710, 725, 797, 798, 800, 830, 844, 845, 846, 849, 852, 853, 860, 864, 865, 868, 874, 879, 884, 896, 897, 898, 904, 908, 948, 984, 990, 991, 994, 995, 1000, 1001, 1005, 1011, 1012, 1013, 1014, 1015, 1020, 1021, 1023, 1024, 1025, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1038, 1041, 1044, 1045], "dimensionalityreduct": 369, "diminish": 412, "dimitri": [1042, 1043, 1044, 1045, 1046, 1049], "dimmick": 369, "dinga92": [1047, 1048], "dingwal": 1036, "dionisi": 1043, "diop": 1039, "dipan": 1047, "direct": [51, 115, 116, 120, 122, 128, 163, 213, 249, 255, 261, 293, 302, 309, 336, 341, 370, 372, 373, 376, 380, 387, 390, 404, 407, 409, 412, 413, 449, 459, 468, 469, 475, 532, 539, 547, 587, 588, 590, 601, 641, 688, 853, 993, 994, 995, 1000, 1002, 1004, 1019, 1029, 1032], "direction": 1047, "direction_vector": 302, "directli": [0, 45, 57, 64, 80, 89, 103, 126, 139, 143, 163, 175, 194, 196, 207, 213, 224, 234, 269, 302, 304, 317, 320, 321, 322, 323, 349, 355, 359, 370, 372, 373, 374, 376, 378, 384, 385, 386, 387, 400, 401, 402, 404, 405, 406, 407, 408, 412, 414, 439, 449, 459, 461, 462, 466, 471, 525, 565, 566, 567, 568, 592, 596, 611, 620, 632, 643, 646, 647, 652, 653, 660, 661, 662, 663, 664, 677, 681, 684, 690, 730, 774, 778, 781, 792, 793, 800, 803, 804, 814, 828, 829, 831, 847, 849, 863, 864, 865, 871, 881, 883, 886, 893, 988, 995, 997, 1002, 1004, 1006, 1009, 1014, 1015, 1026, 1029, 1037, 1038, 1040, 1041, 1042, 1045, 1046, 1048, 1049], "director": 1023, "directori": [0, 1, 47, 286, 366, 370, 372, 374, 376, 378, 380, 386, 390, 405, 438, 442, 447, 483, 489, 497, 864, 865, 1043], "direr": [1032, 1033, 1036, 1037], "dirichlet": [1, 42, 45, 180, 249, 250, 255, 259, 412, 485, 534, 536, 538, 587, 590, 797, 1018, 1020, 1024, 1025, 1029, 1034, 1035], "dirichlet_distribut": [249, 797, 998, 1035], "dirichlet_process": [249, 255, 797, 998, 1035], "disabl": [138, 240, 258, 311, 320, 347, 370, 372, 395, 412, 446, 457, 465, 535, 536, 537, 544, 557, 558, 559, 560, 609, 863, 881, 893, 902, 930, 931, 1009, 1035, 1038, 1042, 1044, 1047, 1048], "disadvantag": [409, 414, 995, 996, 1003, 1013, 1014, 1015], "disagre": [735, 1006], "disambigu": [372, 832, 901, 1012, 1044], "disappear": [995, 1029], "disappoint": 43, "discard": [47, 88, 192, 267, 359, 401, 406, 413, 506, 507, 547, 596, 627, 630, 644, 877, 881, 893, 989, 995, 1037, 1041, 1047], "disclaim": 1018, "disclos": 385, "disconnect": 1042, "discontinu": [43, 384, 999], "discord": [372, 705, 1022], "discount": [1, 367, 404, 726, 756, 1036, 1039], "discounted_cumulative_gain": 726, "discourag": [211, 384, 390, 689], "discov": [348, 404, 409, 412, 415, 441, 445, 1044, 1047], "discoveri": [1, 264, 367, 378, 381, 404, 411, 413, 415, 441, 509, 553, 554, 561, 591, 594, 595, 597, 598, 599, 605, 720, 740, 783, 938, 939, 940, 999, 1011, 1023, 1043, 1044], "discrep": [412, 1033], "discret": [1, 43, 67, 80, 118, 129, 134, 152, 166, 180, 184, 191, 207, 224, 244, 281, 299, 303, 307, 330, 361, 364, 367, 368, 372, 376, 385, 386, 404, 409, 412, 414, 435, 436, 445, 449, 457, 458, 459, 490, 512, 513, 520, 551, 557, 587, 588, 591, 594, 595, 598, 599, 606, 607, 610, 611, 612, 616, 617, 618, 657, 658, 800, 811, 822, 830, 839, 840, 843, 865, 869, 877, 878, 881, 884, 893, 904, 909, 913, 963, 988, 995, 996, 997, 999, 1000, 1002, 1015, 1018, 1020, 1025, 1031, 1034, 1042, 1043, 1044], "discrete_featur": [606, 607], "discrim": 207, "discrimin": [1, 11, 48, 49, 54, 65, 109, 110, 111, 112, 113, 126, 128, 158, 160, 163, 180, 188, 221, 227, 241, 254, 293, 369, 402, 411, 472, 510, 547, 548, 564, 631, 783, 853, 988, 996, 999, 1002, 1013, 1015, 1020, 1021, 1025, 1032], "discriminant_analysi": [1, 67, 69, 70, 128, 227, 293, 355, 400, 534, 547, 548, 853, 993, 1000, 1029, 1032, 1033, 1034, 1035, 1036], "discriminatori": 402, "discuss": [43, 86, 91, 163, 183, 198, 226, 231, 258, 267, 281, 347, 355, 361, 367, 369, 372, 377, 378, 380, 384, 386, 387, 403, 404, 406, 410, 411, 413, 414, 496, 682, 683, 846, 847, 852, 854, 855, 989, 993, 995, 996, 999, 1002, 1009, 1016, 1017, 1019, 1022, 1032], "diseas": [46, 156, 163, 179, 267, 369, 712, 999], "disentangl": 996, "disjoint": [402, 404, 405, 434, 704, 731, 755, 757, 996], "disk": [45, 53, 322, 367, 372, 377, 386, 398], "disp": [43, 66, 68, 136, 149, 150, 151, 155, 257, 267, 277, 287, 309, 314, 320, 333, 338, 435, 631, 697, 700, 701, 853], "disp1": 632, "disp2": 632, "dispar": [690, 694, 996], "dispatch": [103, 258, 386, 400, 465, 800, 814, 825, 826, 827, 902, 966, 967, 1025, 1044, 1047, 1048], "dispatch_next": 966, "dispatch_one_batch": 966, "dispers": [70, 278, 404, 710, 725, 995], "displai": [1, 51, 62, 64, 66, 70, 72, 80, 93, 103, 112, 113, 115, 116, 120, 140, 150, 151, 154, 178, 180, 183, 184, 197, 224, 232, 233, 243, 247, 253, 261, 263, 265, 266, 271, 273, 277, 279, 294, 310, 314, 315, 335, 352, 359, 372, 374, 375, 379, 381, 390, 392, 405, 409, 412, 413, 418, 435, 461, 464, 465, 494, 539, 562, 630, 631, 632, 658, 687, 697, 698, 700, 701, 702, 713, 718, 782, 789, 800, 806, 814, 823, 830, 864, 865, 877, 879, 884, 902, 909, 916, 917, 918, 938, 966, 985, 999, 1003, 1018, 1020, 1025, 1038, 1040, 1041, 1043, 1044], "display_label": [45, 257, 697, 1041], "dispos": 988, "disproportion": 410, "disput": 140, "disregard": [347, 386, 412, 427, 462, 479, 480, 481, 550, 552, 554, 556, 558, 560, 563, 566, 568, 611, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 678, 679, 721, 722, 723, 724, 785, 837, 838, 847, 855, 862, 873, 874, 880, 881, 884, 889, 892, 893, 895, 905, 907, 910, 913, 915, 999, 1037], "disrupt": [360, 370], "dissemin": 1018, "dissimilar": [229, 340, 386, 401, 449, 690, 694, 996, 1035, 1045], "dissimilarity_matrix_": 690, "dist": [111, 227, 237, 376, 466, 467, 468, 469, 470, 471, 472, 473, 699, 763, 769, 844, 845], "dist_": [466, 471], "dist_embed": 294, "dist_linkag": 186, "dist_matrix": 449, "dist_matrix_": 688, "distanc": [1, 37, 74, 75, 88, 90, 93, 94, 98, 100, 108, 112, 125, 127, 163, 178, 180, 186, 195, 208, 210, 226, 228, 229, 231, 237, 243, 284, 286, 287, 292, 294, 296, 297, 304, 309, 313, 317, 318, 340, 347, 348, 359, 369, 381, 384, 386, 401, 404, 406, 409, 410, 414, 415, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 452, 453, 454, 455, 456, 458, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 536, 538, 545, 606, 607, 615, 619, 620, 622, 623, 628, 658, 659, 666, 668, 674, 675, 676, 677, 678, 688, 689, 690, 692, 693, 694, 695, 696, 699, 703, 725, 734, 758, 760, 762, 763, 764, 765, 768, 769, 770, 771, 772, 773, 778, 779, 780, 781, 792, 793, 796, 800, 814, 833, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 883, 898, 902, 904, 906, 908, 909, 910, 912, 913, 914, 915, 989, 993, 996, 997, 999, 1002, 1005, 1009, 1011, 1013, 1014, 1020, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "distance_matrix": 186, "distance_metr": [1, 778, 844, 845, 846, 847, 848, 849, 850, 852, 854, 855, 856, 857, 858], "distance_threshold": [76, 438, 442, 1038, 1041], "distancemetr": [1, 386, 410, 847, 1002, 1037, 1041, 1042, 1043, 1046], "distancemetric64": [844, 845], "distances_": [76, 438, 442, 1041], "distant": [404, 692, 1002], "distil": 231, "distinct": [93, 201, 264, 327, 347, 349, 367, 377, 386, 387, 408, 411, 412, 588, 801, 810, 818, 878, 879, 899, 900, 988, 995, 1002, 1005, 1037], "distinguish": [43, 58, 75, 111, 118, 125, 209, 261, 281, 367, 386, 387, 414, 988, 999, 1002, 1005], "distort": [37, 206, 237, 369, 402, 881, 893, 898, 996, 1009, 1011], "distribut": [1, 25, 37, 42, 43, 47, 48, 49, 52, 58, 64, 70, 72, 74, 79, 85, 86, 88, 90, 95, 107, 110, 111, 112, 116, 118, 126, 134, 136, 146, 150, 158, 163, 167, 176, 180, 182, 183, 184, 186, 188, 190, 201, 207, 209, 211, 228, 230, 233, 237, 243, 249, 254, 255, 258, 260, 264, 270, 272, 278, 281, 285, 289, 303, 304, 306, 309, 319, 325, 326, 341, 343, 347, 359, 360, 365, 368, 369, 370, 372, 373, 377, 386, 402, 404, 406, 408, 409, 410, 416, 444, 446, 466, 467, 468, 469, 470, 471, 472, 473, 485, 496, 501, 513, 514, 515, 516, 517, 521, 530, 531, 534, 548, 549, 550, 561, 611, 625, 640, 642, 644, 645, 648, 658, 659, 669, 679, 680, 688, 689, 690, 692, 706, 708, 724, 752, 789, 797, 798, 804, 805, 812, 814, 818, 819, 830, 840, 843, 849, 853, 860, 867, 880, 881, 882, 883, 884, 892, 893, 894, 899, 900, 908, 919, 950, 969, 988, 993, 995, 997, 998, 999, 1001, 1002, 1004, 1005, 1011, 1012, 1018, 1019, 1020, 1024, 1025, 1029, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1045, 1048], "district": [179, 367], "ditenberg": 1036, "div": 243, "dive": [116, 372, 378, 988], "diverg": [54, 145, 155, 226, 231, 289, 536, 538, 545, 692, 860, 996, 998, 999, 1004, 1006, 1036, 1037, 1042, 1048], "divers": [0, 386, 411], "divid": [72, 78, 120, 160, 172, 207, 243, 249, 348, 355, 368, 369, 401, 403, 404, 408, 409, 411, 466, 467, 468, 469, 470, 471, 472, 473, 510, 517, 532, 539, 676, 677, 678, 709, 719, 726, 734, 738, 746, 756, 794, 796, 861, 862, 906, 909, 948, 951, 952, 988, 996, 998, 999, 1002, 1009, 1013, 1015, 1029, 1036, 1037, 1040], "dividend": 999, "divis": [317, 404, 412, 589, 590, 593, 712, 713, 729, 730, 738, 746, 783, 784, 787, 999, 1033, 1037, 1038, 1041, 1045, 1046, 1049], "divisor": 999, "divo": 1039, "divyanshu": 1042, "divyaprabha": 1040, "diwakar": 1043, "dixon": [769, 1039, 1040], "dizietasahi": 1039, "di\u1ec5n": 1044, "djipei": [1034, 1035], "dl": 676, "dlabal": 1033, "dlimi": 1049, "dll": 1043, "dlovel": 1037, "dmallia17": 1042, "dmitri": [1034, 1036, 1037, 1038, 1042, 1045, 1046, 1048, 1049], "dmitrij": 1033, "dmytro": 1042, "dn": 1002, "dna": [384, 628, 989], "dnf": 390, "do": [0, 30, 43, 49, 51, 52, 62, 64, 77, 88, 94, 100, 106, 124, 126, 129, 138, 141, 142, 146, 147, 149, 154, 160, 165, 172, 178, 183, 184, 185, 207, 211, 224, 226, 228, 240, 241, 243, 255, 258, 259, 262, 265, 267, 277, 283, 284, 286, 290, 316, 320, 330, 333, 336, 340, 341, 343, 347, 348, 349, 354, 355, 359, 360, 361, 367, 369, 371, 372, 373, 374, 375, 376, 378, 379, 380, 386, 387, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 411, 412, 413, 423, 447, 458, 461, 464, 501, 534, 536, 540, 542, 550, 553, 580, 581, 587, 588, 590, 601, 632, 633, 645, 646, 652, 655, 656, 658, 659, 666, 668, 676, 698, 727, 737, 763, 778, 782, 802, 817, 820, 836, 837, 841, 868, 869, 871, 878, 882, 884, 889, 890, 892, 893, 894, 895, 912, 913, 914, 915, 929, 972, 988, 991, 993, 995, 996, 999, 1000, 1002, 1003, 1007, 1009, 1014, 1015, 1018, 1022, 1023, 1026, 1029, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "do_early_stopping_": [559, 560], "doc": [0, 43, 47, 52, 57, 322, 347, 349, 360, 372, 376, 377, 380, 386, 390, 397, 412, 587, 588, 590, 778, 781, 792, 793, 827, 1029, 1033, 1043, 1048], "doc_environ": 380, "doc_it": 47, "doc_linux": 380, "doc_topic_distr": [534, 1036], "doc_topic_prior": [409, 534], "doc_topic_prior_": 534, "dock": 1048, "docker": [380, 398, 1042, 1043], "dock\u00e8": [1038, 1039, 1040, 1046, 1047, 1048, 1049], "docstr": [372, 374, 378, 386, 445, 458, 469, 699, 701, 937, 988, 1002, 1003, 1013, 1029, 1036, 1037, 1042, 1043, 1046, 1049], "doctest": [372, 386, 1029], "document": [1, 16, 42, 45, 49, 51, 54, 55, 56, 59, 63, 72, 90, 91, 93, 94, 102, 103, 104, 118, 120, 139, 141, 150, 151, 154, 155, 156, 160, 172, 183, 184, 185, 192, 221, 234, 235, 236, 237, 240, 241, 243, 244, 245, 246, 247, 254, 258, 262, 263, 264, 265, 271, 276, 278, 301, 302, 310, 314, 317, 318, 320, 323, 327, 329, 343, 349, 353, 354, 359, 360, 361, 366, 367, 368, 370, 371, 373, 374, 375, 376, 377, 378, 380, 384, 386, 387, 390, 392, 395, 398, 400, 401, 404, 409, 412, 415, 441, 444, 445, 446, 450, 454, 461, 485, 486, 497, 499, 509, 519, 521, 534, 542, 562, 587, 588, 589, 590, 603, 609, 631, 639, 643, 658, 666, 668, 674, 676, 696, 697, 699, 703, 705, 717, 737, 758, 759, 769, 779, 780, 793, 795, 800, 803, 804, 806, 814, 823, 834, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 865, 876, 904, 909, 926, 929, 931, 945, 966, 988, 995, 997, 999, 1000, 1001, 1002, 1003, 1007, 1013, 1016, 1020, 1023, 1030, 1031, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "document_clust": 1035, "document_nam": 57, "doddington": 999, "doe": [27, 43, 46, 47, 48, 51, 52, 61, 62, 66, 67, 70, 75, 80, 86, 88, 90, 102, 104, 105, 116, 130, 134, 139, 140, 142, 143, 144, 148, 149, 154, 163, 165, 173, 183, 184, 194, 201, 207, 209, 213, 224, 226, 227, 228, 231, 233, 236, 237, 238, 240, 241, 243, 251, 252, 258, 259, 264, 266, 267, 271, 273, 274, 283, 284, 297, 304, 306, 308, 310, 311, 316, 317, 322, 328, 329, 334, 336, 343, 345, 347, 348, 349, 353, 359, 360, 366, 370, 372, 373, 374, 376, 380, 385, 386, 392, 395, 398, 400, 402, 404, 405, 408, 409, 411, 412, 413, 414, 429, 437, 439, 443, 444, 446, 447, 451, 453, 464, 470, 476, 484, 497, 501, 506, 525, 533, 535, 536, 537, 542, 544, 547, 548, 551, 552, 555, 556, 557, 558, 559, 560, 561, 562, 563, 580, 581, 582, 587, 588, 590, 592, 593, 596, 601, 605, 610, 632, 638, 649, 650, 651, 654, 655, 656, 659, 671, 682, 683, 698, 700, 702, 707, 728, 729, 730, 734, 736, 738, 743, 783, 784, 787, 788, 794, 800, 803, 804, 814, 861, 865, 866, 867, 869, 871, 873, 876, 877, 878, 881, 884, 885, 893, 896, 897, 901, 904, 905, 912, 913, 914, 915, 919, 930, 934, 941, 948, 951, 952, 953, 966, 982, 988, 989, 991, 993, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1005, 1007, 1009, 1013, 1014, 1015, 1019, 1029, 1030, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1048, 1049], "doepk": 1036, "doesn": [47, 183, 207, 240, 250, 283, 301, 336, 380, 386, 390, 398, 404, 412, 413, 417, 429, 472, 632, 633, 666, 668, 676, 716, 828, 831, 836, 846, 847, 861, 873, 874, 998, 999, 1015, 1033, 1046], "dog": [316, 317, 319, 320, 321, 581, 783, 885, 1009], "dohmatob": [1034, 1035, 1036], "dohri": [1046, 1047], "doi": [188, 207, 224, 372, 404, 676], "dok": [551, 552, 871, 1042], "dokato": 1036, "dolan": 367, "dollar": [183, 367], "dolmatov": 1039, "dolphin": 347, "domain": [149, 207, 278, 310, 322, 386, 389, 408, 411, 635, 721, 723, 724, 801, 802, 807, 808, 809, 995, 1019, 1048], "domenico": [1048, 1049], "domin": [140, 179, 186, 207, 212, 243, 273, 309, 367, 378, 402, 884, 1001, 1009, 1015, 1045], "domingo": [64, 788, 999], "dominik": [1036, 1045], "don": [64, 87, 102, 149, 183, 202, 227, 240, 241, 258, 264, 277, 284, 328, 333, 337, 347, 348, 359, 366, 372, 374, 376, 378, 380, 385, 390, 395, 403, 405, 412, 424, 646, 652, 832, 912, 913, 914, 915, 923, 964, 988, 995, 998, 1000, 1003, 1005, 1013, 1033, 1038, 1045, 1046, 1047], "don86": 1036, "donald": [45, 367, 404, 725, 989], "donat": 234, "done": [0, 45, 47, 48, 50, 52, 54, 55, 57, 83, 85, 86, 123, 149, 160, 163, 172, 173, 183, 184, 188, 190, 194, 195, 211, 223, 239, 240, 254, 262, 265, 268, 273, 284, 307, 315, 322, 347, 348, 349, 353, 355, 360, 366, 370, 372, 376, 379, 380, 381, 384, 386, 395, 404, 406, 408, 409, 411, 421, 427, 438, 439, 442, 447, 449, 469, 479, 480, 481, 482, 486, 533, 559, 560, 581, 605, 606, 607, 628, 630, 632, 634, 643, 644, 645, 659, 709, 722, 741, 797, 798, 800, 814, 816, 819, 820, 822, 868, 882, 942, 983, 988, 989, 992, 995, 996, 999, 1001, 1002, 1003, 1009, 1012, 1013, 1014, 1015, 1019, 1029, 1031, 1036, 1039, 1041, 1045], "dong": 1039, "donn": 1034, "donoho": [689, 693, 996], "donor": [163, 369], "donovan": 1035, "dor": 1037, "dorin": [96, 445], "dormagen": 1039, "doshi": 1048, "dot": [1, 55, 69, 79, 82, 87, 90, 95, 109, 110, 111, 113, 115, 116, 121, 122, 123, 127, 129, 134, 137, 155, 167, 168, 174, 175, 183, 192, 194, 201, 203, 204, 238, 250, 251, 253, 254, 258, 261, 268, 332, 334, 340, 359, 374, 378, 381, 386, 401, 409, 412, 531, 536, 538, 545, 589, 590, 614, 646, 647, 650, 652, 653, 654, 657, 660, 661, 662, 663, 681, 684, 687, 761, 763, 876, 916, 949, 997, 1001, 1009, 1013, 1014, 1038], "dot_data": [916, 1015], "dot_product": 949, "dotproduct": [1, 170, 171, 176, 414, 611, 625], "dotson": 1034, "doubl": [70, 140, 276, 372, 386, 409, 536, 538, 539, 545, 844, 845, 855, 982, 989, 1014, 1015, 1029, 1039, 1040, 1048], "doubt": [372, 373, 376, 995, 1005, 1018], "doucet": 1043, "douetteau": 1023, "doug": [1030, 1031, 1041], "dougal": [1031, 1033, 1034, 1036, 1037, 1038, 1039], "dougla": 1037, "douillard": 1036, "doumouro": 1038, "douriez": [1039, 1040], "dowl": 1035, "down": [80, 81, 112, 134, 221, 222, 228, 237, 238, 240, 267, 281, 302, 304, 340, 345, 355, 366, 375, 380, 386, 406, 409, 440, 447, 453, 589, 592, 593, 639, 649, 774, 778, 781, 873, 874, 879, 882, 883, 894, 906, 909, 916, 995, 1037], "downarrow": 1001, "download": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 158, 159, 160, 161, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 180, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 351, 352, 353, 354, 365, 367, 369, 370, 376, 377, 380, 392, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 508, 1015, 1022, 1025, 1033, 1034, 1037, 1041, 1042, 1043, 1048, 1049], "download_20newsgroup": 1033, "download_if_miss": [485, 486, 487, 488, 490, 491, 492, 493, 495, 496, 1036], "download_url": 47, "downsampl": 123, "downsid": 349, "downstream": [43, 111, 311, 349, 412, 529, 532, 535, 539, 540, 605, 877, 1009, 1039], "downweight": [406, 534], "dowon": [1037, 1038], "dozen": [385, 414], "do\u0161ilovi\u0107": [1046, 1047], "dp": [250, 255], "dpgmm": [250, 255, 1029, 1033, 1035], "dpi": [217, 918, 1042], "dpy_debug": 378, "dqd": 378, "dr": [0, 163, 369, 404, 1043], "draft": [372, 387], "drag": 392, "dragon": 1009, "drama": 412, "dramat": 361, "dramsch": 1039, "drastic": [167, 205, 237, 272, 404, 408, 1002, 1012], "draw": [43, 46, 93, 176, 183, 244, 266, 271, 336, 379, 407, 409, 410, 411, 553, 554, 555, 556, 561, 562, 563, 564, 611, 634, 701, 702, 806, 823, 916, 918, 998, 1018, 1042, 1043], "drawback": [223, 991, 994], "drawcoastlin": [50, 297], "drawcountri": [50, 297], "drawn": [46, 85, 111, 137, 162, 167, 176, 182, 244, 271, 288, 347, 360, 368, 404, 410, 411, 414, 416, 466, 467, 468, 469, 470, 471, 472, 473, 513, 521, 531, 553, 554, 555, 556, 561, 562, 563, 564, 611, 627, 632, 641, 840, 896, 897, 914, 915, 995, 1009, 1011, 1032], "drawstyl": [351, 700], "draxu": 1029, "drew": [1038, 1047, 1048], "drewhogg": 1044, "drewmjohnston": 1038, "drgfreeman": 1039, "driessen": [406, 466, 471, 1005], "drift": 1019, "drivag": [207, 224], "drive": [361, 409, 410, 547, 1013, 1023], "driven": [0, 186, 1023], "driver": [207, 224, 1044], "drop": [43, 44, 52, 103, 107, 116, 139, 141, 149, 154, 172, 182, 183, 184, 185, 186, 207, 211, 224, 235, 243, 245, 247, 258, 274, 310, 314, 315, 317, 318, 320, 348, 376, 380, 405, 409, 411, 461, 464, 565, 566, 567, 568, 630, 695, 698, 700, 702, 727, 782, 789, 863, 877, 883, 989, 995, 999, 1009, 1018, 1029, 1030, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1049], "drop_binary_enc": 877, "drop_dupl": 276, "drop_enc": [877, 1009], "drop_first": 695, "drop_idx": 877, "drop_idx_": [877, 1040, 1044], "drop_intermedi": [698, 700, 702, 727, 782, 789, 1045, 1049], "drop_nul": [52, 172], "dropdown": [163, 372, 988, 999], "dropped_result": 143, "dropper": 143, "dror": 1038, "dross": 532, "dro\u017cd\u017c": 1032, "drskd": 1043, "druck": 1043, "drucker": [135, 411, 552], "drug": 995, "dry": 184, "dryden": 102, "ds_ana": 1042, "ds_cnt": [67, 306, 307], "dschult": 55, "dscullei": 446, "dseg": 102, "dsouza": [1040, 1041, 1042, 1043], "dsquareindia": 1035, "dss": 1023, "dt": [83, 123, 172, 412, 1015], "dtreeviz": 1018, "dtype": [43, 47, 49, 50, 55, 82, 86, 87, 98, 102, 103, 139, 143, 145, 147, 148, 150, 154, 168, 169, 170, 179, 183, 184, 185, 209, 224, 235, 245, 247, 249, 258, 262, 265, 268, 272, 278, 281, 291, 297, 310, 314, 316, 317, 319, 326, 354, 366, 367, 372, 374, 384, 386, 400, 405, 408, 411, 412, 419, 420, 422, 425, 439, 440, 444, 445, 446, 447, 448, 450, 456, 461, 463, 464, 466, 469, 471, 485, 486, 487, 488, 494, 495, 496, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 512, 520, 540, 546, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 580, 581, 584, 585, 587, 588, 590, 592, 593, 600, 601, 605, 627, 628, 629, 630, 632, 633, 640, 641, 644, 645, 646, 652, 656, 657, 660, 661, 662, 663, 664, 665, 671, 673, 675, 697, 699, 705, 714, 715, 731, 738, 741, 755, 786, 806, 825, 827, 828, 840, 844, 845, 847, 855, 869, 875, 877, 878, 884, 885, 887, 889, 890, 891, 892, 893, 894, 895, 898, 906, 907, 908, 909, 910, 912, 913, 914, 915, 925, 927, 928, 930, 931, 955, 965, 969, 972, 973, 974, 975, 976, 979, 984, 985, 989, 1000, 1009, 1012, 1014, 1030, 1032, 1033, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "dtype_exclud": [103, 463], "dtype_includ": [103, 143, 154, 243, 405, 463], "du": [0, 393, 394, 1029, 1030, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "dua": 1038, "dual": [102, 103, 104, 139, 155, 160, 234, 235, 245, 247, 258, 263, 271, 278, 302, 313, 314, 317, 323, 343, 347, 412, 413, 468, 469, 475, 611, 646, 647, 652, 653, 658, 659, 660, 661, 662, 663, 681, 684, 730, 844, 845, 904, 905, 906, 909, 1014, 1031, 1040, 1043, 1045], "dual_coef_": [533, 643, 906, 907, 908, 909, 910, 1014, 1033], "dual_gap": [468, 469, 475, 646, 647, 652, 653, 660, 661, 662, 663, 681, 684], "dual_gap_": [646, 647, 652, 653, 660, 661, 662, 663, 1042], "dualiti": [469, 995], "dualtre": [844, 845], "duan": [1038, 1040], "duart": [1034, 1042, 1044, 1047], "dubai": 412, "duboi": [1035, 1037], "dubou": 1039, "dubourg": [0, 394, 1023, 1029, 1033], "duchesnai": [0, 394, 1029], "duck": [374, 386, 1039], "ducktyp": [1033, 1046], "duckworth": 1029, "ducout": 1043, "duda": [369, 993], "due": [48, 52, 63, 64, 86, 88, 93, 107, 134, 137, 155, 167, 183, 184, 190, 194, 200, 207, 209, 223, 224, 237, 243, 250, 272, 273, 278, 283, 284, 309, 310, 340, 343, 347, 348, 349, 372, 378, 384, 386, 390, 402, 403, 404, 408, 409, 411, 414, 440, 443, 444, 456, 533, 537, 541, 542, 572, 671, 800, 803, 804, 808, 810, 814, 825, 826, 829, 832, 836, 837, 869, 873, 874, 884, 989, 995, 996, 998, 999, 1000, 1002, 1006, 1013, 1014, 1019, 1029, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048], "dueck": [73, 437, 451], "dugnat": 1043, "duhaim": 1037, "dummi": [1, 134, 135, 207, 224, 240, 258, 261, 267, 377, 399, 549, 550, 732, 877, 886, 923, 1000, 1009, 1015, 1025, 1030, 1032, 1033, 1034, 1036], "dummy_classifiers_misclassification_error": 134, "dummy_clf": [134, 549], "dummy_leaf_": 439, "dummy_regr": 550, "dummy_sev": 224, "dummybiclust": 419, "dummyclassifi": [1, 134, 258, 261, 267, 550, 732, 999, 1030, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1047], "dummyestim": [557, 558], "dummyregressor": [1, 207, 224, 549, 999, 1000, 1030, 1032, 1033, 1036, 1037, 1039, 1042, 1043, 1047], "dumont": 1015, "dump": [1, 55, 398, 484, 844, 845], "dump_svmlight_fil": [1, 1029, 1030, 1034, 1044, 1046], "duong": [1046, 1047], "duplic": [360, 371, 372, 373, 386, 404, 415, 441, 445, 446, 513, 635, 646, 647, 652, 653, 660, 661, 662, 663, 681, 684, 828, 875, 984, 1002, 1029, 1032, 1041, 1043, 1045, 1046, 1048], "dupont": 51, "dupr": [1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045], "dupr\u00e9": [0, 394, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "duqu": [1042, 1049], "durat": [43, 47, 207, 224, 243, 258, 286, 349, 360, 408, 821, 966, 967, 995, 999], "duration_sec": 49, "duration_test": 347, "duration_train": 347, "dure": [0, 43, 44, 51, 52, 83, 88, 91, 104, 107, 116, 125, 138, 143, 144, 149, 151, 160, 167, 172, 183, 184, 186, 198, 201, 208, 214, 258, 262, 266, 278, 284, 315, 316, 340, 359, 361, 370, 372, 374, 376, 377, 386, 387, 404, 405, 409, 411, 412, 414, 415, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 456, 461, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 580, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 610, 611, 613, 614, 615, 617, 619, 620, 622, 623, 625, 627, 628, 629, 630, 632, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 700, 789, 797, 798, 799, 800, 803, 804, 814, 822, 825, 826, 827, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 889, 895, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 988, 989, 991, 995, 996, 1002, 1009, 1011, 1015, 1025, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1048], "duron": 1043, "duti": 387, "dutt": 1045, "dutta": [1046, 1047], "duv2014": 414, "duvenaud": [414, 622, 623], "dwight": 1044, "dx": [51, 53, 699], "dx_c": 1006, "dy": [51, 699], "dye": 1042, "dylan": [1036, 1039], "dymil": 1048, "dynam": [51, 52, 184, 578, 579, 676, 677, 678, 1015, 1023, 1035, 1041, 1046], "dzi": 1047, "dziki": 1032, "d\u00b2": 224, "d\u00f6pfert": 1037, "e": [0, 25, 43, 47, 49, 50, 52, 62, 63, 64, 68, 70, 86, 88, 90, 94, 102, 109, 111, 112, 113, 115, 116, 123, 125, 126, 134, 137, 143, 145, 146, 149, 150, 159, 162, 163, 175, 182, 183, 184, 188, 191, 194, 198, 199, 207, 208, 209, 211, 224, 226, 227, 239, 240, 258, 260, 261, 264, 265, 267, 269, 270, 271, 279, 281, 283, 290, 297, 306, 309, 313, 315, 321, 343, 349, 353, 354, 355, 359, 360, 361, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 384, 385, 386, 390, 395, 398, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 434, 436, 438, 441, 442, 444, 447, 451, 460, 461, 463, 466, 467, 468, 469, 470, 472, 473, 494, 496, 498, 499, 500, 501, 522, 531, 533, 534, 536, 538, 539, 547, 548, 549, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 576, 580, 581, 587, 588, 589, 590, 592, 593, 596, 601, 602, 603, 605, 606, 607, 608, 610, 611, 617, 622, 623, 628, 630, 633, 634, 635, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 684, 687, 688, 690, 692, 694, 697, 699, 701, 702, 704, 705, 708, 709, 727, 728, 729, 730, 731, 738, 741, 742, 755, 763, 767, 778, 785, 788, 789, 797, 798, 799, 800, 803, 804, 806, 813, 814, 818, 822, 823, 825, 826, 827, 828, 829, 831, 843, 844, 845, 846, 847, 848, 850, 854, 855, 856, 860, 861, 862, 867, 869, 872, 874, 875, 876, 877, 878, 879, 880, 882, 883, 884, 885, 887, 889, 890, 891, 892, 893, 894, 895, 904, 905, 911, 912, 913, 914, 915, 919, 947, 948, 950, 954, 955, 957, 960, 973, 984, 988, 989, 991, 993, 994, 995, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1013, 1014, 1015, 1019, 1022, 1023, 1026, 1029, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049], "e0129126": 366, "e11": 367, "e2": [898, 995], "e41a1c": [79, 95], "e501": [163, 347], "e67e22": 263, "e_": 409, "each": [0, 1, 27, 43, 46, 47, 49, 50, 51, 52, 54, 55, 58, 62, 63, 64, 66, 68, 70, 72, 76, 78, 79, 81, 82, 86, 88, 91, 93, 94, 102, 103, 105, 106, 107, 115, 116, 118, 120, 121, 125, 126, 127, 128, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 147, 149, 150, 152, 153, 154, 155, 156, 159, 163, 169, 171, 176, 178, 179, 182, 183, 184, 186, 188, 190, 195, 197, 198, 201, 203, 205, 207, 208, 209, 211, 212, 214, 221, 224, 227, 233, 234, 237, 238, 239, 240, 241, 243, 244, 245, 247, 249, 252, 254, 257, 258, 259, 260, 262, 263, 264, 265, 267, 269, 270, 273, 274, 278, 281, 283, 284, 287, 289, 293, 295, 297, 299, 300, 302, 304, 305, 306, 307, 309, 310, 311, 313, 315, 316, 317, 319, 320, 321, 325, 326, 327, 330, 336, 340, 343, 348, 349, 351, 352, 354, 355, 359, 360, 361, 366, 367, 368, 369, 370, 372, 373, 374, 376, 377, 380, 381, 384, 385, 386, 395, 398, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 421, 422, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 456, 457, 458, 460, 461, 462, 464, 466, 467, 468, 469, 470, 471, 472, 473, 475, 479, 480, 481, 482, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 502, 503, 506, 507, 508, 509, 510, 511, 512, 513, 517, 520, 521, 524, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 702, 707, 708, 710, 713, 719, 725, 728, 729, 730, 738, 739, 745, 746, 748, 750, 751, 753, 754, 758, 759, 762, 763, 764, 765, 766, 768, 769, 770, 771, 773, 774, 776, 778, 779, 780, 781, 783, 784, 785, 787, 788, 790, 791, 792, 793, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 889, 890, 891, 893, 894, 895, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 921, 936, 943, 948, 950, 951, 956, 957, 969, 974, 975, 976, 979, 988, 989, 991, 993, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1023, 1029, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049], "eager": 258, "eargl": 1043, "earl": 1032, "earli": [43, 46, 54, 79, 95, 133, 134, 140, 142, 180, 189, 196, 308, 314, 322, 323, 386, 411, 438, 442, 446, 460, 487, 494, 534, 535, 536, 537, 544, 551, 552, 557, 558, 559, 560, 627, 645, 656, 666, 667, 668, 676, 678, 692, 750, 830, 861, 862, 972, 996, 1002, 1009, 1013, 1019, 1020, 1023, 1029, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1043, 1044, 1046, 1049], "earlier": [140, 184, 211, 366, 372, 407, 835, 838, 1009, 1027, 1030, 1042, 1044], "earliest": [366, 996], "early_exagger": [692, 1036], "early_stop": [140, 149, 151, 154, 184, 214, 244, 258, 299, 310, 316, 318, 323, 347, 386, 411, 559, 560, 666, 667, 668, 676, 677, 678, 861, 862, 1013, 1037, 1040, 1043, 1044, 1048, 1049], "earn": [182, 183, 387], "earth": [228, 348, 764], "eas": [104, 186, 254, 309, 372, 375, 378, 995, 1013, 1018, 1019, 1023, 1040, 1041, 1043], "easi": [184, 214, 224, 252, 262, 264, 336, 347, 355, 367, 372, 378, 380, 384, 385, 398, 404, 411, 498, 502, 508, 871, 988, 994, 998, 1006, 1009, 1018, 1019, 1023, 1039, 1044, 1045, 1049], "easier": [79, 95, 99, 113, 143, 190, 197, 229, 235, 243, 261, 262, 304, 336, 347, 355, 367, 372, 374, 377, 380, 384, 390, 406, 408, 465, 513, 902, 941, 994, 999, 1006, 1015, 1019, 1023, 1038, 1043], "easiest": [374, 380, 405, 996], "easili": [43, 48, 67, 126, 160, 186, 210, 222, 238, 240, 244, 247, 264, 266, 273, 289, 306, 322, 323, 372, 374, 386, 387, 398, 405, 411, 412, 414, 446, 993, 995, 1009, 1013, 1014, 1015, 1022, 1035], "easlii": 234, "ec": [304, 528], "ecat": 367, "echo": [370, 376], "eckert": 1034, "eckhart": 492, "eclf": [155, 411], "eclf1": 567, "eclf2": 567, "eclf3": 567, "eclf_other_threshold": 155, "ecml": 0, "ecoc": 281, "ecolog": [50, 297, 367, 496], "econom": [182, 183, 264], "econometr": 995, "econometrica": 995, "ecosystem": [322, 372, 380, 989, 1017, 1023, 1048], "ecuador": [50, 297, 367, 496], "ed": [138, 148, 404, 411, 518, 557, 558, 1011, 1029, 1036], "eddi": [1032, 1046, 1047], "eden": 1044, "edern": [1044, 1045], "edg": [51, 63, 80, 99, 123, 143, 161, 229, 271, 376, 380, 386, 401, 404, 406, 450, 559, 560, 584, 585, 587, 588, 590, 797, 841, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858, 869, 917, 1009, 1012, 1023, 1035, 1037, 1040, 1043], "edgar": 1048, "edge_model": 51, "edgecolor": [51, 61, 66, 67, 70, 77, 89, 93, 100, 118, 136, 142, 150, 152, 153, 155, 158, 168, 169, 171, 175, 184, 201, 209, 215, 218, 219, 220, 237, 238, 239, 241, 243, 249, 252, 264, 267, 279, 287, 290, 291, 292, 295, 299, 306, 307, 309, 330, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 345, 352, 353, 631], "edit": [77, 369, 370, 371, 372, 376, 380, 384, 390, 528, 532, 834, 851, 993, 995, 1000, 1006], "editor": [372, 384], "edm": 995, "edoardo": [1044, 1046, 1047, 1048], "edouard": [0, 394, 1029], "edson": [999, 1034], "edu": [47, 55, 163, 188, 281, 347, 366, 367, 369, 404, 446, 484, 498, 500, 506, 507, 508, 532, 641, 644, 658, 666, 667, 676, 679, 682, 683, 839, 841, 843, 853, 860, 897, 899, 912, 913, 997], "eduardo": [1032, 1034, 1042, 1043], "educ": [182, 183, 320, 372, 494, 716, 1000], "edvardlindelof": 1039, "edward": [172, 614, 619, 622, 1032, 1037, 1038, 1039, 1040, 1044, 1047, 1048, 1049], "edwinensa": 1035, "edwinwenink": 1042, "eec": [446, 641], "ef": 1044, "eff": 1015, "effect": [43, 45, 64, 72, 74, 75, 80, 86, 90, 95, 98, 101, 105, 116, 118, 123, 125, 134, 144, 146, 148, 151, 155, 162, 167, 168, 172, 174, 180, 181, 183, 184, 186, 194, 202, 204, 207, 208, 209, 211, 212, 213, 223, 225, 228, 230, 236, 243, 247, 250, 254, 256, 258, 260, 264, 265, 266, 269, 272, 273, 278, 284, 296, 302, 303, 305, 308, 314, 324, 336, 340, 341, 343, 344, 345, 347, 348, 349, 353, 355, 360, 372, 377, 384, 386, 402, 404, 405, 409, 410, 411, 412, 414, 415, 439, 443, 447, 461, 462, 464, 465, 487, 494, 498, 512, 522, 523, 539, 555, 556, 557, 558, 562, 563, 564, 587, 588, 589, 590, 605, 608, 609, 626, 646, 649, 657, 658, 659, 673, 676, 678, 679, 687, 691, 692, 701, 702, 703, 731, 753, 785, 789, 797, 801, 805, 811, 819, 823, 830, 831, 850, 861, 862, 868, 869, 873, 874, 876, 880, 881, 882, 884, 885, 889, 890, 891, 892, 893, 894, 895, 901, 902, 904, 907, 909, 910, 912, 913, 914, 915, 930, 931, 948, 966, 972, 988, 993, 994, 995, 996, 998, 999, 1000, 1002, 1006, 1007, 1009, 1012, 1013, 1014, 1015, 1020, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "effective_learning_r": [861, 862], "effective_metric_": [846, 847, 848, 850, 852, 854, 855, 856, 1002], "effective_metric_params_": [846, 847, 848, 850, 852, 854, 855, 856], "effective_rank": [519, 522], "efficaci": 198, "effici": [37, 43, 44, 51, 53, 77, 80, 86, 88, 120, 135, 140, 144, 152, 188, 198, 202, 209, 214, 263, 289, 321, 322, 347, 359, 364, 366, 372, 374, 375, 377, 378, 384, 386, 398, 400, 401, 404, 409, 410, 411, 414, 416, 439, 440, 443, 444, 446, 447, 449, 451, 454, 456, 458, 459, 494, 531, 532, 533, 536, 538, 539, 542, 561, 564, 572, 580, 581, 587, 588, 590, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 632, 633, 634, 638, 640, 655, 658, 659, 664, 666, 667, 668, 673, 675, 676, 677, 678, 679, 685, 686, 688, 726, 756, 763, 779, 780, 797, 798, 800, 814, 833, 844, 845, 846, 847, 848, 850, 852, 854, 855, 856, 869, 881, 893, 897, 904, 913, 915, 948, 988, 991, 993, 995, 996, 998, 999, 1000, 1002, 1003, 1004, 1005, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1018, 1023, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "efficiencywarn": [1, 859, 1044], "effort": [315, 372, 378, 1018, 1023, 1040, 1042], "efron": [163, 369, 682, 683, 995], "eg": 982, "egashira": 1044, "egehan": 1047, "egg": [709, 999, 1037], "egger": 1047, "egin": 404, "egli": [1036, 1046], "egor": 1041, "egress": [103, 258], "ehrenheim": [1036, 1037], "eib": [835, 1000], "eickenberg": [1029, 1031, 1032, 1033, 1034], "eig": 1036, "eig_tol": 1030, "eig_val": 249, "eig_vec": 249, "eigen": [449, 547, 673, 691, 695, 993, 1035, 1038], "eigen_solv": [51, 79, 80, 99, 226, 227, 409, 449, 459, 533, 688, 689, 691, 693, 695, 996, 1030, 1039, 1042, 1043, 1044], "eigen_tol": [80, 449, 459, 691, 695, 1030, 1043, 1044], "eigendecompos": 409, "eigendecomposit": [459, 673, 691, 695, 870, 991], "eigenfac": [42, 54, 180, 239, 242, 367, 409, 492, 539, 697, 713, 814, 830, 884, 909, 1016, 1020, 1029], "eigenface_titl": 45, "eigenmap": [226, 689, 691, 693, 695, 1024, 1025, 1030], "eigensolv": [409, 449, 459, 533, 542, 695, 996], "eigenvalu": [254, 320, 401, 404, 406, 449, 459, 466, 467, 468, 469, 470, 471, 472, 473, 533, 539, 547, 673, 688, 689, 691, 693, 695, 870, 991, 996, 1009, 1031, 1035, 1038, 1039, 1040, 1041], "eigenvalues_": [533, 1042], "eigenvector": [1, 42, 80, 116, 126, 180, 249, 404, 449, 459, 532, 533, 539, 548, 688, 689, 691, 695, 948, 996, 1020, 1029, 1033, 1043], "eigenvector_centr": 55, "eigenvectors_": [533, 1042], "eigh": [70, 249, 250, 251, 254, 255, 409, 416, 531, 533, 1044, 1047], "eighteenth": 404, "eighth": [561, 1005], "eigsh": [409, 533, 1035, 1036], "eiler": 1009, "einsum": 294, "eitan": 1046, "either": [43, 49, 64, 103, 140, 142, 143, 155, 165, 183, 196, 199, 234, 243, 258, 259, 268, 273, 278, 289, 343, 347, 354, 359, 360, 364, 367, 370, 372, 373, 374, 386, 395, 398, 400, 402, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 416, 439, 444, 449, 484, 494, 510, 522, 531, 532, 534, 542, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 581, 582, 583, 587, 588, 589, 590, 592, 593, 596, 601, 606, 607, 610, 611, 622, 627, 630, 632, 633, 650, 654, 656, 664, 676, 678, 682, 683, 690, 697, 698, 702, 706, 707, 712, 720, 724, 726, 727, 728, 729, 730, 735, 738, 739, 740, 752, 756, 769, 782, 783, 784, 785, 787, 788, 789, 794, 800, 803, 804, 806, 814, 823, 824, 825, 826, 827, 828, 829, 831, 834, 864, 894, 895, 901, 904, 905, 912, 913, 914, 915, 919, 957, 961, 987, 988, 995, 999, 1000, 1001, 1002, 1003, 1004, 1007, 1009, 1013, 1014, 1029, 1032, 1038, 1039, 1040, 1043, 1047, 1049], "ekaterina": [1035, 1036, 1037, 1038, 1040, 1045], "ekman": [1031, 1035], "el": [526, 1042, 1044, 1045], "elabonga": [1045, 1046], "elabor": 1000, "elad": [664, 685, 686], "elaps": [50, 81, 100, 140, 141, 359, 461, 464, 567, 568, 863, 864, 865, 866], "elapsed_tim": [46, 74, 100, 141, 154, 223], "elast": [1, 25, 180, 189, 194, 195, 198, 200, 203, 217, 240, 277, 345, 468, 469, 475, 499, 522, 644, 646, 647, 652, 657, 658, 659, 660, 661, 662, 663, 668, 676, 678, 681, 682, 684, 988, 999, 1013, 1020, 1021, 1025, 1029, 1034, 1038, 1039], "elastic_net": 217, "elastic_net_color": 217, "elastic_net_contour": 217, "elasticnet": [1, 46, 49, 192, 200, 272, 277, 359, 378, 384, 409, 647, 652, 657, 658, 659, 660, 661, 662, 663, 668, 676, 678, 681, 995, 1000, 1013, 1029, 1030, 1033, 1034, 1035, 1037, 1038, 1040, 1041, 1042, 1043, 1047, 1049], "elasticnetcv": [1, 194, 386, 395, 646, 652, 660, 661, 662, 663, 681, 995, 1029, 1032, 1040, 1042, 1043, 1046, 1047, 1048, 1049], "elasticnetifit": 192, "elbo": 409, "eldar": [406, 417, 472], "eleanor": 1044, "elec2": 149, "electr": [51, 149, 369, 404], "electron": [57, 163, 367, 369, 536, 538, 545, 627], "element": [1, 87, 120, 137, 138, 148, 235, 257, 263, 271, 273, 314, 348, 351, 354, 369, 371, 372, 374, 381, 387, 401, 404, 408, 409, 411, 412, 415, 441, 443, 449, 461, 484, 506, 510, 512, 518, 520, 524, 525, 529, 535, 536, 538, 548, 555, 556, 557, 558, 562, 563, 564, 565, 566, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 617, 632, 633, 658, 659, 666, 667, 668, 676, 677, 678, 707, 717, 727, 734, 736, 746, 763, 769, 778, 782, 788, 789, 834, 844, 845, 846, 847, 848, 850, 851, 852, 854, 855, 859, 861, 862, 867, 883, 884, 887, 891, 904, 909, 912, 913, 914, 915, 950, 951, 952, 969, 971, 972, 984, 993, 995, 999, 1000, 1003, 1006, 1009, 1010, 1011, 1015, 1023, 1034, 1035, 1037, 1039, 1040, 1041, 1043, 1045, 1049], "elementari": [898, 1011], "elementwis": [409, 536, 538, 545], "elena": 1036, "eleni": 1042, "eleph": 581, "elev": [100, 126, 184, 226, 230, 488], "eleven": 1019, "elfner": 1043, "elham": 1049, "elia": 1035, "eliaschiavon": 1044, "eliasi": [1044, 1045, 1046], "elicit": 999, "elif": [46, 47, 191, 209, 241, 251, 289, 880], "elimin": [1, 17, 157, 160, 163, 180, 259, 262, 263, 288, 404, 408, 445, 500, 513, 592, 593, 596, 601, 658, 803, 804, 819, 864, 874, 984, 999, 1020, 1021, 1023, 1025, 1029], "elisabeth": [318, 1046], "elizabeth": [1036, 1038, 1041], "elkan": [64, 258, 314, 402, 434, 440, 444, 456, 676, 1035, 1039, 1040, 1042, 1043], "ell": [70, 249, 250, 251, 255, 401], "ell_": 995, "ell_0": [995, 999], "ell_1": [409, 995], "ell_2": 995, "ella": 1011, "ellen": 1036, "elli": [1035, 1038], "elliot": [1046, 1047], "elliott": 1036, "ellips": [70, 233, 249, 250, 251, 254, 255, 1005], "ellipsoid": [48, 65, 69, 111, 112, 113, 180, 248, 249, 251, 252, 253, 254, 255, 547, 548, 631, 797, 798, 993, 998, 1020], "ellipt": [90, 995], "ellipticenvelop": [1, 48, 233, 467, 470, 471, 472, 473, 561, 1005, 1029, 1032, 1036, 1037, 1042], "eln": 1040, "elong": 404, "els": [1, 43, 47, 50, 51, 52, 57, 70, 76, 79, 82, 88, 89, 95, 113, 124, 137, 142, 143, 146, 147, 175, 178, 179, 183, 184, 186, 198, 201, 221, 224, 227, 233, 237, 239, 240, 241, 242, 243, 259, 261, 263, 264, 265, 268, 275, 284, 289, 297, 299, 300, 306, 313, 340, 347, 348, 354, 372, 376, 378, 411, 412, 414, 416, 424, 434, 446, 506, 518, 531, 567, 618, 625, 644, 645, 646, 647, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 672, 673, 674, 676, 679, 681, 682, 683, 684, 703, 709, 788, 794, 796, 803, 804, 830, 851, 868, 880, 883, 891, 904, 905, 919, 962, 964, 966, 985, 987, 1015], "elsewher": [386, 459, 460, 468, 469, 475], "eltermann": 1032, "elucid": 991, "elvezio": [649, 995], "elvi": [1034, 1035, 1036], "em": [250, 251, 255, 440, 444, 456, 534, 797, 798, 998, 1043], "emad": 1047, "email": [0, 347, 384, 387, 412, 839, 1001, 1023], "emami": 1043, "emanuel": 1030, "emb": [167, 227, 237, 293, 365, 366, 459, 695, 996], "embark": [103, 185, 247, 313, 317, 318], "embed": [1, 26, 37, 71, 74, 79, 80, 88, 89, 95, 139, 167, 180, 225, 228, 229, 230, 232, 284, 293, 325, 326, 386, 404, 438, 449, 459, 486, 500, 542, 547, 564, 581, 639, 688, 689, 690, 691, 692, 693, 694, 695, 696, 853, 865, 874, 896, 897, 898, 991, 1002, 1005, 1011, 1016, 1018, 1020, 1024, 1025, 1029, 1030, 1040, 1041, 1043, 1049], "embedding_": [229, 386, 688, 689, 690, 691, 692], "emelia": 1049, "emerg": [404, 1023], "emeritu": 387, "emiko": 1043, "emil": 1043, "emili": [1040, 1041, 1048], "emilyxinyi": [1047, 1048, 1049], "emipr": 797, "emir": [1044, 1045], "emit": [1040, 1047], "emlearn": 1018, "emma": [1046, 1049], "emmanouil": 1043, "emmanuel": [1029, 1036, 1037, 1038, 1046], "emp_cov": [109, 111, 113, 475, 478], "emp_cov_contour": 111, "emp_mah": 111, "emphas": [183, 345, 378, 409, 999], "emphasi": [345, 403, 407, 906, 907, 908, 909, 910, 1006, 1018], "empir": [1, 48, 52, 61, 62, 70, 71, 77, 78, 91, 97, 108, 110, 111, 113, 149, 180, 191, 224, 270, 304, 322, 402, 404, 408, 411, 414, 444, 446, 457, 466, 467, 468, 469, 471, 474, 475, 530, 532, 537, 539, 541, 547, 549, 563, 589, 602, 639, 649, 667, 671, 678, 679, 716, 721, 723, 724, 829, 839, 840, 841, 843, 851, 862, 885, 933, 972, 991, 993, 999, 1001, 1003, 1009, 1011, 1013, 1020, 1024, 1025, 1048], "empirical_covari": [1, 109, 406, 475, 476, 478, 1045], "empiricalcovari": [1, 109, 111, 112, 406, 466, 470, 471, 472, 473, 1005], "emploi": [0, 51, 167, 239, 386, 406, 412, 447, 475, 581, 588, 1022, 1023, 1035], "employ": [183, 258], "employe": 0, "empti": [94, 102, 129, 218, 328, 359, 367, 376, 404, 416, 424, 480, 531, 559, 560, 630, 631, 811, 869, 909, 911, 919, 925, 930, 931, 937, 959, 960, 989, 1014, 1031, 1033, 1037, 1038, 1040, 1041, 1043, 1044, 1045, 1048, 1049], "emptyset": 999, "emul": [183, 380], "en": [55, 61, 380, 529, 535, 594, 636, 664, 668, 671, 685, 686, 695, 705, 846, 847, 852, 853, 854, 855, 882, 898, 912, 913, 995, 999, 1014, 1015], "enabl": [1, 15, 52, 83, 104, 149, 184, 214, 228, 240, 306, 314, 316, 317, 319, 320, 321, 322, 344, 370, 372, 377, 380, 384, 386, 390, 395, 400, 404, 405, 409, 411, 412, 434, 440, 441, 444, 446, 461, 462, 465, 479, 480, 481, 531, 532, 533, 534, 536, 539, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 578, 579, 589, 590, 601, 610, 611, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 690, 797, 798, 799, 800, 801, 802, 803, 807, 809, 818, 822, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 849, 851, 854, 855, 861, 862, 864, 865, 867, 869, 870, 871, 876, 877, 878, 883, 884, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 919, 960, 967, 989, 991, 998, 999, 1002, 1009, 1010, 1013, 1014, 1019, 1023, 1029, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049], "enable_cython_pairwise_dist": [465, 902], "enable_halving_search_cv": [1, 146, 275, 276, 315, 376, 803, 804, 988], "enable_hist_gradient_boost": [376, 1038], "enable_iterative_imput": [1, 178, 179, 376, 627, 989, 1038], "enable_metadata_rout": [240, 258, 320, 322, 323, 395, 434, 440, 441, 444, 446, 461, 462, 465, 469, 479, 480, 481, 531, 534, 536, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 589, 592, 593, 596, 601, 610, 611, 627, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 690, 799, 800, 801, 802, 803, 804, 807, 809, 814, 818, 822, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 849, 851, 854, 855, 861, 862, 863, 864, 865, 867, 869, 870, 871, 876, 883, 884, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 1045], "enable_my_experimental_featur": 376, "enblom": [1047, 1048], "enc": [305, 307, 317, 319, 877, 878, 1009], "enc_auto": 885, "enc_high_smooth": 885, "enc_low_smooth": 885, "encapsul": [379, 405, 418, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 461, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 609, 610, 611, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915], "enclos": 988, "encod": [1, 43, 47, 50, 88, 103, 120, 139, 149, 154, 180, 183, 184, 185, 206, 207, 243, 245, 258, 265, 273, 278, 303, 305, 306, 307, 315, 317, 318, 322, 336, 347, 349, 364, 366, 368, 377, 384, 386, 400, 405, 408, 409, 411, 412, 414, 461, 484, 494, 501, 524, 529, 535, 537, 538, 540, 542, 543, 544, 546, 549, 559, 560, 564, 565, 567, 580, 587, 588, 590, 630, 648, 658, 659, 669, 672, 680, 735, 802, 807, 809, 827, 830, 864, 865, 867, 869, 871, 872, 875, 877, 878, 885, 888, 902, 921, 988, 989, 995, 996, 999, 1001, 1002, 1004, 1013, 1018, 1020, 1025, 1030, 1031, 1037, 1041, 1043, 1044, 1045, 1046, 1047], "encoded_missing_valu": [154, 184, 185, 310, 878, 1009, 1043, 1044], "encodings_": [319, 885, 1009], "encompass": [386, 447, 453, 553, 554, 996], "encount": [360, 370, 390, 398, 404, 411, 412, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 559, 560, 562, 563, 580, 839, 840, 841, 843, 877, 973, 1009, 1013, 1018, 1022, 1023, 1037, 1040], "encourag": [183, 197, 211, 299, 336, 371, 372, 384, 1014, 1018, 1047], "encrypt": 1018, "encyclopedia": 999, "end": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 351, 352, 353, 354, 370, 372, 374, 384, 386, 387, 390, 395, 400, 401, 404, 405, 407, 411, 447, 453, 465, 485, 486, 506, 507, 535, 544, 555, 556, 557, 558, 562, 563, 564, 645, 646, 647, 650, 651, 652, 653, 654, 655, 660, 661, 662, 663, 681, 682, 683, 684, 800, 803, 804, 814, 821, 825, 862, 864, 902, 912, 913, 914, 915, 952, 954, 982, 988, 991, 995, 996, 998, 999, 1009, 1011, 1013, 1018, 1023, 1034, 1036, 1039, 1042, 1043, 1048], "end_": 47, "end_bodi": 47, "end_d": 47, "end_idx": [51, 229], "end_reut": 47, "end_titl": 47, "end_top": 47, "endian": 1041, "endo": 1042, "endpoint": [53, 305, 339, 635], "endswith": 263, "enemi": 372, "energi": [51, 149, 380, 860, 1004], "enet": [194, 277], "enet_path": [1, 197, 386, 646, 647, 652, 660, 661, 662, 1031, 1033, 1042], "enet_tol": [51, 468, 469, 475, 1034], "enforc": [43, 51, 70, 86, 120, 149, 172, 203, 293, 359, 372, 406, 409, 411, 421, 427, 506, 525, 529, 535, 537, 540, 541, 543, 544, 546, 555, 556, 559, 560, 562, 563, 868, 883, 912, 913, 914, 915, 930, 931, 989, 996, 1031, 1037, 1039, 1041, 1045, 1049], "enforce_estimator_tags_i": 1039, "eng": 1037, "engag": [378, 387], "engemann": [1031, 1032, 1036], "engin": [42, 66, 75, 139, 143, 149, 155, 172, 180, 184, 208, 359, 366, 369, 404, 408, 410, 412, 461, 494, 560, 639, 673, 701, 816, 818, 819, 820, 821, 827, 862, 863, 865, 868, 869, 874, 877, 879, 883, 989, 991, 999, 1009, 1020, 1035], "english": [54, 57, 102, 347, 348, 349, 377, 412, 587, 588, 590, 1018, 1019, 1042], "ength_scal": 172, "enh": 376, "enhanc": [120, 211, 371, 372, 376, 384, 386, 404, 999, 1027, 1028, 1029, 1030, 1031, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "enjoi": [77, 258], "enough": [1, 43, 52, 64, 66, 72, 79, 95, 140, 142, 149, 167, 178, 184, 185, 198, 207, 238, 241, 243, 258, 277, 308, 347, 349, 355, 370, 372, 374, 376, 387, 402, 404, 406, 408, 411, 565, 566, 588, 800, 803, 804, 806, 814, 828, 948, 988, 993, 996, 998, 999, 1005, 1009, 1014, 1018, 1023, 1035, 1045, 1046], "enrich": 340, "ensembl": [1, 43, 46, 49, 52, 63, 64, 66, 67, 89, 134, 135, 136, 137, 138, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 169, 178, 179, 184, 185, 186, 207, 227, 233, 242, 243, 245, 246, 258, 261, 276, 281, 283, 306, 310, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 347, 352, 353, 355, 359, 372, 376, 377, 385, 386, 395, 398, 402, 404, 408, 413, 434, 502, 513, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 632, 633, 635, 658, 702, 803, 804, 822, 830, 834, 835, 865, 868, 877, 908, 912, 914, 915, 939, 988, 999, 1000, 1005, 1006, 1015, 1018, 1020, 1021, 1025, 1026, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "ensemble_clf": 138, "ensemble_jaccard_scor": 283, "ensembleregressorsensembl": 392, "ensur": [52, 58, 66, 76, 90, 113, 118, 134, 140, 141, 149, 155, 186, 207, 227, 258, 259, 267, 301, 354, 355, 359, 360, 372, 374, 377, 378, 387, 390, 395, 400, 402, 404, 405, 408, 416, 466, 531, 532, 539, 611, 627, 696, 705, 782, 788, 789, 821, 825, 897, 930, 931, 941, 943, 948, 955, 966, 995, 996, 999, 1009, 1015, 1031, 1033, 1034, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048], "ensure_2d": [930, 931], "ensure_all_finit": [778, 928, 930, 931, 1048], "ensure_min_featur": [930, 931], "ensure_min_sampl": [930, 931], "ensure_non_neg": [931, 1048], "entail": [258, 385, 882, 884, 1013], "enter": [373, 376, 404, 439, 1006], "entertain": 995, "entic": 183, "entir": [68, 178, 207, 214, 258, 302, 304, 314, 340, 354, 355, 366, 373, 386, 398, 404, 408, 410, 412, 469, 490, 532, 587, 588, 589, 590, 647, 651, 653, 655, 658, 659, 661, 663, 665, 666, 668, 676, 682, 683, 734, 796, 822, 832, 833, 836, 861, 863, 864, 877, 889, 890, 892, 893, 894, 895, 923, 968, 989, 999, 1009, 1013, 1015, 1038, 1039], "entireti": 386, "entiti": [387, 726, 756], "entitl": [278, 287, 403, 611, 846, 991], "entri": [0, 103, 107, 149, 154, 155, 179, 183, 184, 258, 260, 313, 348, 355, 372, 376, 378, 380, 385, 386, 401, 402, 404, 409, 411, 414, 460, 469, 494, 529, 530, 535, 543, 544, 559, 560, 587, 590, 593, 609, 611, 620, 632, 638, 640, 647, 651, 653, 655, 656, 659, 661, 663, 664, 665, 673, 675, 682, 683, 685, 686, 699, 702, 704, 707, 709, 712, 715, 716, 718, 726, 729, 730, 731, 734, 735, 738, 743, 756, 758, 759, 783, 785, 788, 789, 792, 793, 813, 828, 844, 845, 852, 853, 854, 855, 856, 875, 881, 893, 984, 988, 989, 995, 999, 1002, 1009, 1014, 1019, 1036, 1039, 1040, 1042, 1046], "entropi": [1, 50, 64, 245, 276, 297, 315, 325, 326, 355, 367, 400, 404, 411, 416, 496, 531, 555, 562, 606, 607, 658, 717, 736, 737, 741, 795, 912, 914, 995, 996, 999, 1003, 1015, 1031, 1033, 1037, 1038, 1043, 1045, 1046, 1048], "entrypoint_to_bug_reproduc": 373, "enumer": [43, 47, 49, 50, 51, 53, 54, 55, 57, 62, 64, 66, 67, 72, 74, 75, 76, 77, 78, 79, 83, 88, 92, 93, 94, 95, 98, 102, 110, 112, 113, 116, 121, 123, 129, 137, 140, 144, 145, 147, 148, 149, 169, 171, 176, 186, 191, 193, 200, 207, 227, 228, 231, 233, 238, 242, 243, 249, 250, 251, 252, 254, 255, 258, 259, 263, 266, 267, 273, 289, 293, 294, 296, 302, 306, 307, 325, 326, 328, 330, 334, 336, 342, 343, 347, 352, 367, 368, 557, 558, 562, 563, 781, 801, 802, 805, 807, 808, 809, 810, 813, 815, 816, 817, 818, 819, 820, 821], "env": [370, 380, 390, 391], "environ": [0, 2, 51, 63, 103, 104, 139, 141, 150, 151, 154, 155, 156, 160, 172, 183, 184, 185, 192, 234, 235, 236, 240, 244, 245, 246, 247, 254, 258, 262, 263, 264, 265, 271, 276, 278, 302, 310, 314, 315, 317, 318, 320, 323, 327, 353, 354, 359, 367, 369, 370, 372, 374, 375, 378, 384, 390, 391, 400, 405, 497, 1019, 1023, 1025, 1036, 1037, 1046, 1049], "environment": [50, 194, 224], "environmenterror": 1045, "eom": 443, "eoss": 0, "ep": [51, 67, 79, 80, 82, 88, 98, 154, 197, 227, 229, 237, 384, 404, 415, 441, 447, 452, 468, 469, 475, 631, 646, 647, 650, 651, 652, 653, 654, 655, 656, 660, 661, 662, 663, 681, 682, 683, 684, 690, 694, 714, 741, 856, 896, 897, 898, 1011, 1044, 1045, 1049], "epanechnikov": [289, 410, 844, 845, 849], "ephemer": 380, "ephrem": 1044, "epimorph": 1046, "epistem": 52, "epoch": [221, 386, 534, 666, 667, 668, 676, 677, 678, 861, 862, 1013, 1036, 1037, 1042], "epp": [404, 704], "eps_": [660, 662], "eps_rang": 237, "epsilon": [1, 88, 98, 193, 229, 239, 244, 319, 342, 409, 443, 452, 643, 649, 667, 676, 678, 746, 861, 862, 905, 907, 910, 992, 995, 999, 1003, 1013, 1014, 1029], "epsilon_": 842, "epsilon_i": 999, "epsilon_insensit": [667, 676, 678, 905, 995, 1013], "epsilon_valu": 193, "eq": [258, 414, 417, 472, 721, 723, 724, 851], "equal": [43, 50, 51, 63, 70, 72, 74, 86, 93, 111, 116, 122, 134, 146, 170, 183, 208, 209, 217, 223, 244, 251, 254, 257, 262, 264, 270, 273, 294, 306, 310, 336, 338, 344, 348, 367, 368, 372, 374, 386, 401, 402, 404, 408, 409, 411, 412, 417, 434, 437, 438, 439, 440, 442, 444, 446, 451, 456, 457, 460, 466, 471, 476, 477, 501, 510, 513, 517, 530, 531, 532, 537, 539, 541, 542, 547, 548, 549, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 587, 592, 593, 596, 598, 599, 606, 607, 625, 628, 629, 631, 632, 633, 634, 635, 637, 641, 642, 649, 658, 659, 671, 699, 707, 718, 720, 727, 729, 739, 740, 782, 783, 787, 788, 789, 794, 796, 800, 801, 803, 804, 813, 814, 818, 821, 825, 832, 836, 837, 844, 845, 846, 847, 851, 852, 853, 854, 855, 856, 861, 862, 867, 868, 869, 876, 879, 882, 883, 884, 885, 887, 894, 901, 904, 905, 911, 912, 913, 914, 915, 936, 948, 973, 979, 993, 995, 996, 999, 1000, 1002, 1003, 1005, 1009, 1013, 1014, 1015, 1030, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "equat": [1, 64, 343, 372, 404, 409, 411, 555, 556, 557, 558, 562, 563, 564, 589, 627, 658, 659, 682, 683, 687, 763, 884, 912, 913, 914, 915, 989, 996, 999, 1004, 1037], "equi": 998, "equiangular": 995, "equidist": [143, 692], "equip": 1023, "equiv": [991, 1014], "equival": [43, 54, 70, 88, 90, 143, 150, 155, 162, 167, 172, 183, 194, 201, 224, 254, 273, 284, 309, 340, 349, 355, 359, 378, 381, 385, 386, 398, 404, 405, 406, 407, 408, 409, 411, 413, 414, 438, 440, 441, 442, 443, 444, 446, 447, 454, 461, 466, 471, 491, 507, 532, 539, 556, 559, 560, 561, 562, 563, 587, 590, 613, 616, 619, 621, 624, 646, 647, 648, 652, 654, 658, 659, 666, 667, 668, 669, 672, 676, 677, 680, 683, 687, 688, 693, 708, 723, 734, 742, 747, 748, 749, 761, 770, 779, 780, 797, 798, 803, 804, 808, 810, 835, 838, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858, 861, 867, 873, 874, 876, 879, 880, 881, 882, 884, 892, 894, 895, 934, 935, 942, 946, 984, 988, 993, 995, 996, 997, 999, 1005, 1009, 1013, 1014, 1015, 1037, 1038, 1039, 1040, 1042, 1043, 1046, 1048], "er": [568, 1049], "era": 1019, "eras": [557, 558, 646, 652, 658, 660, 662, 666, 667, 668, 676, 677, 678, 861, 862], "ereg": [156, 411], "eren": [0, 1031, 1032], "eric": [1032, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1047, 1048, 1049], "ericellwang": [1042, 1043], "erich": [447, 1033, 1034, 1037, 1038, 1040, 1041, 1042, 1043, 1047], "erick": 1034, "erik": [367, 1023, 1032], "eriksson": 1036, "erin": [281, 1041], "erl": 281, "erlbaum": 258, "erling": 1034, "ermolaevpa": [1043, 1044], "ernst": [411, 555, 556, 563, 564, 914, 915], "err": [55, 115, 124, 134], "err_cov_emp_ful": 112, "err_cov_emp_pur": 112, "err_cov_mcd": 112, "err_loc_emp_ful": 112, "err_loc_emp_pur": 112, "err_loc_mcd": 112, "errno": 390, "erron": [111, 112, 409, 995, 1030, 1037, 1041], "error": [1, 14, 25, 30, 43, 44, 46, 52, 53, 55, 64, 107, 109, 110, 112, 124, 129, 133, 137, 140, 141, 143, 145, 147, 149, 163, 167, 178, 180, 182, 183, 184, 194, 198, 202, 204, 205, 207, 209, 212, 213, 220, 224, 236, 239, 240, 246, 255, 256, 258, 260, 263, 264, 265, 269, 273, 274, 279, 281, 290, 291, 317, 320, 322, 335, 343, 347, 348, 360, 369, 370, 372, 374, 375, 376, 377, 381, 384, 386, 395, 398, 402, 404, 405, 406, 408, 409, 411, 412, 413, 434, 440, 441, 444, 446, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 501, 513, 522, 529, 531, 534, 535, 536, 540, 541, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 574, 589, 591, 594, 595, 597, 598, 599, 605, 610, 611, 629, 632, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 685, 688, 689, 690, 692, 693, 696, 698, 701, 702, 709, 711, 720, 721, 723, 727, 740, 743, 744, 745, 746, 747, 748, 750, 751, 753, 764, 778, 782, 788, 789, 790, 791, 799, 800, 801, 802, 803, 804, 806, 807, 809, 814, 818, 822, 823, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 851, 852, 854, 855, 856, 859, 861, 862, 863, 864, 865, 867, 869, 870, 871, 876, 877, 878, 883, 884, 899, 900, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 928, 929, 930, 931, 934, 963, 982, 985, 987, 988, 989, 990, 992, 993, 994, 996, 1000, 1003, 1007, 1009, 1013, 1014, 1015, 1020, 1021, 1025, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "error_": [529, 541], "error_i": [140, 265], "error_norm": [110, 112, 466, 467, 468, 469, 470, 471, 472, 473], "error_on_new": 629, "error_r": 138, "error_scor": [103, 104, 245, 254, 258, 262, 263, 264, 276, 800, 803, 804, 806, 814, 823, 826, 827, 828, 831, 988, 1033, 1037, 1041, 1044], "error_x": [140, 265], "errorbar": [72, 94, 105, 110, 112, 162, 173, 174, 286, 328, 339, 806, 823], "errorbar_": [806, 823], "errorbar_kw": [806, 823], "errorbarcontain": [806, 823], "errors_coef": 211, "errors_lines_": 701, "erwan": 1046, "erwin": 1032, "escal": 387, "escalant": 999, "escalera": 999, "escap": [1042, 1044, 1048], "eschibli": 1041, "eschlbeck": 1043, "esdi": 57, "esp": [404, 1029], "especi": [43, 47, 52, 88, 89, 143, 146, 149, 183, 201, 205, 207, 240, 310, 318, 323, 348, 355, 360, 366, 372, 380, 384, 386, 402, 404, 412, 440, 446, 499, 536, 555, 556, 557, 558, 562, 563, 564, 646, 647, 648, 650, 652, 653, 654, 658, 659, 660, 661, 662, 663, 669, 680, 695, 705, 746, 839, 840, 841, 842, 843, 912, 913, 914, 915, 995, 1001, 1002, 1009, 1023, 1032, 1037, 1041, 1042, 1043], "espinoza": [1030, 1031], "essenc": [606, 607, 743, 996, 999], "essenti": [0, 264, 273, 318, 370, 404, 408, 409, 507, 999, 1002, 1019, 1023, 1037], "est": [154, 155, 183, 201, 221, 240, 242, 258, 278, 306, 315, 355, 398, 411, 560, 735, 869, 953, 988, 999, 1009, 1013, 1040, 1041], "est1": [386, 632], "est2": [386, 632], "est_freq": 224, "est_g": 322, "est_idx": 306, "est_nam": 155, "est_proba": 155, "est_sev": 224, "establish": [380, 384, 387, 626, 989], "estefania": 1043, "ester": [404, 415, 441], "estev": [1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "estim": [1, 3, 6, 7, 12, 15, 25, 29, 30, 31, 35, 43, 45, 46, 47, 48, 49, 50, 51, 52, 61, 63, 64, 66, 69, 70, 72, 73, 79, 82, 87, 88, 89, 90, 91, 94, 96, 103, 104, 105, 106, 115, 116, 120, 121, 122, 127, 129, 133, 134, 138, 139, 140, 142, 144, 146, 148, 149, 151, 154, 155, 156, 161, 162, 163, 165, 166, 167, 168, 170, 172, 174, 176, 177, 178, 182, 183, 189, 192, 194, 196, 198, 199, 201, 204, 207, 209, 211, 212, 214, 223, 224, 232, 233, 234, 237, 239, 245, 247, 248, 249, 251, 252, 254, 255, 256, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 283, 284, 285, 291, 295, 304, 306, 316, 317, 319, 321, 339, 340, 343, 348, 349, 351, 352, 353, 359, 360, 361, 364, 370, 372, 375, 376, 379, 380, 381, 382, 390, 395, 398, 399, 402, 403, 404, 407, 409, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 458, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 487, 488, 490, 493, 494, 496, 499, 500, 522, 525, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 573, 574, 575, 576, 578, 579, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 684, 687, 688, 689, 690, 691, 692, 697, 698, 700, 701, 702, 707, 708, 711, 712, 713, 716, 718, 720, 721, 723, 724, 726, 727, 728, 729, 730, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 782, 783, 784, 785, 787, 788, 789, 790, 791, 794, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 811, 812, 814, 816, 818, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 889, 890, 892, 893, 895, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 920, 921, 922, 923, 924, 929, 930, 931, 933, 935, 936, 939, 941, 942, 943, 944, 953, 956, 957, 958, 960, 982, 986, 987, 994, 996, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1019, 1020, 1021, 1023, 1024, 1025, 1026, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "estimate_bandwidth": [1, 79, 96, 404, 445, 458], "estimated_coef": [646, 647, 652, 660, 661, 662, 681, 682, 683], "estimator_": [210, 240, 278, 424, 551, 552, 553, 554, 555, 556, 561, 562, 563, 564, 592, 593, 596, 671, 799, 822, 901, 982, 1044], "estimator__alpha": 146, "estimator__max_depth": [386, 988], "estimator_alpha": 142, "estimator_check": [1, 313, 374, 386, 941, 942, 943, 1036, 1037, 1039, 1040, 1043, 1044, 1045, 1047, 1048, 1049], "estimator_checks_gener": [1, 941, 1048], "estimator_conf": 49, "estimator_config": 49, "estimator_dict": 214, "estimator_errors_": [134, 551, 552], "estimator_html_repr": [1, 374, 405, 1019, 1040, 1041, 1042, 1043, 1046], "estimator_modul": 374, "estimator_nam": [49, 214, 374, 379, 435, 575, 698, 700, 702, 929], "estimator_samples_": 1040, "estimator_typ": [421, 422, 423, 426, 427, 923, 1048], "estimator_weights_": [134, 551, 552], "estimatorcheckfailedwarn": [1, 941], "estimatorcv": 386, "estimators_": [141, 142, 155, 201, 221, 241, 313, 386, 411, 551, 552, 553, 554, 555, 556, 557, 558, 561, 562, 563, 564, 565, 566, 567, 568, 832, 833, 834, 835, 836, 837, 838, 1030, 1036, 1043], "estimators_early_stop": 144, "estimators_features_": [553, 554, 561], "estimators_samples_": [553, 554, 555, 556, 561, 562, 563, 564, 1035, 1037, 1040, 1046], "estimatorwithvalidationset": 322, "estimatorwithvalidationset__param_to_optim": 322, "est\u00e8v": [0, 393, 1037, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "est\u00e8vc": 1047, "esuli": [1036, 1041], "esvhd": 1038, "et": [0, 1, 50, 109, 110, 134, 148, 196, 297, 367, 369, 401, 404, 406, 409, 411, 412, 413, 448, 496, 517, 518, 526, 533, 539, 542, 561, 682, 683, 719, 720, 839, 841, 861, 862, 897, 947, 948, 995, 996, 999, 1005, 1009, 1011, 1014, 1015, 1037, 1045], "eta": [409, 534, 676, 677, 678, 1003, 1013, 1034], "eta0": [668, 676, 677, 678, 1013], "eta_0": 1013, "etc": [1, 143, 207, 224, 259, 268, 269, 321, 322, 355, 359, 361, 372, 374, 376, 377, 384, 385, 386, 395, 398, 401, 405, 408, 412, 486, 501, 525, 555, 556, 562, 563, 668, 676, 692, 718, 771, 800, 814, 835, 838, 868, 879, 912, 913, 914, 915, 916, 918, 930, 931, 941, 988, 989, 993, 999, 1002, 1018, 1019, 1023, 1029, 1036, 1038, 1039, 1048], "eth": 1039, "ethan": [1032, 1035], "ethic": 149, "etiquett": 372, "etl": [1019, 1023], "euclidean": [1, 37, 75, 90, 91, 195, 229, 237, 243, 284, 287, 292, 313, 318, 340, 348, 401, 404, 409, 410, 411, 412, 414, 437, 438, 441, 442, 443, 447, 449, 454, 457, 460, 529, 535, 543, 544, 588, 615, 619, 622, 623, 676, 678, 690, 692, 695, 696, 699, 762, 763, 769, 770, 771, 772, 778, 779, 780, 781, 792, 793, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 898, 989, 993, 996, 997, 1000, 1002, 1011, 1033, 1036, 1037, 1038, 1039, 1045, 1046], "euclidean_dist": [1, 229, 237, 374, 400, 447, 451, 454, 688, 694, 762, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858, 1029, 1034, 1037, 1038, 1046, 1048], "euclideandist": 699, "eugen": [369, 1030, 1035, 1049], "eunji": 1037, "eunseop": 1039, "euro": 321, "europ": [412, 1009], "european": [726, 756, 999], "eustach": [1023, 1031, 1032], "eval_and_print_metr": 329, "eval_gradi": [175, 414, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625], "evalml": 1018, "evalu": [1, 27, 29, 43, 44, 45, 49, 50, 61, 68, 71, 73, 77, 78, 82, 88, 97, 103, 104, 123, 134, 140, 141, 143, 144, 146, 149, 158, 159, 170, 180, 184, 186, 188, 191, 198, 209, 224, 232, 256, 257, 261, 262, 264, 267, 269, 270, 271, 273, 275, 276, 278, 279, 283, 291, 293, 297, 304, 309, 311, 315, 319, 320, 329, 336, 340, 347, 355, 365, 367, 374, 378, 386, 389, 405, 412, 413, 414, 444, 446, 461, 463, 485, 488, 490, 491, 494, 507, 518, 534, 549, 561, 565, 566, 590, 593, 601, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 631, 632, 633, 634, 647, 653, 697, 698, 699, 700, 701, 702, 703, 704, 705, 711, 713, 714, 715, 717, 718, 726, 727, 736, 737, 742, 754, 755, 756, 757, 786, 795, 797, 798, 800, 803, 804, 806, 814, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 835, 841, 844, 845, 850, 862, 864, 865, 871, 874, 877, 878, 882, 883, 884, 889, 890, 892, 893, 894, 895, 906, 909, 912, 933, 941, 972, 991, 995, 997, 1001, 1002, 1005, 1006, 1007, 1010, 1013, 1015, 1017, 1018, 1020, 1023, 1024, 1025, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042], "evaluate_everi": 534, "evaluate_model_and_stor": 310, "evaluation_result": 66, "evaluation_std": 348, "evaluations_std": 348, "evelyn": [1047, 1048], "even": [37, 43, 52, 53, 64, 75, 77, 85, 107, 116, 123, 140, 146, 173, 183, 184, 185, 198, 207, 208, 214, 224, 230, 231, 239, 240, 250, 270, 281, 304, 306, 308, 309, 330, 343, 347, 348, 349, 355, 361, 367, 371, 372, 373, 374, 376, 377, 380, 384, 386, 398, 402, 404, 405, 406, 408, 409, 411, 412, 414, 438, 440, 442, 443, 444, 445, 446, 456, 458, 530, 533, 555, 556, 557, 558, 562, 563, 581, 588, 593, 627, 628, 630, 639, 658, 659, 695, 700, 705, 716, 743, 761, 767, 774, 778, 781, 786, 788, 827, 864, 865, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 912, 913, 914, 915, 941, 948, 968, 988, 989, 991, 993, 995, 998, 999, 1002, 1004, 1005, 1007, 1009, 1011, 1013, 1014, 1015, 1023, 1036, 1037, 1038, 1041, 1043, 1046, 1049], "evenli": [1, 47, 74, 85, 146, 186, 211, 259, 412, 952], "event": [0, 43, 207, 224, 267, 402, 404, 587, 588, 636, 839, 935, 995, 1000, 1001, 1018, 1023, 1035], "eventu": [6, 252, 404, 413, 592, 1023], "ever": [140, 153, 381, 411, 1023], "everi": [43, 120, 149, 172, 178, 208, 227, 239, 250, 255, 273, 316, 320, 355, 367, 372, 374, 376, 380, 386, 400, 402, 404, 406, 408, 409, 412, 437, 451, 506, 529, 534, 537, 543, 555, 556, 557, 558, 559, 560, 562, 589, 590, 602, 646, 647, 649, 652, 653, 659, 660, 661, 662, 663, 664, 665, 666, 668, 672, 673, 674, 675, 676, 685, 686, 687, 692, 696, 754, 771, 779, 780, 813, 853, 912, 914, 916, 918, 936, 992, 994, 996, 999, 1000, 1001, 1009, 1015, 1023, 1029, 1033, 1035, 1038, 1042, 1046], "everingham": 999, "everingham2010": 999, "everybodi": [366, 372], "everyon": [372, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "everyth": [325, 355, 376, 378, 384, 398, 400, 461, 955, 1018, 1019, 1029], "everywher": 386, "evgeni": [1040, 1049], "evid": [270, 347, 380, 404, 408, 409, 411, 644, 797, 998], "evol": 999, "evolut": [47, 49, 276, 359, 361], "evolv": [381, 1044], "ex": [102, 370, 373, 390, 1033, 1034], "exact": [44, 46, 113, 125, 140, 172, 184, 211, 238, 258, 284, 320, 355, 359, 360, 366, 372, 374, 380, 381, 384, 385, 386, 404, 411, 413, 429, 479, 480, 481, 485, 494, 532, 533, 539, 559, 560, 638, 642, 646, 692, 800, 814, 825, 826, 827, 906, 909, 988, 991, 995, 996, 1005, 1009, 1013, 1014, 1036, 1037, 1039], "exactli": [103, 134, 182, 190, 194, 202, 207, 209, 211, 255, 258, 272, 305, 343, 347, 372, 374, 380, 401, 404, 408, 409, 412, 417, 443, 450, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 513, 524, 589, 590, 615, 676, 678, 703, 705, 763, 801, 818, 825, 991, 995, 996, 997, 999, 1000, 1015, 1029, 1035, 1036, 1042], "exagger": [74, 183, 692, 996], "examin": [159, 378, 380, 404, 853], "exampl": [1, 30, 43, 44, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 359, 360, 366, 367, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 384, 385, 386, 389, 390, 397, 398, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 415, 416, 417, 419, 420, 422, 423, 425, 426, 429, 430, 431, 433, 436, 453, 454, 456, 458, 460, 468, 475, 477, 478, 482, 483, 484, 491, 495, 501, 503, 504, 505, 506, 507, 514, 515, 516, 526, 527, 529, 543, 544, 545, 546, 553, 570, 571, 576, 582, 584, 585, 591, 594, 595, 597, 600, 602, 608, 612, 616, 620, 621, 624, 626, 629, 636, 637, 638, 642, 650, 651, 654, 660, 661, 663, 667, 675, 683, 685, 686, 687, 694, 695, 696, 699, 708, 710, 711, 714, 715, 716, 720, 721, 723, 724, 725, 726, 728, 730, 731, 733, 736, 739, 740, 743, 744, 747, 751, 754, 756, 758, 759, 760, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 780, 781, 783, 791, 794, 796, 807, 808, 809, 810, 811, 812, 813, 824, 836, 838, 840, 844, 845, 854, 855, 856, 858, 859, 866, 867, 870, 872, 875, 886, 887, 889, 891, 892, 894, 895, 896, 899, 903, 905, 906, 914, 915, 916, 917, 926, 927, 928, 929, 930, 932, 934, 935, 936, 937, 938, 939, 940, 944, 946, 947, 948, 949, 950, 951, 954, 955, 962, 963, 964, 965, 968, 969, 970, 971, 973, 974, 975, 976, 977, 978, 979, 980, 981, 983, 984, 985, 986, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1019, 1020, 1021, 1023, 1025, 1026, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1039, 1042, 1044, 1045, 1046, 1048], "example_funct": 372, "example_gaussian_process_plot_gp_probabilistic_classification_after_regress": 1029, "example_gaussian_process_plot_gp_regress": 1029, "exampleclassifi": 240, "exampleclassifierexampleclassifi": 240, "exampleestim": 372, "exampleregressor": 240, "examples_pattern": 372, "exampletransform": 240, "exc": [281, 982], "exce": [115, 263, 283, 314, 414, 439, 513, 601, 649, 658, 1038, 1041, 1043], "exceed": [803, 804, 1035], "excel": [152, 366, 372, 411, 690, 694, 995, 1023], "except": [1, 50, 79, 86, 123, 132, 140, 149, 214, 221, 233, 240, 272, 284, 297, 300, 301, 304, 306, 318, 322, 365, 372, 374, 375, 377, 384, 386, 395, 398, 401, 405, 408, 409, 411, 412, 414, 427, 457, 462, 465, 479, 480, 481, 507, 552, 554, 555, 556, 558, 560, 562, 563, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 611, 627, 630, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 678, 679, 687, 711, 778, 807, 837, 838, 844, 845, 847, 850, 855, 861, 862, 868, 882, 884, 902, 905, 907, 910, 913, 915, 929, 941, 942, 952, 982, 984, 988, 995, 999, 1014, 1030, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1046, 1047, 1048], "exception": 224, "excerpt": [45, 1011], "excess": [211, 443, 1009, 1036], "exchang": [398, 1022], "excit": 1036, "exclud": [47, 57, 182, 304, 372, 376, 386, 443, 461, 463, 729, 730, 738, 783, 784, 787, 813, 821, 879, 973, 999, 1002, 1038, 1045, 1048], "exclus": [360, 384, 386, 409, 411, 627, 628, 630, 802, 817, 820, 988, 995, 999, 1000, 1023, 1036, 1040], "exec": 384, "execut": [64, 178, 194, 198, 239, 269, 360, 370, 372, 378, 398, 400, 404, 409, 415, 440, 458, 800, 806, 814, 823, 825, 826, 827, 828, 831, 849, 966, 967, 1009, 1012, 1020, 1031, 1034, 1037], "exemplar": [404, 437, 451], "exemplifi": 386, "exercis": [1, 361, 369, 372, 503, 1032], "exhaust": [1, 163, 265, 276, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 359, 369, 377, 385, 399, 404, 411, 800, 803, 804, 814, 894, 895, 897, 995, 1025], "exhibit": [168, 212, 340, 347, 389, 408, 409, 411, 414, 1007], "exist": [47, 48, 52, 55, 57, 86, 224, 264, 301, 304, 340, 366, 371, 374, 375, 378, 384, 386, 387, 390, 398, 404, 408, 409, 411, 412, 419, 424, 429, 434, 440, 441, 444, 446, 448, 450, 462, 465, 479, 480, 481, 489, 497, 531, 534, 536, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 584, 588, 589, 596, 602, 610, 611, 632, 633, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 690, 698, 700, 702, 762, 765, 769, 799, 801, 802, 805, 807, 808, 809, 810, 813, 815, 816, 817, 818, 819, 820, 821, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 849, 851, 854, 855, 861, 862, 864, 867, 869, 870, 871, 876, 877, 878, 883, 884, 899, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 982, 991, 996, 998, 999, 1003, 1005, 1006, 1009, 1023, 1026, 1029, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "exist_ok": 47, "existing_credit": 258, "exit": [104, 284, 376, 380, 465], "exp": [1, 80, 87, 99, 129, 137, 146, 168, 194, 216, 289, 294, 297, 314, 315, 319, 340, 402, 404, 405, 410, 416, 449, 462, 519, 531, 534, 615, 616, 622, 641, 759, 766, 776, 861, 862, 880, 993, 995, 997, 1001, 1002, 1003, 1012, 1013, 1014], "exp10": 183, "exp_dirichlet_component_": 534, "exp_dist_embed": 294, "expand": [43, 82, 98, 235, 310, 314, 355, 364, 374, 411, 441, 447, 497, 555, 556, 557, 558, 562, 563, 564, 912, 913, 914, 915, 999, 1030, 1037, 1038, 1045], "expand_frame_repr": 224, "expans": [43, 178, 315, 447, 879, 1038], "expect": [1, 43, 44, 49, 52, 61, 63, 66, 72, 79, 86, 116, 118, 125, 134, 137, 139, 141, 143, 146, 149, 160, 161, 167, 173, 180, 181, 185, 195, 200, 207, 208, 209, 211, 214, 224, 237, 240, 243, 244, 250, 251, 254, 255, 258, 270, 271, 284, 309, 322, 343, 345, 347, 348, 355, 359, 360, 372, 374, 376, 377, 378, 379, 380, 381, 384, 385, 386, 387, 389, 395, 400, 402, 404, 405, 406, 408, 411, 412, 413, 427, 461, 462, 464, 465, 466, 479, 480, 481, 494, 521, 530, 534, 536, 539, 550, 552, 554, 556, 558, 560, 561, 563, 565, 566, 568, 570, 573, 587, 588, 590, 594, 596, 605, 611, 627, 632, 633, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 674, 675, 678, 679, 695, 704, 705, 716, 735, 788, 794, 800, 814, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 850, 854, 855, 856, 857, 862, 865, 870, 877, 878, 881, 884, 885, 894, 895, 902, 904, 905, 906, 907, 908, 909, 910, 913, 915, 925, 941, 942, 963, 969, 988, 995, 998, 999, 1001, 1005, 1009, 1013, 1014, 1015, 1020, 1022, 1025, 1029, 1030, 1031, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "expected_anomaly_fract": 243, "expected_failed_check": [941, 942, 943, 1048], "expected_i": 146, "expected_n_anomali": 243, "expected_ri": 705, "expected_to_fail": [573, 941], "expected_to_fail_reason": [573, 941], "expectedli": 347, "expens": [89, 140, 154, 167, 182, 184, 234, 261, 273, 336, 340, 347, 348, 349, 361, 378, 386, 404, 405, 408, 411, 412, 446, 465, 506, 800, 803, 804, 814, 827, 902, 904, 996, 998, 1009, 1014, 1023, 1033], "experi": [30, 134, 170, 174, 182, 183, 184, 185, 188, 209, 258, 281, 309, 343, 348, 349, 360, 366, 372, 374, 375, 387, 408, 513, 728, 785, 995, 1000, 1011, 1017, 1018, 1023], "experienc": 372, "experiment": [1, 146, 178, 179, 207, 275, 276, 315, 316, 321, 322, 323, 374, 375, 382, 384, 386, 395, 408, 491, 494, 547, 578, 579, 627, 696, 803, 804, 988, 989, 995, 998, 999, 1018, 1019, 1025, 1037, 1038, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049], "expert_r": 405, "expertis": [371, 372, 384], "expit": [145, 199, 411, 559, 995, 1036], "explain": [1, 43, 44, 51, 64, 89, 105, 115, 116, 128, 146, 167, 172, 173, 184, 185, 207, 224, 233, 240, 255, 274, 310, 321, 347, 348, 360, 372, 374, 384, 398, 407, 409, 414, 491, 519, 522, 532, 539, 542, 547, 625, 648, 656, 669, 680, 721, 722, 723, 724, 728, 785, 995, 1002, 1015, 1040, 1042, 1043], "explained_vari": [348, 999], "explained_variance_": [116, 532, 539, 542, 1036], "explained_variance_ratio": 1035, "explained_variance_ratio_": [105, 128, 321, 348, 409, 532, 539, 542, 547, 1032, 1035], "explained_variance_scor": [1, 400, 999, 1032, 1036, 1043, 1049], "explan": [64, 116, 240, 359, 371, 372, 402, 412, 988, 998, 1000, 1015, 1018, 1023, 1032], "explic": 1011, "explicit": [43, 149, 180, 184, 188, 232, 240, 278, 340, 359, 360, 361, 371, 373, 384, 386, 387, 395, 405, 412, 418, 469, 497, 499, 500, 539, 549, 550, 638, 639, 641, 676, 800, 801, 808, 848, 856, 864, 904, 909, 964, 991, 993, 995, 999, 1009, 1015, 1018, 1020, 1029, 1033, 1038, 1039, 1042, 1046, 1049], "explicitli": [43, 80, 141, 167, 174, 178, 179, 208, 236, 240, 320, 340, 349, 355, 360, 366, 368, 372, 373, 374, 376, 384, 386, 395, 398, 400, 408, 412, 414, 491, 533, 547, 548, 578, 579, 596, 627, 648, 658, 659, 669, 680, 709, 727, 782, 788, 789, 803, 804, 835, 838, 844, 845, 870, 894, 895, 987, 988, 989, 991, 993, 995, 996, 999, 1001, 1002, 1009, 1023, 1029, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1041, 1042, 1043, 1047, 1048], "explod": 310, "exploit": [62, 283, 398, 1000, 1019, 1032], "exploit_incremental_learn": [806, 828], "explor": [52, 72, 137, 138, 149, 186, 230, 231, 243, 258, 265, 266, 272, 273, 281, 311, 315, 336, 348, 355, 366, 369, 371, 378, 404, 411, 469, 800, 803, 811, 885, 988, 995, 996, 998, 1004, 1006, 1009, 1023, 1035], "exploratori": [183, 1023], "explos": [800, 814, 825, 826, 827], "expm1": 107, "expon": [414, 616, 676, 677, 678, 812, 861, 862, 879, 988], "exponenti": [1, 80, 107, 167, 172, 289, 294, 410, 411, 414, 446, 534, 552, 557, 614, 619, 622, 639, 643, 758, 759, 844, 845, 849, 861, 862, 879, 991, 995, 999, 1014, 1036, 1042], "export": [1, 370, 373, 374, 390, 400, 916, 917, 1015, 1018, 1038, 1048], "export_graphviz": [1, 1015, 1034, 1036, 1042, 1044, 1045, 1047], "export_text": [1, 1015, 1038, 1045], "expos": [1, 163, 240, 277, 281, 316, 318, 360, 365, 369, 374, 386, 395, 402, 405, 411, 413, 414, 434, 461, 551, 552, 559, 560, 565, 566, 567, 568, 592, 593, 601, 611, 799, 800, 803, 804, 814, 822, 833, 834, 835, 836, 837, 838, 919, 995, 999, 1001, 1018, 1026, 1029, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1049], "exposur": [207, 224, 995], "express": [43, 46, 51, 52, 134, 140, 167, 172, 183, 264, 265, 310, 315, 333, 340, 349, 366, 367, 372, 373, 378, 384, 398, 404, 409, 410, 411, 412, 447, 453, 454, 587, 588, 590, 716, 788, 800, 806, 814, 823, 825, 826, 827, 828, 831, 851, 991, 995, 999, 1003, 1009, 1010, 1015, 1037], "expsinesquar": [1, 167, 172, 176, 414], "exstrac": 999, "ext": 646, "extend": [31, 52, 88, 89, 100, 132, 208, 253, 258, 271, 322, 336, 369, 370, 384, 386, 402, 404, 409, 411, 496, 631, 658, 720, 821, 833, 836, 837, 869, 871, 888, 904, 905, 908, 919, 991, 999, 1000, 1014, 1019, 1021, 1025, 1034, 1035, 1036, 1037, 1039, 1044, 1048], "extens": [271, 273, 289, 359, 360, 366, 367, 370, 373, 375, 376, 380, 381, 384, 398, 404, 409, 494, 501, 532, 741, 941, 950, 996, 998, 999, 1018, 1023, 1029, 1035, 1042, 1043, 1045, 1046], "extent": [0, 1, 48, 91, 169, 170, 171, 237, 344, 437, 533, 696, 797, 999], "extercond": 143, "extern": [167, 258, 361, 365, 369, 372, 374, 377, 384, 386, 401, 404, 412, 413, 414, 592, 610, 611, 717, 737, 795, 995, 998, 999, 1002, 1015, 1019, 1025, 1037, 1041], "exterqu": [143, 154], "extmath": [1, 252, 347, 381, 450, 945, 946, 947, 948, 949, 950, 1029, 1030, 1035, 1036, 1039, 1043, 1044, 1046, 1049], "extr": 47, "extra": [1, 80, 142, 149, 242, 284, 320, 349, 370, 371, 373, 386, 398, 400, 411, 412, 435, 440, 444, 456, 461, 530, 555, 556, 564, 589, 590, 700, 701, 825, 848, 914, 915, 937, 998, 999, 1002, 1029, 1032, 1034, 1035, 1037, 1042, 1044, 1049], "extra_cflag": 378, "extra_tre": [914, 915], "extract": [1, 16, 42, 43, 45, 47, 50, 51, 55, 83, 88, 101, 102, 103, 104, 115, 120, 140, 159, 163, 180, 221, 256, 263, 269, 272, 302, 329, 339, 347, 349, 355, 364, 367, 369, 378, 381, 384, 404, 405, 408, 409, 447, 449, 452, 453, 459, 461, 485, 486, 491, 492, 501, 502, 529, 532, 533, 534, 535, 536, 537, 538, 539, 541, 543, 544, 545, 582, 583, 587, 588, 590, 592, 593, 596, 598, 631, 718, 788, 800, 814, 841, 863, 864, 909, 921, 948, 957, 964, 988, 996, 1000, 1004, 1009, 1013, 1018, 1020, 1023, 1025, 1029, 1030, 1038, 1041, 1049], "extract_dbscan": 404, "extract_patches_2d": [1, 83, 123, 412, 586, 1037], "extract_scor": 267, "extractal": 47, "extractor": [207, 302, 361, 367, 386, 412, 501, 580, 581, 587, 588, 590, 988, 1029], "extran": 372, "extrapol": [43, 66, 155, 167, 190, 208, 236, 267, 883, 999, 1009, 1015, 1042, 1044], "extratre": [142, 152, 359, 1032], "extratreeclassifi": [1, 555, 564, 915, 989, 1000, 1015, 1033, 1038, 1039, 1040, 1042, 1043, 1044, 1046, 1048], "extratreeregressor": [1, 556, 561, 564, 914, 989, 1000, 1005, 1015, 1038, 1039, 1040, 1042, 1043, 1044, 1046, 1048], "extratreesclassifi": [1, 142, 152, 322, 411, 413, 556, 562, 564, 914, 915, 989, 1000, 1032, 1033, 1037, 1038, 1039, 1042, 1043, 1044, 1045, 1046, 1048], "extratreesregressor": [1, 242, 322, 411, 555, 563, 564, 914, 915, 989, 1000, 1032, 1035, 1037, 1038, 1039, 1042, 1043, 1044, 1045, 1046, 1048], "extrem": [1, 146, 207, 209, 242, 243, 277, 304, 311, 328, 348, 372, 375, 403, 404, 409, 555, 556, 562, 563, 564, 632, 633, 679, 724, 752, 914, 915, 916, 918, 999, 1001], "extrema": 993, "exxon": 51, "ey": [111, 112, 251, 255, 336, 367, 532, 539, 548], "eyast": 1043, "ezebunandu": 1041, "ezeiza": 764, "ezri": 1042, "f": [0, 1, 43, 44, 46, 50, 51, 52, 54, 55, 57, 58, 63, 66, 68, 72, 78, 81, 82, 85, 86, 88, 91, 97, 100, 103, 107, 116, 123, 134, 137, 140, 141, 143, 144, 146, 149, 154, 155, 157, 159, 162, 163, 165, 167, 173, 174, 176, 180, 182, 183, 184, 185, 186, 188, 194, 195, 198, 200, 201, 205, 207, 208, 209, 211, 212, 216, 220, 222, 224, 227, 237, 239, 240, 243, 247, 254, 258, 262, 263, 264, 265, 266, 267, 270, 271, 273, 274, 276, 277, 278, 284, 287, 299, 300, 301, 306, 309, 310, 313, 315, 317, 319, 320, 321, 322, 325, 326, 335, 340, 343, 347, 348, 349, 355, 367, 372, 373, 374, 378, 380, 384, 398, 402, 405, 409, 411, 412, 413, 414, 484, 506, 507, 529, 530, 535, 536, 564, 580, 581, 582, 586, 591, 594, 595, 597, 598, 599, 603, 604, 605, 606, 607, 608, 617, 627, 632, 635, 658, 696, 713, 723, 726, 729, 730, 756, 783, 784, 787, 788, 801, 802, 805, 807, 808, 809, 810, 813, 815, 816, 817, 818, 819, 820, 821, 822, 828, 829, 831, 861, 862, 866, 875, 878, 879, 883, 884, 885, 911, 919, 930, 931, 982, 991, 994, 996, 1003, 1006, 1007, 1009, 1013, 1020, 1031, 1037, 1038, 1039, 1041, 1043, 1049], "f0_c0": 885, "f0_c1": 885, "f0_c2": 885, "f0e442": 249, "f1": [1, 45, 62, 68, 102, 160, 262, 302, 325, 326, 329, 408, 713, 729, 730, 738, 783, 822, 999, 1000, 1033, 1045], "f1_c0": 885, "f1_c1": 885, "f1_c2": 885, "f1_macro": [408, 999, 1033], "f1_micro": [999, 1033], "f1_sampl": 999, "f1_score": [1, 62, 271, 329, 367, 400, 403, 738, 999, 1029, 1031, 1032, 1033, 1034, 1038, 1039, 1045, 1046, 1048], "f1_weight": [999, 1033], "f2": [376, 1000], "f2001": 999, "f2006": 999, "f3": 1000, "f4": 496, "f401": [100, 126, 146, 178, 179, 184, 226, 228, 275, 276, 315], "f64": 263, "f781bf": [75, 79, 95, 96], "f7bd01": 75, "f_": [411, 414, 635, 730, 999], "f_0": 151, "f_1": [151, 999], "f_beta": 999, "f_c": [160, 247, 317], "f_classif": [1, 159, 160, 339, 413, 591, 594, 595, 597, 598, 599, 603, 605, 608], "f_i": 402, "f_idx": 151, "f_j": [402, 1007], "f_m": 411, "f_n": 271, "f_p": 271, "f_regress": [1, 87, 158, 413, 591, 594, 595, 597, 598, 599, 603, 604, 608, 1032, 1036, 1043, 1046], "f_score": 271, "f_statist": [604, 605], "f_test": 158, "fa": [1, 119, 130, 180, 378, 409, 470, 473, 530, 539, 800, 826, 1020], "fa_estim": 120, "fa_scor": 127, "fab": [1023, 1039, 1040], "fabia": [401, 719], "fabian": [0, 394, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1038, 1046], "fabiana": 1040, "fabianhen": [1048, 1049], "fabio": 1035, "fabisch": [0, 394, 1031, 1032, 1033, 1035], "fabrizio": 1044, "face": [1, 42, 44, 54, 71, 84, 86, 119, 123, 125, 129, 130, 180, 232, 239, 365, 372, 376, 404, 409, 411, 446, 469, 491, 492, 493, 519, 530, 531, 535, 537, 538, 539, 541, 556, 583, 657, 673, 697, 713, 814, 830, 847, 884, 909, 933, 1002, 1015, 1016, 1020, 1025, 1029, 1037, 1048], "face_id": 242, "facecolor": [51, 63, 70, 93, 120, 136, 175, 226, 241, 264, 291, 306, 334, 337, 340, 341, 342], "faces_cent": 120, "facial": 367, "facil": [998, 1018], "facilit": [359, 386, 398, 400, 1018, 1019, 1035, 1038], "fact": [43, 50, 57, 62, 112, 116, 134, 144, 146, 185, 237, 247, 281, 283, 347, 366, 379, 384, 386, 400, 407, 409, 410, 411, 412, 649, 668, 670, 704, 993, 995, 999, 1002, 1009, 1013, 1014, 1019, 1023, 1043], "facto": 1039, "factor": [1, 10, 42, 45, 48, 63, 67, 79, 80, 86, 88, 95, 119, 125, 129, 152, 180, 183, 220, 231, 233, 243, 258, 275, 276, 284, 285, 299, 300, 304, 306, 315, 317, 335, 359, 360, 368, 372, 378, 381, 386, 401, 404, 411, 412, 414, 437, 439, 451, 466, 468, 469, 470, 471, 473, 475, 485, 502, 512, 513, 525, 530, 533, 534, 536, 538, 539, 542, 543, 544, 545, 547, 548, 559, 560, 561, 587, 590, 596, 613, 649, 650, 651, 654, 655, 656, 682, 683, 692, 719, 783, 800, 803, 804, 826, 850, 884, 898, 900, 908, 947, 948, 988, 995, 996, 1002, 1009, 1012, 1016, 1020, 1024, 1025, 1029, 1030, 1032, 1033, 1035, 1043, 1045], "factoranalysi": [1, 120, 127, 130, 409, 542, 1030, 1032, 1041, 1043], "factori": [94, 258, 264, 412, 923, 925, 999], "facundo": [1040, 1043], "fagan": 1038, "fail": [1, 43, 87, 99, 121, 127, 175, 190, 194, 211, 240, 264, 270, 313, 322, 360, 370, 372, 375, 380, 387, 390, 407, 408, 437, 469, 471, 573, 676, 677, 678, 711, 861, 862, 920, 922, 929, 941, 942, 943, 988, 996, 1029, 1030, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049], "failur": [180, 181, 183, 204, 372, 380, 390, 573, 657, 785, 830, 930, 931, 941, 1020, 1022, 1023, 1042, 1043, 1047], "fair": [51, 64, 322, 411, 690, 694, 833, 999, 1000, 1023], "fairer": 355, "fairli": [113, 145, 228, 300, 380, 404, 557, 558, 699, 1000], "faith": [57, 341, 348], "fake": 412, "falak": 1038, "fall": [25, 30, 43, 52, 146, 149, 174, 263, 264, 372, 404, 412, 429, 443, 444, 506, 507, 727, 728, 794, 881, 893, 953, 998, 999, 1009, 1038, 1048], "fallback": [387, 390, 832, 833, 999], "fals": [1, 43, 44, 46, 47, 49, 50, 51, 53, 54, 58, 59, 61, 63, 64, 68, 69, 70, 74, 77, 79, 80, 81, 87, 88, 97, 100, 102, 103, 104, 110, 112, 118, 124, 128, 129, 134, 139, 140, 141, 143, 146, 147, 149, 150, 151, 154, 155, 156, 160, 167, 172, 173, 174, 175, 183, 184, 185, 186, 190, 191, 192, 194, 195, 202, 205, 207, 208, 212, 213, 214, 222, 224, 226, 229, 234, 235, 236, 240, 241, 243, 244, 245, 246, 247, 249, 254, 258, 261, 262, 263, 264, 265, 267, 268, 271, 272, 273, 274, 275, 276, 277, 278, 279, 284, 288, 294, 297, 300, 301, 302, 304, 305, 310, 311, 313, 314, 315, 316, 317, 318, 320, 321, 323, 327, 336, 338, 340, 343, 344, 347, 348, 366, 372, 373, 374, 377, 386, 395, 400, 402, 403, 404, 405, 406, 408, 409, 411, 412, 413, 414, 416, 417, 429, 430, 431, 432, 433, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 456, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 506, 507, 508, 510, 511, 513, 521, 522, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 580, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 632, 635, 637, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 690, 694, 695, 697, 698, 699, 700, 701, 702, 703, 708, 709, 711, 712, 713, 714, 715, 718, 719, 726, 727, 728, 729, 730, 731, 738, 743, 754, 756, 761, 763, 767, 769, 774, 778, 782, 783, 784, 785, 787, 789, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 811, 814, 818, 819, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 879, 880, 881, 882, 883, 884, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 928, 929, 930, 931, 941, 949, 961, 962, 963, 965, 966, 969, 970, 972, 979, 984, 985, 987, 988, 989, 995, 999, 1002, 1009, 1013, 1014, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048], "false_": 636, "false_discovery_r": 594, "famili": [1, 45, 258, 359, 361, 386, 404, 407, 409, 412, 413, 591, 594, 595, 597, 598, 599, 605, 861, 862, 880, 892, 995, 1009, 1013, 1033, 1043], "familiar": [372, 410, 1037], "famou": [367, 369, 411, 1014], "famous": 1001, "fan": [0, 360, 387, 393, 400, 1014, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "fanci": 412, "fancybox": 342, "fanelli": [1044, 1045], "fang": [658, 1036, 1037], "fanni": 1039, "fantasi": 1004, "fantast": 1023, "faouzi": [1039, 1040], "faq": [0, 380, 408, 692, 996, 1009], "far": [62, 93, 113, 143, 168, 174, 183, 184, 207, 224, 258, 336, 340, 347, 349, 372, 381, 414, 720, 884, 973, 1004, 1005, 1014, 1023], "farach": 991, "farahsae": 1037, "farawai": 1002, "fare": [103, 185, 247, 317, 318, 1033, 1034], "fargo": 51, "farhan": 1045, "farid": 1048, "farlei": [0, 394, 1029], "farouk": [1037, 1038], "farther": 725, "farthest": 404, "farwel": 1049, "fasci": [1048, 1049], "fashion": [1, 46, 139, 144, 214, 273, 360, 386, 401, 402, 404, 409, 411, 551, 555, 556, 557, 558, 562, 563, 564, 601, 627, 830, 853, 868, 871, 877, 888, 912, 913, 914, 915, 969, 989, 995, 999, 1009, 1015, 1038], "fast": [1, 52, 64, 95, 188, 194, 198, 221, 222, 238, 239, 305, 349, 359, 367, 372, 381, 398, 400, 404, 406, 408, 409, 411, 412, 416, 443, 444, 466, 471, 506, 530, 531, 533, 536, 538, 542, 545, 562, 563, 564, 587, 588, 590, 632, 633, 640, 658, 659, 672, 674, 687, 699, 800, 814, 825, 826, 836, 837, 844, 845, 849, 860, 948, 968, 991, 995, 998, 1001, 1002, 1004, 1005, 1015, 1018, 1023, 1029, 1030, 1035, 1036, 1039, 1040], "fast_dict": 1039, "fast_dot": 1036, "fast_logdet": [1, 381], "fast_svd": 1029, "faster": [37, 46, 57, 74, 97, 105, 120, 139, 140, 143, 144, 146, 149, 163, 184, 188, 195, 207, 209, 221, 222, 224, 239, 243, 258, 284, 286, 301, 314, 316, 317, 321, 322, 347, 348, 349, 359, 366, 372, 380, 381, 386, 398, 404, 409, 413, 414, 416, 440, 444, 446, 448, 449, 450, 459, 506, 529, 530, 531, 534, 535, 536, 537, 538, 540, 541, 543, 544, 545, 546, 557, 558, 559, 560, 561, 643, 646, 647, 652, 653, 658, 659, 660, 661, 662, 663, 672, 674, 684, 687, 691, 695, 726, 756, 778, 779, 780, 844, 845, 846, 849, 854, 861, 862, 879, 881, 883, 893, 897, 948, 968, 988, 992, 995, 1000, 1002, 1003, 1006, 1011, 1013, 1014, 1015, 1018, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "fastest": [90, 262, 349, 444, 670, 672, 674, 687, 947, 948, 998], "fastest_top_recall_high_precision_index": 262, "fastica": [1, 119, 180, 206, 409, 530, 533, 539, 1020, 1029, 1031, 1037, 1043, 1044, 1047], "fastkmean": 446, "fastmcd": [406, 466, 471], "fastnc": 860, "fat": [519, 522], "fatima": [1043, 1046], "fato": 1042, "fauchereau": 1042, "fault": [380, 1037, 1039, 1041], "faulti": [210, 1029], "faust": 1047, "favor": [44, 66, 113, 140, 249, 255, 384, 406, 411, 730, 808, 810, 863, 988, 1007, 1031, 1033, 1035, 1036, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "favorit": [372, 384, 1023], "favour": [792, 996, 998, 1038, 1049], "fawcett": [788, 789, 999], "fazlul": 1031, "fbach": [529, 535], "fbeta_scor": [1, 400, 729, 742, 783, 999, 1031, 1032, 1033, 1034, 1039, 1045, 1049], "fc": [48, 289, 367], "fc2009": 999, "fcd116": 118, "fcharra": 1044, "fcluster": 186, "fcostin": 1029, "fd": 47, "fdr": 591, "fe6100": 202, "feasibl": [372, 873, 874, 884], "feast": 405, "feat": [47, 49, 376, 412], "feat0": [235, 314], "feat1": [235, 314, 412], "feat2": [235, 314, 412], "feat3": [235, 314, 412], "feat_idx": 627, "feat_nam": 162, "featur": [1, 7, 15, 16, 17, 23, 25, 32, 42, 44, 45, 46, 47, 49, 50, 54, 57, 58, 62, 63, 64, 66, 67, 68, 69, 71, 77, 83, 91, 93, 96, 101, 102, 103, 104, 105, 111, 112, 115, 116, 118, 120, 122, 124, 127, 128, 130, 133, 135, 138, 140, 142, 146, 148, 153, 154, 155, 156, 158, 160, 167, 168, 169, 172, 173, 175, 178, 179, 181, 182, 183, 184, 189, 191, 193, 194, 195, 198, 199, 201, 205, 206, 207, 208, 209, 211, 212, 214, 215, 221, 222, 223, 227, 232, 235, 237, 242, 243, 246, 247, 256, 258, 259, 261, 262, 263, 264, 267, 269, 270, 271, 272, 273, 274, 277, 279, 283, 287, 288, 289, 292, 293, 295, 298, 299, 301, 303, 304, 307, 311, 312, 314, 317, 318, 319, 320, 321, 322, 323, 325, 326, 328, 329, 330, 331, 332, 333, 336, 340, 343, 346, 349, 352, 353, 354, 355, 364, 365, 366, 367, 368, 369, 370, 374, 375, 377, 379, 380, 381, 384, 385, 386, 387, 389, 390, 392, 398, 402, 404, 406, 407, 408, 409, 410, 414, 415, 416, 417, 418, 420, 425, 427, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 506, 507, 508, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 526, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 571, 578, 579, 580, 581, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 613, 614, 615, 618, 619, 620, 622, 623, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 685, 686, 687, 688, 689, 690, 691, 692, 697, 701, 702, 703, 713, 721, 722, 723, 724, 741, 742, 745, 746, 748, 758, 759, 763, 764, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 781, 785, 788, 790, 792, 793, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 921, 930, 931, 945, 965, 973, 974, 975, 979, 987, 988, 991, 993, 994, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "feature_": 162, "feature_0": 917, "feature_1": [631, 917], "feature_2": 631, "feature_3": 162, "feature_4": 162, "feature_8": 162, "feature_all_": 841, "feature_count_": [839, 841, 843], "feature_extract": [1, 47, 54, 57, 80, 81, 83, 84, 87, 99, 102, 123, 180, 265, 329, 346, 347, 348, 349, 361, 367, 404, 405, 412, 461, 542, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 877, 997, 1029, 1030, 1031, 1032, 1035, 1036], "feature_import": 147, "feature_importances_": [141, 147, 163, 185, 186, 386, 411, 413, 551, 552, 555, 556, 557, 558, 562, 563, 564, 592, 593, 596, 912, 913, 914, 915, 1031, 1034, 1038], "feature_index": 412, "feature_indices_": 1037, "feature_info": 513, "feature_log_prob_": [839, 840, 841, 843], "feature_map": [238, 304], "feature_map__n_compon": 238, "feature_map_fouri": 238, "feature_map_nystroem": [238, 639], "feature_nam": [54, 57, 126, 130, 141, 147, 151, 155, 163, 183, 185, 202, 215, 244, 278, 287, 304, 313, 314, 315, 320, 333, 347, 352, 365, 367, 377, 405, 461, 487, 488, 490, 494, 498, 499, 500, 502, 503, 508, 581, 631, 632, 633, 885, 916, 917, 918, 1007, 1015, 1045], "feature_name_combin": [103, 139, 154, 183, 184, 235, 245, 314, 317, 877, 1045], "feature_names_": 580, "feature_names_in": 1043, "feature_names_in_": [247, 311, 316, 374, 386, 425, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 461, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 610, 611, 627, 628, 629, 630, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 797, 798, 799, 800, 803, 804, 814, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 987, 1042, 1043, 1044, 1045, 1047], "feature_names_out": [139, 420, 425, 439, 440, 442, 444, 446, 461, 479, 480, 481, 482, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 564, 565, 566, 567, 568, 580, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 688, 689, 692, 848, 853, 856, 860, 863, 864, 867, 868, 869, 870, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 1043, 1046], "feature_rang": [104, 302, 874, 890, 1009, 1031, 1041], "feature_select": [1, 87, 103, 104, 106, 157, 158, 159, 160, 161, 162, 163, 180, 247, 315, 317, 339, 355, 386, 395, 405, 413, 580, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 988, 1020, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1048], "feature_selector": 163, "feature_to_plot": 203, "feature_union": 1045, "featureagglomer": [1, 84, 87, 437, 438, 1016, 1032, 1038, 1039, 1042, 1043, 1045, 1046, 1047], "featureforg": 1023, "featurehash": [1, 47, 57, 102, 180, 346, 347, 348, 361, 367, 412, 485, 580, 587, 588, 589, 590, 877, 1020, 1030, 1035, 1036, 1037, 1043, 1044], "featureheash": 349, "features_": [629, 989], "features__pca__n_compon": 106, "features__univ_select__k": 106, "features_idx": 304, "features_info": 184, "features_nam": [182, 1036], "features_samples_ratio": 69, "features_select": 162, "featureselector": 600, "featuresshould": 392, "featuretool": 1018, "featureunion": [1, 6, 43, 106, 364, 386, 395, 461, 629, 866, 989, 1019, 1023, 1025, 1030, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1047, 1049], "featurewis": [1, 880], "feb": [73, 437, 451], "februari": [0, 406, 470, 999, 1030, 1034, 1046], "fed": [47, 154, 355, 367, 412, 988, 1004, 1009, 1040], "feda": [1037, 1038], "feder": 1018, "federico": [1031, 1032, 1037, 1038, 1043], "federicopisanu": 1039, "feed": [47, 116, 208, 240, 349, 367, 377, 384, 404, 412, 742, 877, 1000], "feedback": [261, 322, 370, 371, 372, 373, 387, 1018, 1022, 1037], "feedforward": [861, 862], "feedstock": 376, "feel": [64, 179, 304, 322, 371, 372, 380, 404, 443, 1015, 1048], "feel_temp": [43, 184], "feghali": 1046, "fei": [561, 1005], "feickert": 1048, "feld": [1033, 1045], "feldbauer": [1037, 1038, 1039, 1040, 1043], "feldman": [1031, 1036, 1037, 1038, 1039], "felip": [1042, 1043, 1044, 1045], "felix": [1031, 1036, 1037, 1039, 1041, 1042, 1043], "femal": [103, 183, 318, 377, 877, 878, 1009], "fenc": 377, "feng": [1039, 1041, 1042, 1043], "fenil": 1042, "fenx": 1037, "ferdman": 1046, "ferenc": 1023, "fernand": [1037, 1043, 1044], "fernandez": 1038, "fernando": [1034, 1041], "fern\u00e1ndez": 1043, "ferrando": 1039, "ferrari": 1037, "ferreira": [1037, 1042, 1043], "ferri": [413, 999], "ferria": 1036, "ferrin": 1043, "ferriss": 1036, "ferr\u00e9": 1043, "ferr\u00edn": 1040, "fetal": 243, "fetch": [1, 51, 55, 154, 183, 224, 258, 278, 365, 366, 367, 372, 376, 377, 380, 409, 489, 494, 587, 588, 590, 1037, 1045], "fetch_": 1036, "fetch_20newsgroup": [1, 54, 57, 102, 265, 329, 347, 348, 349, 367, 486, 1034, 1039, 1047, 1049], "fetch_20newsgroups_vector": [1, 46, 221, 237, 367, 1029, 1039, 1041, 1046, 1047, 1049], "fetch_california_h": [1, 140, 144, 178, 179, 304, 315, 367, 1038, 1040, 1047], "fetch_covtyp": [1, 188, 243, 315, 367, 1038, 1041, 1043, 1047], "fetch_fil": [1, 52, 322, 1048], "fetch_kddcup99": [1, 243, 367, 1036, 1037, 1038, 1041, 1042, 1047], "fetch_lfw_pair": [1, 367, 1034, 1044, 1047, 1049], "fetch_lfw_peopl": [1, 45, 367, 1044, 1047, 1049], "fetch_mldata": 1037, "fetch_olivetti_fac": [1, 83, 120, 242, 367, 1037, 1038, 1039, 1047], "fetch_openml": [1, 43, 44, 52, 103, 107, 143, 149, 154, 172, 183, 184, 185, 207, 214, 222, 224, 234, 243, 247, 258, 278, 281, 283, 284, 301, 310, 313, 317, 320, 366, 376, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "fetch_rcv1": [1, 367, 1034, 1038, 1047], "fetch_species_distribut": [1, 50, 297, 1038, 1047], "fetcher": [322, 365, 1034, 1036, 1045], "feth": 1029, "feurer": [1032, 1037], "fevott": [409, 536, 538, 545], "few": [0, 46, 54, 57, 74, 80, 85, 124, 143, 149, 170, 173, 174, 198, 207, 209, 224, 239, 240, 249, 266, 267, 271, 296, 301, 304, 308, 313, 314, 315, 316, 317, 318, 319, 320, 321, 325, 343, 349, 359, 367, 368, 369, 372, 374, 385, 387, 395, 398, 401, 402, 404, 408, 409, 411, 413, 414, 434, 446, 559, 560, 655, 692, 695, 897, 948, 969, 995, 996, 998, 999, 1002, 1003, 1012, 1014, 1015, 1023, 1035, 1045, 1047], "fewer": [43, 53, 63, 88, 134, 142, 144, 207, 263, 359, 373, 404, 413, 414, 445, 458, 539, 593, 696, 834, 952, 995, 1000, 1002, 1034, 1035, 1036], "fewest": [263, 627], "ff": 380, "ff0000": [67, 292, 299], "ff3333": 118, "ff7216": 118, "ff7f00": [79, 95, 233], "ff9c34": [92, 97], "ffaaaa": 292, "ffc107": 308, "fft": 640, "fhaselbeck": 1041, "fhoang7": 1038, "fhr": 243, "fi": [875, 999], "fibins": [1037, 1038], "fictiti": 999, "fidel": 53, "fidor": 1045, "fiedler": 1035, "fiegel": [1041, 1042, 1044], "field": [163, 224, 369, 374, 376, 401, 404, 405, 412, 461, 496, 499, 617, 995, 997, 1006, 1014, 1022, 1030], "fifth": [239, 992], "fig": [43, 44, 46, 47, 48, 49, 52, 54, 62, 64, 66, 70, 77, 78, 86, 88, 90, 93, 97, 99, 105, 109, 111, 116, 120, 125, 126, 130, 134, 140, 141, 143, 144, 146, 147, 149, 151, 152, 154, 155, 170, 176, 178, 184, 186, 188, 191, 196, 200, 201, 203, 204, 205, 207, 208, 211, 214, 219, 221, 224, 226, 227, 228, 229, 230, 231, 234, 236, 243, 244, 254, 258, 259, 260, 261, 263, 264, 265, 266, 267, 270, 273, 275, 277, 278, 283, 284, 286, 288, 289, 297, 300, 301, 304, 305, 306, 308, 309, 310, 313, 317, 318, 333, 340, 342, 343, 344, 345, 347, 348, 349, 351, 368, 379], "fig1": 100, "fig2": 100, "figaspect": 308, "fight": [74, 211, 1023], "fighter": 102, "fignum": 341, "figsiz": [43, 44, 45, 49, 51, 52, 53, 54, 62, 63, 64, 66, 67, 68, 70, 74, 75, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 95, 97, 98, 99, 105, 107, 111, 113, 115, 116, 118, 120, 123, 124, 125, 126, 129, 130, 134, 136, 137, 143, 144, 145, 146, 147, 149, 152, 154, 155, 158, 169, 171, 175, 176, 178, 179, 183, 184, 186, 188, 190, 191, 194, 199, 201, 202, 203, 205, 206, 207, 208, 209, 211, 213, 214, 217, 220, 222, 224, 226, 227, 228, 230, 231, 233, 234, 236, 238, 241, 242, 243, 244, 249, 251, 252, 255, 258, 259, 260, 261, 263, 266, 267, 268, 271, 273, 274, 277, 278, 279, 283, 284, 286, 287, 299, 300, 302, 304, 305, 306, 307, 308, 309, 310, 317, 318, 325, 327, 334, 336, 340, 341, 342, 343, 344, 345, 347, 348, 349, 368, 918], "figur": [45, 46, 47, 49, 51, 53, 61, 62, 63, 64, 67, 72, 73, 74, 75, 77, 79, 80, 81, 83, 84, 85, 87, 89, 91, 92, 94, 95, 96, 97, 98, 100, 109, 113, 115, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 134, 135, 136, 137, 145, 146, 147, 148, 149, 152, 153, 156, 158, 159, 162, 168, 169, 170, 171, 174, 175, 179, 183, 184, 185, 186, 190, 194, 197, 199, 202, 203, 206, 208, 209, 213, 217, 221, 222, 223, 228, 229, 230, 233, 237, 238, 239, 241, 242, 244, 249, 251, 252, 255, 257, 263, 268, 269, 279, 289, 293, 294, 297, 299, 302, 304, 306, 307, 311, 313, 315, 325, 326, 327, 334, 336, 341, 352, 353, 372, 404, 410, 411, 412, 414, 435, 631, 632, 697, 698, 700, 701, 702, 806, 823, 918, 988, 992, 995, 998, 999, 1002, 1003, 1006, 1007, 1013, 1014, 1015, 1042], "figure_": [68, 184, 244, 313, 315, 379, 435, 631, 632, 697, 698, 700, 701, 702, 806, 823], "figure_titl": 143, "filali": 1037, "file": [1, 47, 51, 52, 68, 322, 347, 348, 359, 360, 361, 366, 367, 369, 370, 375, 376, 377, 378, 384, 398, 405, 409, 484, 489, 491, 492, 494, 501, 506, 507, 532, 578, 579, 587, 588, 590, 916, 1002, 1015, 1020, 1022, 1029, 1030, 1032, 1035, 1036, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1048], "file_1": 501, "file_2": 501, "file_42": 501, "file_43": 501, "file_44": 501, "file_id": 366, "file_path": 489, "filenam": [1, 47, 55, 126, 329, 367, 372, 376, 378, 398, 485, 489, 498, 501, 502, 505, 587, 588, 590, 1029, 1034, 1037, 1038], "filesystem": [380, 390, 1042], "filho": 402, "filip": [1046, 1047], "filipj8": [1036, 1037], "fill": [70, 142, 185, 259, 289, 352, 386, 405, 409, 513, 525, 536, 538, 545, 586, 630, 916, 918, 989, 1002, 1015], "fill_between": [52, 146, 149, 167, 172, 174, 176, 190, 191, 224, 263, 264, 266, 267, 268, 274, 806, 823], "fill_between_": [806, 823], "fill_between_kw": [806, 823], "fill_betweenx": 93, "fill_diagon": [186, 229], "fill_legend": 224, "fill_valu": [103, 154, 179, 185, 235, 245, 314, 317, 418, 421, 427, 428, 627, 630, 1009, 1037, 1045, 1046], "fillna": [224, 243], "filo": [1029, 1032], "filter": [1, 17, 47, 54, 80, 81, 105, 213, 224, 262, 264, 286, 347, 360, 367, 378, 381, 404, 412, 445, 485, 486, 501, 587, 590, 594, 595, 596, 597, 598, 599, 774, 839, 939, 965, 1001, 1002, 1039, 1049], "filter_param": 774, "filtered_cv_result": 262, "filterwarn": [79, 95, 221, 300, 301, 372, 1009], "final": [1, 43, 52, 63, 64, 70, 75, 77, 88, 102, 103, 111, 113, 116, 125, 134, 135, 137, 139, 143, 144, 147, 154, 155, 156, 160, 172, 179, 182, 184, 186, 188, 190, 194, 196, 198, 205, 207, 209, 223, 224, 227, 229, 233, 247, 253, 258, 262, 270, 281, 284, 310, 311, 313, 314, 336, 340, 359, 361, 367, 370, 372, 373, 374, 376, 385, 386, 401, 402, 404, 405, 408, 411, 412, 413, 434, 439, 444, 445, 449, 456, 459, 461, 534, 553, 554, 565, 566, 568, 593, 627, 647, 653, 659, 671, 679, 690, 694, 719, 800, 832, 833, 864, 865, 901, 904, 988, 989, 991, 995, 996, 999, 1002, 1005, 1006, 1009, 1012, 1023, 1034, 1037, 1038, 1039, 1040, 1042], "final_estim": [154, 313, 411, 565, 566], "final_estimator_": [565, 566], "final_estimatorridgecv": 154, "final_lay": 411, "final_layer_gbr": 411, "final_layer_rfr": 411, "final_step": 77, "financ": [258, 1000], "financi": [0, 51, 404, 411, 995], "find": [1, 43, 44, 45, 51, 55, 64, 75, 80, 81, 82, 85, 86, 88, 90, 98, 105, 111, 112, 120, 122, 124, 125, 130, 144, 154, 167, 171, 173, 175, 184, 194, 196, 198, 209, 214, 226, 228, 230, 231, 236, 243, 254, 258, 263, 264, 265, 275, 277, 287, 292, 293, 294, 309, 313, 319, 321, 338, 339, 340, 343, 347, 348, 351, 360, 369, 372, 373, 374, 377, 378, 381, 384, 385, 386, 387, 392, 401, 403, 404, 406, 407, 409, 411, 412, 413, 415, 438, 441, 442, 443, 447, 448, 449, 450, 459, 529, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 556, 563, 581, 588, 610, 611, 647, 650, 653, 654, 655, 656, 658, 659, 671, 676, 688, 707, 729, 730, 738, 782, 783, 784, 787, 788, 794, 799, 800, 814, 822, 846, 847, 848, 850, 852, 854, 855, 856, 877, 878, 883, 896, 897, 898, 912, 913, 915, 927, 947, 948, 950, 988, 989, 991, 994, 995, 996, 998, 999, 1000, 1003, 1005, 1009, 1013, 1014, 1015, 1017, 1023, 1029, 1036, 1037, 1038, 1039, 1041, 1043, 1044, 1047], "findal": 349, "findoriya": 1049, "fine": [43, 72, 142, 163, 201, 211, 222, 255, 262, 340, 353, 369, 376, 386, 412, 443, 948, 1002, 1005, 1014, 1019, 1039], "finer": [43, 52, 72, 286, 336, 360, 404, 408, 988, 1002, 1039], "finfo": [229, 468, 469, 475, 605, 650, 651, 654, 655, 656, 682, 683, 1044], "finish": [163, 252, 996], "finit": [64, 249, 255, 359, 367, 386, 465, 536, 549, 581, 605, 608, 610, 611, 658, 727, 728, 778, 785, 797, 825, 902, 928, 929, 930, 931, 995, 998, 999, 1023, 1036, 1037, 1041, 1043, 1044], "finn": [1037, 1038], "firefox": 1009, "fireplac": 143, "fireplacequ": 143, "firm": [51, 404], "first": [0, 1, 43, 44, 46, 47, 50, 52, 55, 58, 62, 63, 66, 67, 68, 70, 74, 88, 89, 91, 94, 97, 98, 99, 100, 102, 103, 104, 107, 111, 115, 116, 125, 126, 128, 134, 135, 139, 141, 142, 143, 144, 145, 147, 149, 151, 154, 155, 156, 159, 160, 163, 167, 168, 169, 172, 173, 174, 175, 179, 182, 183, 184, 186, 188, 190, 192, 198, 205, 208, 209, 214, 215, 220, 227, 230, 237, 238, 240, 241, 242, 244, 246, 247, 251, 255, 258, 259, 264, 266, 267, 271, 273, 275, 276, 277, 281, 283, 284, 286, 289, 293, 294, 295, 299, 301, 304, 306, 309, 310, 311, 314, 315, 326, 329, 332, 333, 336, 338, 347, 348, 349, 351, 352, 354, 355, 360, 361, 366, 367, 369, 370, 371, 372, 374, 376, 377, 378, 380, 384, 386, 398, 401, 402, 403, 404, 407, 408, 409, 411, 412, 413, 414, 416, 440, 443, 444, 447, 456, 457, 461, 469, 480, 484, 485, 487, 488, 490, 492, 495, 498, 500, 502, 506, 507, 508, 526, 531, 532, 536, 539, 551, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 581, 583, 587, 588, 589, 590, 592, 593, 600, 610, 611, 617, 621, 624, 631, 632, 633, 634, 646, 652, 659, 666, 668, 674, 676, 688, 695, 698, 699, 700, 702, 712, 716, 730, 736, 742, 763, 764, 782, 789, 794, 797, 798, 803, 804, 805, 806, 807, 812, 814, 821, 823, 832, 833, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 849, 852, 853, 854, 855, 856, 857, 858, 861, 862, 863, 864, 869, 877, 881, 882, 883, 885, 886, 893, 894, 906, 909, 912, 913, 914, 915, 917, 919, 925, 926, 930, 931, 932, 941, 950, 952, 967, 969, 972, 984, 987, 988, 989, 993, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1006, 1009, 1010, 1013, 1014, 1015, 1023, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1048, 1049], "first_img_data": 505, "first_pca_compon": 309, "first_quart": 129, "first_week": 149, "firstli": [123, 359, 384, 657], "fisach": 1035, "fiscal": 0, "fischer": [1034, 1035], "fischler": 995, "fischoff": 1041, "fish": 316, "fisher": [369, 411, 502, 636], "fisher1958": 411, "fisher_transform": 636, "fissler": 999, "fissler2022": 999, "fit": [1, 22, 25, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 59, 61, 62, 64, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 87, 88, 89, 91, 94, 95, 96, 97, 98, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 120, 122, 123, 124, 125, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 163, 167, 168, 169, 170, 171, 173, 174, 175, 176, 180, 182, 183, 184, 185, 186, 188, 189, 193, 194, 195, 196, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 214, 215, 218, 219, 220, 221, 222, 223, 224, 229, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 261, 262, 264, 265, 266, 267, 268, 269, 272, 273, 275, 276, 277, 278, 279, 281, 284, 286, 287, 288, 289, 290, 292, 293, 294, 295, 297, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 340, 341, 343, 344, 345, 347, 348, 351, 352, 354, 359, 361, 364, 367, 369, 372, 375, 377, 378, 381, 384, 386, 398, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 412, 413, 414, 415, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 454, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 507, 508, 522, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 574, 576, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 609, 610, 611, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 687, 688, 689, 690, 691, 692, 694, 697, 698, 700, 701, 702, 710, 711, 723, 732, 735, 750, 788, 797, 798, 799, 800, 803, 804, 806, 814, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 921, 923, 924, 939, 957, 960, 982, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1018, 1019, 1020, 1021, 1023, 1025, 1026, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "fit_": 1042, "fit_algorithm": [120, 529, 535, 1044, 1045], "fit_and_evalu": 348, "fit_and_plot_model": 309, "fit_and_scor": 214, "fit_data": 59, "fit_dur": 284, "fit_ecoc": 1033, "fit_grid_point": 1040, "fit_intercept": [46, 103, 104, 139, 154, 155, 156, 160, 183, 190, 191, 192, 195, 202, 205, 212, 220, 233, 234, 235, 236, 245, 247, 258, 263, 271, 272, 278, 302, 311, 314, 317, 323, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 687, 904, 905, 911, 995, 1013, 1033, 1037, 1038, 1039, 1041, 1042, 1043, 1049], "fit_inverse_transform": [44, 125, 533, 1038], "fit_ovo": 1033, "fit_ovr": 1033, "fit_param": [240, 386, 428, 434, 439, 442, 462, 530, 532, 535, 537, 540, 541, 547, 553, 554, 565, 566, 567, 568, 581, 582, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 627, 628, 630, 635, 638, 639, 640, 641, 642, 665, 671, 806, 823, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 848, 853, 856, 860, 863, 867, 868, 869, 870, 873, 874, 876, 877, 878, 879, 881, 882, 883, 884, 896, 897, 960, 1036, 1039, 1040, 1041, 1043, 1045, 1046, 1047, 1048], "fit_path": [650, 654, 655, 656, 682, 683], "fit_predict": [57, 89, 90, 93, 233, 243, 291, 322, 374, 386, 404, 422, 426, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 466, 561, 609, 677, 792, 793, 797, 798, 850, 856, 864, 908, 924, 1005, 1034, 1037, 1038, 1042, 1044, 1046], "fit_prior": [265, 367, 839, 840, 841, 843], "fit_status_": [906, 907, 908, 909, 910], "fit_tim": [52, 91, 143, 198, 214, 263, 266, 408, 827, 828], "fit_timemapermsemaepinball_loss_05pinball_loss_50pinball_loss_95strstrstrstrstrstrstr": 52, "fit_times_nb": 266, "fit_times_svm": 266, "fit_transform": [43, 44, 45, 49, 51, 54, 57, 79, 82, 85, 86, 91, 95, 121, 124, 126, 130, 152, 188, 200, 222, 224, 226, 227, 228, 229, 230, 231, 236, 237, 240, 241, 247, 284, 288, 300, 304, 305, 309, 310, 311, 313, 316, 318, 319, 320, 321, 322, 336, 347, 348, 349, 355, 364, 367, 374, 377, 378, 386, 400, 405, 409, 412, 413, 420, 428, 439, 440, 442, 444, 446, 461, 463, 465, 479, 480, 481, 482, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 564, 565, 566, 567, 568, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 609, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 688, 689, 690, 691, 692, 696, 848, 853, 856, 860, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 902, 924, 989, 991, 995, 1000, 1002, 1009, 1010, 1011, 1033, 1034, 1035, 1037, 1038, 1039, 1041, 1043, 1045, 1046, 1047, 1048], "fitfailedwarn": [1, 800, 803, 804, 806, 814, 823, 826, 827, 828, 831], "fitted_transform": 461, "fitter": 1015, "fitting_weight": 395, "fitzgerald": 1037, "fitzk": 1023, "five": [149, 162, 250, 258, 326, 329, 367, 529, 537, 543, 996, 1002, 1014, 1023, 1029], "five_imag": 412, "fix": [1, 43, 47, 58, 62, 70, 80, 103, 129, 139, 140, 142, 147, 149, 167, 168, 172, 175, 183, 186, 194, 209, 224, 243, 255, 267, 277, 299, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 348, 359, 360, 366, 368, 370, 371, 372, 376, 380, 384, 386, 387, 395, 404, 405, 408, 409, 411, 412, 414, 449, 459, 469, 502, 510, 529, 535, 538, 540, 546, 547, 557, 558, 562, 563, 587, 590, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 630, 653, 663, 668, 670, 684, 687, 691, 695, 707, 785, 797, 814, 821, 846, 847, 849, 852, 854, 855, 871, 874, 888, 912, 913, 923, 948, 967, 988, 995, 998, 999, 1002, 1009, 1019, 1027, 1028, 1030, 1031, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "fixed_classes_uniform_labelings_scor": 72, "fixed_vocabulary_": [587, 590], "fixedthresholdclassifi": [1, 155, 165, 258, 322, 403, 822, 1047, 1048], "fixm": 376, "fixtur": [360, 372], "fkaren27": 1043, "flach": [402, 999], "flach2008": 999, "flach2015": 999, "flag": [172, 240, 243, 258, 320, 370, 372, 373, 375, 395, 400, 461, 610, 611, 627, 673, 675, 728, 785, 920, 921, 1014, 1035, 1039, 1040, 1042, 1043, 1044, 1045, 1048], "flair": 1001, "flak": 1044, "flake8": 578, "flamari": 1049, "flanagan": [1038, 1039], "flander": [1047, 1048], "flat": [1, 78, 120, 184, 226, 227, 228, 262, 404, 411, 412, 437, 443, 445, 458, 507, 1006, 1029, 1030, 1045], "flat_grid": 238, "flatnonzero": [129, 196, 263, 272, 273, 781], "flatten": [54, 68, 229, 238, 262, 308, 333, 344, 378, 500, 567, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 853], "flatten_transform": [155, 567, 1036], "flatter": [43, 62], "flavanoid": [48, 369], "flaviomorelli": 1039, "flavor": [372, 1002], "flavour": 411, "flaw": [386, 411], "flaxman": [1031, 1033], "fledg": [361, 412], "fleet": 43, "fleme": 1044, "flennerhag": 1037, "fletcher": [995, 1029, 1033], "flexibl": [43, 62, 143, 178, 207, 263, 277, 305, 322, 333, 349, 379, 384, 398, 408, 414, 674, 904, 905, 988, 993, 995, 999, 1003, 1009, 1018, 1023, 1038, 1042], "flier": 49, "flink": 102, "flip": [124, 229, 581, 742, 948, 1001, 1033, 1042], "flip_i": 513, "flip_sign": 948, "float": [1, 46, 49, 51, 76, 80, 81, 86, 93, 94, 98, 99, 100, 103, 123, 175, 183, 195, 199, 229, 258, 263, 264, 268, 272, 343, 349, 359, 366, 367, 372, 381, 386, 400, 403, 404, 405, 412, 413, 415, 416, 417, 421, 423, 427, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 451, 452, 453, 454, 455, 456, 458, 459, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520, 522, 523, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 582, 583, 587, 590, 591, 592, 593, 594, 595, 596, 597, 601, 602, 610, 611, 613, 614, 615, 616, 617, 619, 620, 622, 623, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 759, 766, 769, 775, 776, 777, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 806, 814, 817, 820, 822, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 864, 867, 870, 871, 877, 878, 880, 882, 884, 885, 886, 887, 896, 897, 898, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 918, 927, 928, 930, 931, 934, 945, 946, 963, 973, 979, 984, 989, 999, 1000, 1002, 1003, 1009, 1014, 1015, 1029, 1030, 1031, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1049], "float16": 1038, "float32": [55, 145, 229, 302, 318, 360, 367, 372, 373, 374, 386, 398, 400, 555, 556, 557, 558, 561, 562, 563, 564, 592, 593, 640, 641, 658, 699, 763, 869, 912, 913, 914, 915, 928, 974, 975, 976, 1015, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049], "float64": [45, 50, 51, 52, 53, 86, 103, 105, 139, 145, 146, 147, 148, 154, 167, 183, 184, 185, 235, 239, 245, 258, 265, 272, 275, 310, 314, 317, 318, 319, 336, 360, 366, 372, 373, 374, 386, 403, 411, 412, 417, 455, 468, 469, 472, 475, 476, 477, 494, 495, 506, 507, 514, 515, 516, 518, 529, 535, 537, 540, 541, 543, 544, 546, 580, 581, 588, 590, 596, 641, 648, 650, 651, 654, 655, 656, 657, 658, 663, 669, 670, 673, 675, 680, 682, 683, 687, 699, 738, 814, 869, 877, 878, 885, 897, 906, 907, 909, 910, 913, 915, 925, 928, 930, 946, 969, 972, 974, 975, 976, 995, 1014, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1049], "float_info": 57, "floch": 1046, "floor": 53, "floor_x": 53, "flore": 1042, "florian": [1023, 1029, 1033, 1035, 1039, 1046], "florin": 1047, "flow": 374, "flowchart": [392, 408], "flower": [126, 128, 273, 504, 505, 999, 1018], "floyd": [367, 688, 996], "floydsoft": 1033, "fluctuat": [51, 93, 149, 207, 271, 1037], "flush": 214, "fly": [145, 377, 506, 507, 581, 1029, 1031, 1038], "flyingdutchman23": 1042, "flyingimmidev": 1029, "flynn": [1042, 1044], "fmax": 224, "fmi": [404, 731], "fmin_l_bfgs_b": [172, 610, 611], "fmt": [94, 217], "fn": [261, 321, 404, 712, 718, 729, 730, 731, 782, 783, 784, 787, 999, 1000], "fn_c": 273, "fna": [163, 369], "fnlwgt": [320, 494], "fnr": [261, 698, 727, 1049], "fo": 412, "focu": [43, 48, 120, 134, 167, 255, 294, 359, 377, 402, 411, 551, 552, 557, 559, 560, 678, 996, 999, 1002, 1009, 1018, 1019, 1022], "focus": [62, 109, 198, 281, 367, 372, 384, 996, 1009, 1018], "fokow": 1046, "fold": [1, 43, 100, 106, 109, 140, 142, 145, 162, 183, 198, 251, 258, 259, 260, 262, 263, 264, 265, 267, 274, 278, 311, 328, 343, 355, 367, 372, 375, 376, 385, 386, 395, 403, 404, 413, 434, 469, 491, 534, 565, 566, 593, 601, 647, 651, 653, 655, 659, 661, 663, 665, 673, 675, 702, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 835, 838, 885, 906, 909, 988, 995, 999, 1009, 1014, 1029, 1031, 1033, 1034, 1035, 1037, 1038, 1040, 1041, 1046, 1048], "folder": [1, 104, 367, 370, 372, 376, 380, 390, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 501, 1002], "folkman": 1036, "folloni": 1040, "follow": [0, 25, 43, 46, 57, 63, 64, 68, 72, 87, 88, 90, 96, 100, 103, 104, 118, 120, 129, 134, 137, 146, 147, 151, 158, 172, 173, 178, 182, 183, 184, 185, 186, 190, 192, 194, 196, 198, 207, 208, 221, 224, 234, 240, 241, 243, 255, 258, 261, 264, 273, 274, 278, 281, 304, 310, 311, 313, 314, 316, 317, 318, 321, 333, 343, 347, 348, 349, 351, 354, 355, 359, 360, 366, 367, 369, 370, 371, 372, 374, 376, 377, 378, 379, 380, 381, 384, 385, 386, 387, 390, 392, 395, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 419, 421, 423, 425, 426, 427, 428, 434, 438, 440, 442, 443, 444, 445, 446, 450, 458, 459, 460, 461, 462, 465, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 513, 532, 536, 538, 539, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 568, 580, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 627, 628, 629, 630, 631, 632, 633, 634, 646, 652, 658, 659, 670, 671, 680, 692, 694, 699, 705, 709, 712, 713, 718, 788, 819, 841, 846, 847, 848, 850, 852, 854, 855, 856, 863, 867, 868, 869, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 893, 902, 904, 905, 909, 912, 913, 914, 915, 919, 926, 941, 943, 947, 988, 989, 990, 991, 992, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1018, 1019, 1022, 1026, 1029, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049], "folwarczn\u00fd": 1046, "fonari": [1041, 1042], "fond": 1023, "fondat": 1023, "font": [146, 198, 220, 238, 916, 918], "font_manag": [112, 290, 335], "font_prop": 112, "font_siz": 308, "fontdict": [54, 74], "fontnam": [916, 1042], "fontproperti": [112, 290, 335], "fontsiz": [44, 47, 49, 54, 66, 70, 83, 93, 123, 142, 158, 170, 171, 173, 176, 184, 191, 199, 206, 212, 217, 227, 228, 252, 259, 263, 268, 269, 270, 275, 276, 302, 308, 342, 918], "fontweight": [93, 204], "foo": [374, 580, 1003], "food": [0, 369], "foot": 1017, "footer": [54, 102, 265, 347, 348, 367, 485, 486], "footnot": [1006, 1018], "footprint": [315, 318, 359, 361, 404, 409, 539, 1031, 1034, 1035, 1040, 1041, 1044], "fopenmp": [370, 373], "foral": [404, 414, 613], "forbid": [404, 411], "forbidden": [184, 411], "forc": [134, 167, 211, 277, 284, 308, 347, 366, 370, 399, 408, 411, 447, 454, 494, 605, 608, 646, 647, 652, 653, 657, 660, 661, 662, 663, 672, 673, 674, 681, 684, 687, 754, 778, 781, 822, 844, 845, 846, 847, 848, 850, 852, 854, 855, 856, 906, 907, 908, 909, 910, 928, 930, 931, 1009, 1025, 1034, 1037, 1038, 1039, 1041, 1042, 1043, 1045], "force_all_finit": [778, 928, 930, 931, 1040, 1043, 1048], "force_alpha": [265, 839, 840, 841, 843, 1044], "force_finit": [605, 608, 728, 785, 999, 1043], "force_int_remainder_col": [103, 154, 183, 184, 185, 235, 245, 310, 314, 317, 461, 464, 1049], "force_writ": [930, 931, 1047], "ford": 51, "forecast": [42, 43, 146, 149, 166, 174, 180, 209, 263, 264, 402, 403, 414, 489, 494, 560, 611, 615, 622, 623, 625, 701, 742, 745, 746, 748, 790, 821, 826, 827, 830, 999, 1018, 1020], "foreground": [75, 99], "foreign_work": 258, "foreman": 1036, "forese": 384, "forest": [1, 13, 50, 64, 67, 133, 139, 142, 144, 145, 147, 148, 149, 150, 152, 154, 156, 178, 180, 181, 188, 233, 261, 265, 297, 315, 322, 347, 353, 355, 365, 385, 386, 402, 413, 460, 461, 487, 488, 494, 496, 513, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 630, 634, 800, 805, 830, 837, 864, 878, 908, 912, 913, 914, 988, 989, 1000, 1007, 1015, 1020, 1021, 1025, 1026, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1038, 1046], "forest_import": 141, "forestclassifi": 1034, "forestcolumntransform": 154, "forestcov": 243, "forg": [313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 360, 373, 375, 376, 380, 390, 391], "forget": [184, 355, 360, 366, 376, 384, 409, 996], "forget_factor": [409, 536], "forgiv": 734, "forina": 369, "fork": [370, 372, 380, 384, 1018], "forkserv": 384, "form": [1, 43, 48, 57, 68, 77, 93, 100, 120, 156, 174, 175, 180, 183, 239, 240, 255, 264, 325, 355, 366, 369, 372, 374, 376, 386, 387, 401, 404, 407, 408, 409, 410, 411, 412, 414, 416, 418, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 453, 456, 460, 461, 462, 464, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 568, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 685, 687, 688, 689, 690, 691, 692, 693, 699, 797, 798, 799, 800, 803, 804, 805, 808, 810, 814, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 936, 941, 942, 943, 957, 960, 988, 990, 992, 993, 995, 996, 999, 1000, 1003, 1004, 1005, 1009, 1014, 1018, 1035, 1039, 1041, 1048], "formal": [386, 387, 404, 411, 844, 845, 996, 999, 1000, 1003], "format": [1, 47, 50, 51, 52, 59, 91, 94, 102, 111, 120, 129, 137, 142, 145, 147, 158, 159, 188, 191, 195, 207, 224, 247, 259, 269, 271, 272, 275, 279, 288, 289, 292, 293, 308, 313, 321, 322, 342, 351, 354, 359, 365, 371, 372, 374, 375, 380, 381, 385, 386, 398, 408, 411, 412, 428, 439, 440, 442, 444, 446, 447, 449, 456, 461, 465, 479, 480, 481, 482, 484, 486, 494, 495, 496, 506, 507, 508, 521, 525, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 549, 555, 556, 562, 563, 564, 565, 566, 567, 568, 580, 581, 582, 583, 586, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 646, 652, 658, 659, 660, 662, 666, 667, 668, 676, 677, 678, 688, 689, 692, 697, 711, 712, 713, 720, 739, 740, 751, 768, 791, 792, 833, 846, 847, 848, 850, 852, 853, 854, 855, 856, 857, 858, 859, 860, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 888, 891, 896, 897, 902, 904, 916, 930, 931, 954, 962, 966, 974, 975, 976, 977, 978, 979, 989, 999, 1002, 1007, 1009, 1010, 1013, 1015, 1025, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1040, 1042, 1044, 1046, 1047, 1048], "format_func": 289, "formatter_result": 91, "former": [51, 349, 403, 411, 412, 563, 802, 809, 818, 1001, 1029, 1035, 1038], "formerli": [211, 1030, 1033, 1035, 1036], "formul": [134, 167, 176, 201, 211, 273, 372, 404, 406, 409, 412, 414, 417, 472, 547, 548, 555, 562, 650, 651, 654, 655, 656, 658, 659, 665, 670, 763, 769, 798, 906, 909, 912, 914, 995, 999, 1000, 1003, 1009, 1021, 1025, 1046], "formula": [109, 110, 401, 404, 406, 417, 470, 472, 514, 515, 516, 589, 643, 646, 647, 650, 651, 652, 653, 654, 655, 656, 660, 661, 662, 663, 664, 676, 678, 704, 729, 730, 755, 764, 821, 988, 993, 995, 999, 1004, 1005, 1009, 1013, 1034, 1036, 1038, 1049], "forrest": [1040, 1041], "forsal": [57, 349, 367], "forsyth": 1037, "forth": 380, "fortin": [1029, 1031, 1032, 1033], "fortran": [416, 539, 646, 647, 652, 653, 660, 661, 662, 663, 665, 681, 684, 685, 686, 930, 931, 1029, 1032, 1033, 1037], "fortun": [0, 378, 411, 1042, 1043], "forum": 1017, "forward": [46, 134, 163, 240, 315, 372, 395, 398, 413, 506, 507, 537, 541, 551, 557, 558, 601, 668, 685, 686, 864, 868, 995, 1019, 1041, 1049], "foster": 1037, "fouchet": 1035, "found": [0, 45, 52, 57, 58, 59, 130, 141, 162, 167, 171, 173, 175, 211, 241, 258, 262, 265, 266, 267, 277, 309, 313, 316, 318, 319, 336, 349, 359, 361, 366, 369, 371, 372, 374, 384, 386, 387, 398, 401, 403, 404, 407, 408, 409, 411, 412, 414, 429, 438, 441, 442, 456, 469, 555, 556, 557, 558, 562, 563, 587, 589, 610, 611, 628, 636, 647, 651, 653, 655, 661, 663, 665, 671, 672, 674, 676, 678, 687, 688, 712, 719, 800, 803, 804, 814, 822, 841, 846, 847, 853, 875, 877, 878, 912, 913, 914, 915, 919, 927, 982, 986, 988, 991, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1009, 1013, 1014, 1015, 1019, 1022, 1029, 1032, 1033, 1036, 1037, 1039, 1043, 1046], "foundat": [0, 154, 258, 372, 402, 1002], "founder": 1023, "fouqu": 1029, "fouquet": [1045, 1046], "four": [64, 159, 175, 188, 193, 208, 251, 252, 258, 326, 333, 368, 372, 386, 555, 562, 719, 912, 914, 936, 995, 997, 998, 999, 1009], "fourier": [1, 23, 238, 638, 639, 640, 641, 642, 758, 759, 991], "fourier_approx_svm": 238, "fourier_scor": 238, "fourier_tim": 238, "fournier": 1038, "fourth": 142, "fowkl": [404, 731], "fowlk": [731, 1035], "fowlkes_mallows_scor": [1, 404, 999, 1035, 1037, 1049], "fox": [321, 412, 1045], "fp": [47, 258, 261, 321, 404, 712, 718, 729, 730, 731, 782, 783, 784, 787, 999, 1049], "fp_c": 273, "fpgawesom": 1043, "fpr": [1, 50, 234, 243, 258, 261, 273, 274, 379, 591, 595, 698, 702, 706, 727, 789, 999, 1026, 1029, 1045], "fpr_a": 273, "fpr_b": 273, "fpr_grid": 273, "fpr_score": 258, "fr": [529, 535, 658, 664, 685, 686, 758, 759, 997], "fraa\u00df": 1046, "frac": [63, 111, 112, 134, 261, 264, 271, 273, 316, 401, 402, 404, 406, 409, 410, 411, 412, 414, 427, 460, 462, 479, 480, 481, 552, 554, 556, 558, 560, 563, 566, 568, 611, 615, 619, 622, 623, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 669, 670, 672, 673, 678, 679, 680, 696, 709, 729, 730, 755, 769, 837, 838, 847, 855, 862, 905, 907, 910, 913, 915, 991, 993, 994, 995, 996, 997, 999, 1001, 1002, 1003, 1004, 1006, 1007, 1009, 1011, 1013, 1014, 1015], "frac12": [411, 991], "fractal": [163, 369], "fraction": [1, 43, 62, 64, 146, 149, 207, 214, 258, 271, 343, 348, 402, 408, 411, 435, 436, 446, 447, 453, 454, 513, 525, 555, 556, 557, 558, 562, 563, 564, 589, 592, 601, 666, 667, 668, 671, 676, 677, 678, 703, 721, 722, 723, 724, 734, 794, 796, 802, 806, 828, 829, 843, 871, 906, 907, 908, 912, 913, 914, 915, 966, 995, 999, 1002, 1006, 1007, 1009, 1014, 1015, 1019, 1030, 1031, 1032, 1043, 1046], "fragil": 655, "fragment": [88, 123, 376, 380], "frame": [43, 103, 126, 149, 172, 183, 184, 207, 258, 310, 320, 367, 372, 384, 387, 486, 487, 488, 490, 494, 498, 499, 500, 502, 503, 508, 1041], "frameon": [46, 213], "framework": [264, 359, 384, 386, 398, 404, 637, 688, 797, 995, 996, 1003, 1019, 1023, 1029, 1035], "fran": [1041, 1042, 1043], "franc": [310, 764], "francesco": [1041, 1044], "franci": [534, 658, 995, 1035], "francia": 1043, "francidona": 1039, "francisco": [412, 1011], "franck": [1044, 1046, 1047], "franco": 1039, "francoi": [1029, 1042], "francoisgoupil": 1043, "frank": [264, 835, 1000, 1034, 1038, 1039, 1049], "frankhui": 1037, "franki": 1042, "franz": 1037, "franziska": 1040, "fran\u00e7oi": [0, 356, 1032], "fraud": [258, 321, 408, 995, 1023], "fraudul": [258, 995, 1023], "fraudulent_accept": 258, "fraudulent_refus": 258, "fred": [102, 1029, 1042], "freddi": [1048, 1049], "freder": 1039, "frederick": 1042, "fredrik": 1037, "free": [44, 64, 88, 172, 173, 179, 206, 254, 304, 366, 371, 372, 373, 380, 384, 390, 412, 449, 608, 671, 860, 910, 988, 991, 995, 999, 1017, 1019, 1037], "freebsd": 375, "freedom": [43, 122, 172, 196, 198, 200, 264, 539, 656, 797, 995, 1032], "freeland": 1044, "freestand": 374, "freez": [165, 376, 390, 398, 609, 1023, 1037, 1048], "frei": [73, 437, 451, 1039], "freija": 1037, "freita": [1034, 1036, 1037], "frellwan": 1042, "fremtpl2": 224, "fremtpl2freq": 224, "fremtpl2sev": 224, "french": [224, 310], "freq": [183, 194, 349], "frequenc": [57, 64, 167, 184, 194, 203, 207, 237, 314, 315, 347, 348, 349, 367, 384, 402, 408, 409, 411, 412, 413, 549, 555, 557, 558, 559, 562, 587, 588, 589, 590, 603, 658, 659, 664, 666, 668, 674, 675, 676, 685, 686, 833, 868, 877, 878, 904, 906, 909, 912, 914, 936, 995, 996, 1001, 1009, 1013, 1015, 1031, 1033, 1034, 1040, 1047], "frequent": [72, 134, 179, 267, 274, 278, 348, 369, 372, 412, 549, 589, 630, 854, 877, 878, 881, 893, 989, 991, 999, 1013, 1019, 1047], "frequentist": 526, "fresh": [536, 1019, 1039], "fresh_restart": 536, "fresh_restarts_max_it": 536, "freund": [411, 551, 552], "fri": [43, 149, 184, 367], "frid": [1023, 1032], "friedman": [1, 137, 138, 148, 263, 406, 408, 411, 475, 514, 515, 516, 518, 556, 557, 558, 563, 592, 593, 834, 851, 912, 913, 915, 993, 995, 1000, 1006, 1015], "friedman2001": 411, "friedman2002": 411, "friedman_ms": [156, 556, 557, 558, 563, 913, 915, 1015, 1045, 1046], "friend": [418, 1033], "friendli": [120, 202, 360, 372, 380, 409, 897, 1011, 1012, 1018, 1019], "fring": [85, 404], "fritsch": [0, 394, 1029, 1030, 1032], "fritzk": 1044, "fro": [409, 536, 538, 545, 693, 995], "fro_2": [661, 663], "frobeniu": [54, 123, 440, 444, 456, 466, 467, 468, 469, 470, 471, 472, 473, 529, 535, 536, 538, 543, 544, 545, 995, 1036], "frobenius_norm": 688, "from": [0, 1, 37, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 182, 183, 184, 186, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 311, 314, 315, 316, 317, 318, 319, 320, 321, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 351, 352, 353, 354, 355, 359, 361, 364, 365, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 385, 386, 387, 389, 390, 395, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 924, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 959, 961, 962, 963, 964, 965, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 988, 989, 991, 993, 994, 995, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1020, 1023, 1025, 1026, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "from_cv_result": [274, 323, 702, 1049], "from_dtyp": [43, 143, 151, 154, 258, 318, 320, 323, 384, 411, 559, 560, 1046], "from_estim": [45, 48, 62, 64, 66, 67, 70, 89, 136, 139, 149, 150, 151, 155, 184, 201, 215, 220, 239, 244, 246, 257, 258, 261, 266, 267, 271, 277, 287, 292, 295, 309, 313, 314, 315, 316, 318, 319, 320, 321, 332, 333, 334, 335, 337, 338, 340, 345, 352, 379, 402, 435, 436, 631, 632, 633, 697, 698, 700, 701, 702, 707, 718, 727, 782, 784, 787, 788, 789, 806, 823, 828, 831, 994, 999, 1006, 1026, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "from_predict": [43, 52, 68, 107, 154, 183, 243, 260, 271, 273, 316, 325, 347, 379, 435, 436, 631, 697, 698, 700, 701, 702, 707, 718, 727, 782, 784, 787, 788, 789, 999, 1026, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "frombuffer_empti": 1036, "fromkei": [265, 919], "fromnumer": 378, "front": 1036, "frontal": 367, "frontend": 378, "frontier": [48, 220, 290, 335, 1005], "frozen": [1, 63, 165, 258, 322, 434, 609, 1020], "frozen_clf": 609, "frozenestim": [1, 61, 62, 63, 155, 164, 180, 258, 278, 321, 374, 402, 403, 434, 513, 658, 709, 799, 830, 1020, 1048], "frozenestimat": 63, "frozenestimatorfrozenestim": 63, "frsi": 1037, "fruit": [372, 1000], "fr\u00e9minvil": [1046, 1047], "fs1995": 411, "ftfy": 412, "ftorres16": [1043, 1044], "ftp": [163, 369, 682, 683], "ftwo_scor": [730, 742, 999], "fu": [658, 1033], "fuck": [1041, 1042], "fuent": [1030, 1031], "fugled": 1046, "fujikawa": 1036, "fukatani": 1036, "fulfil": [372, 404, 411, 800, 803, 804, 814, 864, 868, 995], "full": [0, 1, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 351, 352, 353, 354, 359, 360, 361, 365, 367, 370, 372, 374, 377, 380, 384, 386, 387, 390, 400, 404, 406, 408, 409, 412, 418, 421, 427, 428, 438, 442, 444, 446, 456, 485, 486, 489, 490, 494, 495, 498, 499, 500, 501, 502, 503, 505, 508, 533, 535, 539, 548, 557, 558, 565, 566, 632, 648, 650, 654, 658, 659, 669, 680, 721, 723, 728, 745, 746, 748, 750, 751, 753, 785, 790, 791, 797, 798, 811, 841, 936, 988, 995, 998, 1001, 1002, 1006, 1009, 1012, 1019, 1029, 1033, 1035, 1037, 1039, 1040, 1042, 1043, 1045, 1046, 1047, 1048, 1049], "full_data": 190, "full_lik": 98, "full_model": 286, "fulli": [52, 79, 88, 141, 146, 323, 359, 366, 367, 372, 386, 404, 410, 411, 413, 440, 444, 555, 556, 562, 563, 912, 913, 914, 915, 916, 918, 989, 995, 1004, 1012, 1018, 1042, 1043, 1049], "fullpap": 1012, "fultz": 1042, "fun": [416, 531, 1017, 1023], "fun_arg": [416, 531], "func": [50, 107, 139, 183, 191, 224, 297, 372, 400, 405, 462, 699, 868, 1009, 1035, 1037, 1046, 1047, 1049], "func_metr": 628, "func_min": [610, 611], "funcformatt": 289, "function": [1, 3, 27, 43, 44, 45, 46, 47, 52, 54, 58, 59, 64, 72, 80, 86, 87, 88, 90, 92, 99, 102, 103, 104, 107, 120, 123, 125, 126, 129, 132, 139, 140, 143, 144, 145, 146, 147, 148, 149, 159, 160, 162, 163, 165, 167, 170, 171, 172, 173, 174, 175, 179, 180, 182, 183, 184, 186, 189, 190, 193, 194, 201, 202, 204, 205, 207, 208, 209, 213, 214, 219, 222, 224, 226, 234, 236, 239, 240, 243, 244, 246, 247, 254, 256, 258, 262, 264, 265, 266, 267, 272, 273, 277, 279, 281, 284, 299, 302, 304, 311, 313, 314, 316, 317, 319, 321, 322, 323, 328, 330, 333, 334, 335, 336, 337, 338, 340, 343, 345, 347, 348, 352, 355, 359, 360, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 384, 385, 386, 390, 395, 398, 399, 402, 403, 404, 405, 406, 407, 409, 410, 412, 413, 415, 416, 419, 421, 423, 426, 427, 428, 434, 437, 440, 441, 442, 444, 445, 447, 449, 451, 454, 455, 456, 457, 458, 461, 462, 465, 466, 468, 469, 471, 475, 485, 486, 488, 490, 493, 494, 495, 501, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 570, 574, 580, 581, 587, 588, 590, 591, 592, 593, 594, 595, 597, 598, 599, 600, 601, 603, 606, 607, 608, 610, 611, 615, 619, 620, 622, 623, 627, 628, 631, 632, 633, 634, 635, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 687, 688, 689, 690, 691, 692, 693, 694, 698, 699, 700, 702, 703, 704, 706, 711, 716, 719, 721, 722, 723, 724, 727, 728, 732, 734, 735, 738, 740, 741, 742, 750, 755, 757, 761, 762, 763, 765, 768, 771, 774, 778, 779, 780, 781, 782, 783, 785, 789, 792, 793, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 811, 812, 814, 815, 816, 817, 818, 819, 820, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 873, 874, 876, 880, 881, 882, 883, 884, 885, 888, 890, 893, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 919, 928, 937, 939, 940, 941, 942, 947, 948, 957, 959, 960, 966, 967, 969, 972, 973, 982, 987, 988, 989, 990, 992, 994, 996, 997, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1012, 1013, 1015, 1018, 1019, 1020, 1021, 1025, 1026, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049], "functiontransform": [1, 43, 102, 139, 207, 224, 329, 398, 400, 461, 462, 1009, 1034, 1035, 1037, 1042, 1043, 1044, 1046, 1048], "functool": 224, "fundament": [72, 82, 112, 201, 348, 376, 384, 385, 407, 494, 536, 538, 545, 708, 995, 999, 1017], "funder": 0, "fung": 408, "funnel": [491, 492], "funni": 102, "furlanello": 743, "furrer": 1046, "further": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 62, 77, 103, 109, 116, 120, 137, 142, 144, 162, 167, 172, 183, 185, 190, 194, 226, 231, 240, 258, 261, 264, 265, 271, 318, 336, 348, 354, 359, 372, 384, 386, 398, 403, 404, 406, 409, 411, 412, 414, 441, 449, 459, 513, 530, 533, 581, 614, 622, 628, 658, 659, 666, 667, 668, 676, 677, 678, 691, 695, 737, 774, 778, 781, 792, 793, 840, 846, 847, 854, 855, 882, 884, 904, 906, 909, 948, 998, 999, 1001, 1002, 1003, 1005, 1007, 1009, 1013, 1014, 1038, 1042], "furthermor": [43, 52, 63, 72, 140, 184, 185, 243, 244, 246, 284, 347, 348, 359, 361, 379, 404, 409, 411, 412, 560, 589, 605, 619, 704, 736, 755, 757, 795, 862, 904, 995, 1007, 1032, 1036, 1049], "fuse": [373, 1035, 1045], "fusion": 384, "futur": [0, 52, 172, 208, 246, 316, 319, 372, 376, 380, 386, 387, 398, 408, 412, 494, 532, 635, 821, 1000, 1014, 1015, 1023, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "futurewarn": [372, 380, 1036, 1037, 1038, 1040, 1042, 1045, 1046, 1048, 1049], "fuxin": 642, "fw": 688, "fwe": 591, "f\u00e9lix": [1029, 1031, 1032, 1033, 1037], "f\u00fcr": 999, "g": [0, 25, 43, 47, 49, 51, 61, 62, 63, 64, 68, 86, 88, 98, 102, 113, 116, 127, 134, 137, 145, 146, 168, 169, 170, 175, 179, 182, 183, 193, 197, 207, 208, 209, 211, 224, 231, 239, 240, 249, 258, 264, 268, 269, 275, 283, 290, 309, 321, 328, 342, 343, 349, 355, 359, 364, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 384, 386, 395, 398, 400, 402, 404, 406, 408, 409, 411, 412, 413, 414, 416, 461, 501, 526, 529, 531, 532, 535, 539, 553, 554, 555, 556, 557, 559, 560, 562, 563, 565, 566, 567, 568, 580, 581, 587, 588, 590, 592, 593, 596, 601, 603, 611, 617, 622, 623, 630, 633, 634, 659, 664, 673, 674, 675, 677, 680, 686, 692, 697, 720, 728, 738, 740, 763, 778, 785, 788, 803, 804, 806, 818, 822, 823, 825, 826, 827, 828, 829, 831, 834, 839, 843, 846, 847, 848, 851, 853, 854, 855, 856, 860, 867, 869, 874, 877, 880, 882, 884, 885, 887, 889, 890, 891, 892, 893, 894, 895, 904, 912, 913, 914, 915, 947, 948, 960, 988, 989, 993, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1009, 1013, 1014, 1015, 1019, 1022, 1023, 1026, 1029, 1033, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049], "g0g0gadget": 1039, "g2015": 1006, "g_": 404, "g_i": [411, 649], "g_j": [648, 669, 680], "ga": 0, "gaaca": 175, "gaatattaggccga": 384, "gabor": 1043, "gabriel": [1037, 1038, 1039, 1042, 1043], "gael": [0, 393, 1019, 1023, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "gaetandecast": 1049, "gaido": 1038, "gaidon": 1029, "gain": [1, 86, 149, 228, 271, 284, 286, 320, 321, 326, 347, 348, 354, 371, 378, 380, 384, 411, 494, 530, 555, 559, 560, 562, 563, 726, 756, 797, 798, 833, 912, 914, 1000, 1004, 1012, 1015, 1032, 1036, 1039], "gain_matrix": 258, "galleri": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 351, 352, 353, 354, 367, 372, 374, 386, 390, 397, 1020, 1029, 1033, 1036], "galli": 1041, "gallopoulo": 409, "galvez": 1034, "gambl": 51, "gameiro": 1043, "gamma": [1, 43, 44, 45, 46, 48, 50, 66, 67, 68, 125, 155, 188, 220, 233, 238, 239, 245, 246, 262, 264, 266, 269, 275, 315, 325, 326, 327, 328, 330, 333, 335, 336, 339, 340, 342, 345, 407, 409, 411, 414, 449, 533, 560, 619, 620, 639, 640, 641, 643, 644, 645, 648, 680, 685, 691, 724, 747, 752, 759, 766, 775, 776, 777, 797, 811, 814, 899, 900, 901, 906, 907, 908, 909, 910, 988, 991, 995, 997, 1012, 1014, 1029, 1030, 1032, 1033, 1034, 1036, 1037, 1039, 1040, 1043, 1044, 1045], "gamma_": [533, 1045], "gamma_0": [249, 255], "gamma_2d_rang": 336, "gamma_bound": 620, "gamma_k": 407, "gamma_rang": 336, "gammaregressor": [1, 224, 314, 317, 322, 680, 995, 1040, 1043, 1044, 1048], "ganasekhar": 1049, "gandenberg": 1038, "ganesh": [1034, 1046], "ganevgv": 1039, "gangesh": 1041, "gangwar": 1036, "ganiev": [1034, 1035, 1036], "ganssl": 1036, "gap": [43, 52, 149, 347, 367, 408, 468, 469, 475, 587, 646, 647, 652, 653, 660, 661, 662, 663, 681, 684, 821, 912, 913, 914, 915, 995, 996, 1037, 1041, 1043], "garagecar": [143, 154], "garagefinish": 143, "garagetyp": 154, "garageyrblt": 107, "garbag": 1041, "garcia": 1042, "garc\u00eda": [1038, 1039, 1044], "gardin": 366, "gardner": [1037, 1038], "garg": [1039, 1040], "gargsya": 1039, "gari": [367, 1036], "garret": 1033, "garreta": [1031, 1032], "garrett": 1033, "garri": 369, "garriga": [270, 408, 829], "gasmi": 1043, "gaspari": [1048, 1049], "gasquez": 1036, "gate": [369, 1042], "gather": [317, 319, 380, 387, 404, 1009, 1023], "gatsbi": 1012, "gaug": 183, "gaull": 764, "gaurav": [1037, 1038, 1039, 1040, 1041, 1043], "gauravahlawat": [1037, 1038], "gaussian": [1, 7, 19, 28, 43, 44, 46, 48, 64, 66, 67, 70, 79, 80, 81, 88, 90, 94, 109, 110, 111, 112, 113, 118, 121, 122, 123, 127, 129, 135, 136, 142, 146, 150, 152, 179, 190, 193, 194, 196, 199, 205, 216, 217, 218, 219, 233, 237, 239, 251, 252, 289, 294, 297, 299, 307, 308, 330, 333, 340, 341, 364, 368, 374, 377, 386, 404, 406, 409, 410, 416, 449, 466, 467, 468, 469, 470, 471, 472, 473, 494, 502, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 522, 523, 528, 530, 542, 547, 548, 551, 561, 610, 611, 613, 614, 615, 617, 618, 619, 622, 623, 625, 627, 643, 644, 672, 677, 680, 703, 724, 741, 752, 776, 797, 798, 800, 814, 839, 840, 841, 842, 843, 844, 845, 849, 880, 884, 892, 896, 897, 898, 993, 995, 996, 997, 1005, 1020, 1021, 1023, 1024, 1025, 1029, 1030, 1032, 1033, 1035, 1036, 1037, 1039, 1041, 1043], "gaussian_filt": [53, 80, 81, 87], "gaussian_process": [1, 66, 67, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 180, 386, 414, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 643, 1000, 1020, 1032, 1035, 1036], "gaussianhmm": 1029, "gaussianmixtur": [1, 79, 90, 250, 251, 252, 253, 254, 255, 410, 797, 998, 1035, 1037, 1038, 1042, 1043, 1045, 1047, 1049], "gaussianmixturegaussianmixtur": 254, "gaussiannb": [1, 61, 62, 64, 67, 266, 355, 402, 411, 434, 567, 839, 840, 841, 843, 865, 993, 1000, 1001, 1033, 1034, 1035, 1037, 1042, 1045], "gaussiannois": 374, "gaussianprocessclassifi": [1, 66, 67, 168, 169, 170, 171, 175, 386, 414, 611, 619, 620, 622, 623, 1000, 1035, 1037, 1039, 1043, 1049], "gaussianprocessregressor": [1, 167, 172, 173, 174, 175, 176, 414, 610, 613, 614, 615, 616, 617, 621, 624, 625, 643, 1000, 1032, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "gaussianprocessregressorifit": 172, "gaussianrandomproject": [1, 897, 1011, 1030, 1043, 1045, 1046], "gauthier": 1043, "gauz": 1037, "gave": [64, 402, 800, 803, 804, 814, 871], "gavin": [628, 989], "gaynor": 398, "ga\u00ebl": [387, 1023], "gb": [156, 411, 551, 633], "gbc": 355, "gbd": 139, "gbdt": [139, 184, 258, 313, 314, 319, 377, 411], "gbdt_appli": 139, "gbdt_applyfunctiontransform": 139, "gbdt_cst": 314, "gbdt_leaves_yield": 139, "gbdt_model": 139, "gbdt_no_cst": [151, 314], "gbdt_pipelin": 154, "gbdt_with_monotonic_cst": 151, "gbdt_with_monotonic_cst_df": 151, "gbgradientboostingregressor": 156, "gbm": [145, 411, 1032], "gbm_early_stop": 144, "gbm_full": 144, "gbp": 1023, "gbr": 146, "gbr_l": 146, "gbrt": [43, 52, 207, 411], "gbrt_mean_poisson": 52, "gbrt_median": 52, "gbrt_percentile_5": 52, "gbrt_percentile_95": 52, "gbrt_predict": 43, "gbt": 359, "gc": 49, "gca": [47, 79, 95, 116, 122, 170, 212, 215, 217, 233, 246, 268, 292, 294, 305, 332, 334, 337, 338, 1006, 1026], "gcc": [370, 373, 378, 384], "gcf": [47, 1006], "gcv": [673, 675], "gcv_mode": [154, 183, 673, 1031], "gd": [51, 156], "gdb": [373, 375, 1022], "gdex1": 1039, "ge": [51, 990, 1001, 1041], "ge0": 1015, "gear": 1017, "geb": 57, "gebremichael": [1044, 1045], "gedeck": 1036, "geevarghes": 1044, "gefel": 999, "gegr": 412, "gei": 1031, "geiger": [1046, 1047], "geist": 369, "gelavizh": 1040, "gelder": 1040, "gemm": 1047, "gen": 781, "gen_batch": [1, 381, 952], "gen_cov": 111, "gen_even_slic": [1, 207, 381, 951], "gender": [245, 877, 1009], "gender_femal": 877, "gender_mal": 877, "gene": [175, 366, 401, 448, 511, 592, 593, 851, 884], "gener": [0, 1, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 57, 59, 62, 63, 64, 65, 66, 67, 68, 69, 72, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 89, 91, 92, 93, 94, 95, 98, 102, 103, 104, 105, 106, 107, 110, 112, 115, 116, 117, 120, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 158, 160, 161, 163, 165, 168, 169, 170, 171, 172, 175, 178, 179, 182, 183, 184, 185, 186, 188, 192, 193, 195, 196, 197, 198, 199, 200, 202, 204, 205, 206, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 255, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 281, 283, 284, 286, 287, 288, 289, 290, 292, 293, 294, 295, 297, 299, 300, 301, 304, 305, 306, 307, 308, 309, 310, 311, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 345, 347, 348, 349, 351, 352, 353, 354, 359, 360, 364, 365, 367, 369, 373, 374, 375, 376, 377, 378, 380, 381, 384, 385, 398, 401, 402, 404, 408, 410, 412, 413, 414, 416, 420, 425, 427, 434, 437, 440, 443, 444, 446, 449, 451, 455, 456, 457, 459, 461, 462, 464, 466, 469, 471, 479, 480, 481, 485, 488, 490, 493, 494, 495, 501, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 534, 536, 538, 539, 541, 542, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 568, 581, 582, 583, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 606, 607, 610, 611, 614, 615, 618, 619, 620, 622, 623, 627, 628, 629, 630, 631, 632, 633, 634, 635, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 669, 670, 671, 672, 673, 675, 677, 678, 679, 680, 685, 686, 689, 690, 691, 692, 693, 694, 695, 697, 698, 700, 701, 702, 704, 706, 717, 721, 723, 724, 737, 743, 757, 778, 781, 785, 793, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 834, 835, 836, 837, 838, 844, 845, 847, 849, 850, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 866, 867, 868, 869, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 889, 890, 892, 893, 894, 895, 896, 897, 904, 905, 906, 907, 909, 910, 913, 915, 916, 917, 918, 941, 942, 943, 947, 948, 951, 952, 965, 968, 969, 972, 987, 988, 989, 991, 993, 994, 996, 998, 999, 1000, 1002, 1004, 1005, 1006, 1007, 1011, 1012, 1014, 1015, 1020, 1021, 1022, 1023, 1025, 1026, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049], "generalis": [788, 999], "generaliz": [340, 411], "generate_data": [46, 69], "generate_dataset": 49, "generate_missing_valu": 149, "generate_onli": [941, 1039, 1048], "generate_synthetic_data": 53, "generickernelmixin": [175, 1039], "genericunivariateselect": [1, 413, 594, 595, 597, 598, 599, 601, 1043, 1045, 1046], "generos": 372, "genesi": [1043, 1045], "genet": 1018, "gennaro": [1048, 1049], "genoa": 369, "genom": [58, 511, 1018], "genotyp": 366, "gensim": 1018, "gentil": [369, 1041], "gentli": 409, "genvalen": [1041, 1042, 1043, 1044, 1045], "geodes": [226, 688, 996], "geoff": [835, 1000], "geoffrei": [861, 862, 1003, 1040, 1041, 1042, 1043, 1045], "geograph": [43, 50, 297, 367, 496], "geometr": [122, 404, 688, 704, 731, 757, 996, 1037], "geometri": [74, 404, 996, 1002], "geomspac": 319, "georg": [45, 367, 404, 1035, 1041, 1042, 1043, 1044], "georgi": [1037, 1040], "georgiamaydai": 1044, "geospati": [297, 410], "geovan": [1042, 1043, 1049], "geq": [237, 402, 409, 411, 995, 999, 1009, 1013, 1014], "ger": 412, "gerhard": [45, 367], "german_credit": 258, "germer": [1044, 1045], "geroldcsend": 1042, "geron": [1037, 1042, 1043], "gerstein": 511, "gertrud": 1036, "gertz": 447, "gervai": [1031, 1032], "gesa": 1041, "gesdd": 948, "gessei": 1048, "gesvd": 948, "get": [1, 2, 43, 44, 48, 51, 52, 55, 57, 72, 85, 89, 121, 125, 146, 149, 160, 163, 167, 172, 173, 178, 183, 184, 185, 186, 202, 209, 221, 224, 226, 240, 241, 262, 263, 265, 266, 268, 272, 275, 277, 281, 284, 289, 297, 305, 313, 320, 326, 329, 333, 336, 338, 341, 345, 347, 349, 351, 353, 360, 365, 366, 367, 370, 372, 373, 374, 375, 377, 378, 379, 386, 390, 398, 400, 402, 403, 404, 405, 406, 408, 409, 411, 412, 413, 414, 418, 420, 425, 427, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 459, 461, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 695, 699, 721, 722, 723, 724, 726, 732, 733, 742, 756, 763, 764, 769, 785, 788, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 826, 827, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 919, 938, 939, 940, 947, 948, 953, 957, 959, 988, 994, 995, 996, 998, 999, 1009, 1012, 1013, 1014, 1015, 1019, 1029, 1032, 1035, 1037, 1040, 1042, 1043, 1046], "get_adjacency_matrix": 55, "get_arrai": [844, 845], "get_bin_se": 445, "get_cmap": [62, 64, 341], "get_color": 46, "get_config": [1, 465, 781, 902, 967, 1044], "get_covari": [530, 532, 539], "get_data": [506, 507], "get_data_hom": [1, 47], "get_depth": [912, 913, 914, 915, 1038], "get_feature_nam": [316, 1037, 1038, 1040, 1041, 1042], "get_feature_names_out": [1, 54, 57, 183, 185, 316, 347, 348, 349, 367, 374, 386, 405, 412, 420, 425, 428, 439, 440, 442, 444, 446, 461, 464, 479, 480, 481, 482, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 564, 565, 566, 567, 568, 580, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 688, 689, 692, 848, 853, 856, 860, 863, 864, 866, 867, 868, 869, 870, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 1009, 1042, 1043, 1044, 1045, 1046, 1047], "get_figur": 134, "get_height": [47, 144], "get_indic": [57, 419, 448, 450], "get_initial_mean": 252, "get_legend_handles_label": [149, 201, 239, 266, 271], "get_lin": 300, "get_metadata_rout": [240, 418, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 461, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 609, 610, 611, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 956, 957, 958, 959, 960, 999, 1046], "get_metr": 699, "get_minibatch": 47, "get_n_cal": [844, 845], "get_n_leav": [912, 913, 914, 915, 1038], "get_n_split": [386, 801, 802, 805, 807, 808, 809, 810, 813, 815, 816, 817, 818, 819, 820, 821], "get_nam": 306, "get_output_feature_nam": 1043, "get_param": [265, 323, 375, 386, 414, 418, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 461, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 797, 798, 799, 800, 803, 804, 814, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 988, 1039, 1040, 1041, 1043, 1044], "get_precis": [466, 467, 468, 469, 470, 471, 472, 473, 530, 532, 539], "get_redirect": 55, "get_routing_for_object": [1, 240, 957], "get_scor": [1, 179, 320, 386, 733, 1036, 1045], "get_scorer_nam": [1, 403, 732, 999, 1043, 1046], "get_shap": [57, 419, 448, 450], "get_stop_word": [587, 588, 590], "get_submatrix": [419, 448, 450], "get_subplotspec": 379, "get_support": [159, 163, 315, 580, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 1031], "get_tag": 1, "get_tree_stat": [844, 845], "get_untrusted_typ": 398, "get_width": [47, 144], "get_x": [47, 144], "get_xaxi": [249, 294, 304], "get_xlim": [111, 204, 212, 304], "get_xticklabel": 275, "get_yaxi": [294, 304], "get_ybound": 86, "get_ylim": [204, 277, 304, 305], "getattr": [43, 47, 258, 304, 374, 386, 1045], "getgaurav2": 1039, "getmoredataget": 392, "gettempdir": 1002, "getter": [466, 467, 468, 469, 470, 471, 472, 473, 592, 593, 596], "geurt": [411, 553, 554, 555, 556, 563, 564, 914, 915], "gewili": [1044, 1045], "ghahramani": 899, "gharibi": 1039, "ghg": 1035, "ghislain": 1041, "gholdman1": 1040, "ghorai": 1037, "ghosh": [0, 394, 404, 1029, 1030, 1046, 1047], "gia": 1040, "giancarlo": 1043, "gianr": 1044, "gibb": [860, 1004, 1018], "gideon": 1039, "giessel": 1035, "gigant": [1037, 1039, 1044, 1045], "gijsber": 1043, "gil": [322, 359, 360, 373, 1032, 1037, 1038, 1041, 1042, 1046, 1048, 1049], "gilad": 1023, "gilberto": 1037, "gilbertson": [1043, 1044], "gilch": 1036, "gile": [1032, 1033], "gill": [0, 394, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "gilliam": 1036, "gilmor": 1033, "gim": 1041, "gini": [63, 64, 141, 185, 186, 207, 224, 245, 276, 315, 320, 354, 555, 562, 788, 912, 914, 988, 1007, 1015, 1037, 1038, 1045, 1046], "gionanidi": 1043, "giorgio": [1034, 1035, 1036, 1048], "giorgiop": 1034, "giotto": 1018, "giovanni": [1035, 1037], "gist": [372, 380, 1022], "gist_rainbow": 631, "git": [370, 374, 376, 378, 380, 1022, 1029, 1045, 1047, 1048], "github": [0, 51, 63, 103, 104, 139, 141, 150, 151, 154, 155, 156, 160, 172, 183, 184, 185, 192, 234, 235, 236, 240, 244, 245, 246, 247, 254, 258, 262, 263, 264, 265, 271, 276, 278, 284, 302, 310, 314, 315, 317, 318, 320, 323, 327, 353, 354, 370, 371, 375, 376, 377, 378, 380, 384, 386, 387, 398, 400, 692, 1018, 1022], "githubusercont": 51, "gitter": [1036, 1037], "giudic": 1041, "giusepp": [1037, 1038], "give": [1, 43, 51, 52, 53, 61, 62, 74, 79, 82, 93, 95, 97, 102, 103, 107, 122, 145, 167, 172, 176, 178, 183, 184, 198, 200, 207, 208, 209, 233, 255, 258, 261, 266, 273, 286, 290, 293, 302, 316, 317, 321, 322, 329, 359, 361, 367, 369, 371, 372, 374, 376, 378, 380, 384, 385, 386, 387, 392, 398, 401, 402, 404, 405, 406, 409, 411, 412, 414, 416, 429, 443, 444, 446, 448, 456, 469, 494, 497, 501, 531, 536, 547, 548, 549, 550, 555, 556, 562, 563, 564, 592, 593, 596, 606, 607, 638, 647, 661, 665, 676, 720, 730, 736, 739, 794, 800, 803, 804, 814, 825, 826, 827, 829, 844, 845, 846, 847, 848, 850, 851, 852, 854, 855, 856, 881, 882, 884, 885, 893, 995, 999, 1002, 1003, 1004, 1006, 1007, 1009, 1013, 1014, 1015, 1017, 1018, 1023, 1029, 1033, 1036, 1037, 1039, 1040, 1041, 1043, 1045, 1049], "given": [1, 7, 30, 46, 49, 50, 52, 64, 66, 72, 82, 91, 93, 109, 115, 121, 125, 140, 149, 150, 152, 154, 155, 165, 167, 174, 183, 184, 194, 207, 208, 211, 224, 227, 233, 237, 238, 240, 242, 243, 244, 258, 260, 264, 265, 266, 267, 273, 278, 287, 290, 291, 292, 306, 310, 316, 321, 322, 347, 348, 349, 353, 354, 359, 361, 367, 371, 372, 374, 378, 380, 381, 384, 386, 398, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 430, 431, 432, 433, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 453, 455, 456, 457, 458, 460, 461, 462, 464, 466, 467, 468, 469, 470, 471, 472, 473, 475, 478, 479, 480, 481, 484, 491, 494, 499, 501, 503, 521, 531, 534, 536, 537, 538, 541, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 587, 588, 589, 590, 592, 593, 600, 606, 607, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 631, 632, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 687, 688, 690, 691, 697, 698, 699, 700, 701, 702, 704, 705, 706, 712, 714, 717, 718, 720, 724, 726, 727, 734, 736, 737, 740, 752, 755, 756, 758, 759, 764, 774, 778, 781, 782, 784, 787, 788, 789, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 809, 812, 814, 818, 822, 823, 825, 826, 827, 828, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 890, 891, 893, 896, 897, 898, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 919, 923, 934, 935, 936, 956, 957, 959, 982, 986, 988, 991, 993, 995, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1012, 1013, 1014, 1015, 1023, 1029, 1030, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049], "gkevinyen5418": 1037, "gkf": 408, "gkiasta": 1042, "gl": [163, 369], "glad": 372, "glanc": [281, 371], "glaser": [1037, 1038], "glass": 367, "glasso": [406, 475], "glaxosmithklin": 51, "glemaitr": [1038, 1039, 1041], "glen": 1042, "glenn": 1035, "glennfrutiz": 1043, "glibc": 380, "glm": [207, 224, 314, 648, 669, 680, 995, 1029, 1040], "glm_freq": 224, "glm_pure_premium": 224, "glm_sev": 224, "glmnet": [646, 647, 1029], "glob": 47, "global": [1, 2, 47, 49, 77, 90, 120, 207, 226, 227, 247, 273, 301, 314, 322, 355, 359, 360, 378, 384, 386, 400, 404, 414, 439, 449, 459, 465, 589, 626, 632, 688, 691, 692, 695, 707, 729, 730, 738, 783, 784, 787, 788, 818, 885, 900, 902, 988, 996, 999, 1005, 1009, 1015, 1023, 1037, 1044, 1048], "global_dtyp": 360, "global_random_se": 360, "globular": [95, 404], "glorot": [861, 862], "glossari": [1, 355, 372, 374, 378, 415, 416, 434, 437, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 454, 455, 456, 457, 458, 459, 461, 464, 466, 469, 471, 485, 488, 490, 493, 495, 501, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 582, 583, 593, 601, 606, 607, 610, 611, 627, 632, 634, 639, 640, 641, 642, 646, 647, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 671, 672, 673, 674, 675, 676, 677, 678, 679, 687, 688, 689, 690, 691, 692, 693, 694, 695, 701, 774, 778, 781, 793, 797, 798, 800, 801, 802, 803, 804, 805, 806, 812, 814, 815, 816, 817, 818, 819, 820, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 846, 847, 849, 850, 852, 853, 854, 855, 857, 858, 860, 861, 862, 863, 866, 869, 881, 885, 893, 896, 897, 899, 900, 904, 905, 906, 909, 912, 913, 914, 915, 920, 924, 947, 948, 969, 972, 988, 989, 995, 1037], "glu": [163, 369], "glushchenkov": 1043, "gl\u00f2ria": [1042, 1044], "gm": 798, "gmil": 367, "gmm": [79, 92, 180, 248, 250, 253, 254, 255, 502, 510, 798, 819, 998, 1020, 1029, 1030, 1033, 1034, 1035], "gmm_": 1030, "gmm_bic_scor": 254, "gmmgmm": 392, "gmmhmm": [1029, 1030], "gnb": [61, 62, 64, 411, 567, 1001], "gnb_isoton": 62, "gnb_sigmoid": 62, "gneit": 999, "gneiting2007": 999, "gneiting2009": 999, "gneiting2014": 999, "gnu": 370, "go": [1, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 351, 352, 353, 354, 367, 372, 376, 377, 381, 387, 390, 400, 405, 409, 411, 413, 440, 559, 560, 562, 563, 720, 883, 925, 951, 952, 1009, 1015, 1019, 1040], "goadrich": 999, "goal": [49, 55, 58, 64, 85, 90, 116, 149, 178, 184, 188, 207, 221, 224, 242, 243, 258, 261, 262, 322, 347, 360, 361, 367, 374, 376, 377, 378, 386, 387, 389, 395, 409, 413, 540, 546, 589, 592, 739, 999, 1002, 1004, 1005, 1013, 1014, 1015, 1023, 1037], "god": [57, 347, 348], "godbol": 783, "goe": [0, 43, 72, 139, 183, 354, 372, 411, 468, 469, 475, 555, 556, 562, 563, 564, 912, 913, 914, 915, 1009, 1013], "goetz": [1036, 1037], "goh": 1046, "gohlk": 1034, "goix": [0, 1033, 1035, 1036, 1037, 1038], "gold": [69, 203, 208, 210, 213, 216, 220, 223, 250, 255, 271, 290, 335, 378], "goldbaum": [1047, 1048], "goldberg": [853, 1002], "goldfarb": 995, "goldman": 51, "goldstein": [184, 1006], "goldszmidt": 1011, "gollonet": [0, 394], "goltermann": 1041, "golub": [532, 842, 884], "golubin": 1036, "gome": [1042, 1043, 1047, 1049], "gomez": [1037, 1044, 1046], "gommer": [1032, 1035, 1036, 1044, 1045, 1047, 1048], "goncalo": [1036, 1037], "gone": [1029, 1030], "gonthier": 1040, "gonz\u00e1lez": 1049, "goo": [163, 369], "good": [43, 48, 58, 62, 64, 75, 79, 80, 82, 85, 86, 88, 91, 106, 112, 116, 129, 140, 142, 145, 146, 149, 162, 168, 172, 178, 183, 194, 198, 207, 208, 213, 221, 231, 233, 237, 240, 243, 250, 252, 257, 258, 263, 264, 270, 277, 302, 309, 310, 315, 321, 325, 330, 336, 347, 348, 355, 359, 360, 361, 371, 373, 374, 375, 378, 380, 384, 386, 401, 402, 404, 406, 408, 409, 411, 412, 413, 414, 434, 436, 441, 532, 557, 559, 560, 589, 630, 640, 647, 648, 656, 658, 659, 661, 669, 680, 690, 694, 723, 731, 742, 764, 829, 898, 923, 948, 988, 994, 995, 996, 999, 1000, 1002, 1003, 1004, 1006, 1007, 1009, 1013, 1014, 1015, 1019, 1023, 1035], "goodby": 372, "goodman": [1029, 1034], "googl": [0, 55, 384, 400, 404, 439, 948, 1029], "gool": 999, "gorb": 1041, "gordon": [57, 1035, 1039, 1041, 1043, 1049], "gorelli": [1037, 1038, 1042, 1044, 1047, 1048, 1049], "gorgolewski": [0, 394, 1029, 1032], "gorilla": 347, "gorinevski": 995, "gorodkin": 743, "gorro\u00f1o": [1040, 1042, 1043], "got": [173, 240, 271, 355, 377, 549, 649, 665, 1042, 1044, 1046, 1048], "gotten": [995, 1009], "gou": 404, "gouillart": 1029, "goupil": [0, 356], "goutam": 1049, "gov": [55, 369], "govern": [183, 355, 359, 372, 386, 1023], "govin": 1035, "go\u0144da": 1044, "gp": [170, 175, 414, 610, 611, 622, 1035], "gp_fix": 168, "gp_opt": 168, "gpapadok": [1039, 1043], "gpassino": 1033, "gpc": [1, 67, 136, 142, 152, 166, 172, 173, 175, 180, 216, 217, 218, 219, 239, 253, 299, 307, 330, 341, 502, 610, 611, 613, 614, 619, 620, 622, 623, 703, 741, 1020, 1021, 1025, 1039], "gpc_rbf_anisotrop": 169, "gpc_rbf_isotrop": 169, "gperftool": 375, "gplearn": 1018, "gpr": [1, 121, 166, 168, 174, 176, 180, 494, 610, 611, 613, 614, 615, 616, 621, 622, 623, 624, 625, 1020, 1021, 1025, 1039], "gpr_model": 176, "gprof": 375, "gpu": [318, 321, 400, 1003, 1019, 1046], "gr": 897, "grab": 372, "gracefulli": [1032, 1033], "grad": [378, 1023], "gradd": 378, "grade": 999, "gradi": 1039, "gradient": [1, 13, 46, 52, 66, 80, 99, 103, 133, 134, 135, 138, 139, 141, 151, 154, 156, 172, 173, 174, 180, 185, 186, 189, 191, 196, 209, 233, 238, 265, 290, 300, 304, 305, 308, 310, 317, 320, 335, 386, 403, 404, 414, 449, 459, 463, 464, 485, 487, 494, 499, 501, 518, 551, 552, 557, 558, 559, 560, 562, 563, 585, 610, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 631, 632, 634, 635, 639, 648, 649, 658, 659, 668, 669, 672, 674, 676, 677, 678, 680, 687, 692, 694, 695, 741, 742, 748, 750, 790, 800, 803, 804, 805, 821, 827, 830, 860, 861, 862, 865, 877, 878, 908, 972, 996, 999, 1002, 1003, 1004, 1005, 1018, 1020, 1021, 1025, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1042, 1044, 1046], "gradient_boost": [139, 1031, 1032, 1038], "gradientboost": [139, 1034], "gradientboostingclassifi": [1, 139, 145, 148, 306, 384, 551, 559, 632, 633, 1000, 1006, 1029, 1030, 1031, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046], "gradientboostingclassifier__learning_r": 306, "gradientboostingregressor": [1, 46, 144, 146, 147, 154, 156, 359, 377, 384, 552, 560, 632, 633, 995, 999, 1000, 1029, 1030, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1046], "gradual": [211, 861, 862, 941, 943, 1013], "graduat": 369, "graham": [1034, 1035], "grai": [45, 53, 80, 81, 83, 84, 86, 120, 123, 148, 163, 205, 207, 224, 237, 241, 242, 271, 301, 369, 409, 491, 492, 500, 519, 1040], "grain": [43, 67, 72, 201, 238, 255, 306, 378, 412, 443, 1019], "gram": [1, 180, 189, 240, 345, 374, 409, 412, 486, 522, 546, 587, 588, 589, 590, 646, 647, 650, 651, 652, 653, 654, 655, 656, 660, 661, 662, 663, 664, 665, 681, 682, 683, 684, 685, 686, 767, 988, 995, 1009, 1014, 1020, 1029, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1040, 1042, 1043], "gram_test": 1014, "gram_train": 1014, "gramfort": [0, 387, 393, 1023, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "grammar": 372, "grant": [0, 243, 258, 372], "granular": 1048, "grape": 405, "graph": [1, 55, 62, 74, 79, 80, 99, 100, 175, 226, 261, 284, 286, 328, 359, 372, 375, 386, 401, 406, 415, 438, 441, 442, 449, 450, 454, 459, 460, 468, 469, 475, 509, 584, 585, 688, 691, 692, 695, 782, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858, 859, 900, 954, 996, 999, 1002, 1004, 1012, 1015, 1018, 1023, 1029, 1036, 1037, 1039, 1042, 1044], "graph_laplacian": 1036, "graph_lasso": [475, 1037], "graph_model": 286, "graph_shortest_path": [381, 1042], "graphic": [7, 57, 112, 184, 329, 347, 348, 349, 367, 378, 404, 406, 409, 792, 793, 797, 834, 916, 999, 1000, 1006, 1018], "graphical_lasso": [1, 381, 468, 469, 1037, 1045], "graphicallasso": [1, 113, 406, 466, 467, 469, 470, 471, 472, 473, 475, 1037, 1045], "graphicallassocv": [1, 51, 113, 395, 406, 468, 470, 471, 472, 473, 475, 1037, 1041, 1043, 1045, 1047], "graphicallassocvifit": 51, "graphlasso": [468, 1034, 1037], "graphlassocv": [469, 1031, 1037], "graphviz": [916, 1015, 1048], "grasp": [278, 1014, 1019], "grassberg": [606, 607], "grate": 1023, "graviton": 380, "gray_r": [68, 123, 170, 227, 302, 325, 326], "grayscal": 68, "greasemonkei": 380, "great": [88, 182, 183, 355, 372, 384, 409, 764, 1019, 1023, 1029, 1036], "greater": [62, 72, 118, 134, 136, 183, 223, 238, 243, 252, 258, 270, 283, 290, 291, 351, 359, 377, 386, 402, 403, 404, 407, 411, 438, 442, 443, 446, 449, 460, 469, 534, 539, 555, 556, 557, 558, 559, 560, 562, 563, 564, 592, 593, 596, 610, 611, 628, 640, 642, 664, 666, 667, 671, 676, 677, 678, 692, 707, 709, 712, 720, 727, 735, 736, 739, 740, 742, 782, 788, 789, 795, 797, 798, 834, 846, 847, 854, 855, 861, 862, 867, 882, 894, 898, 901, 904, 905, 912, 913, 914, 915, 948, 968, 988, 994, 995, 996, 999, 1000, 1005, 1009, 1014, 1015, 1032, 1037, 1040, 1042, 1043, 1044, 1046, 1049], "greater_is_bett": [146, 321, 742, 999], "greatest": [88, 390, 404, 871, 1037], "greatli": [238, 318, 372, 380, 449, 1002, 1015, 1035, 1043], "greedi": [163, 411, 413, 444, 446, 457, 557, 558, 601, 995, 1015], "greedili": [116, 163, 404, 408, 413, 457], "greek": [51, 55, 59, 71, 86, 99, 123, 180, 404, 459, 1020], "green": [63, 112, 118, 137, 146, 151, 167, 188, 231, 263, 300, 305, 309, 314, 320, 386, 1000, 1037, 1038, 1040, 1041], "greenhal": 1037, "greg": [1023, 1035, 1036, 1038, 1039], "gregori": [1035, 1039, 1040, 1041, 1042], "gregorystrubel": 1042, "gregov": 1037, "grei": [44, 274, 304, 343, 367, 1049], "grep": 372, "greyscal": 302, "grid": [1, 45, 47, 49, 50, 58, 62, 63, 64, 77, 87, 94, 103, 104, 105, 106, 109, 113, 142, 152, 158, 160, 162, 171, 180, 182, 183, 184, 198, 224, 231, 238, 239, 240, 244, 249, 254, 256, 258, 261, 265, 268, 269, 271, 276, 283, 286, 288, 289, 297, 302, 306, 307, 309, 323, 333, 335, 336, 347, 367, 374, 379, 384, 386, 399, 405, 408, 410, 411, 412, 445, 458, 461, 469, 496, 500, 513, 520, 631, 632, 633, 647, 650, 653, 654, 656, 659, 661, 663, 676, 713, 728, 730, 742, 785, 788, 800, 803, 804, 811, 814, 816, 830, 831, 864, 909, 992, 994, 999, 1002, 1006, 1019, 1020, 1025, 1029, 1032, 1033, 1034, 1036, 1037, 1043, 1045, 1046, 1047, 1048, 1049], "grid_encod": 307, "grid_model": 286, "grid_posit": [62, 64], "grid_resolut": [184, 315, 334, 631, 632, 633], "grid_scores_": [1035, 1041, 1042], "grid_search": [106, 140, 245, 254, 262, 272, 320, 405, 1031, 1032, 1033, 1034, 1035, 1036], "grid_siz": [50, 94, 297, 367, 496], "grid_to_graph": [1, 81, 84, 87, 404, 412, 1042], "grid_tograph": 1032, "grid_valu": [184, 633, 1006, 1045], "gridsearch": [87, 109, 275], "gridsearchcv": [1, 43, 87, 101, 103, 105, 106, 109, 127, 140, 180, 239, 245, 254, 256, 258, 262, 264, 265, 269, 272, 275, 281, 286, 288, 302, 306, 315, 319, 320, 322, 336, 340, 355, 360, 374, 384, 386, 395, 400, 405, 408, 411, 414, 418, 500, 518, 538, 539, 574, 598, 606, 653, 703, 730, 742, 811, 814, 864, 874, 904, 912, 988, 995, 999, 1003, 1013, 1014, 1020, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1046, 1047, 1048, 1049], "gridsearchcvifit": [104, 254, 258, 262, 263, 264], "gridsearchcvinot": 245, "gridsiz": 237, "gridspec": [62, 64, 98, 249, 379], "gridspecfromsubplotspec": 379, "griffith": [1037, 1038], "grigorev": 1034, "grigorio": 734, "grime": [689, 693, 996], "grinsztajn": 1046, "grisel": [0, 387, 393, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "griva": [1043, 1044], "grlivarea": 143, "grobler": [0, 394, 1029, 1030, 1031, 1032], "groceryheist": 1042, "groenen": [690, 694, 996], "grok": 484, "groothui": [627, 989], "grother": 369, "ground": [1, 27, 58, 68, 75, 82, 90, 91, 94, 109, 113, 116, 123, 150, 175, 194, 203, 207, 208, 243, 255, 267, 348, 386, 404, 703, 704, 705, 708, 712, 713, 714, 715, 717, 718, 721, 723, 724, 726, 728, 729, 730, 734, 736, 737, 738, 739, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 783, 784, 785, 786, 787, 790, 791, 795, 796, 999, 1012, 1037], "ground_truth": [88, 291], "group": [0, 1, 51, 72, 75, 88, 91, 93, 184, 186, 207, 227, 240, 255, 259, 310, 320, 327, 348, 354, 367, 374, 377, 386, 387, 395, 404, 410, 411, 412, 429, 443, 493, 587, 588, 590, 593, 718, 788, 800, 801, 802, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 823, 825, 826, 827, 828, 829, 831, 877, 878, 914, 915, 941, 943, 995, 996, 998, 999, 1000, 1009, 1015, 1016, 1018, 1035, 1036, 1037, 1038, 1041, 1042, 1043, 1045, 1046, 1047, 1048], "group_1": 877, "group_2": 877, "group_3": 877, "group_by_dynam": 172, "group_df": 214, "group_kfold": 801, "group_prior": 259, "groupbi": [43, 149, 184, 214, 224], "groupkfold": [1, 259, 269, 320, 395, 408, 593, 805, 806, 807, 808, 809, 818, 823, 825, 826, 827, 828, 831, 1035, 1042, 1048], "groupshufflesplit": [1, 259, 408, 1035], "grow": [43, 52, 74, 188, 194, 286, 343, 349, 359, 384, 400, 406, 411, 412, 555, 556, 557, 558, 562, 563, 564, 810, 844, 845, 912, 913, 914, 915, 988, 999, 1002, 1015, 1023, 1032, 1033], "grower": [149, 411, 559, 560, 562, 563], "grown": [369, 411, 551, 552, 553, 554, 555, 556, 562, 563, 912, 913, 914, 915, 1015], "growth": [999, 1034, 1035], "grumman": 51, "grusak": 1039, "gryllo": [1034, 1037], "gryze": [1031, 1034], "grzegorz": [1036, 1039], "gs_time": 275, "gsh": 275, "gsh_time": 275, "gsiisg": 1044, "gsk": 51, "gss": [408, 802], "gt": [68, 103, 104, 139, 154, 160, 183, 184, 185, 235, 245, 247, 254, 262, 263, 265, 276, 310, 314, 317, 372, 376, 392], "gu": [1040, 1041, 1043], "guan": 1039, "guangguo": 1035, "guarante": [46, 47, 64, 111, 112, 149, 183, 214, 237, 283, 284, 304, 348, 355, 361, 366, 372, 380, 381, 398, 404, 408, 409, 412, 443, 534, 645, 658, 659, 668, 672, 674, 676, 678, 687, 694, 802, 817, 820, 844, 845, 882, 884, 887, 889, 890, 891, 892, 893, 894, 895, 897, 898, 911, 930, 931, 991, 995, 996, 998, 999, 1002, 1007, 1011, 1015, 1039, 1047], "gubri": [1037, 1038], "gudmalwar": 1041, "gued": 1047, "guerin": [1035, 1036], "guess": [55, 134, 142, 408, 411, 412, 530, 536, 538, 539, 545, 788, 999, 1013], "guestrin": 411, "guha": 1044, "gui": [1030, 1040], "guid": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 52, 62, 64, 88, 101, 120, 140, 176, 180, 183, 184, 196, 209, 226, 240, 271, 290, 291, 294, 310, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 370, 371, 372, 377, 378, 379, 380, 385, 386, 387, 392, 395, 405, 411, 415, 416, 417, 418, 421, 427, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 454, 456, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 619, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 697, 698, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 918, 944, 985, 999, 1000, 1029, 1030, 1031, 1032, 1034, 1036, 1038, 1039, 1046, 1047, 1048, 1049], "guidanc": [384, 414, 632, 697, 698, 700, 702, 988, 999], "guidelin": [1, 25, 371, 375, 377, 378, 380, 404, 411], "guiel": 492, "guilherm": 1032, "guillaum": [0, 393, 1023, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "guillem": [1038, 1039, 1044], "guillemot": [0, 1035, 1036], "guillermo": 1043, "guiniol": 1036, "guitar": 1044, "guitton": 1041, "guiweb": 1042, "gulati": [1034, 1035, 1036], "gun": [57, 367], "gunduz": 1047, "gunesbayir": [1044, 1045], "gunnar": [533, 948], "guntitat": 1048, "guo": 1042, "guoci": 1036, "gupta": [898, 1011, 1036, 1037, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048], "gustafson": [1044, 1045], "gustav": 1035, "gustavo": [1037, 1038, 1043], "gutierrez": 1039, "guttman": 694, "guyon": [513, 592, 593, 999], "guyon2015": 999, "guzman": 1049, "gwulf": [1033, 1034], "gyeongja": 1047, "gz": [47, 376, 390, 506, 507], "gzip": 1029, "g\u00e9ron": 1037, "g\u00f3rski": [1040, 1041], "g\u00f6khan": [44, 409, 533], "g\u00f6n\u00fcl": 1047, "g\u00fcnther": [1042, 1046], "h": [44, 45, 52, 91, 120, 121, 134, 135, 152, 163, 169, 183, 251, 289, 292, 299, 306, 317, 330, 332, 349, 369, 378, 402, 404, 406, 409, 410, 411, 412, 415, 441, 517, 530, 533, 536, 538, 545, 551, 565, 566, 581, 589, 606, 607, 689, 693, 704, 708, 757, 839, 843, 844, 845, 850, 860, 875, 884, 991, 993, 995, 996, 997, 999, 1001, 1003, 1004, 1013, 1015, 1035, 1040, 1044, 1045, 1046], "h1998": 411, "h2009": 1006, "h4dr1en": 1039, "h5py": 366, "h_": 995, "h_i": [409, 1004], "h_init": 378, "h_j": 1004, "h_l": 993, "h_m": 411, "h_pad": [120, 142, 352], "h_samples_": 860, "ha": [0, 43, 44, 47, 50, 51, 52, 62, 66, 70, 72, 79, 83, 88, 89, 90, 93, 106, 111, 112, 116, 120, 132, 139, 142, 144, 146, 147, 149, 151, 161, 162, 167, 172, 173, 174, 179, 183, 184, 185, 186, 188, 202, 207, 208, 209, 213, 223, 224, 226, 233, 237, 239, 240, 243, 244, 247, 249, 250, 252, 254, 255, 258, 259, 262, 263, 264, 267, 268, 270, 275, 276, 283, 287, 290, 291, 292, 294, 301, 304, 305, 307, 309, 313, 314, 315, 316, 317, 319, 321, 322, 323, 325, 328, 336, 340, 341, 342, 347, 354, 355, 359, 360, 361, 366, 367, 369, 370, 371, 372, 373, 374, 376, 377, 380, 381, 384, 385, 386, 387, 390, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 416, 429, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 458, 459, 460, 461, 462, 464, 466, 467, 468, 469, 470, 471, 472, 473, 475, 479, 480, 481, 482, 491, 492, 495, 496, 506, 507, 514, 524, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 609, 610, 611, 619, 627, 628, 629, 630, 632, 633, 634, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 685, 687, 688, 689, 690, 691, 692, 694, 695, 702, 711, 713, 720, 722, 731, 741, 763, 774, 778, 779, 780, 789, 793, 797, 798, 800, 801, 803, 804, 805, 806, 807, 814, 818, 821, 822, 823, 828, 829, 832, 833, 835, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 864, 867, 868, 869, 870, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 919, 921, 929, 930, 931, 950, 968, 983, 988, 989, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1011, 1012, 1013, 1014, 1015, 1019, 1022, 1023, 1026, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "haan": 1038, "haar": [53, 1046], "haas": 1039, "habchi": 1039, "haberland": [1044, 1045], "haberth\u00fcr": 1036, "hack": [47, 49], "had": [43, 48, 81, 146, 149, 172, 240, 304, 310, 316, 355, 372, 373, 380, 395, 412, 415, 441, 989, 999, 1023, 1029, 1030, 1036, 1037, 1038, 1039, 1040, 1044], "hadamard": 374, "haddad": 1036, "hadrien": [1036, 1039], "hadshirt": 1039, "haenel": 1032, "haesun": [1041, 1044, 1045, 1048, 1049], "hafner": 1042, "hagai": 797, "hagberg": 55, "hahn": [1036, 1037], "haiat": 1041, "haidar": [1042, 1043], "hail": 310, "hailei": [1039, 1040], "hain": 367, "haitz": [1040, 1042, 1043], "hakaa1": [1036, 1037], "hal": [545, 658, 758, 759, 997], "halchenko": [0, 394, 1029, 1030, 1031, 1032, 1035, 1036, 1037, 1038, 1045, 1049], "hale": [1031, 1043], "half": [1, 43, 61, 123, 149, 238, 242, 262, 264, 276, 367, 368, 409, 411, 460, 520, 560, 592, 596, 601, 770, 862, 863, 871, 913, 999, 1002, 1015], "half_cal": 596, "half_selector": 596, "halfbath": 143, "halford": [1037, 1044, 1045], "halkidi": 404, "halko": [409, 533, 539, 542, 947, 948], "hall": [995, 1036, 1040], "hallock": 1035, "halpert": [692, 996], "halv": [1, 158, 180, 256, 268, 272, 399, 513, 562, 578, 800, 803, 804, 909, 1020, 1025, 1041], "halvic": 1041, "halvinggridsearchcv": [1, 275, 276, 315, 395, 400, 578, 804, 988, 1041, 1043, 1044, 1046, 1047, 1048], "halvingrandomsearchcv": [1, 146, 276, 315, 395, 400, 578, 803, 988, 1041, 1043, 1044, 1045, 1046, 1047, 1048], "halvingrandomsearchcvifit": 276, "halwai": 1035, "ham": [1, 46, 447, 454, 580, 699, 703, 709, 734, 741, 778, 779, 780, 796, 1002], "hamada": 1041, "hamdi": [1046, 1047], "hammerbach": 1033, "hamming_loss": [1, 46, 400, 703, 796, 999, 1031, 1035, 1038, 1049], "hammingdist": 699, "hammoudeh": 1038, "hamoumi": 1042, "hampu": 1033, "hamza": 1049, "hamzeh": [0, 1032, 1033], "han": [404, 439, 447, 454, 1029, 1037, 1038, 1042], "hancock": 1039, "hand": [44, 65, 66, 84, 86, 116, 122, 123, 125, 140, 146, 158, 161, 172, 180, 183, 184, 201, 202, 211, 230, 236, 237, 239, 240, 243, 257, 258, 261, 266, 273, 278, 288, 325, 326, 336, 353, 359, 366, 367, 369, 372, 374, 378, 380, 385, 409, 410, 411, 413, 421, 427, 500, 643, 697, 713, 788, 830, 885, 909, 988, 992, 995, 999, 1001, 1003, 1007, 1012, 1014, 1020, 1023], "handbook": [720, 740, 999], "handi": [82, 103, 348, 349, 373, 1045], "handk": 1045, "handl": [1, 43, 48, 103, 140, 143, 147, 149, 150, 154, 188, 194, 201, 239, 240, 258, 266, 271, 273, 281, 283, 284, 291, 310, 313, 320, 347, 349, 354, 359, 364, 366, 372, 373, 374, 381, 382, 384, 386, 404, 411, 412, 414, 494, 542, 576, 580, 581, 587, 588, 590, 610, 635, 646, 647, 652, 658, 659, 660, 661, 662, 668, 675, 676, 678, 681, 720, 788, 868, 877, 878, 904, 905, 909, 916, 920, 949, 957, 960, 996, 999, 1000, 1001, 1002, 1005, 1007, 1014, 1015, 1018, 1019, 1023, 1025, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "handle_data": 47, "handle_endtag": 47, "handle_starttag": 47, "handle_unknown": [43, 103, 139, 143, 154, 183, 184, 185, 235, 243, 245, 247, 310, 314, 317, 877, 878, 1009, 1033, 1037, 1041, 1042, 1048], "handler": 1040, "handler_map": 291, "handlerpathcollect": 291, "handletextpad": 352, "handpick": 233, "handprint": 369, "handwritten": [51, 71, 80, 85, 90, 92, 94, 97, 139, 161, 180, 225, 226, 228, 230, 237, 252, 262, 294, 301, 302, 325, 326, 348, 365, 404, 411, 444, 500, 539, 542, 547, 564, 688, 689, 690, 691, 692, 704, 705, 717, 737, 793, 795, 853, 865, 874, 884, 897, 996, 1002, 1020, 1025], "hang": [372, 1039, 1040], "hanjun": [1048, 1049], "hank": 1032, "hanmin": [0, 394, 1036, 1037, 1038, 1039, 1040, 1048], "hann": 1029, "hanna": [1033, 1034, 1040], "hannah": [1039, 1041, 1043], "hannel": [1037, 1038], "hannoun": 1049, "hansen": 1037, "hansin": [1043, 1044], "hanu\u0161": 1046, "hanxiang": [679, 995], "hao": [1040, 1041, 1043, 1044], "haoi": 1046, "haoran": 1037, "haoyin": [1040, 1042, 1043], "happen": [1, 44, 64, 139, 196, 258, 304, 310, 348, 355, 359, 360, 370, 371, 372, 374, 376, 377, 378, 384, 386, 387, 390, 398, 404, 406, 408, 411, 434, 513, 570, 658, 785, 882, 884, 904, 941, 995, 999, 1000, 1014, 1019, 1037, 1041, 1042, 1044, 1045, 1046, 1047, 1049], "happi": [183, 258, 347, 384, 387, 818, 819], "haqu": [1031, 1032, 1033], "harabasz": [1, 710], "harabaz": 1035, "hard": [48, 155, 207, 233, 237, 264, 266, 361, 371, 384, 386, 403, 404, 409, 412, 532, 539, 567, 676, 906, 907, 908, 909, 910, 995, 1012, 1014, 1015, 1019, 1038, 1039], "hardcod": [437, 451, 1037], "harder": [273, 274, 308, 367, 371, 374, 380, 384, 404, 513, 559, 560], "hardest": 392, "hardin": 112, "hardli": [88, 606, 607], "hardwar": [57, 329, 349, 359, 360, 367, 370, 384, 390, 398, 400, 1018, 1043, 1044], "hare": 995, "harfouch": 1045, "harikrishnan": 1031, "harizo": [1035, 1036], "harm": [347, 374, 412, 795], "harmanan": [1046, 1047], "harmon": [43, 72, 348, 404, 533, 539, 729, 730, 736, 783, 795, 999], "haroldfox": [1037, 1038], "harper": 1036, "harri": [1033, 1035, 1041, 1042, 1049], "harsanyi": 1045, "harsh": [421, 434, 466, 547, 548, 549, 551, 553, 555, 557, 559, 562, 565, 567, 610, 658, 666, 668, 674, 675, 676, 799, 822, 832, 833, 834, 835, 839, 840, 841, 842, 843, 846, 851, 854, 861, 899, 900, 904, 906, 909, 912, 914, 1039, 1041, 1044], "harshit5674": 1044, "hart": [369, 993, 1037], "hartong": 1040, "harutaka": 1042, "harvest": 310, "has_fit_paramet": [1, 381], "hasan": 1044, "hasattr": [79, 89, 95, 113, 132, 142, 224, 237, 299, 306, 347, 386, 419, 423, 429, 961, 1039], "haseeb": [1042, 1043], "hash": [1, 47, 52, 133, 180, 348, 349, 359, 361, 364, 372, 375, 384, 411, 512, 542, 555, 564, 580, 581, 588, 640, 839, 965, 991, 1020, 1025, 1030, 1033, 1036], "hashabl": [386, 872, 875, 1010], "hashcode55": 1035, "hasher": [152, 349, 412], "hashingvector": [1, 47, 349, 361, 412, 486, 587, 589, 590, 1030, 1036, 1037, 1038, 1039, 1042], "hashlib": 47, "hasil": 1033, "hasn": 395, "hassaan": [1037, 1038], "hassan": [1042, 1048], "hassen": 1029, "hassoun": 1044, "hasti": [1, 134, 137, 138, 148, 163, 196, 263, 369, 408, 411, 517, 518, 551, 557, 558, 628, 656, 721, 723, 724, 834, 851, 897, 912, 913, 989, 993, 995, 1000, 1006, 1011, 1013, 1015], "hat": [112, 129, 260, 264, 289, 316, 370, 402, 406, 410, 411, 709, 990, 995, 996, 999, 1001, 1003], "hathidara": 1041, "hatwar": [1037, 1038], "hauck": 1035, "hausamann": [1037, 1038], "haussler": 175, "hav": 392, "have": [0, 1, 25, 43, 44, 46, 47, 48, 50, 51, 52, 53, 62, 63, 64, 66, 72, 74, 77, 78, 80, 81, 83, 86, 88, 90, 93, 95, 97, 98, 102, 103, 109, 111, 116, 118, 125, 134, 141, 142, 143, 144, 146, 149, 159, 160, 163, 167, 168, 172, 173, 174, 178, 179, 182, 183, 184, 185, 186, 188, 190, 194, 205, 207, 208, 209, 211, 224, 230, 233, 235, 240, 241, 243, 244, 250, 251, 252, 254, 257, 258, 261, 264, 265, 267, 270, 271, 277, 278, 279, 281, 284, 286, 287, 290, 291, 304, 309, 310, 311, 313, 315, 316, 320, 322, 323, 326, 327, 328, 333, 339, 340, 341, 343, 347, 348, 354, 355, 359, 360, 361, 366, 367, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 384, 385, 386, 387, 390, 395, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 429, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 461, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 484, 490, 492, 493, 494, 506, 507, 512, 521, 522, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 580, 581, 582, 583, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 632, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 685, 687, 688, 689, 690, 691, 692, 698, 699, 702, 704, 705, 711, 712, 715, 720, 726, 727, 731, 736, 756, 757, 758, 759, 782, 785, 786, 792, 795, 797, 798, 799, 800, 803, 804, 805, 806, 811, 814, 818, 822, 823, 825, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 889, 890, 892, 893, 894, 895, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 923, 930, 932, 934, 936, 948, 973, 988, 989, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1022, 1023, 1026, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "havelabeleddatado": 392, "haversin": [1, 297, 410, 699, 762, 764, 1002, 1038, 1041], "haversine_dist": [1, 762, 1038], "haversinedist": 699, "hawaii": 172, "haxbi": 0, "haya": 1043, "hayashi": 1037, "hazen": 869, "hbgt": 149, "hd": 51, "hdb": [88, 443], "hdbscan": [1, 71, 79, 82, 98, 180, 237, 441, 510, 884, 989, 1018, 1020, 1024, 1025, 1045, 1046, 1047], "hdbscan_min_cluster_s": 79, "hdbscan_min_sampl": 79, "hdf5": 366, "hdl": [163, 369], "hdmetor": 1035, "hdz": 1049, "he": [372, 726, 756, 861, 862, 894, 895, 999, 1036, 1043, 1044], "head": [0, 52, 63, 103, 172, 183, 196, 198, 224, 247, 254, 310, 313, 318, 372, 380, 393, 409, 830, 1023, 1034, 1035, 1044, 1045, 1046, 1047, 1048, 1049], "head_width": 63, "header": [54, 102, 265, 347, 348, 367, 370, 412, 485, 486, 800, 803, 804, 814], "heali": 404, "health": 321, "heap": 447, "heapq": 460, "heard": 372, "heart": 243, "heat": [154, 336, 404, 449, 459, 695], "heatingqc": 154, "heatmap": [184, 186, 190, 194, 275, 318, 336, 632, 1006], "heatmap_kw": 632, "heatmaps_": 632, "heavei": 1037, "heavi": [209, 384, 401, 1019], "heavier": [129, 406, 995], "heavili": [198, 359, 360, 372, 380, 649, 655, 778, 1016], "heavy_rain": [43, 184], "hebei": 404, "hedlund": 1045, "hedyati": 1033, "hee": [1036, 1039], "heer": 1040, "hegd": 1046, "heidelberg": [172, 404, 409, 533, 696, 726, 756, 999], "height": [47, 54, 86, 123, 143, 144, 163, 304, 310, 320, 347, 410, 443, 491, 492, 504, 585], "heightpet_catpet_dogf64f64f64": 320, "heikki": 1011, "heilman": [1033, 1034], "heitz": 310, "held": [43, 47, 103, 127, 147, 185, 214, 251, 267, 272, 283, 408, 411, 557, 558, 559, 560, 701, 800, 803, 804, 814, 861, 862, 874, 988, 989, 998, 1007], "helder": [1033, 1042, 1043, 1049], "heldout_scor": 145, "helen": 318, "heli": 1036, "hello": [372, 380, 961, 965], "helloifeven": 961, "helm": [1047, 1048], "helmu": 1033, "help": [0, 41, 43, 48, 50, 88, 102, 106, 125, 130, 184, 194, 205, 224, 226, 258, 263, 265, 267, 277, 281, 302, 322, 333, 336, 349, 355, 359, 360, 372, 373, 374, 375, 376, 377, 378, 380, 381, 386, 387, 389, 398, 400, 404, 405, 408, 412, 414, 428, 534, 576, 627, 650, 654, 665, 685, 686, 692, 714, 840, 912, 913, 914, 915, 989, 993, 994, 996, 998, 999, 1001, 1003, 1009, 1010, 1015, 1017, 1018, 1019, 1022, 1023, 1035, 1036, 1037, 1040, 1043, 1047], "helper": [44, 45, 123, 224, 275, 365, 374, 375, 385, 408, 465, 574, 902, 987, 1029, 1036, 1037, 1038, 1042, 1049], "helvetica": [916, 918], "heme": 1046, "hempstalk": 1036, "henc": [72, 93, 104, 183, 211, 237, 258, 273, 336, 347, 348, 359, 367, 374, 376, 378, 386, 390, 404, 408, 411, 412, 484, 506, 537, 539, 540, 541, 561, 589, 643, 646, 652, 660, 662, 672, 687, 704, 705, 709, 715, 731, 757, 786, 795, 816, 819, 820, 839, 840, 841, 842, 843, 879, 957, 996, 998, 999, 1000, 1005, 1006, 1009, 1019, 1036, 1037, 1040, 1041, 1043], "hendrik": [0, 394, 1029, 1032, 1033, 1034, 1035], "henri": [1034, 1035, 1036, 1037, 1039, 1040, 1041, 1043, 1044, 1049], "henriqu": 1048, "henrymooresc": [1043, 1044], "hepe": [679, 995], "here": [43, 47, 48, 51, 52, 53, 55, 64, 90, 91, 99, 109, 113, 118, 122, 123, 125, 127, 128, 130, 134, 137, 140, 143, 147, 149, 154, 155, 160, 163, 167, 175, 176, 183, 184, 185, 188, 190, 194, 198, 202, 207, 211, 213, 221, 222, 224, 226, 228, 229, 233, 238, 240, 243, 244, 250, 251, 252, 257, 258, 261, 262, 264, 266, 267, 269, 271, 273, 274, 276, 277, 278, 281, 284, 286, 293, 296, 300, 301, 302, 306, 309, 315, 317, 320, 322, 325, 327, 336, 340, 343, 345, 349, 351, 353, 355, 359, 360, 361, 366, 367, 370, 371, 372, 373, 374, 377, 378, 380, 384, 385, 395, 398, 401, 403, 404, 405, 407, 408, 409, 410, 411, 412, 415, 417, 434, 437, 438, 439, 440, 441, 442, 443, 444, 446, 449, 461, 469, 472, 534, 536, 537, 541, 542, 561, 565, 566, 567, 568, 580, 581, 583, 587, 590, 593, 601, 609, 628, 630, 647, 651, 653, 655, 661, 663, 665, 673, 675, 689, 691, 695, 699, 712, 726, 756, 794, 799, 800, 803, 804, 806, 814, 822, 823, 824, 825, 826, 827, 828, 829, 831, 840, 844, 845, 868, 876, 879, 882, 885, 896, 897, 907, 966, 988, 991, 995, 996, 997, 998, 999, 1002, 1005, 1009, 1011, 1012, 1013, 1014, 1018, 1019, 1022, 1023, 1029, 1037, 1042], "hereaft": 387, "hereund": 1005, "herilalaina": [1036, 1037, 1039], "hermano": [1044, 1045], "hermida": [1038, 1042], "hernandez": 999, "hern\u00e1ndez": 999, "hero": [406, 417, 472], "herrou": 1043, "hershei": 999, "hertel": 1046, "herv": 1033, "hervieu": 1029, "herv\u00e9": 1033, "heryanto": 1036, "hesit": 372, "hessian": [226, 227, 228, 411, 559, 560, 648, 658, 659, 669, 680, 689, 693, 995, 1003, 1024, 1025, 1044, 1048], "hessian_tol": [689, 693], "heterogen": [43, 47, 48, 61, 88, 101, 103, 180, 184, 207, 247, 309, 313, 364, 366, 384, 461, 485, 539, 580, 590, 713, 864, 868, 904, 996, 1006, 1009, 1018, 1020, 1025, 1033, 1037, 1039, 1040, 1047], "heteroscedast": [120, 127, 146, 209, 409, 880, 892], "heteroschedast": 999, "heuer": 1032, "heurist": [51, 54, 145, 243, 347, 360, 404, 413, 446, 449, 458, 459, 506, 507, 535, 537, 544, 676, 677, 678, 691, 695, 803, 804, 906, 907, 908, 909, 910, 935, 996, 997, 1002, 1013, 1015, 1023, 1029, 1030, 1034, 1038, 1041, 1042], "hexbin": 237, "hexdigest": 47, "hgbdt": 140, "hgbdt_model": 184, "hgbdt_model_without_interact": 184, "hgbdt_preprocessor": 184, "hgbt": [140, 149, 411], "hgbt_cst": 149, "hgbt_no_cst": 149, "hgbt_quantil": 149, "hhchen1105": 1048, "hhu": 1038, "hi": [0, 405, 999], "hibon": 1036, "hida": [1044, 1045], "hidden": [43, 184, 301, 302, 372, 380, 401, 409, 860, 861, 862, 1003, 1004, 1018, 1029, 1040], "hidden_layer_s": [184, 244, 299, 301, 861, 862, 1003], "hide": [52, 78, 372, 380, 408, 839, 840, 841, 842, 843, 1032, 1037, 1045], "hideaki": 1043, "hierarch": [1, 53, 59, 71, 74, 75, 79, 80, 85, 86, 87, 89, 90, 180, 186, 230, 317, 354, 386, 412, 438, 440, 442, 443, 502, 510, 512, 520, 528, 545, 731, 857, 884, 1016, 1020, 1024, 1025, 1029, 1032, 1033, 1045], "hierarchi": [76, 186, 372, 447, 453, 460, 1004], "higgin": [1046, 1047], "high": [0, 37, 43, 48, 50, 51, 62, 64, 67, 72, 75, 79, 82, 88, 90, 95, 98, 102, 106, 111, 112, 122, 123, 137, 139, 140, 141, 146, 147, 149, 150, 152, 155, 163, 167, 173, 179, 182, 184, 185, 186, 194, 204, 205, 208, 209, 211, 220, 226, 227, 228, 233, 237, 249, 255, 262, 266, 270, 271, 290, 291, 299, 301, 306, 308, 309, 310, 311, 319, 328, 333, 335, 336, 347, 348, 353, 359, 367, 369, 372, 377, 380, 381, 384, 385, 401, 402, 403, 404, 408, 410, 411, 412, 413, 414, 441, 444, 446, 447, 449, 466, 469, 479, 480, 481, 561, 564, 565, 566, 644, 670, 671, 679, 689, 692, 693, 726, 731, 742, 746, 756, 789, 792, 808, 810, 844, 845, 849, 878, 879, 883, 885, 906, 908, 909, 968, 988, 993, 994, 995, 996, 998, 999, 1002, 1003, 1005, 1007, 1009, 1011, 1014, 1015, 1016, 1018, 1019, 1029, 1030, 1032, 1033, 1037, 1040, 1041, 1042, 1043, 1044], "high_cardin": 310, "high_cardinality_featur": 310, "high_i": 204, "high_precision_cv_result": 262, "high_recall_cv_result": 262, "high_x": 204, "higher": [43, 52, 90, 111, 123, 127, 134, 137, 139, 140, 146, 150, 161, 167, 169, 174, 175, 183, 184, 185, 188, 201, 205, 207, 208, 211, 224, 230, 231, 255, 257, 258, 262, 264, 267, 279, 289, 309, 336, 340, 347, 348, 349, 353, 355, 359, 367, 370, 374, 401, 403, 404, 406, 411, 413, 414, 415, 441, 445, 446, 468, 475, 507, 530, 537, 541, 546, 551, 552, 559, 560, 571, 587, 590, 606, 607, 619, 627, 631, 635, 637, 646, 647, 652, 653, 660, 661, 662, 663, 676, 678, 679, 704, 724, 728, 752, 785, 797, 800, 803, 804, 806, 814, 823, 828, 831, 850, 853, 879, 896, 897, 898, 904, 905, 906, 907, 908, 909, 910, 917, 991, 995, 996, 998, 999, 1002, 1006, 1009, 1013, 1014, 1030, 1035, 1037, 1044, 1046], "highest": [1, 55, 63, 66, 113, 155, 159, 163, 211, 262, 264, 275, 315, 347, 372, 384, 402, 404, 408, 411, 413, 434, 553, 555, 562, 591, 594, 595, 597, 598, 599, 602, 603, 605, 631, 635, 637, 726, 756, 794, 797, 800, 803, 804, 814, 901, 912, 950, 988, 995, 999, 1000, 1003, 1013, 1015, 1041], "highest_protocol": 398, "highli": [43, 48, 63, 64, 104, 111, 112, 122, 130, 150, 194, 204, 212, 258, 264, 267, 273, 300, 340, 348, 359, 360, 372, 378, 384, 402, 404, 408, 411, 412, 449, 459, 494, 561, 671, 692, 812, 814, 860, 995, 999, 1002, 1003, 1005, 1013, 1014, 1017, 1018], "highlight": [43, 54, 88, 103, 111, 118, 132, 138, 139, 141, 151, 163, 165, 167, 168, 173, 178, 179, 184, 185, 188, 196, 201, 207, 209, 224, 235, 240, 244, 246, 247, 258, 259, 260, 263, 276, 278, 283, 286, 308, 310, 328, 347, 349, 372, 376, 377, 380, 384, 414, 440, 443, 444, 461, 464, 487, 488, 494, 499, 500, 502, 510, 513, 519, 522, 536, 539, 555, 559, 560, 562, 563, 565, 598, 601, 609, 628, 630, 632, 634, 640, 646, 648, 652, 658, 669, 676, 680, 688, 697, 701, 702, 717, 718, 732, 742, 748, 778, 788, 795, 799, 800, 801, 803, 804, 806, 814, 822, 823, 826, 827, 830, 846, 848, 864, 865, 869, 874, 877, 878, 879, 883, 884, 885, 901, 902, 904, 909, 912, 913, 923, 931, 941, 943, 987, 996, 999, 1007, 1009, 1014, 1020, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "highlight_min": [146, 198], "higuera": 366, "hila": 404, "hilbert": [212, 870, 991, 1009], "hilferti": 111, "hill": [404, 445, 458, 1039], "him": 412, "himanshu": [1040, 1043], "hind": 1043, "hinder": 1039, "hing": [1, 62, 216, 218, 272, 333, 334, 338, 340, 386, 666, 676, 735, 904, 911, 995, 1013, 1014], "hinge_loss": [1, 340, 999, 1033, 1041, 1042], "hinrich": 409, "hint": [183, 359, 373, 377, 395, 445, 999], "hinton": [692, 853, 860, 861, 862, 996, 1002, 1003, 1004], "hintz": 1035, "hiramatsu": 1046, "hirofumi": [1040, 1041], "hirsch": 1037, "hirschberg": [404, 717, 737, 795], "hirzel": 1042, "hispan": 183, "hist": [43, 62, 64, 86, 107, 136, 140, 207, 209, 237, 243, 258, 270, 289, 304, 308, 310, 317, 320, 411], "hist_drop": 143, "hist_n": 143, "hist_nbin": 304, "hist_no_interact": 318, "hist_one_hot": 143, "hist_ordin": 143, "hist_quantil": 317, "hist_x0": 304, "hist_x1": 304, "histgradientb": 258, "histgradientboost": 1041, "histgradientboostingclassifi": [1, 66, 139, 140, 258, 313, 314, 315, 316, 318, 320, 323, 355, 360, 384, 398, 557, 562, 632, 633, 989, 1018, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "histgradientboostingclassifierhistgradientboostingclassifi": 258, "histgradientboostingclassifierifit": 258, "histgradientboostingregressor": [1, 43, 46, 52, 135, 140, 143, 146, 147, 149, 151, 154, 178, 184, 207, 310, 313, 314, 315, 316, 318, 319, 320, 323, 384, 411, 558, 563, 632, 633, 635, 989, 999, 1006, 1018, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "histgradientboostingregressor__interaction_cst": 184, "histgradientboostingregressor__max_depth": 143, "histgradientboostingregressor__max_it": 143, "histgradientboostingregressorifit": [151, 318], "histogram": [1, 52, 62, 64, 86, 133, 135, 139, 143, 144, 146, 147, 151, 180, 207, 214, 237, 265, 270, 289, 304, 315, 317, 319, 320, 402, 487, 494, 557, 558, 559, 560, 562, 563, 632, 642, 742, 748, 758, 759, 790, 800, 805, 821, 827, 830, 991, 997, 1009, 1020, 1024, 1025, 1041, 1044, 1046], "histor": [51, 207, 258, 996, 1019], "histori": [51, 376, 557, 558, 1029], "hit": [209, 378], "hitesh": 1041, "hjortkj\u00e6r": 1043, "hkey_local_machin": 390, "hleb": [1042, 1044, 1045, 1046, 1048, 1049], "hline": 122, "hlle": 996, "hmasdev": 1043, "hmc": 51, "hmm": [1029, 1030, 1031, 1032, 1034], "hmmlearn": 1018, "hn": 378, "hnyk": [1035, 1036], "ho": [411, 553, 554, 999, 1034, 1037, 1038, 1043], "hoang": [1038, 1039], "hobson": 1035, "hoc": [162, 163, 165, 180, 256, 258, 267, 281, 321, 328, 386, 403, 494, 658, 816, 822, 827, 865, 884, 1020], "hochberg": [594, 1035, 1036], "hochreit": [401, 719], "hockei": [57, 367], "hoctor": 1041, "hod": 258, "hoda1394": 1041, "hoenig": 1029, "hoesli": 411, "hoffman": [409, 534, 1034, 1041], "hogan": 1037, "hoh": 1037, "hold": [0, 47, 52, 63, 64, 207, 211, 240, 258, 265, 354, 365, 372, 373, 374, 386, 402, 404, 408, 411, 412, 414, 501, 555, 559, 562, 588, 632, 633, 634, 736, 800, 803, 804, 814, 840, 871, 872, 877, 878, 885, 888, 912, 914, 989, 993, 999, 1003, 1013, 1014, 1015, 1037, 1041, 1047], "holdgraf": 1037, "holdselig": 412, "hole": [180, 225, 226, 231, 528, 692, 693, 996, 1020, 1043], "holger": 1036, "holidai": [43, 184], "holm": [835, 1000, 1046], "holman": 1044, "holmstr\u00f6m": 1031, "holohan": [1044, 1046], "holt": [0, 394, 1029], "holub": 532, "holzer": 1049, "home": [1, 6, 51, 52, 72, 154, 171, 173, 175, 250, 267, 302, 318, 367, 370, 380, 390, 483, 489, 497, 679, 1023], "homebrew": [375, 390], "homepag": [367, 528, 1015], "homm": 1044, "homo": 91, "homogen": [1, 72, 73, 74, 79, 80, 82, 88, 91, 348, 367, 384, 386, 406, 408, 411, 414, 443, 614, 704, 717, 731, 736, 737, 757, 795, 996, 997, 999, 1038], "homogeneity_completeness_v_measur": [1, 404, 1038], "homogeneity_scor": [1, 73, 82, 91, 348, 404, 717, 736, 795, 999], "homomorph": 1018, "homoscedast": [127, 236, 308, 999, 1037], "homoschedast": 999, "honda": 51, "honei": 993, "hong": [1035, 1037, 1041, 1042, 1043, 1045, 1047], "hongh": 1037, "hongkahjun": 1036, "honglu": 1039, "hongshaoyang": 1044, "honl": [1041, 1042], "honolulu": 999, "honor": 310, "hood": [398, 995, 1014], "hoover": [1034, 1035, 1036, 1038], "hope": [30, 44, 173, 224, 386, 1038], "hopefulli": [267, 380, 1029], "hopfensperg": [1046, 1047, 1048], "hopper": 1034, "horizont": [66, 120, 226, 229, 238, 263, 304, 307, 377, 386, 461, 513, 697, 701], "horizontal_distance_to_hydrologi": 488, "horizontalalign": [51, 63, 67, 75, 79, 95, 233, 249, 299, 306], "hornik": 635, "hornstein": 1044, "horrel": 1036, "hoshia": 1043, "hossein": [1037, 1038, 1039], "host": [0, 140, 319, 347, 367, 372, 376, 380, 381, 489, 897, 1017, 1045], "hot": [1, 43, 103, 139, 154, 183, 207, 273, 305, 306, 310, 315, 322, 336, 386, 411, 412, 549, 564, 580, 648, 658, 659, 669, 680, 867, 869, 871, 872, 875, 877, 878, 885, 995, 1009, 1037, 1043, 1044], "hot_r": [51, 304], "hotel": 1023, "hotspot": 378, "hour": [43, 149, 183, 184, 320, 372, 378, 494, 996], "hour_co": 43, "hour_df": 43, "hour_sin": 43, "hour_workday_interact": 43, "hourli": [43, 149, 183], "hourly_wag": 182, "hous": [1, 107, 144, 154, 178, 179, 258, 304, 315, 365, 487, 1025], "house_pric": [107, 154], "houseag": [304, 315, 367, 487], "household": 367, "housestyl": [143, 154], "hover": 320, "hover_data": [140, 265], "how": [0, 43, 44, 46, 47, 48, 49, 52, 58, 59, 62, 63, 64, 68, 69, 72, 83, 84, 85, 86, 90, 93, 101, 102, 103, 106, 109, 111, 116, 129, 134, 135, 138, 142, 143, 144, 146, 147, 149, 152, 154, 155, 160, 161, 165, 174, 180, 183, 184, 185, 186, 188, 192, 197, 198, 199, 201, 205, 208, 209, 210, 211, 214, 220, 224, 230, 231, 235, 238, 240, 242, 243, 244, 246, 255, 258, 259, 260, 262, 263, 264, 265, 266, 271, 273, 274, 276, 278, 279, 283, 284, 286, 287, 288, 290, 291, 296, 301, 309, 311, 314, 315, 316, 319, 320, 322, 333, 334, 336, 339, 340, 343, 347, 348, 351, 353, 354, 359, 360, 361, 367, 370, 371, 373, 374, 375, 377, 380, 385, 386, 387, 392, 395, 398, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 418, 428, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 502, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 609, 610, 611, 622, 623, 627, 628, 629, 630, 631, 632, 633, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 704, 720, 757, 792, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 827, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 942, 957, 982, 988, 989, 993, 994, 995, 996, 998, 999, 1005, 1006, 1007, 1009, 1011, 1012, 1014, 1015, 1019, 1023, 1025, 1029, 1031, 1034, 1040, 1043, 1044, 1045, 1048, 1049], "howel": 1036, "howev": [0, 43, 44, 46, 52, 53, 61, 62, 64, 66, 72, 81, 82, 86, 88, 93, 104, 107, 109, 113, 115, 125, 127, 137, 139, 140, 143, 146, 147, 154, 155, 160, 163, 165, 167, 172, 173, 184, 185, 192, 198, 207, 211, 227, 230, 231, 233, 239, 240, 243, 258, 264, 271, 277, 278, 279, 281, 283, 284, 289, 300, 304, 315, 321, 340, 343, 347, 348, 353, 355, 359, 360, 361, 366, 367, 369, 371, 372, 374, 378, 380, 384, 386, 395, 398, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 437, 440, 444, 446, 448, 451, 456, 494, 506, 530, 539, 549, 565, 580, 581, 582, 588, 605, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 630, 632, 633, 638, 643, 655, 656, 672, 687, 692, 695, 700, 763, 765, 800, 802, 803, 804, 814, 817, 820, 827, 831, 832, 843, 861, 862, 867, 876, 877, 882, 906, 907, 909, 926, 953, 968, 988, 989, 992, 993, 994, 995, 996, 998, 999, 1000, 1002, 1003, 1004, 1006, 1007, 1009, 1013, 1014, 1015, 1038, 1039, 1041, 1042, 1045], "hoyer": [409, 1032], "hp": 51, "hpq": 51, "hrishikesh": [1030, 1031], "hristo": [1037, 1044], "hron\u010dok": 1049, "hsiang": [658, 1033], "hsieh": 1035, "hspace": [45, 53, 54, 79, 95, 120, 224, 233, 249, 251, 252, 255, 289, 315, 326, 333], "hstack": [53, 69, 77, 159, 231, 242, 259, 339, 408, 863], "hsuan": 1034, "ht2001": 999, "htf": 411, "htm": [912, 913], "html": [1, 43, 47, 51, 63, 103, 104, 139, 141, 150, 151, 154, 155, 156, 160, 163, 172, 183, 184, 185, 188, 192, 234, 236, 240, 244, 245, 246, 247, 254, 258, 262, 263, 264, 265, 271, 276, 278, 302, 310, 314, 315, 317, 318, 320, 327, 353, 354, 367, 369, 372, 373, 375, 376, 380, 395, 405, 408, 412, 418, 484, 506, 507, 658, 839, 843, 941, 943, 944, 997, 1018, 1019, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049], "htmledit": [839, 843, 997], "htmlparser": 47, "htsedebenham": 1044, "http": [43, 45, 47, 51, 52, 55, 61, 103, 163, 188, 207, 214, 222, 224, 231, 240, 278, 281, 283, 284, 301, 366, 367, 369, 370, 372, 376, 377, 378, 380, 384, 386, 390, 395, 404, 408, 413, 439, 446, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 500, 506, 507, 508, 528, 529, 532, 535, 539, 594, 636, 641, 644, 658, 664, 666, 667, 668, 671, 676, 679, 682, 683, 685, 686, 692, 695, 705, 721, 723, 724, 758, 759, 769, 839, 841, 843, 846, 847, 852, 853, 854, 855, 860, 882, 897, 898, 899, 912, 913, 941, 943, 995, 997, 999, 1012, 1015, 1048], "hu": [1034, 1037, 1039], "hua": [561, 1005], "huang": [367, 658, 1035, 1040], "huangk10": 1040, "huard": 1029, "huber": [25, 193, 216, 411, 558, 649, 676, 678, 1013, 1029, 1031, 1032, 1041], "huberlossfunct": 1042, "huberregressor": [1, 87, 167, 180, 189, 205, 211, 212, 213, 311, 522, 670, 671, 672, 678, 679, 995, 1020, 1035, 1036, 1037, 1038], "hubert": [404, 705, 715, 786], "hubert1985": 705, "huberti": 1049, "hudson": 318, "hue": [126, 149, 254, 264, 309, 369], "huerta": 1039, "hug": [0, 393, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "huge": [209, 212, 359, 378, 627, 1032], "hugh": [879, 1031, 1042], "hugo": [45, 367, 1035, 1040, 1041, 1042, 1043, 1048, 1049], "hugorichard": 1041, "hugu": 1033, "hui": [196, 536, 538, 545, 656, 995], "huiginn": 1029, "huilgolkar": [1030, 1031], "hujiahong726": 1045, "hull": 1046, "humahn": 1044, "human": [120, 184, 347, 372, 404, 409, 861, 862, 999, 1006, 1038], "humid": [43, 184, 1006], "hunan": 1037, "hundr": [0, 77, 145, 227, 308, 367, 408, 411, 559, 560, 996, 1040], "hunt": 1044, "hunter": 1038, "hurt": [359, 532, 1037], "husak": 1043, "huszar": 1023, "hut": [692, 996, 1034, 1036, 1039], "huynh": [1039, 1041], "hv": 412, "hvassard": 1043, "hwan": 1040, "hwang": 1035, "hybrid": [443, 649, 1018], "hye": 1040, "hyper": [1, 43, 64, 103, 140, 257, 258, 264, 269, 302, 336, 355, 374, 384, 385, 386, 399, 408, 411, 413, 465, 644, 645, 804, 812, 814, 860, 902, 994, 995, 999, 1002, 1013, 1014, 1018, 1025, 1029, 1043, 1048, 1049], "hyperband": 988, "hyperbol": [340, 642, 861, 862, 997, 1003], "hypercub": [233, 513], "hyperlink": 1031, "hyperparamet": [1, 103, 105, 106, 149, 167, 168, 174, 175, 178, 180, 184, 190, 194, 198, 220, 224, 233, 243, 256, 258, 262, 263, 267, 269, 275, 276, 286, 302, 322, 347, 374, 386, 404, 408, 409, 411, 414, 500, 533, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 643, 653, 659, 665, 673, 676, 728, 785, 800, 814, 909, 988, 993, 994, 995, 998, 999, 1001, 1003, 1005, 1013, 1019, 1020, 1031, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1045, 1049], "hyperparameter_baseline_similar": 175, "hyperparameter_grid": 320, "hyperparameter_length_scal": 615, "hyperplan": [136, 145, 170, 180, 189, 215, 241, 267, 331, 332, 333, 334, 335, 336, 340, 341, 510, 631, 658, 659, 666, 668, 674, 675, 676, 677, 904, 906, 908, 909, 1013, 1014, 1020], "hyperplane_handl": 201, "hyperplane_label": 201, "hyperspher": 368, "hypothes": 995, "hypothesi": [146, 264, 270, 408, 690, 694, 829, 996], "hypothet": 64, "hyunjin": 1029, "hyvarinen": [416, 531], "h\u00e9lion": 1040, "i": [0, 1, 7, 30, 37, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 167, 168, 169, 171, 172, 173, 174, 175, 176, 178, 179, 180, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 283, 284, 286, 287, 288, 289, 290, 291, 293, 294, 296, 297, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 325, 326, 327, 328, 329, 330, 334, 335, 336, 340, 341, 343, 344, 345, 347, 348, 349, 351, 352, 353, 355, 359, 360, 361, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 385, 386, 387, 389, 390, 392, 395, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 424, 425, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 506, 507, 508, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 524, 525, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 574, 575, 576, 577, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 766, 767, 768, 769, 770, 771, 773, 774, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 928, 929, 930, 931, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 946, 947, 948, 950, 953, 954, 955, 957, 958, 959, 960, 961, 962, 963, 965, 966, 967, 968, 969, 970, 972, 973, 979, 982, 983, 984, 985, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1022, 1025, 1026, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "i32": 263, "i64": 263, "i_ax": 284, "i_dataset": [79, 95, 233], "i_j": 1007, "iain": [163, 369, 995], "iampat": 1037, "ian": [1031, 1033, 1038, 1039, 1041, 1044, 1045, 1047], "iasoon": 1043, "ibay": 1029, "ibieta": 1042, "ibm": [51, 57, 202, 329, 349, 367], "ibn": 1029, "ibnukhsein": 1046, "ibraheem": 1038, "ibrahima": 1039, "ibraim": [1034, 1035, 1036], "ib\u00e1\u00f1ez": [1037, 1038, 1041], "ic": [1, 47, 281, 315, 366, 369, 389, 498, 500, 508, 632, 633, 709, 1025, 1041, 1042], "ica": [10, 122, 416, 1015, 1024, 1025], "ica_estim": 120, "icann": 696, "icassp": 999, "icdm": [561, 1005], "icdmw": 404, "ice_lines_kw": 632, "icml": [62, 64, 402, 404, 412, 434, 436, 839, 841, 860, 999, 1001, 1013], "icml03": 841, "icon": [320, 374], "icyblad": 1036, "id": [0, 1, 45, 52, 57, 224, 297, 354, 366, 367, 372, 380, 406, 408, 412, 418, 492, 493, 494, 916, 918, 943, 944, 1037, 1038, 1041], "id3": [1021, 1025], "idea": [44, 86, 111, 112, 140, 163, 172, 183, 208, 226, 258, 289, 336, 351, 359, 360, 372, 377, 378, 406, 407, 408, 409, 410, 411, 413, 606, 607, 995, 996, 999, 1002, 1005, 1023], "ideal": [207, 209, 224, 258, 261, 264, 271, 273, 274, 355, 371, 372, 373, 374, 376, 377, 380, 384, 386, 402, 403, 726, 756, 988, 998, 1013, 1014, 1019, 1022], "idelberg": 1046, "ident": [52, 57, 97, 145, 204, 207, 224, 233, 237, 330, 347, 367, 374, 386, 401, 404, 405, 406, 408, 414, 417, 435, 436, 449, 461, 462, 470, 472, 473, 476, 477, 478, 485, 501, 549, 557, 558, 562, 563, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 643, 679, 680, 699, 704, 705, 736, 785, 795, 802, 805, 815, 816, 819, 820, 846, 847, 853, 861, 862, 868, 869, 881, 893, 912, 913, 992, 993, 996, 999, 1002, 1003, 1014, 1033, 1037, 1038, 1039, 1043, 1047], "identif": [367, 372, 404, 495, 988, 999], "identifi": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 313, 315, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 351, 352, 353, 354, 366, 367, 371, 372, 377, 386, 403, 404, 405, 408, 411, 412, 443, 447, 454, 484, 494, 506, 507, 605, 643, 649, 699, 712, 774, 829, 850, 851, 869, 899, 900, 988, 995, 1005, 1012, 1023, 1036, 1038, 1043, 1044], "idf": [1, 54, 57, 237, 347, 348, 349, 367, 409, 519, 542, 587, 588, 589, 590, 843, 851, 876, 988, 997, 1001, 1009, 1029], "idf_": [412, 589, 590, 1037, 1048], "idier": [409, 536, 538, 545], "idiom": 378, "idir": 1049, "idl": 1040, "ido": [1044, 1045], "idpol": [207, 224], "idx": [50, 57, 88, 129, 136, 140, 142, 149, 155, 176, 184, 186, 194, 206, 207, 215, 227, 258, 274, 352, 405, 408], "idx_a": 273, "idx_avg_max_test_scor": 277, "idx_b": 273, "idx_r": 206, "idx_sort": 207, "idxmax": 343, "idxmin": 262, "ie": [75, 99, 121, 437, 704, 1009], "ieee": [96, 110, 112, 369, 404, 406, 413, 417, 445, 472, 532, 561, 664, 685, 686, 725, 769, 995, 999, 1005], "ieeexplor": 769, "ieic": [536, 538, 545], "iem": 658, "if_binari": [183, 247, 877, 1009, 1040], "if_delegate_has_method": [1042, 1043], "iff": [591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 875], "iforest": 243, "iforest_kw": 243, "iglesi": 1044, "ignacio": 1032, "ignor": [1, 43, 45, 47, 55, 79, 82, 88, 95, 103, 134, 139, 143, 151, 154, 184, 196, 207, 221, 235, 240, 245, 247, 255, 300, 301, 309, 310, 314, 317, 340, 348, 360, 372, 374, 376, 378, 386, 390, 395, 404, 405, 411, 412, 422, 423, 426, 429, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 457, 458, 461, 462, 464, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 485, 501, 506, 507, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 578, 580, 581, 582, 587, 588, 589, 590, 596, 601, 602, 609, 610, 611, 627, 628, 629, 630, 631, 632, 633, 635, 639, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 707, 711, 713, 714, 726, 729, 730, 738, 755, 756, 763, 769, 774, 778, 783, 784, 787, 788, 797, 798, 799, 801, 802, 803, 805, 807, 808, 809, 810, 813, 815, 816, 817, 818, 819, 820, 821, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 861, 862, 863, 864, 867, 868, 869, 870, 871, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 896, 897, 899, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 973, 982, 987, 995, 996, 999, 1001, 1005, 1009, 1014, 1029, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1046, 1047, 1049], "ignore_attribut": 366, "ignore_error": 87, "ignore_implicit_zero": [184, 881, 893], "ignore_ti": [726, 756], "ignore_warn": [214, 306, 1035], "ignored_new_col": 405, "ignorerevsfil": 372, "igor": [1035, 1036, 1042], "ih": 289, "ii": [50, 121, 184, 259, 369, 412, 581, 582, 588, 638, 666, 667, 867, 876, 995, 1009, 1046], "iid": 1037, "iii": [1043, 1046], "iijima": 1038, "iinfo": 1044, "ij": [264, 294, 401, 404, 409, 536, 538, 545, 646, 647, 652, 653, 660, 661, 662, 663, 681, 684, 995, 996, 999, 1001, 1004, 1009, 1014], "ijcnn": 999, "ijcv": 999, "ijet": 404, "ik": [995, 999], "ikeda": 1041, "ikko": 1042, "il": [49, 664, 685, 686, 995, 999], "ilambharathi": [1032, 1033], "ili": [1045, 1046], "ilic": 1042, "ilion": 1043, "iliya": 1044, "iljin": [1044, 1045], "ill": [75, 113, 212, 267, 302, 468, 469, 475, 650, 651, 654, 655, 656, 682, 683, 995, 998, 1039], "illustr": [48, 52, 60, 61, 63, 66, 67, 69, 85, 89, 90, 102, 103, 106, 107, 109, 111, 116, 118, 122, 134, 137, 148, 149, 151, 153, 154, 158, 163, 166, 167, 168, 169, 170, 172, 173, 174, 175, 180, 182, 184, 185, 188, 198, 205, 207, 209, 211, 214, 216, 217, 219, 220, 223, 224, 226, 227, 229, 231, 233, 235, 236, 238, 239, 240, 242, 253, 258, 264, 271, 276, 278, 285, 293, 307, 309, 312, 313, 315, 321, 328, 336, 337, 341, 343, 344, 348, 349, 355, 359, 369, 372, 374, 377, 380, 385, 403, 407, 409, 411, 412, 513, 555, 556, 562, 563, 593, 610, 611, 613, 614, 615, 619, 622, 623, 853, 988, 995, 999, 1002, 1005, 1011, 1012, 1013, 1014, 1018, 1020, 1023], "iloc": [43, 149, 154, 183, 184, 224, 264, 287], "ilya": [1036, 1047, 1048], "ilyasolomatin": 1049, "im": [120, 130, 275, 288], "im_": 697, "im_kw": [697, 1043], "imacul": 1035, "imag": [1, 42, 45, 53, 58, 59, 68, 71, 74, 75, 76, 79, 80, 84, 87, 89, 91, 95, 100, 102, 119, 120, 125, 129, 161, 163, 171, 180, 200, 227, 235, 238, 242, 262, 293, 301, 302, 314, 325, 326, 347, 348, 364, 365, 367, 369, 372, 377, 380, 386, 390, 397, 403, 404, 409, 438, 442, 449, 459, 491, 492, 493, 494, 500, 501, 504, 505, 532, 533, 535, 539, 582, 583, 584, 585, 586, 606, 607, 691, 697, 738, 830, 874, 995, 999, 1000, 1002, 1004, 1011, 1015, 1018, 1020, 1023, 1025, 1029, 1032, 1037, 1038, 1042, 1044, 1045], "image_height": [582, 583, 586], "image_index": [325, 326], "image_nam": 504, "image_patch": 586, "image_reconstruct": 586, "image_s": 586, "image_shap": [120, 242], "image_width": [582, 583, 586], "imagebox": 227, "imageio": 366, "imagenet": [861, 862], "images_restor": 84, "imagin": [121, 165, 167, 240, 322, 340, 408, 409, 412, 995], "imamura": 1043, "imbal": [257, 267, 278, 408, 707, 729, 730, 738, 783, 784, 787, 788, 999], "imbalanc": [207, 258, 267, 271, 273, 278, 348, 384, 402, 408, 703, 708, 787, 801, 805, 841, 999, 1001, 1007, 1018], "imbert": [1036, 1038, 1041, 1043, 1046, 1047], "img": [44, 83, 99, 504, 585], "img_height": 582, "img_to_graph": [1, 80, 99, 412, 1032, 1042], "img_width": 582, "imit": 347, "immanuel": [0, 1029, 1030, 1034], "immedi": [88, 372, 384, 800, 814, 825, 826, 1037], "immens": 1023, "immensu": 1037, "immers": [690, 694], "immobil": 43, "immut": 398, "imp": 989, "imp_mean": [627, 630], "impact": [0, 51, 52, 62, 66, 71, 72, 77, 78, 91, 97, 107, 134, 159, 180, 182, 183, 184, 191, 209, 211, 224, 243, 257, 258, 281, 287, 309, 318, 343, 348, 355, 359, 360, 365, 384, 387, 402, 404, 409, 444, 446, 534, 538, 545, 589, 666, 667, 668, 672, 674, 676, 677, 678, 692, 794, 800, 803, 804, 814, 827, 844, 845, 846, 847, 881, 893, 904, 905, 933, 948, 969, 972, 988, 998, 1006, 1014, 1020, 1036, 1039, 1042], "imped": 380, "imperfect": [728, 785, 999, 1031], "imperfectli": [703, 734, 999], "implant": 59, "implement": [1, 12, 30, 45, 46, 52, 53, 55, 63, 80, 89, 112, 120, 140, 149, 186, 188, 194, 198, 220, 224, 226, 233, 239, 240, 258, 262, 263, 264, 273, 281, 283, 284, 286, 289, 307, 313, 314, 315, 316, 317, 319, 322, 347, 349, 359, 360, 361, 366, 367, 369, 370, 372, 373, 374, 376, 377, 378, 380, 381, 386, 390, 395, 400, 401, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 434, 439, 440, 441, 443, 444, 445, 446, 447, 472, 494, 506, 530, 531, 532, 533, 534, 536, 539, 540, 541, 551, 552, 553, 555, 556, 559, 560, 561, 565, 570, 581, 587, 588, 590, 592, 596, 600, 610, 611, 632, 633, 640, 641, 645, 646, 653, 657, 658, 659, 663, 664, 668, 671, 672, 674, 675, 676, 677, 678, 684, 685, 686, 687, 688, 691, 692, 695, 707, 709, 711, 720, 730, 735, 738, 742, 778, 782, 788, 789, 797, 799, 800, 803, 804, 806, 814, 818, 819, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 846, 847, 849, 852, 854, 855, 860, 861, 862, 864, 886, 894, 895, 901, 904, 905, 906, 907, 908, 909, 910, 942, 947, 948, 957, 960, 965, 968, 969, 988, 989, 991, 993, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1009, 1011, 1012, 1015, 1016, 1018, 1019, 1021, 1023, 1025, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "impli": [43, 167, 183, 347, 348, 349, 409, 411, 414, 471, 571, 581, 610, 611, 622, 735, 934, 995, 996, 1040], "implic": [355, 372], "implicit": [1, 207, 386, 411, 412, 570, 682, 683, 993, 998, 1018, 1038], "implicitli": [349, 381, 411, 596, 632, 633, 846, 854, 883, 989, 991, 1006, 1009, 1014, 1047, 1049], "import": [1, 15, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 351, 352, 353, 354, 355, 359, 360, 361, 366, 367, 368, 370, 371, 372, 374, 376, 377, 378, 379, 380, 381, 384, 385, 386, 389, 390, 391, 395, 398, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 954, 955, 961, 962, 963, 964, 965, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 988, 989, 991, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1019, 1020, 1023, 1025, 1026, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1047, 1048], "importance_gett": [413, 592, 593, 596, 1041], "importances_mean": [141, 147, 185, 186, 313, 634, 1007], "importances_std": [141, 634, 1007], "important_word": 57, "importantli": [43, 53, 121, 173, 184, 188, 304, 372, 404, 1047], "importerror": [50, 86, 123, 284, 297, 380], "importlib": 1042, "impos": [74, 90, 151, 197, 203, 211, 310, 384, 404, 409, 411, 412, 525, 657, 995], "imposs": [146, 349], "impract": 909, "impress": 1023, "improp": [386, 1036], "improv": [0, 30, 43, 61, 62, 69, 109, 110, 113, 125, 130, 134, 135, 140, 142, 144, 145, 146, 148, 149, 154, 159, 179, 183, 188, 195, 205, 207, 214, 224, 258, 263, 265, 267, 281, 284, 287, 302, 309, 319, 339, 340, 348, 355, 360, 370, 375, 377, 378, 380, 381, 384, 386, 387, 398, 400, 409, 411, 413, 446, 447, 529, 530, 532, 535, 536, 537, 539, 540, 541, 544, 552, 555, 556, 557, 558, 559, 560, 562, 563, 610, 611, 643, 652, 664, 666, 667, 668, 672, 673, 674, 675, 676, 678, 685, 687, 692, 729, 730, 783, 784, 787, 788, 853, 861, 862, 878, 880, 892, 912, 913, 915, 948, 988, 993, 995, 996, 999, 1002, 1003, 1013, 1014, 1015, 1017, 1018, 1019, 1023, 1029, 1030, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "improvis": [50, 297], "impur": [147, 186, 354, 389, 411, 413, 551, 552, 555, 556, 557, 558, 562, 563, 564, 912, 913, 914, 915, 916, 918, 1015, 1025, 1034, 1035, 1036, 1037], "imput": [1, 103, 149, 154, 185, 235, 245, 247, 314, 317, 364, 376, 385, 386, 395, 405, 411, 487, 499, 563, 579, 627, 628, 629, 630, 639, 645, 672, 826, 847, 865, 882, 929, 931, 1018, 1020, 1025, 1031, 1032], "imputation_const": 245, "imputation_mean": 245, "imputation_ord": [627, 1039], "imputation_sequence_": 627, "impute_estim": 178, "imran": [1031, 1032, 1033], "imread": 68, "imshow": [44, 45, 53, 68, 75, 80, 81, 83, 84, 86, 87, 91, 113, 120, 123, 130, 169, 170, 171, 175, 186, 200, 222, 227, 242, 275, 288, 302, 325, 326, 336, 344, 366, 632, 697, 1043], "in1d": 1036, "in_bodi": 47, "in_titl": 47, "in_top": 47, "in_topic_d": 47, "inaccess": 88, "inaccur": 1048, "inact": [349, 366, 372], "inadvert": [182, 386], "inadvis": 398, "inappropri": [367, 408, 414, 821], "inbuilt": 408, "inc": [0, 102, 263, 989, 1011, 1023], "incap": 88, "incentiv": 376, "incept": 1019, "includ": [0, 10, 17, 43, 68, 70, 88, 111, 140, 143, 144, 145, 179, 182, 183, 185, 194, 207, 211, 224, 240, 263, 265, 281, 284, 300, 304, 316, 317, 319, 322, 323, 336, 341, 345, 347, 349, 355, 359, 360, 366, 368, 370, 372, 373, 374, 376, 377, 378, 380, 381, 386, 387, 390, 398, 400, 401, 404, 405, 407, 408, 409, 411, 412, 413, 414, 415, 441, 443, 447, 453, 463, 466, 467, 468, 469, 470, 471, 472, 473, 486, 487, 488, 494, 498, 499, 500, 502, 503, 508, 532, 539, 555, 562, 572, 609, 632, 638, 646, 647, 652, 660, 661, 662, 665, 681, 688, 689, 697, 713, 729, 730, 735, 737, 738, 771, 783, 784, 787, 795, 800, 802, 803, 804, 813, 814, 817, 820, 827, 830, 852, 854, 855, 856, 866, 877, 878, 879, 883, 901, 904, 905, 912, 914, 916, 918, 930, 931, 934, 936, 939, 941, 942, 943, 957, 988, 995, 998, 999, 1000, 1002, 1003, 1009, 1013, 1014, 1015, 1018, 1019, 1022, 1023, 1029, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "include_bia": [43, 155, 190, 245, 279, 879, 883, 1043], "include_boundari": [934, 1043], "include_self": [74, 79, 100, 695, 857, 858, 1033], "include_valu": 697, "inclus": [0, 372, 374, 380, 447, 453, 754, 786, 999, 1000, 1029, 1043], "incom": [304, 367, 376, 437], "incoming_count": 55, "incompat": [376, 494, 989, 1037, 1038], "incomplet": [372, 390, 400, 404, 705, 795, 989, 996, 1033, 1035], "inconsist": [1, 386, 398, 412, 506, 507, 575, 906, 909, 934, 1005, 1014, 1025, 1029, 1034, 1035, 1036, 1037, 1039, 1042, 1044, 1045, 1046], "inconsistentversionwarn": [1, 398, 1045], "incorpor": [319, 372, 405, 411, 998, 1018, 1023], "incorrect": [134, 182, 328, 355, 372, 404, 606, 607, 632, 633, 734, 1029, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1048], "incorrectli": [192, 271, 411, 412, 551, 557, 559, 734, 740, 999, 1030, 1035, 1037, 1038, 1040, 1045], "incr_mean_variance_axi": [1, 1035, 1041], "increas": [1, 43, 46, 54, 63, 72, 78, 88, 90, 91, 94, 107, 123, 134, 135, 137, 140, 142, 144, 149, 151, 159, 163, 167, 171, 172, 173, 183, 184, 188, 191, 193, 200, 207, 208, 209, 211, 224, 231, 237, 250, 251, 258, 263, 264, 265, 266, 271, 277, 278, 299, 305, 306, 309, 315, 321, 326, 336, 343, 345, 348, 349, 351, 359, 360, 361, 371, 380, 381, 386, 402, 404, 406, 409, 411, 412, 415, 437, 441, 443, 449, 460, 468, 469, 475, 530, 534, 551, 552, 555, 556, 557, 558, 559, 560, 562, 563, 565, 566, 627, 635, 636, 637, 645, 650, 651, 654, 655, 656, 658, 659, 666, 667, 668, 676, 677, 678, 682, 683, 685, 686, 692, 706, 707, 712, 778, 782, 789, 803, 804, 833, 852, 854, 855, 856, 859, 861, 862, 878, 904, 912, 913, 914, 915, 948, 988, 990, 994, 995, 996, 998, 999, 1002, 1009, 1013, 1014, 1015, 1023, 1029, 1031, 1034, 1038, 1040, 1041, 1044, 1047, 1049], "increasing_": 635, "increasing_bool": 636, "increment": [1, 104, 119, 125, 126, 128, 180, 215, 267, 270, 352, 376, 378, 439, 444, 460, 502, 531, 532, 533, 534, 537, 539, 542, 601, 646, 658, 666, 806, 828, 836, 837, 839, 840, 841, 842, 843, 873, 874, 884, 904, 905, 973, 995, 1001, 1020, 1032, 1033], "incrementalpca": [1, 124, 361, 409, 531, 533, 537, 539, 542, 1033, 1036, 1037, 1039, 1040, 1043, 1048], "incur": [63, 619, 904, 1014, 1037], "ind": [53, 77, 145, 348, 844, 845], "inde": [44, 46, 62, 64, 70, 74, 75, 86, 88, 91, 113, 116, 125, 134, 137, 155, 162, 163, 167, 183, 185, 190, 194, 196, 198, 207, 209, 266, 267, 271, 273, 281, 284, 304, 309, 343, 348, 355, 359, 371, 377, 385, 386, 387, 404, 406, 408, 411, 565, 566, 995, 1009, 1013, 1043], "indecisiveus": [1040, 1041], "indefinit": 376, "indent": [374, 966], "independ": [1, 32, 52, 62, 64, 72, 80, 121, 122, 124, 139, 142, 174, 184, 201, 242, 243, 261, 264, 267, 269, 273, 283, 304, 311, 313, 348, 355, 359, 360, 368, 385, 386, 390, 398, 401, 402, 404, 405, 406, 407, 408, 412, 416, 446, 461, 485, 501, 513, 514, 515, 516, 518, 530, 531, 533, 535, 537, 538, 544, 545, 549, 550, 603, 606, 607, 625, 640, 644, 645, 646, 647, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 672, 673, 674, 675, 704, 705, 717, 736, 737, 755, 757, 795, 802, 829, 833, 835, 837, 838, 876, 880, 881, 882, 884, 888, 889, 890, 891, 893, 894, 895, 898, 906, 907, 908, 909, 910, 988, 991, 993, 995, 996, 999, 1000, 1001, 1004, 1006, 1009, 1014, 1015, 1024, 1025, 1029, 1030, 1035, 1037, 1039, 1044], "inder128": 1039, "inderjeet": 1040, "inderjit": [401, 450], "indeterminaci": 542, "index": [1, 51, 54, 55, 72, 73, 74, 75, 76, 82, 83, 91, 103, 104, 134, 139, 141, 149, 160, 163, 178, 182, 183, 184, 185, 186, 207, 211, 224, 244, 247, 250, 251, 255, 259, 262, 263, 264, 265, 267, 275, 276, 277, 278, 284, 304, 309, 310, 311, 317, 321, 325, 326, 348, 349, 367, 369, 370, 372, 374, 376, 381, 384, 386, 401, 405, 408, 409, 411, 412, 419, 440, 444, 445, 446, 447, 448, 450, 451, 454, 456, 457, 461, 464, 501, 507, 555, 556, 557, 558, 562, 563, 564, 586, 587, 588, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 617, 632, 633, 640, 697, 704, 705, 712, 716, 718, 731, 738, 757, 779, 780, 786, 788, 794, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 830, 844, 845, 846, 847, 848, 850, 852, 854, 855, 856, 877, 912, 913, 914, 915, 921, 952, 969, 972, 977, 978, 999, 1001, 1002, 1003, 1013, 1015, 1018, 1029, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "index_alpha_path_a": 196, "index_alpha_path_b": 196, "index_map": 55, "indexerror": [1037, 1038], "indexhash": 640, "indexhash_": 640, "indian": 367, "indic": [1, 51, 57, 58, 62, 63, 92, 93, 99, 107, 116, 120, 126, 134, 139, 144, 172, 175, 179, 182, 184, 228, 237, 240, 257, 258, 263, 266, 267, 270, 271, 284, 297, 325, 326, 329, 347, 348, 349, 354, 360, 367, 372, 373, 374, 376, 380, 381, 384, 386, 400, 401, 402, 404, 406, 408, 409, 411, 412, 415, 419, 424, 434, 437, 441, 447, 448, 449, 450, 452, 453, 454, 457, 461, 464, 469, 484, 506, 507, 509, 510, 511, 521, 530, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 580, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 606, 607, 620, 627, 628, 629, 630, 632, 633, 639, 646, 647, 650, 651, 652, 653, 654, 655, 661, 663, 665, 673, 675, 682, 683, 690, 692, 694, 696, 702, 703, 707, 712, 713, 718, 719, 720, 722, 725, 727, 728, 729, 730, 731, 734, 738, 739, 740, 741, 754, 771, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 792, 793, 794, 796, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 835, 837, 838, 844, 845, 846, 847, 848, 850, 852, 854, 855, 856, 868, 871, 875, 877, 885, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 918, 920, 921, 926, 930, 931, 936, 952, 963, 964, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 989, 994, 995, 996, 999, 1000, 1001, 1002, 1003, 1006, 1009, 1010, 1013, 1014, 1019, 1029, 1030, 1031, 1032, 1033, 1034, 1037, 1039, 1040, 1042, 1044, 1045, 1046, 1047, 1048, 1049], "indicator_": [627, 628, 630], "indicator_matrix_": 1034, "indigo": 223, "indirect": [267, 373, 386], "indirectli": [224, 340], "indispens": 1023, "indistinguish": 304, "individu": [1, 43, 80, 93, 111, 133, 135, 137, 153, 154, 155, 158, 161, 176, 180, 181, 183, 186, 207, 224, 234, 243, 244, 258, 263, 267, 269, 273, 283, 313, 320, 321, 340, 343, 360, 373, 374, 376, 379, 381, 386, 389, 395, 401, 405, 408, 411, 412, 434, 449, 459, 461, 494, 499, 501, 507, 553, 554, 557, 558, 560, 561, 563, 565, 566, 567, 568, 602, 608, 610, 632, 633, 643, 645, 657, 658, 659, 668, 671, 672, 673, 674, 675, 676, 677, 678, 687, 702, 712, 719, 728, 734, 750, 751, 785, 790, 791, 800, 814, 832, 836, 837, 839, 840, 841, 842, 843, 862, 865, 873, 874, 876, 877, 878, 881, 883, 884, 889, 890, 891, 904, 905, 935, 999, 1000, 1009, 1014, 1020, 1025, 1030, 1033, 1035, 1041, 1043, 1045], "indptr": [55, 284, 354, 973, 974, 975, 976, 977, 978, 979, 980, 981, 1037, 1045], "induc": [25, 63, 89, 183, 194, 200, 202, 208, 221, 239, 243, 343, 349, 401, 409, 411, 443, 446, 537, 541, 551, 555, 556, 557, 558, 562, 563, 564, 643, 726, 756, 877, 912, 913, 914, 915, 969, 992, 999, 1013], "induct": [43, 66, 71, 132, 146, 175, 180, 386, 404, 411, 418, 438, 510, 562, 627, 631, 899, 900, 961, 982, 995, 1012, 1020, 1031], "inductive_learn": 89, "inductivecluster": 89, "industri": [404, 1018], "ineffect": [308, 402, 1009, 1037, 1038], "ineffici": [1, 411, 440, 572, 832, 833, 1002, 1004], "inequ": [354, 386, 404, 440, 444, 456, 699, 997, 1002], "inertia": [90, 91, 94, 348, 404, 440, 444, 446, 449, 456, 457, 459, 460, 1040], "inertia_": [91, 94, 97, 440, 444, 446, 1040], "inessa": 1048, "inf": [107, 170, 294, 381, 404, 414, 443, 447, 452, 453, 454, 458, 468, 469, 475, 551, 552, 557, 558, 592, 593, 596, 605, 606, 607, 619, 627, 635, 637, 648, 649, 650, 652, 669, 671, 672, 676, 677, 678, 680, 687, 712, 728, 730, 746, 778, 785, 789, 860, 869, 876, 928, 929, 930, 931, 946, 999, 1009, 1036, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1047], "infant": 1009, "infeas": [995, 1002, 1004], "infer": [25, 180, 181, 183, 204, 250, 254, 255, 264, 352, 366, 374, 384, 398, 408, 409, 489, 491, 494, 506, 507, 513, 532, 534, 536, 538, 545, 547, 548, 551, 557, 558, 632, 635, 657, 709, 722, 723, 741, 785, 797, 798, 806, 823, 830, 840, 851, 878, 885, 899, 900, 912, 913, 914, 915, 963, 989, 995, 998, 999, 1004, 1009, 1012, 1015, 1018, 1019, 1020, 1030, 1034, 1035, 1040, 1043, 1046], "inferencesess": 398, "inferenti": 89, "inferior": [438, 442, 1040], "infin": [1, 264, 343, 539, 682, 683, 712, 727, 789, 825, 911, 929, 1002, 1049], "infinit": [64, 208, 249, 267, 340, 359, 414, 443, 622, 623, 778, 797, 928, 930, 931, 991, 998, 1009, 1014, 1037, 1039, 1042, 1043, 1044, 1046, 1047], "inflammatori": 367, "inflat": [90, 182, 183, 185, 404, 408, 999, 1009], "inflect": 266, "influenc": [42, 48, 52, 66, 111, 112, 134, 180, 183, 193, 249, 272, 304, 311, 336, 340, 343, 353, 355, 361, 406, 409, 411, 427, 437, 451, 462, 479, 480, 481, 486, 499, 552, 554, 556, 558, 560, 563, 566, 568, 611, 628, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 676, 678, 679, 734, 750, 830, 837, 838, 846, 847, 854, 855, 862, 881, 882, 893, 905, 907, 910, 913, 915, 930, 988, 993, 994, 995, 1002, 1005, 1009, 1013, 1014, 1020, 1023, 1032, 1037, 1038], "influenti": [211, 348, 1023], "info": [1, 45, 77, 103, 120, 183, 184, 240, 258, 262, 369, 371, 376, 386, 412, 461, 494, 559, 560, 956], "inform": [1, 2, 43, 44, 47, 50, 51, 52, 53, 62, 64, 69, 70, 72, 73, 82, 86, 91, 99, 100, 102, 103, 116, 140, 141, 157, 159, 160, 162, 163, 167, 172, 180, 183, 184, 186, 188, 189, 190, 191, 194, 208, 211, 214, 221, 223, 224, 240, 244, 251, 252, 254, 258, 259, 263, 264, 265, 266, 269, 271, 273, 277, 287, 290, 291, 294, 311, 316, 320, 339, 343, 347, 348, 349, 352, 354, 355, 359, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 377, 378, 380, 384, 385, 386, 387, 395, 398, 401, 403, 408, 409, 411, 412, 413, 414, 418, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 459, 461, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 490, 492, 493, 494, 495, 498, 499, 500, 501, 502, 503, 508, 513, 522, 526, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 580, 581, 582, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 605, 606, 607, 608, 609, 610, 611, 627, 628, 629, 630, 632, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 687, 688, 689, 690, 691, 692, 695, 697, 698, 700, 701, 702, 704, 705, 715, 726, 730, 743, 755, 756, 757, 786, 788, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 827, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 889, 890, 892, 893, 894, 895, 896, 897, 899, 900, 901, 903, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 918, 923, 957, 982, 987, 989, 991, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1009, 1010, 1013, 1015, 1019, 1020, 1022, 1023, 1029, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "informatik": 999, "informed": 999, "infrastructur": [0, 301, 319, 400, 1018, 1019], "infrequ": [877, 878, 999, 1029, 1043, 1044, 1045], "infrequent_categories_": [317, 319, 877, 878, 1009], "infrequent_if_exist": [877, 1009], "infrequent_sklearn": [877, 1009], "infti": [224, 414, 619, 995, 1009, 1036], "ing": 412, "ingela": 1043, "ingest": 412, "ingredi": 414, "ingrid": 1039, "inher": [130, 155, 204, 355, 404, 408, 409, 561, 989, 991, 993, 994, 996, 1000], "inherit": [240, 372, 374, 385, 386, 418, 576, 676, 924, 939, 941, 953, 995, 1029, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1044, 1045, 1046, 1048], "inhibit": [415, 441], "inhomogen": [414, 614], "ini": 252, "init": [1, 54, 77, 91, 92, 94, 97, 156, 184, 191, 226, 227, 230, 231, 250, 252, 284, 348, 374, 380, 404, 409, 411, 440, 444, 446, 448, 450, 456, 457, 536, 538, 545, 546, 557, 558, 632, 633, 690, 692, 694, 853, 996, 1029, 1038, 1041, 1043, 1044, 1045], "init_": [557, 558], "init_param": [249, 252, 254, 255, 797, 798], "init_s": [94, 348, 446], "init_size_": 1041, "init_tim": 252, "initi": [0, 46, 51, 55, 71, 77, 78, 90, 91, 93, 96, 97, 112, 147, 155, 156, 168, 173, 180, 183, 191, 202, 221, 226, 227, 231, 248, 250, 251, 264, 284, 315, 327, 336, 348, 355, 360, 367, 372, 374, 376, 380, 381, 384, 386, 400, 404, 409, 411, 413, 414, 416, 439, 440, 444, 445, 446, 447, 448, 449, 450, 456, 457, 458, 459, 510, 513, 529, 530, 531, 535, 536, 538, 541, 543, 544, 545, 546, 551, 552, 557, 558, 561, 592, 606, 607, 610, 611, 619, 620, 627, 640, 645, 646, 647, 648, 652, 653, 658, 660, 661, 662, 663, 666, 667, 668, 669, 671, 676, 677, 678, 680, 681, 684, 690, 691, 692, 694, 695, 702, 797, 798, 834, 853, 860, 861, 862, 900, 933, 947, 948, 968, 972, 973, 991, 995, 996, 998, 1003, 1004, 1005, 1013, 1015, 1018, 1020, 1026, 1029, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049], "initial_imputer_": 627, "initial_strategi": 627, "initial_theta": [610, 611], "initialis": [120, 536, 538, 545, 1029, 1037, 1038], "initializedcheck": 373, "inject": [243, 367, 411], "inki": 1035, "inli": [233, 995, 1005], "inlier": [111, 150, 210, 233, 243, 304, 386, 406, 426, 466, 561, 671, 677, 850, 881, 893, 907, 908, 910, 995, 1005, 1036, 1037, 1042], "inlier_mask": 210, "inlier_mask_": [210, 671], "inlier_plot": 111, "inliers_mask": 112, "inlin": [217, 372, 373, 1015], "inner": [64, 125, 146, 149, 265, 269, 283, 322, 327, 359, 412, 440, 512, 581, 588, 609, 618, 648, 669, 680, 775, 777, 991, 999, 1009, 1014, 1030, 1033, 1043, 1046, 1049], "inner_clf": 999, "inner_cv": [269, 320], "inner_it": 378, "inner_numb": 327, "inner_stat": 1043, "inner_stats_": 1043, "inpaint": 409, "inplac": [1, 224, 243, 276, 451, 479, 480, 481, 482, 859, 867, 870, 873, 874, 876, 880, 881, 882, 884, 971, 974, 975, 976, 980, 981, 1038], "inplace_column_scal": 1, "inplace_csr_column_scal": [1, 381], "inplace_csr_row_normalize_l1": [1, 381], "inplace_csr_row_normalize_l2": [1, 381], "inplace_row_scal": 1, "inplace_swap_column": 1, "inplace_swap_row": 1, "inproceed": 0, "input": [1, 43, 45, 49, 64, 67, 69, 105, 120, 124, 142, 146, 147, 173, 174, 175, 183, 184, 188, 190, 207, 210, 211, 214, 221, 224, 236, 237, 239, 240, 247, 259, 261, 265, 277, 281, 288, 289, 301, 305, 306, 307, 308, 313, 316, 318, 321, 322, 323, 336, 340, 344, 349, 366, 369, 372, 375, 376, 377, 381, 382, 384, 385, 386, 398, 401, 402, 405, 408, 409, 410, 411, 412, 413, 414, 416, 422, 425, 426, 427, 428, 429, 434, 435, 436, 437, 438, 439, 442, 445, 446, 447, 451, 454, 455, 458, 461, 462, 464, 465, 466, 468, 469, 479, 480, 481, 486, 501, 507, 514, 515, 516, 518, 522, 526, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 611, 620, 622, 627, 628, 629, 630, 631, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 685, 686, 687, 688, 689, 690, 692, 693, 696, 697, 698, 699, 700, 701, 702, 721, 722, 723, 724, 728, 745, 746, 748, 750, 751, 753, 754, 761, 767, 771, 772, 774, 778, 779, 780, 781, 785, 790, 791, 797, 798, 799, 800, 803, 804, 806, 814, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 850, 851, 852, 853, 854, 855, 856, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 891, 892, 896, 897, 899, 900, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 921, 923, 924, 925, 927, 928, 929, 930, 931, 932, 936, 941, 943, 945, 947, 959, 964, 971, 973, 979, 980, 981, 984, 985, 987, 989, 991, 993, 995, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1006, 1007, 1011, 1012, 1013, 1014, 1015, 1018, 1019, 1023, 1025, 1026, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "input_featur": [190, 374, 386, 420, 425, 439, 440, 442, 444, 446, 461, 479, 480, 481, 482, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 564, 565, 566, 567, 568, 580, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 688, 689, 692, 848, 853, 856, 860, 863, 864, 867, 868, 869, 870, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 1045], "input_nam": [929, 931, 963, 1043], "input_tag": [923, 1048], "input_typ": [349, 412, 581], "inputtag": [1, 923], "inria": [0, 658, 1017, 1029], "insensit": [239, 643, 676, 678, 788, 905, 992, 1013, 1014, 1029], "insepar": [163, 369], "insert": [93, 183, 207, 384, 404, 484, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 919], "insid": [55, 57, 63, 184, 209, 240, 264, 327, 336, 361, 366, 367, 374, 378, 395, 404, 412, 587, 588, 590, 883, 957, 960, 1006, 1023, 1046], "insight": [43, 46, 183, 184, 197, 208, 209, 224, 258, 301, 304, 347, 354, 402, 403, 800, 803, 804, 814, 827, 1006, 1015, 1023, 1049], "insist": 102, "inspect": [1, 43, 48, 66, 67, 70, 89, 94, 136, 141, 147, 149, 150, 151, 155, 160, 167, 172, 173, 183, 185, 186, 201, 215, 220, 244, 258, 264, 267, 276, 287, 292, 295, 309, 313, 314, 315, 316, 318, 320, 332, 333, 334, 335, 337, 338, 340, 345, 347, 352, 360, 374, 386, 404, 405, 411, 412, 461, 555, 556, 557, 558, 562, 563, 631, 632, 633, 634, 833, 864, 865, 912, 913, 914, 915, 941, 986, 999, 1000, 1003, 1006, 1007, 1014, 1018, 1020, 1025, 1032, 1048], "inspir": [110, 151, 184, 224, 372, 384, 411, 559, 560, 935, 989, 999, 1038], "instabl": [74, 183, 294, 414, 449, 533, 537, 541, 695, 1036, 1039, 1042], "instal": [86, 247, 284, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 359, 360, 372, 373, 375, 376, 378, 380, 384, 385, 391, 397, 398, 400, 404, 412, 449, 459, 494, 691, 695, 1015, 1017, 1036, 1037, 1038, 1042, 1043, 1048, 1049], "installment_commit": 258, "instanc": [1, 43, 47, 49, 52, 61, 63, 64, 86, 89, 91, 137, 149, 160, 163, 165, 179, 184, 185, 194, 235, 240, 243, 258, 260, 262, 273, 275, 276, 295, 313, 320, 330, 332, 333, 339, 340, 347, 348, 349, 358, 359, 360, 366, 367, 369, 370, 371, 372, 374, 376, 377, 378, 380, 381, 384, 386, 390, 395, 398, 400, 401, 402, 403, 404, 405, 408, 409, 411, 412, 413, 414, 415, 416, 418, 428, 429, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 454, 455, 456, 457, 459, 461, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 485, 488, 490, 493, 494, 495, 501, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 573, 576, 580, 581, 582, 583, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 606, 607, 609, 610, 611, 620, 627, 628, 629, 630, 632, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 707, 720, 729, 730, 738, 771, 774, 778, 779, 780, 781, 783, 784, 787, 788, 792, 793, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 812, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 893, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 917, 930, 931, 933, 941, 942, 943, 947, 948, 956, 957, 958, 959, 968, 969, 972, 982, 983, 987, 988, 989, 995, 996, 999, 1001, 1002, 1005, 1007, 1009, 1013, 1014, 1015, 1019, 1025, 1029, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "instanci": 1038, "instant": [203, 372], "instantan": 506, "instanti": [104, 170, 316, 375, 395, 411, 447, 565, 566, 601, 630, 800, 803, 804, 806, 814, 823, 825, 826, 827, 828, 829, 831, 937, 1005, 1029, 1037, 1041, 1045], "instead": [0, 43, 44, 45, 52, 58, 86, 88, 89, 90, 103, 125, 137, 151, 155, 160, 163, 167, 207, 209, 221, 224, 230, 243, 255, 260, 261, 265, 266, 277, 283, 289, 304, 313, 314, 315, 316, 317, 322, 336, 338, 340, 347, 349, 354, 355, 359, 360, 366, 367, 370, 371, 372, 373, 374, 376, 377, 380, 381, 384, 385, 386, 395, 398, 400, 404, 405, 407, 408, 409, 410, 411, 412, 413, 415, 427, 434, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 453, 456, 462, 464, 479, 480, 481, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 507, 508, 513, 531, 533, 534, 536, 538, 539, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 581, 582, 588, 589, 606, 607, 610, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 627, 630, 632, 635, 638, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 687, 690, 694, 702, 707, 709, 746, 774, 778, 779, 780, 783, 797, 798, 799, 800, 801, 802, 804, 807, 809, 812, 814, 816, 818, 819, 820, 822, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 849, 851, 854, 855, 861, 862, 864, 865, 866, 867, 869, 870, 871, 876, 877, 882, 883, 884, 894, 895, 898, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 917, 918, 936, 941, 942, 943, 948, 957, 973, 988, 989, 991, 995, 998, 999, 1000, 1003, 1004, 1009, 1013, 1014, 1015, 1018, 1026, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "instinct": 347, "institut": [0, 258, 369, 1002], "instruct": [322, 323, 359, 372, 373, 374, 375, 376, 377, 380, 384, 385, 386, 501, 587, 588, 590, 1022, 1029], "instrument": [51, 102, 121, 182], "insuffici": [389, 998], "insur": [180, 189, 207, 403, 461, 494, 550, 648, 669, 680, 706, 745, 750, 752, 830, 865, 868, 869, 877, 884, 995, 1020], "int": [47, 49, 52, 53, 55, 72, 79, 95, 112, 137, 145, 149, 150, 168, 169, 170, 176, 179, 182, 192, 200, 202, 207, 224, 231, 233, 239, 243, 249, 258, 259, 262, 263, 264, 284, 289, 291, 297, 311, 326, 349, 367, 372, 374, 384, 386, 402, 405, 408, 412, 415, 416, 419, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 479, 480, 481, 482, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 500, 501, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 606, 607, 610, 611, 617, 627, 628, 629, 630, 631, 632, 633, 634, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 700, 701, 702, 703, 704, 705, 707, 709, 713, 726, 727, 729, 730, 731, 734, 738, 756, 757, 769, 774, 778, 779, 780, 781, 782, 783, 784, 787, 789, 793, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 926, 930, 931, 933, 934, 947, 948, 950, 951, 952, 954, 965, 968, 969, 972, 977, 978, 995, 1006, 1029, 1035, 1039, 1040, 1049], "int32": [155, 243, 284, 311, 372, 386, 440, 444, 446, 448, 450, 456, 906, 907, 908, 909, 910, 965, 1014, 1038, 1044, 1045, 1046], "int64": [43, 53, 87, 103, 183, 184, 258, 273, 278, 281, 310, 320, 354, 386, 412, 422, 439, 445, 447, 494, 512, 513, 517, 584, 587, 640, 646, 647, 652, 653, 665, 714, 715, 840, 869, 898, 928, 955, 984, 1000, 1011, 1037, 1040, 1042, 1044, 1045, 1046], "int64dtyp": 1046, "intact": 877, "integ": [1, 43, 55, 86, 103, 183, 207, 224, 314, 315, 355, 359, 366, 367, 369, 374, 377, 381, 385, 386, 404, 405, 408, 409, 411, 412, 429, 434, 459, 461, 464, 469, 484, 494, 496, 499, 500, 501, 503, 506, 507, 510, 512, 513, 517, 520, 548, 557, 558, 559, 560, 561, 565, 566, 570, 581, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 627, 628, 629, 630, 632, 633, 644, 647, 651, 653, 655, 659, 661, 663, 665, 673, 675, 676, 678, 699, 714, 735, 800, 802, 803, 804, 805, 807, 809, 814, 815, 816, 819, 820, 822, 824, 827, 835, 838, 840, 843, 844, 845, 869, 877, 878, 883, 884, 885, 888, 898, 900, 912, 913, 914, 915, 926, 963, 964, 965, 968, 989, 995, 1000, 1002, 1009, 1012, 1014, 1015, 1029, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1048, 1049], "integr": [0, 52, 77, 103, 160, 175, 198, 301, 315, 322, 360, 370, 374, 375, 376, 378, 380, 386, 390, 409, 414, 443, 715, 755, 786, 973, 998, 1006, 1023, 1030, 1032, 1033, 1041, 1042, 1046, 1048], "intel": [999, 1018], "intelex": [390, 1018], "intellectu": 182, "intellig": [96, 163, 258, 347, 369, 404, 411, 445, 553, 554, 638, 696, 725, 834, 861, 862, 1000, 1011, 1019, 1023], "intend": [90, 91, 124, 208, 247, 340, 347, 372, 373, 379, 384, 386, 400, 404, 408, 465, 581, 673, 699, 873, 874, 884, 902, 921, 942, 994, 995, 999, 1003, 1010, 1018, 1048], "intens": [99, 123, 284, 369, 373, 384, 386, 409, 440, 444, 456, 606, 607, 632, 633, 802, 988, 1006, 1023, 1037], "intention": 64, "inter": [1, 75, 141, 263, 355, 408, 411, 716], "interact": [1, 42, 66, 147, 149, 155, 180, 207, 231, 235, 265, 314, 371, 373, 374, 376, 378, 384, 386, 387, 398, 405, 557, 558, 559, 560, 632, 633, 879, 883, 988, 991, 995, 996, 997, 1004, 1006, 1009, 1017, 1019, 1031, 1036, 1043, 1044], "interaction_cst": [151, 154, 184, 258, 310, 318, 323, 411, 559, 560, 1044], "interaction_onli": [43, 66, 155, 245, 879, 995, 1009], "interactiveshellapp": 378, "intercept": [123, 201, 202, 205, 215, 223, 344, 386, 479, 480, 481, 547, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 687, 879, 883, 886, 904, 905, 911, 995, 997, 999, 1004, 1013, 1014, 1032, 1034, 1038, 1039], "intercept_": [193, 199, 201, 215, 241, 334, 341, 344, 386, 479, 480, 481, 547, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 904, 905, 906, 907, 908, 909, 910, 993, 995, 1013, 1014, 1029, 1036, 1041, 1043, 1046], "intercept_hidden_": 860, "intercept_init": [666, 667, 668, 676, 678], "intercept_sc": [103, 104, 139, 155, 160, 234, 235, 245, 247, 258, 263, 271, 278, 302, 314, 317, 323, 658, 659, 904, 905, 911, 995, 1014], "intercept_visible_": 860, "intercepts_": [861, 862, 1003], "interchang": [1018, 1046], "interclass": 75, "interdepend": 513, "interest": [43, 45, 52, 66, 77, 79, 83, 88, 95, 99, 104, 134, 146, 154, 160, 163, 172, 178, 183, 184, 185, 198, 207, 208, 209, 224, 227, 238, 257, 258, 261, 264, 265, 267, 273, 278, 281, 321, 322, 336, 343, 348, 354, 359, 367, 369, 372, 374, 377, 378, 380, 384, 387, 403, 404, 406, 409, 412, 414, 491, 492, 498, 502, 508, 646, 647, 904, 989, 995, 996, 999, 1004, 1005, 1006, 1019, 1023, 1029, 1046], "interestingli": [109, 163, 1009], "interfac": [1, 42, 134, 180, 365, 366, 373, 374, 376, 381, 384, 386, 408, 414, 415, 438, 442, 447, 494, 551, 699, 800, 803, 804, 814, 864, 865, 890, 983, 988, 1002, 1014, 1018, 1019, 1023, 1025, 1029, 1031, 1034, 1035, 1037, 1038, 1043, 1045], "interfer": [320, 1039], "interim": 1036, "interior": [670, 995, 1044], "interleav": [1, 368, 384, 520], "intermedi": [43, 46, 85, 88, 139, 146, 243, 336, 384, 412, 557, 558, 619, 864, 999, 1041, 1047], "intern": [0, 43, 63, 103, 113, 125, 140, 144, 147, 149, 163, 168, 178, 180, 207, 240, 258, 278, 284, 286, 303, 310, 327, 349, 355, 360, 367, 369, 374, 378, 381, 384, 386, 395, 400, 401, 404, 408, 409, 411, 412, 413, 414, 415, 434, 436, 441, 462, 465, 509, 532, 533, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 592, 593, 610, 611, 640, 643, 646, 652, 668, 672, 676, 678, 696, 708, 731, 734, 758, 759, 783, 830, 844, 845, 860, 861, 862, 864, 865, 869, 883, 885, 899, 900, 902, 904, 905, 906, 909, 912, 913, 914, 915, 995, 996, 997, 999, 1002, 1005, 1009, 1011, 1014, 1015, 1020, 1023, 1029, 1032, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "internet": [367, 377, 999, 1009], "interop": 1018, "interoper": [398, 400, 414, 1019], "interp": [273, 274, 336], "interp1d": [653, 663, 684], "interp_tpr": 274, "interpol": [43, 53, 68, 75, 83, 84, 87, 91, 113, 120, 123, 155, 171, 174, 180, 189, 190, 200, 222, 236, 242, 273, 279, 288, 296, 302, 326, 336, 414, 635, 645, 653, 663, 672, 684, 700, 707, 847, 855, 865, 879, 883, 990, 995, 999, 1009, 1020, 1036, 1041], "interpolated_inverted_cdf": 869, "interpret": [43, 64, 149, 163, 174, 180, 181, 182, 184, 201, 207, 208, 212, 222, 224, 257, 263, 264, 266, 267, 278, 302, 305, 308, 315, 322, 347, 349, 359, 372, 373, 378, 380, 381, 386, 389, 402, 404, 405, 410, 412, 449, 461, 462, 464, 494, 539, 570, 611, 632, 639, 643, 653, 672, 673, 691, 692, 695, 697, 698, 700, 701, 702, 729, 753, 758, 759, 783, 792, 793, 806, 815, 827, 828, 830, 833, 865, 877, 884, 969, 993, 995, 999, 1000, 1006, 1007, 1009, 1015, 1018, 1020, 1029, 1030, 1034, 1037, 1042, 1043, 1044, 1048], "interquartil": [243, 882, 894], "interquartile_rang": 882, "interrog": 412, "interrupt": [995, 999], "intersect": [265, 333, 401, 404, 738], "interv": [1, 52, 64, 133, 149, 174, 180, 194, 207, 208, 209, 224, 264, 367, 386, 402, 408, 411, 414, 435, 436, 514, 515, 516, 555, 556, 558, 560, 562, 563, 635, 636, 638, 677, 742, 748, 750, 804, 830, 867, 869, 883, 906, 907, 908, 934, 991, 995, 999, 1009, 1015, 1020, 1036, 1040], "intervent": [88, 183], "intl": [64, 408], "intp": [419, 448, 450], "intra": [43, 587, 590, 792, 793], "intract": [89, 409, 996, 1004], "intric": [211, 510], "intricaci": 372, "intrins": [190, 386, 409, 411, 1002, 1007, 1013, 1041], "introduc": [43, 109, 111, 112, 125, 149, 162, 180, 185, 190, 194, 201, 205, 211, 232, 237, 240, 243, 245, 271, 318, 319, 322, 349, 368, 370, 372, 374, 376, 377, 380, 384, 386, 395, 402, 404, 406, 408, 409, 411, 412, 428, 438, 439, 440, 442, 444, 446, 456, 461, 465, 479, 480, 481, 482, 494, 502, 513, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 553, 554, 564, 565, 566, 567, 568, 580, 581, 582, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 606, 607, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 658, 664, 685, 686, 688, 689, 692, 830, 848, 853, 856, 860, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 898, 902, 993, 995, 998, 1001, 1002, 1005, 1009, 1011, 1013, 1014, 1020, 1029, 1030, 1035, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1047, 1048], "introduct": [162, 224, 262, 372, 403, 408, 409, 412, 589, 788, 789, 839, 843, 995, 997, 999, 1001, 1024, 1025], "introductori": [127, 146, 166, 167, 172, 173, 175, 176, 180, 232, 414, 611, 622, 1020, 1023], "introspect": [43, 45, 103, 378, 557, 558, 588, 1009], "intrus": 367, "intuit": [43, 52, 67, 79, 85, 95, 125, 134, 137, 143, 158, 167, 183, 184, 208, 209, 228, 233, 265, 281, 289, 306, 309, 333, 336, 340, 348, 372, 386, 402, 404, 406, 408, 410, 645, 782, 783, 784, 787, 875, 904, 906, 907, 909, 910, 991, 995, 996, 999, 1000, 1006, 1009, 1010, 1014, 1023, 1029], "inv": [109, 113, 300], "inv_boxcox": 1048, "inv_kw_arg": [139, 868], "invalid": [1, 47, 207, 386, 443, 577, 671, 712, 774, 987, 995, 999, 1035, 1037, 1039, 1040, 1042, 1043, 1045, 1048, 1049], "invalidparametererror": 999, "invalu": 1023, "invari": [75, 369, 386, 404, 414, 614, 689, 747, 818, 819, 995, 996, 999, 1014, 1019, 1037, 1040, 1041, 1042], "invent": 1002, "inventor": 1001, "inventori": 1023, "invers": [1, 7, 51, 87, 108, 109, 110, 134, 180, 254, 271, 273, 287, 336, 348, 349, 364, 386, 405, 407, 408, 409, 411, 412, 416, 442, 462, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 525, 531, 532, 533, 537, 539, 541, 555, 559, 562, 588, 589, 590, 628, 644, 645, 658, 659, 666, 668, 674, 675, 676, 677, 678, 680, 724, 743, 752, 797, 798, 846, 847, 854, 855, 861, 862, 864, 868, 871, 877, 878, 880, 896, 897, 904, 905, 906, 909, 910, 912, 914, 936, 993, 995, 999, 1002, 1003, 1009, 1013, 1014, 1020, 1024, 1025, 1029, 1032, 1037, 1040, 1041, 1043, 1047, 1048], "inverse_components_": [896, 897, 1011, 1043], "inverse_func": [107, 139, 183, 405, 462, 868, 1009, 1037, 1047], "inverse_transform": [44, 84, 87, 125, 160, 288, 348, 395, 409, 412, 442, 462, 479, 480, 481, 529, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 580, 587, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 630, 800, 803, 804, 814, 864, 868, 869, 871, 872, 873, 874, 875, 877, 878, 880, 881, 882, 884, 896, 897, 1009, 1010, 1011, 1031, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049], "invert": [113, 125, 160, 227, 348, 349, 384, 406, 412, 630, 689, 693, 1009, 1038], "invert_yaxi": [179, 349], "inverted_cdf": 869, "invest": [378, 1023], "investig": [125, 130, 134, 179, 343, 372, 398, 995], "invok": [374, 529, 535, 537, 543, 544, 565, 567, 568, 799, 822, 825, 901, 1041, 1046], "involv": [309, 311, 313, 321, 336, 340, 359, 361, 367, 372, 386, 387, 398, 407, 414, 699, 832, 833, 996, 1000, 1002, 1006, 1007, 1014, 1018, 1023, 1037], "invscal": [300, 676, 677, 678, 861, 862, 1013], "io": [366, 369, 372, 376, 378, 380, 386, 692, 1018, 1025, 1027], "ioangatop": 1046, "ioanni": 734, "ioerror": 1045, "iofal": 1043, "ion": 1044, "ionescu": [642, 991, 1039], "iowa": [143, 154, 243], "ipca": [1, 124, 531, 532], "ipdb": 380, "ipm": 670, "ipynb": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 351, 352, 353, 354], "ipython": [374, 377, 378, 380], "ipython_config": 378, "iq": 182, "iqbal": 1041, "iqr": [243, 882, 894], "ir": [236, 409, 589, 726, 756, 839, 843, 997, 999], "iren": [1044, 1045, 1049], "iri": [1, 50, 55, 67, 69, 76, 106, 119, 122, 124, 130, 133, 134, 135, 136, 138, 152, 159, 166, 168, 171, 172, 175, 180, 188, 189, 202, 206, 238, 241, 247, 251, 257, 266, 269, 270, 273, 274, 287, 293, 295, 299, 300, 306, 315, 324, 329, 331, 332, 334, 336, 338, 339, 340, 341, 344, 350, 351, 353, 354, 365, 366, 385, 398, 404, 405, 408, 409, 411, 494, 502, 539, 547, 551, 555, 562, 610, 622, 631, 676, 800, 814, 830, 899, 900, 901, 904, 909, 912, 916, 917, 918, 919, 988, 989, 993, 998, 999, 1002, 1006, 1009, 1012, 1013, 1014, 1015, 1020, 1025, 1042], "iris": [126, 271], "iris_61": 366, "iris_969": 366, "iris_version_3": 366, "irreduc": [137, 999], "irregular": [172, 340, 404, 1002], "irregularities_kernel": 172, "irrelev": [158, 194, 355, 378, 406, 411, 413, 603, 740, 999], "irrespect": [207, 237, 258, 273, 284, 605], "irvin": 369, "is_categor": 632, "is_categorical_": [559, 560], "is_classifi": [1, 374, 386, 1048], "is_cluster": [1, 1048], "is_data_valid": [671, 995], "is_fit": [1, 982], "is_fitted_": [418, 421, 423, 426, 427], "is_inli": [466, 561, 850], "is_leav": 354, "is_max_test_scor": 105, "is_model_valid": [671, 995], "is_multilabel": [1, 381, 1046], "is_outlier_detector": [1, 1048], "is_paramet": 986, "is_pypi": 1047, "is_regressor": [1, 374, 386, 1048], "is_scalar_nan": 1042, "is_sh": 275, "is_split_nod": 354, "is_stationari": [175, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625], "isa": 57, "isaac": [1035, 1036, 1038, 1039, 1046], "isaack": 1042, "isaactrost": 1046, "isakov": 1041, "isbn": [369, 404, 995], "isclos": 55, "isdigit": [57, 412], "ish": 69, "ishaan": 1042, "ishan": [1042, 1043], "ishank": [1034, 1035, 1036], "ishikawa": [1041, 1042], "isin": 326, "isinst": [70, 142, 201, 224, 374, 386], "islic": [47, 79, 95], "ism": 1033, "isn": [163, 313, 347, 349, 355, 360, 372, 376, 380, 513, 559, 560, 593, 794, 803, 804, 877, 1002, 1014, 1039, 1047], "iso": [136, 166, 180, 218, 228, 610, 613, 614, 1020], "iso_reg": 635, "isoformat": 55, "isol": [1, 143, 150, 233, 243, 348, 370, 378, 390, 561, 850, 908, 1038, 1039], "isolationforest": [1, 133, 180, 210, 233, 243, 304, 631, 830, 908, 1005, 1020, 1035, 1036, 1037, 1038, 1040, 1042, 1043, 1044, 1045, 1046, 1048], "isolationforestifit": 150, "isomap": [1, 51, 85, 139, 180, 225, 228, 230, 237, 294, 313, 317, 411, 500, 542, 547, 564, 689, 690, 691, 692, 853, 865, 874, 897, 1002, 1020, 1024, 1025, 1037, 1039, 1042, 1043, 1044, 1045, 1046], "isomap__n_neighbor": 313, "isometr": [226, 688, 690, 691, 692, 996], "isoton": [1, 61, 62, 107, 180, 232, 434, 635, 636, 637, 657, 933, 996, 1020, 1021, 1025, 1030, 1031, 1032, 1033, 1035, 1042, 1045], "isotonic_regress": [1, 635, 1042], "isotonicregress": [1, 236, 990, 1030, 1031, 1032, 1033, 1035, 1037, 1038, 1039, 1041, 1043, 1044, 1045], "isotonicregression0": 635, "isotrop": [1, 70, 88, 90, 94, 125, 169, 171, 226, 228, 404, 406, 414, 510, 517, 530, 615, 619, 620, 622, 623], "isotropi": 409, "isr": 413, "issam": [0, 1035], "issu": [0, 1, 43, 62, 110, 116, 207, 224, 269, 311, 322, 360, 366, 375, 376, 377, 381, 384, 386, 387, 389, 390, 395, 398, 400, 404, 406, 407, 412, 446, 449, 459, 470, 479, 480, 481, 532, 537, 541, 571, 587, 588, 590, 611, 627, 691, 695, 769, 875, 877, 880, 892, 937, 989, 996, 999, 1007, 1009, 1014, 1018, 1019, 1022, 1029, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1044, 1046, 1047, 1048, 1049], "issuenumb": 380, "ist": 413, "isupp": 412, "isuru": 1041, "itakura": [409, 536, 538, 545, 1036], "itali": 369, "item": [1, 47, 48, 49, 50, 51, 52, 55, 66, 78, 88, 107, 138, 140, 143, 146, 154, 162, 183, 205, 209, 214, 227, 239, 240, 242, 251, 261, 267, 271, 317, 326, 348, 365, 372, 373, 374, 381, 405, 461, 524, 559, 560, 587, 588, 590, 632, 694, 812, 877, 899, 900, 919, 926, 954, 991, 1012, 1019], "item_idx": 304, "iter": [1, 47, 54, 55, 67, 80, 104, 113, 120, 123, 134, 137, 140, 142, 144, 145, 147, 148, 149, 163, 178, 180, 190, 191, 214, 221, 251, 252, 256, 259, 264, 272, 275, 299, 301, 302, 306, 315, 326, 328, 329, 336, 372, 378, 380, 381, 385, 386, 399, 400, 404, 407, 409, 411, 413, 416, 434, 437, 438, 440, 442, 444, 445, 446, 449, 451, 456, 458, 459, 460, 468, 469, 475, 479, 480, 481, 513, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 551, 552, 557, 558, 559, 560, 562, 565, 566, 580, 581, 587, 588, 590, 592, 593, 601, 610, 627, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 835, 838, 853, 860, 861, 862, 863, 864, 868, 875, 877, 879, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 919, 942, 947, 948, 955, 956, 957, 958, 966, 988, 989, 995, 996, 998, 999, 1002, 1003, 1004, 1012, 1013, 1014, 1015, 1020, 1023, 1025, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1048, 1049], "iter_minibatch": 47, "iter_offset": 1043, "iter_offset_": 1043, "iterated_pow": [104, 245, 263, 530, 533, 539, 1035], "iterativeimput": [1, 177, 179, 180, 376, 395, 487, 563, 579, 628, 629, 630, 639, 645, 672, 826, 847, 865, 882, 1020, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048], "itergrid": 1031, "itertool": [47, 77, 79, 95, 155, 184, 197, 250, 255, 264, 271, 273], "ith": [494, 774, 778, 840, 861, 862, 877, 878], "ith_cluster_silhouette_valu": 93, "itk": [1039, 1040, 1041], "its": [0, 1, 6, 25, 43, 48, 51, 52, 53, 57, 58, 63, 64, 66, 70, 72, 75, 88, 98, 99, 109, 111, 113, 116, 118, 125, 126, 132, 134, 140, 142, 144, 146, 149, 163, 167, 172, 174, 183, 184, 186, 188, 190, 198, 205, 219, 223, 224, 228, 233, 240, 242, 243, 245, 247, 249, 254, 255, 258, 263, 267, 269, 271, 273, 278, 284, 286, 290, 291, 306, 316, 322, 328, 333, 340, 345, 347, 348, 351, 354, 355, 360, 361, 365, 366, 367, 368, 372, 373, 374, 376, 377, 380, 384, 385, 386, 387, 390, 392, 395, 398, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 420, 437, 439, 441, 443, 447, 451, 453, 457, 460, 461, 462, 464, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 495, 501, 521, 529, 531, 532, 533, 535, 536, 538, 539, 540, 542, 548, 551, 553, 554, 555, 556, 557, 558, 562, 563, 564, 582, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 606, 607, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 627, 644, 645, 671, 672, 674, 685, 686, 687, 688, 692, 696, 699, 702, 708, 725, 729, 730, 736, 737, 741, 778, 781, 783, 789, 797, 798, 800, 825, 832, 833, 835, 846, 847, 848, 850, 851, 852, 854, 855, 856, 863, 864, 868, 873, 876, 877, 879, 896, 897, 900, 904, 905, 906, 909, 912, 914, 930, 931, 936, 943, 988, 991, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1005, 1006, 1007, 1012, 1013, 1014, 1015, 1018, 1023, 1029, 1031, 1032, 1033, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049], "itsaphel": 1047, "itself": [27, 61, 64, 82, 88, 134, 146, 150, 184, 194, 240, 246, 258, 273, 284, 311, 336, 348, 359, 361, 371, 372, 374, 378, 386, 395, 398, 402, 404, 415, 437, 438, 441, 442, 443, 466, 467, 468, 469, 470, 471, 472, 473, 525, 529, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 549, 564, 567, 582, 591, 594, 595, 597, 598, 599, 601, 602, 609, 639, 640, 641, 642, 643, 645, 655, 689, 691, 774, 778, 792, 793, 839, 840, 841, 842, 843, 844, 845, 849, 857, 858, 869, 870, 871, 899, 900, 957, 991, 995, 996, 998, 1002, 1003, 1007, 1018, 1033, 1044], "iv": [182, 999], "ivan": [1037, 1038, 1041, 1044, 1047, 1048], "ivanllt": 1044, "iver": 1035, "iverson": 995, "ivicajov": 1032, "ivl": 186, "ivt": 532, "iv\u00e1n": [1036, 1042], "iwhalv": 1042, "iwona": 1046, "ix": [50, 273, 342], "iy_j": 1009, "iyer": 1040, "izadifar": 1047, "j": [0, 50, 55, 72, 73, 75, 78, 94, 102, 110, 111, 112, 134, 137, 138, 148, 161, 168, 179, 184, 218, 229, 242, 249, 263, 264, 269, 275, 288, 294, 297, 308, 318, 354, 360, 366, 367, 369, 376, 378, 384, 393, 401, 402, 404, 406, 408, 409, 411, 412, 414, 415, 434, 437, 441, 443, 450, 451, 466, 471, 496, 511, 514, 515, 516, 518, 526, 529, 532, 534, 535, 536, 538, 539, 545, 551, 557, 558, 592, 593, 632, 633, 637, 644, 645, 648, 649, 666, 667, 669, 680, 688, 689, 690, 692, 693, 694, 696, 705, 708, 710, 714, 716, 718, 721, 723, 724, 726, 755, 756, 758, 759, 774, 778, 788, 789, 792, 793, 833, 834, 841, 846, 847, 848, 850, 851, 852, 853, 854, 855, 856, 857, 858, 875, 884, 885, 912, 913, 988, 989, 993, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1009, 1011, 1013, 1014, 1015, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "j0rd1smit": 1041, "ja": [407, 1036], "jaccard": [1, 283, 401, 447, 454, 699, 703, 719, 729, 734, 738, 778, 779, 780, 796, 1002, 1037, 1038], "jaccard_scor": [1, 283, 400, 703, 729, 734, 796, 999, 1038, 1041, 1049], "jaccard_similarity_scor": [1031, 1033, 1038], "jaccarddist": 699, "jack": [1031, 1034, 1042, 1043, 1044, 1045, 1047], "jacklangerman": [1037, 1038], "jackman": 1030, "jackmartin": 1035, "jackson": [1035, 1036, 1038], "jacob": [0, 394, 1034, 1035, 1036], "jacobi": 1044, "jacobsen": 1032, "jacopo": [1037, 1038], "jacqu": [1030, 1032], "jaehong": 1039, "jaehyun": 1041, "jaewon": 1037, "jai": [1039, 1043], "jaidev": 1034, "jaim": 1039, "jaimin": 1048, "jain": [1035, 1036, 1037, 1041, 1043, 1044], "jair": 1036, "jake": [0, 394, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1041, 1043], "jakemick": 1031, "jakhar": 1041, "jakirkham": [1036, 1037, 1038, 1044, 1045], "jakob": 1048, "jakub": 1046, "jakubek": [1042, 1043], "jalali": [0, 387, 393, 398, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "jalexand3r": 1043, "jamaoui": [1037, 1038, 1041], "jame": [0, 369, 408, 834, 1000, 1029, 1030, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1045, 1046, 1048], "jamestwebb": [1031, 1032], "jami": 1037, "jamieson": 988, "jan": [0, 208, 281, 394, 883, 1029, 1032, 1033, 1034, 1035, 1037, 1038, 1041, 1045], "jana": 1039, "janet": 369, "janez": 1048, "jane\u017e": [1030, 1031], "janfidor": [1044, 1045], "janhang": 1039, "janin": 1036, "janna": 1035, "jannik": 1042, "janso": 1029, "jansson": [1032, 1044], "januari": [370, 372, 1029, 1030, 1039, 1041, 1044, 1046, 1048], "janvanrijn": [1037, 1038], "jaqu": [0, 394, 1029, 1030, 1031, 1032], "jardim": 1042, "jare": 1044, "jarfa": 1035, "jarir": 1042, "jarkko": 696, "jarosch": 1031, "jaroslaw": 1036, "jarrod": [0, 394, 1038, 1045, 1046], "jarvelin": [726, 756, 999], "jaskowiak": 443, "jason": [44, 409, 533, 900, 1035, 1037, 1041, 1044], "jatin": [1033, 1035], "jauhar": 1043, "jauvin": 1030, "java": [404, 439], "javier": [1033, 1047], "jawahar": 991, "jax": 1046, "jay": 1036, "jaya": 1043, "jayaratn": [1040, 1041, 1044, 1045], "jayratn": 1041, "jayzed82": 1036, "jb": [1045, 1046], "jbdelafoss": 1036, "jbirch": [404, 439], "jblackburn": 1035, "jc": [1036, 1037], "jdcaballero": 1033, "jdethuren": [1037, 1038], "je": 1043, "jean": [1029, 1032, 1033, 1034, 1035, 1036, 1042], "jeann": 1043, "jeanselm": 1039, "jeb": 1037, "jeevan": 1041, "jeff": [1033, 1035, 1042, 1043], "jeffrei": [1032, 1035], "jeffrey04": [1034, 1035], "jelfner": 1043, "jell": 1032, "jen": [658, 1037], "jen09": 409, "jenatton": 409, "jenni": 1043, "jennif": 1042, "jensen": [1035, 1041], "jeong": 1039, "jeremi": [1023, 1034, 1035, 1036, 1037, 1040, 1041], "jeremiedbb": [1037, 1038, 1039], "jeremynixon": 1035, "jeroen": 1035, "jeroenpeterbo": 1041, "jeroko": 1036, "jeromedock": 1039, "jerphanion": [0, 393, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "jerryzhu": 899, "jesper": 1039, "jess": [835, 1000, 1042], "jess010": 1032, "jessica": 1035, "jessicakk0711": 1045, "jessicali9530": [45, 367], "jesu": [57, 347, 348], "jet": 100, "jevnik": 1034, "jewalikar": 1035, "jf": 1038, "jfraj": 1034, "jha": [1033, 1039, 1043, 1048], "jhay": 1041, "jhun": 471, "jia": 1035, "jiacheng": 1036, "jiali": 1034, "jian": 404, "jianbo": [404, 449, 459, 691], "jiang": [402, 1033, 1040], "jianzhu": 1042, "jiawei": [1045, 1046, 1047], "jiaxiang": 1041, "jiayi": 1048, "jie": [1037, 1038, 1041], "jiefangxuanyan": 1042, "jigna": 1041, "jihan": 1043, "jill": 1035, "jim": 1031, "jim0421": 1041, "jimenez": [1042, 1043], "jimmi": [861, 862, 1003, 1035, 1037], "jim\u00e9nez": [0, 362, 1037, 1040, 1041, 1042, 1043, 1044], "jin": [639, 1040, 1041], "jindal": 1041, "jinkun": 1037, "jiongyan": 1037, "jiquan": 1003, "jirair": 1048, "jirka": 1043, "jiten": 1044, "jitendra": [404, 449, 459, 691], "jitter": [134, 650, 654, 1040], "jiyuan": 1035, "jjabl": 1037, "jjmistri": 1040, "jkarolczak": 1044, "jkleint": [1036, 1037], "jl": [237, 897], "jmlr": [0, 404, 666, 667, 676, 704, 995, 1014], "jmlr_2014": 692, "jmontoyam": 1036, "jnboehm": 1042, "jnt": 408, "joaak": [1037, 1038], "joan": [1036, 1037, 1038, 1039], "joanna": 1039, "joaorodriguesist": 1049, "joaquin": 1041, "job": [149, 183, 252, 258, 372, 376, 392, 411, 415, 434, 441, 443, 445, 447, 449, 454, 455, 458, 461, 464, 465, 469, 529, 533, 534, 535, 537, 540, 541, 543, 544, 546, 553, 554, 555, 556, 561, 562, 563, 564, 565, 566, 567, 568, 601, 606, 607, 610, 634, 639, 657, 688, 689, 690, 691, 692, 693, 694, 774, 778, 781, 800, 803, 804, 806, 814, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 836, 837, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858, 863, 866, 899, 900, 902, 966, 1023, 1048], "joblib": [1, 41, 77, 87, 104, 140, 284, 314, 367, 370, 372, 375, 376, 381, 384, 386, 390, 397, 405, 415, 434, 438, 441, 442, 443, 445, 447, 449, 454, 455, 458, 461, 464, 469, 506, 507, 529, 533, 534, 535, 537, 540, 541, 543, 544, 546, 553, 554, 555, 556, 561, 562, 563, 564, 565, 566, 567, 568, 593, 601, 606, 607, 610, 632, 634, 639, 647, 651, 653, 655, 657, 658, 659, 661, 663, 665, 666, 668, 676, 679, 688, 689, 690, 691, 692, 693, 694, 774, 778, 781, 800, 803, 804, 806, 814, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 836, 837, 846, 847, 850, 852, 854, 855, 857, 858, 863, 864, 865, 866, 899, 900, 966, 967, 983, 999, 1019, 1025, 1029, 1030, 1032, 1034, 1036, 1037, 1038, 1040, 1041, 1044, 1046, 1047, 1048, 1049], "joblib_start_method": 384, "jochen": 1031, "jock": 102, "joe": [1034, 1047, 1048], "joei": 1045, "joel": [0, 387, 393, 412, 533, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1046, 1047, 1048, 1049], "johann": [1031, 1032, 1037, 1039, 1040, 1043], "johanna": [112, 1047], "johannah": 1035, "johanwork": 1042, "john": [369, 412, 534, 708, 735, 769, 879, 906, 907, 909, 910, 989, 995, 999, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1042, 1044, 1045, 1046, 1047, 1048], "johnathanpi": [1044, 1045], "johnson": [37, 88, 180, 229, 232, 304, 308, 364, 486, 500, 880, 892, 896, 897, 898, 1009, 1016, 1020, 1025, 1037, 1043, 1045, 1049], "johnson_lindenstrauss_min_dim": [1, 237, 1011, 1030], "johnston": [163, 369, 995, 1038], "johnstott": 1037, "johnthagen": 1044, "johnwon": 308, "join": [50, 51, 57, 88, 178, 224, 264, 306, 367, 387, 460, 1022, 1029, 1037], "joint": [146, 180, 184, 189, 194, 195, 198, 206, 226, 258, 405, 611, 652, 662, 692, 839, 840, 841, 842, 843, 904, 995, 996, 1000, 1004, 1006, 1010, 1020, 1029], "jointli": [25, 203, 271, 404, 409, 995], "joli": [0, 394, 1030, 1031, 1032, 1033, 1034, 1035], "jon": [347, 1036, 1039, 1040, 1042, 1043, 1046], "jona": [1041, 1046], "jonatan": 1037, "jonathan": [367, 1033, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1045], "joncral": 1035, "jone": [0, 367, 394, 1029, 1048], "jong": 1036, "jonker": [401, 719], "joona": 1029, "jordal": 1035, "jordan": [404, 409, 691, 797, 1039, 1040, 1043, 1044], "jordi": 1035, "jorg": [658, 1032, 1041, 1043], "jorgecardena": 1048, "jori": [0, 394, 1036, 1037, 1038, 1041, 1042], "jose": [163, 369, 658, 999, 1037, 1039], "joseph": [1032, 1033, 1034, 1035, 1041, 1043, 1044, 1048], "josephsalmon": [1036, 1037, 1038], "josh": [412, 1036, 1049], "joshi": [1035, 1037, 1043, 1046, 1047], "joshua": [318, 367, 1031, 1032, 1034, 1035, 1041, 1044, 1045], "joshuakennethjon": 1038, "jos\u00e9": [723, 1032, 1042, 1047], "jotasi": 1037, "joudet": [1036, 1037], "journal": [0, 112, 184, 264, 270, 281, 366, 367, 369, 402, 404, 406, 411, 449, 459, 470, 532, 539, 627, 635, 645, 689, 692, 693, 705, 715, 731, 734, 735, 758, 759, 786, 829, 834, 880, 892, 988, 989, 993, 995, 996, 997, 999, 1000, 1006, 1011, 1013, 1014], "jovan": [1043, 1044], "joydeep": 404, "jo\u00e3o": [1044, 1047, 1048], "jo\u00ebl": 1037, "jpcar": 1047, "jpeg": [366, 367, 491, 492], "jpfrancoia": [1035, 1036], "jpg": [504, 583, 586], "jpienaar": [1047, 1048], "jpm": 51, "jpmml": 1018, "jpmorgan": [51, 1023], "jr": 995, "jrenni": 841, "jrfiedler": 1035, "jschendel": [1036, 1037], "jschuerz": 1043, "jshn9515": 1049, "json": [52, 366, 372, 390], "jth": [774, 778], "juan": [0, 362, 1029, 1040, 1041, 1042, 1043, 1044], "juanfe88": 1044, "judg": [91, 213, 404], "judgment": [255, 999], "judithabk6": 1040, "juergen": [1039, 1044], "jul": 273, "juli": [163, 369, 413, 734, 885, 1009, 1032, 1036, 1037, 1038, 1047, 1049], "julia": [404, 717, 737, 795], "julian": [1036, 1037, 1047, 1048], "juliankahnert": 1035, "juliaschoepp": [1044, 1045], "juliathebrav": 1035, "julien": [0, 393, 658, 995, 1023, 1029, 1032, 1036, 1037, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "juliet": 1037, "julietcl": 1037, "julio": 1042, "julyrashchenko": 1042, "jumon": 1040, "jump": [43, 205, 208, 304, 369, 372, 412, 883], "jumpi": 412, "june": [404, 996, 1035, 1045, 1049], "juneja": [1047, 1048], "jung": [1036, 1040, 1044], "jungkook": 1034, "jungl": 996, "jupyt": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 351, 352, 353, 354, 373, 374, 405, 465, 902, 1015, 1018, 1019, 1040, 1043, 1049], "jupyterlit": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 351, 352, 353, 354], "jurgen": 1023, "juri": 564, "jurman": 743, "jur\u010da": 1049, "just": [43, 52, 67, 102, 116, 120, 140, 143, 149, 163, 199, 227, 238, 258, 264, 271, 275, 284, 299, 336, 347, 348, 354, 355, 367, 371, 372, 373, 374, 376, 377, 380, 384, 385, 386, 401, 403, 404, 405, 408, 411, 413, 416, 465, 531, 533, 540, 544, 553, 554, 555, 556, 557, 558, 561, 562, 563, 564, 578, 583, 610, 611, 646, 652, 657, 658, 660, 662, 666, 667, 668, 676, 677, 678, 806, 823, 853, 861, 862, 988, 995, 998, 999, 1000, 1003, 1007, 1009, 1013, 1019, 1029, 1033, 1035, 1037, 1041, 1045], "justglow": 1038, "justif": 676, "justifi": [372, 378, 402, 563], "justin": [1031, 1037, 1041], "jvm": 1042, "jygerardi": [1044, 1045], "j\u00e9r\u00e9mie": [0, 393, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "j\u00e9r\u00f4me": [1038, 1039, 1040, 1046, 1047, 1048, 1049], "j\u00eann": 1035, "j\u00f6rg": [404, 447, 454, 1037], "j\u00f6rn": 1036, "j\u00f8rgensen": [995, 1046], "k": [1, 33, 50, 51, 54, 55, 57, 61, 63, 66, 67, 71, 72, 73, 75, 77, 80, 82, 83, 86, 88, 89, 93, 96, 98, 106, 107, 111, 118, 120, 127, 134, 136, 142, 150, 152, 153, 159, 160, 163, 168, 170, 171, 175, 176, 178, 179, 180, 183, 184, 185, 186, 191, 193, 197, 201, 203, 209, 218, 220, 237, 239, 241, 242, 243, 249, 252, 260, 264, 267, 268, 273, 274, 277, 278, 284, 286, 289, 290, 291, 292, 293, 295, 296, 297, 305, 306, 307, 308, 311, 313, 317, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 346, 347, 349, 354, 355, 360, 367, 369, 372, 380, 381, 384, 386, 395, 400, 401, 402, 405, 406, 407, 409, 410, 411, 412, 413, 414, 416, 437, 440, 443, 444, 445, 446, 447, 448, 449, 450, 456, 457, 459, 466, 469, 485, 500, 510, 521, 529, 535, 539, 542, 543, 544, 547, 548, 551, 553, 555, 556, 557, 580, 588, 589, 590, 591, 593, 594, 595, 597, 598, 599, 605, 606, 607, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 631, 639, 640, 648, 650, 651, 653, 654, 655, 656, 658, 659, 663, 664, 665, 666, 667, 669, 679, 680, 682, 683, 684, 685, 686, 688, 691, 695, 696, 704, 705, 708, 717, 726, 737, 743, 756, 758, 759, 761, 766, 769, 774, 775, 776, 777, 779, 793, 794, 795, 797, 798, 801, 805, 807, 808, 809, 812, 815, 816, 818, 819, 821, 822, 828, 839, 844, 845, 846, 847, 848, 849, 850, 852, 854, 855, 856, 857, 858, 865, 869, 870, 871, 875, 876, 877, 879, 880, 884, 892, 897, 911, 919, 933, 943, 948, 972, 988, 989, 991, 992, 993, 995, 996, 997, 998, 1001, 1003, 1004, 1005, 1007, 1012, 1013, 1014, 1015, 1018, 1020, 1024, 1025, 1029, 1030, 1031, 1032, 1035, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1046, 1047, 1048], "k0": 993, "k1": [414, 621, 624], "k1__": 414, "k1__constant_valu": 171, "k1__k1": 414, "k1__k1__constant_valu": 414, "k1__k1__constant_value_bound": 414, "k1__k2": 414, "k1__k2__length_scal": [173, 414], "k1__k2__length_scale_bound": 414, "k2": [414, 621, 624], "k2__": 414, "k2__length_scal": 414, "k2__length_scale_bound": 414, "k_": [401, 414, 616, 619, 621, 624, 774, 991, 1009], "k_1": [1, 414, 621, 624], "k_2": [1, 414, 621, 624], "k_best": [315, 591, 901, 1012, 1046], "k_diag": [612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625], "k_fit_all_": 870, "k_fit_rows_": 870, "k_gradient": [612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625], "k_init": [440, 456], "k_mean": [1, 97, 381, 386, 1037, 1045], "k_means_cluster_cent": 97, "k_means_elkan": 1037, "k_means_label": 97, "k_new": 870, "k_ret": [844, 845], "k_true": [844, 845], "ka00ri": [1044, 1045], "kachaiev": 1046, "kaczmarzyk": 1046, "kadatatlu": 1042, "kadota": 1043, "kaggl": [45, 154, 367, 385, 999], "kahni": 1041, "kai": [369, 561, 1005, 1036], "kaicheng": 1033, "kaichogami": 1035, "kailasa": [1043, 1044], "kaim": [861, 862], "kaiser": [409, 530], "kakati": 1044, "kalla": 1049, "kalli": [1037, 1038], "kalyan": 1035, "kamalakerdadi": [1034, 1035], "kamani": 1049, "kamar": 1037, "kamchyev": 1046, "kamel": 1029, "kamishima": [1035, 1036], "kamm": 999, "kanai": [1035, 1036, 1037], "kanazu": [1044, 1045], "kanchimo": 1047, "kang": [1037, 1039], "kania": [1044, 1045], "kanika": 1039, "kanishk": 1044, "kanissh": 1044, "kanji": 1042, "kanniah": [1032, 1033], "kansal": 1035, "kapadni": 1044, "kapeln": [184, 1006], "kapoor": [1037, 1038], "kappa": [1, 534, 716], "kapur": 1036, "kar": 1035, "karan": [1036, 1037, 1038], "karayev": 1031, "karbownik": 1042, "karen": 1042, "karger": [841, 1001], "karhunen": 532, "karin": [627, 989], "karl": 1037, "karlo": [1046, 1047], "karnofski": 1036, "karnowski": 1041, "karol": 1032, "kartik": 1041, "karypi": 404, "kaseorg": 1039, "kashif": 1034, "kasim": 1033, "kaski": 696, "kasper": 1037, "kassa": [1044, 1045], "kastner": [0, 394, 1031, 1032, 1033, 1040, 1041], "kat": 1036, "kataev": [1037, 1038], "kataki": [720, 734, 740, 999], "katarina": [1039, 1041], "katheleen": 366, "kathi": [1036, 1039], "kathleen": 1036, "kathryn": 1040, "kati": 1036, "katotten": 1043, "katrin": [1037, 1038], "katrina": 1040, "katriopla": 1037, "katyal": 1039, "katz": [1034, 1041, 1042], "katzfuss": 999, "kaufmann": [1011, 1015, 1041], "kaushik": [1036, 1043, 1044, 1045, 1047], "kaushik94": 1032, "kawamura": 1042, "kawwa": 1042, "kayawari": 1042, "kaylani2": 1041, "kaynak": 369, "kazmar": 1033, "kb": [103, 183, 184, 258], "kbest": [104, 591], "kbin": [311, 318], "kbinsdiscret": [1, 43, 66, 86, 118, 180, 191, 207, 224, 244, 303, 306, 311, 318, 344, 510, 603, 657, 867, 883, 913, 1009, 1020, 1037, 1041, 1042, 1043, 1045, 1047, 1049], "kbinsdiscretizer__n_bin": 306, "kcachegrind": 375, "kd": [289, 404, 410, 1002, 1037, 1038, 1039], "kd_tree": [415, 441, 443, 447, 454, 688, 689, 846, 847, 848, 849, 850, 852, 854, 855, 856, 1002, 1042, 1046], "kdd": [47, 188, 367, 402, 434, 1011], "kdd06_rp": 897, "kddcup": [243, 365, 490, 1025], "kddcup99": [1, 367, 490], "kde": [182, 183, 278, 281, 288, 289, 297, 410, 849], "kdt": 1002, "kdtree": [1, 443, 447, 454, 688, 689, 844, 846, 847, 848, 849, 850, 852, 854, 855, 856, 1031, 1033, 1037, 1041, 1042, 1045, 1046], "ke": [411, 1040, 1041], "kearn": 1032, "keat": [1044, 1045], "keep": [45, 52, 64, 77, 107, 123, 125, 140, 149, 162, 173, 178, 182, 183, 184, 185, 186, 194, 205, 207, 208, 209, 214, 224, 229, 247, 254, 259, 262, 308, 309, 316, 326, 336, 347, 348, 351, 355, 359, 360, 364, 372, 374, 376, 385, 386, 402, 404, 405, 406, 407, 408, 409, 427, 447, 462, 479, 480, 481, 482, 491, 492, 532, 538, 539, 542, 545, 552, 554, 556, 558, 560, 563, 566, 568, 594, 597, 599, 602, 611, 634, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 676, 677, 678, 679, 708, 709, 818, 837, 838, 847, 855, 861, 862, 900, 905, 907, 910, 913, 915, 995, 1000, 1004, 1007, 1009, 1019, 1022, 1023, 1025, 1029, 1034, 1037, 1038, 1042, 1043, 1045, 1047, 1049], "keep_empty_featur": [103, 154, 185, 235, 245, 314, 317, 627, 628, 630, 989, 1044, 1048], "keerti": 1044, "kegl": 1033, "kei": [1, 47, 49, 52, 55, 77, 126, 140, 143, 154, 162, 178, 182, 224, 240, 243, 246, 263, 265, 267, 268, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 361, 365, 374, 377, 378, 379, 384, 386, 387, 390, 395, 404, 405, 408, 414, 461, 469, 559, 560, 565, 566, 567, 568, 587, 590, 593, 609, 617, 626, 632, 634, 659, 702, 711, 800, 803, 804, 812, 814, 822, 827, 863, 864, 919, 935, 965, 1007, 1019, 1025, 1026, 1035, 1041, 1042, 1044, 1045, 1047], "keidar": 1048, "keith": [347, 1029, 1034], "kekalainen": [726, 756, 999], "kelkar": [1036, 1037, 1039], "kelleh": [708, 999], "kelleher2015": 999, "kellei": [367, 1031, 1032], "keller": 1041, "kellogg": 51, "kellycarmodi": 1039, "kemal": [0, 1031, 1032], "kemenad": 1040, "kemk": 1040, "ken": [369, 1031, 1038], "ken4git": 1043, "kendal": 1044, "kendrick": 1041, "kennedi": [1036, 1039, 1046], "kenneth": [1011, 1029, 1030, 1035, 1036, 1043, 1044], "kenni": 1041, "kensuk": 1039, "kent": 57, "kenta": 1032, "kento": [1044, 1045], "kept": [64, 254, 284, 343, 366, 398, 414, 494, 533, 536, 538, 539, 545, 596, 609, 610, 611, 619, 620, 644, 695, 797, 798, 931, 1009, 1037, 1038], "kera": [384, 1018], "kerimov": [1036, 1037], "kernal": 125, "kernc": [1029, 1043, 1044], "kernel": [1, 23, 24, 27, 42, 45, 48, 49, 50, 66, 67, 68, 84, 106, 116, 119, 121, 129, 132, 155, 161, 166, 168, 169, 170, 171, 174, 178, 193, 208, 215, 220, 232, 233, 241, 245, 246, 257, 262, 264, 266, 269, 270, 274, 279, 285, 290, 295, 309, 316, 327, 330, 331, 333, 334, 336, 337, 338, 339, 341, 344, 355, 359, 364, 374, 384, 386, 392, 402, 404, 405, 408, 412, 427, 437, 445, 449, 458, 459, 462, 479, 480, 481, 488, 494, 496, 500, 502, 512, 531, 532, 533, 539, 542, 552, 554, 556, 558, 560, 563, 566, 568, 592, 593, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 631, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 676, 677, 678, 679, 688, 690, 691, 692, 695, 735, 758, 759, 761, 766, 767, 774, 775, 776, 777, 800, 806, 811, 814, 830, 832, 837, 838, 844, 845, 847, 849, 855, 862, 864, 865, 870, 874, 876, 877, 879, 884, 899, 900, 904, 905, 906, 907, 908, 909, 910, 913, 915, 921, 988, 994, 995, 996, 999, 1000, 1002, 1005, 1012, 1013, 1020, 1021, 1024, 1025, 1029, 1030, 1031, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "kernel_": [167, 168, 169, 170, 171, 172, 173, 174, 176, 610, 611], "kernel__k1": 172, "kernel__k1__k1": 172, "kernel__k1__k1__k1": 172, "kernel__k1__k1__k1__k1": 172, "kernel__k1__k1__k1__k1__constant_valu": 172, "kernel__k1__k1__k1__k1__constant_value_bound": 172, "kernel__k1__k1__k1__k2": 172, "kernel__k1__k1__k1__k2__length_scal": 172, "kernel__k1__k1__k1__k2__length_scale_bound": 172, "kernel__k1__k1__k2": 172, "kernel__k1__k1__k2__k1": 172, "kernel__k1__k1__k2__k1__k1": 172, "kernel__k1__k1__k2__k1__k1__constant_valu": 172, "kernel__k1__k1__k2__k1__k1__constant_value_bound": 172, "kernel__k1__k1__k2__k1__k2": 172, "kernel__k1__k1__k2__k1__k2__length_scal": 172, "kernel__k1__k1__k2__k1__k2__length_scale_bound": 172, "kernel__k1__k1__k2__k2": 172, "kernel__k1__k1__k2__k2__length_scal": 172, "kernel__k1__k1__k2__k2__length_scale_bound": 172, "kernel__k1__k1__k2__k2__period": 172, "kernel__k1__k1__k2__k2__periodicity_bound": 172, "kernel__k1__k2": 172, "kernel__k1__k2__k1": 172, "kernel__k1__k2__k1__constant_valu": 172, "kernel__k1__k2__k1__constant_value_bound": 172, "kernel__k1__k2__k2": 172, "kernel__k1__k2__k2__alpha": 172, "kernel__k1__k2__k2__alpha_bound": 172, "kernel__k1__k2__k2__length_scal": 172, "kernel__k1__k2__k2__length_scale_bound": 172, "kernel__k2": 172, "kernel__k2__k1": 172, "kernel__k2__k1__k1": 172, "kernel__k2__k1__k1__constant_valu": 172, "kernel__k2__k1__k1__constant_value_bound": 172, "kernel__k2__k1__k2": 172, "kernel__k2__k1__k2__length_scal": 172, "kernel__k2__k1__k2__length_scale_bound": 172, "kernel__k2__k2": 172, "kernel__k2__k2__noise_level": 172, "kernel__k2__k2__noise_level_bound": 172, "kernel__length_scal": 167, "kernel__period": 167, "kernel_approxim": [1, 43, 66, 155, 178, 180, 187, 188, 220, 233, 238, 315, 638, 639, 640, 641, 642, 677, 758, 759, 870, 991, 1020, 1030, 1036, 1046], "kernel_dens": [844, 845], "kernel_label": 342, "kernel_metr": [1, 639, 640, 641, 642], "kernel_param": [155, 449, 533, 639, 643], "kernel_pca": [44, 125, 405], "kernel_pca_": 688, "kernel_pca_back_proj_ax": 125, "kernel_pca_proj_ax": 125, "kernel_ridg": [1, 167, 239, 643, 1000, 1033], "kernel_ridge_tun": 167, "kernel_svm": 238, "kernel_svm_scor": 238, "kernel_svm_tim": 238, "kernelapproximationkernel": 392, "kernelcenter": [1, 400, 1009, 1039, 1043, 1045, 1046], "kerneldens": [1, 288, 289, 297, 410, 1031, 1037, 1038, 1042, 1043, 1044], "kernelpca": [1, 44, 405, 409, 531, 532, 539, 542, 688, 690, 692, 870, 1009, 1030, 1031, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046], "kernelridg": [1, 125, 167, 239, 672, 992, 1000, 1033, 1046], "kertesz": 1043, "keshat": [666, 667, 995], "keshavan": 1039, "kesshi": [1039, 1040], "kevad": 1039, "kevin": [643, 1031, 1033, 1035, 1036, 1039, 1040, 1041, 1043, 1044, 1046, 1048, 1049], "kevlani": 1037, "keyber": 1047, "keyerror": [919, 1039], "keyword": [347, 366, 372, 374, 377, 379, 386, 404, 415, 418, 435, 441, 442, 447, 449, 454, 461, 464, 494, 501, 533, 536, 538, 557, 558, 565, 566, 567, 568, 609, 620, 631, 632, 639, 643, 646, 647, 652, 653, 660, 661, 662, 663, 681, 684, 688, 692, 697, 698, 699, 700, 701, 702, 774, 778, 779, 780, 781, 792, 793, 806, 823, 844, 845, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858, 864, 868, 943, 967, 988, 996, 999, 1002, 1012, 1029, 1033, 1035, 1036, 1037, 1039, 1041, 1043, 1044, 1045, 1046, 1047, 1048], "kf": [408, 805], "kfold": [1, 87, 140, 145, 259, 269, 355, 408, 434, 469, 565, 566, 593, 601, 647, 651, 653, 655, 661, 663, 665, 673, 800, 803, 804, 806, 808, 810, 814, 819, 821, 823, 824, 825, 826, 827, 828, 829, 831, 835, 838, 885, 1030, 1031, 1032, 1034, 1035, 1037, 1039, 1047], "khaja": 1044, "khan": [1044, 1045], "khandelw": 1041, "khanduja": 1032, "khant": 1044, "kharsa": 1043, "khedkar": 1043, "khetarp": 1049, "khine": 1043, "kho": 1044, "khoo": 1041, "khosasi": 1042, "khosrow": 999, "khoual": 1042, "khwaja": 1044, "ki": 999, "kian": [1034, 1044, 1045, 1046], "kid": 1009, "kieker": [1037, 1038], "kielczewski": 1035, "kie\u00dfl": 1040, "kilian": [412, 1044, 1045], "kill": [347, 384], "killer": [372, 1023], "kilobyt": 86, "kilomet": 764, "kim": [995, 1037, 1038, 1039, 1043, 1048, 1049], "kimayoung": 1043, "kimberli": 51, "kimbinyi": 1041, "kind": [43, 48, 51, 52, 61, 62, 107, 128, 140, 154, 158, 183, 184, 254, 257, 258, 260, 273, 311, 315, 318, 333, 336, 347, 360, 361, 365, 367, 372, 378, 384, 385, 402, 404, 407, 408, 409, 411, 412, 413, 485, 486, 501, 506, 507, 519, 522, 587, 632, 633, 701, 939, 995, 1001, 1006, 1015, 1032, 1041, 1043, 1044, 1045], "king": 935, "kingjr": 1035, "kingma": [861, 862, 1003], "kink": 198, "kiragu": 1041, "kiran": 1041, "kirandevraj": 1044, "kiril": [1036, 1037, 1039, 1041], "kirkbi": [1036, 1037], "kirkham": [1034, 1035, 1037], "kirthi": 1039, "kishan": 1046, "kishimoto": 1041, "kishor": 1042, "kislovskii": 1046, "kit": 384, "kitchen": [641, 991], "kj": [366, 1001], "kjell": 1035, "kk": 999, "kl": [409, 996, 1037], "kl_divergence_": [692, 1036], "klarup": 1036, "klass": 98, "klau": [409, 533, 870], "kleczewski": [1036, 1037], "kleiber": 1043, "klein": 1049, "klevebr": 1037, "klima": 1044, "klopfer": 1038, "kluge": [1044, 1045], "kluger": [1, 401, 448, 511], "klusacek": 999, "km": [94, 317, 348], "kmatt10": 1042, "kmb": 51, "kmean": [1, 57, 58, 71, 72, 78, 80, 83, 86, 90, 91, 94, 98, 180, 252, 254, 255, 307, 317, 348, 381, 395, 404, 430, 431, 433, 437, 440, 445, 446, 449, 459, 510, 710, 792, 793, 797, 798, 869, 1002, 1009, 1020, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "kmeans_estim": 120, "kmeans_model": 404, "kmeans_plusplu": [1, 92, 404, 1041, 1046], "kmode": 1018, "kms15": [1037, 1038], "knee": 404, "kneighbor": [309, 317, 846, 847, 848, 850, 852, 1002, 1033, 1038, 1042, 1043, 1044, 1045], "kneighbors_graph": [1, 74, 79, 95, 100, 284, 386, 404, 438, 442, 695, 846, 847, 848, 850, 852, 854, 855, 856, 858, 1002, 1029, 1033, 1038], "kneighborsclassifi": [1, 67, 286, 287, 292, 293, 309, 315, 317, 347, 411, 601, 847, 851, 852, 853, 854, 855, 1000, 1002, 1029, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1048], "kneighborsclassifierkneighbor": 392, "kneighborsregressor": [1, 178, 242, 296, 317, 411, 568, 846, 852, 854, 855, 1000, 1002, 1029, 1031, 1033, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1048], "kneighborstransform": [1, 284, 286, 313, 692, 856, 1002, 1039, 1043, 1044, 1048], "knight": 310, "knn": [137, 178, 287, 292, 293, 296, 309, 315, 327, 347, 601, 846, 853, 854, 899, 900, 1002, 1012, 1035], "knn__weight": 287, "knn_graph": 74, "knnimput": [1, 179, 313, 627, 630, 989, 1039, 1040, 1043, 1044, 1045, 1046, 1048], "knnquerybatch": 284, "knot": [43, 155, 208, 316, 883, 1009, 1042], "know": [86, 99, 160, 163, 167, 176, 183, 224, 240, 241, 258, 264, 277, 281, 283, 317, 325, 343, 348, 359, 372, 384, 395, 398, 404, 407, 408, 409, 412, 498, 502, 508, 646, 652, 658, 659, 726, 756, 800, 814, 889, 890, 892, 893, 894, 895, 912, 913, 914, 915, 988, 998, 999, 1000, 1002, 1011, 1035, 1036, 1039, 1041], "knowledg": [90, 149, 183, 223, 243, 258, 264, 277, 278, 367, 372, 375, 378, 385, 386, 404, 408, 411, 415, 441, 509, 553, 554, 561, 720, 736, 740, 783, 833, 999, 1000, 1011, 1047], "known": [1, 50, 55, 62, 64, 74, 82, 90, 91, 112, 126, 128, 129, 154, 172, 174, 179, 194, 207, 208, 224, 233, 258, 264, 266, 273, 293, 297, 305, 316, 321, 322, 325, 333, 340, 348, 361, 367, 369, 370, 372, 380, 384, 386, 400, 401, 402, 404, 405, 406, 407, 408, 409, 411, 412, 414, 435, 460, 479, 481, 496, 506, 507, 542, 549, 552, 553, 554, 559, 560, 587, 588, 590, 593, 608, 622, 633, 658, 659, 672, 682, 683, 694, 704, 710, 713, 718, 729, 743, 755, 757, 795, 833, 839, 840, 841, 842, 843, 846, 851, 854, 860, 888, 948, 989, 991, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1009, 1014, 1015, 1048], "known_val": 627, "knox": 1041, "knp": 627, "knr": 411, "knyazev": [404, 449, 459, 695, 1039, 1042, 1043], "ko": [51, 63, 168], "kobak": [692, 1042, 1048, 1049], "kobaski": 1042, "kobayashi": [1041, 1042], "kober": 1037, "kobi": 735, "koch": [1031, 1037, 1038, 1040, 1041], "kocot": 1040, "koehler": 1033, "koen": [1037, 1038], "koenker": [723, 995], "koh": [995, 1023], "kohavi": 408, "kohli": [1046, 1047], "koi8": 412, "koivunen": 112, "kokhlikyan": [1036, 1037], "koki": 1041, "koko": [1037, 1043, 1044], "kolawol": 1042, "kolganov": 1034, "kolh": 1031, "kolstad": 57, "komarov": [1047, 1048], "komey": [1043, 1044], "kommireddi": 1043, "kondratyev": 1043, "kong": 1042, "konstantin": [1034, 1035, 1036], "konstantino": [1037, 1046], "konwar": 1040, "koonc": 1037, "korba": 367, "korean": 1018, "kornel": 1035, "kornev": 1044, "korobko": [1046, 1047, 1048, 1049], "korobov": [1030, 1031, 1032, 1035, 1036], "korolev": 1039, "kosic": 1041, "kosobrodov": 1037, "kossaifi": [1029, 1033, 1034], "kossen": [1044, 1045], "kossori": [1037, 1038], "kostelac": [1044, 1045], "kot271828": 1042, "kothari": 1040, "kotwalia": [1037, 1038], "koumenti": 1044, "koushik": 1043, "koustav": [1046, 1047], "kovalevskyi": 1035, "kowalski87": 1032, "koyama": 1043, "kozachenko": [606, 607], "kozynet": [1041, 1043], "kpca": [1, 531, 532, 533, 1024, 1025, 1029], "kr": [239, 264, 1043], "kr_fit": 239, "kr_predict": 239, "kraig": 1044, "kraktu": 1047, "kranthi": 1043, "kranz": 1023, "kraskov": [606, 607], "krasouli": [1036, 1037, 1038, 1039, 1041, 1042], "kratzwald": 1035, "krauss": 1049, "krawczyk": 1043, "krawutschk": [1044, 1045], "krell": [1033, 1035], "kriegel": [404, 415, 441, 447, 454, 850, 1005], "krinitsyn": 1037, "krishna": [1035, 1036, 1037, 1038, 1039, 1040, 1043, 1044], "krishnachaitanya9": 1040, "krishnakalyan3": 1035, "krishnan": 1039, "krivich": [1035, 1036, 1038], "kronovet": 1034, "krr": [239, 643, 992], "krsto": 1047, "krum": [1041, 1043], "krumetoft": 1043, "krump": 1034, "kruskal": [635, 690, 694, 996, 1049], "krzeminski": 1036, "krzysztof": 366, "ksemb": 1037, "kshitij": [1044, 1045, 1047], "ksvd": [664, 685, 686, 995], "ksvm": 188, "ksvm_score": 188, "ksvm_time": 188, "kth": 57, "ku": [1033, 1034], "kuai": [1037, 1038], "kubin": 1040, "kuhlmann": [1036, 1037], "kulbear": 1038, "kulkarni": 1037, "kull": [402, 999], "kullback": [54, 226, 409, 536, 538, 545, 692, 996, 1036], "kulsinski": [447, 454, 699, 778, 779, 780], "kulsinskidist": [699, 1045], "kumar": [0, 367, 394, 404, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1049], "kumaresshan": [1037, 1038, 1041], "kumawat": 1043, "kund": [1045, 1046], "kunj": 1042, "kuno": [1047, 1048], "kuo": 1033, "kurumeyuta": 1042, "kurz": [1043, 1044], "kusanagi": [1040, 1042], "kusanagi2": 1041, "kushal": [1037, 1038], "kushan": 1046, "kushwah": [1045, 1046], "kushwaha": 1041, "kusterl": 1039, "kuth": 1035, "kvam": [1030, 1032], "kvle": 1035, "kw_arg": [139, 868, 1009, 1035], "kwarg": [76, 123, 240, 374, 379, 418, 422, 426, 435, 439, 445, 447, 461, 466, 533, 536, 538, 561, 609, 631, 646, 647, 652, 653, 660, 661, 662, 663, 677, 681, 684, 698, 699, 700, 702, 742, 863, 864, 868, 908, 919, 960, 966, 987, 1036, 1040, 1042, 1046], "kwd": [771, 774, 778, 781, 792, 793], "kwei": [1032, 1033, 1034, 1035, 1036], "kxytim": 1042, "kybernetika": 369, "kye": 1037, "kyeongpil": 1037, "kyle": [0, 394, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1040, 1041], "kyledrogo": 1037, "kyler": 1034, "k\u00e4rkk\u00e4inen": 995, "l": [0, 46, 53, 55, 75, 80, 81, 99, 100, 112, 137, 163, 172, 185, 204, 211, 215, 216, 269, 270, 271, 281, 300, 308, 343, 369, 370, 378, 380, 401, 402, 404, 408, 409, 411, 414, 471, 514, 515, 516, 536, 538, 545, 553, 554, 555, 556, 563, 564, 589, 606, 607, 610, 611, 615, 619, 622, 623, 634, 648, 649, 658, 669, 672, 674, 680, 687, 689, 692, 693, 705, 715, 725, 726, 731, 756, 786, 841, 875, 912, 913, 914, 915, 988, 993, 995, 996, 999, 1001, 1002, 1003, 1007, 1011, 1013, 1015, 1032, 1037, 1041, 1042, 1043, 1044, 1046, 1048], "l1": [1, 25, 42, 46, 55, 75, 99, 113, 115, 180, 189, 190, 195, 197, 198, 203, 205, 211, 217, 221, 235, 265, 277, 284, 301, 316, 381, 384, 404, 406, 409, 438, 442, 447, 454, 461, 466, 467, 468, 469, 470, 471, 472, 473, 475, 494, 500, 502, 529, 535, 536, 537, 538, 540, 541, 545, 546, 556, 563, 588, 589, 590, 596, 644, 645, 646, 647, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 670, 672, 676, 677, 678, 679, 681, 688, 735, 762, 768, 773, 778, 779, 780, 785, 814, 821, 830, 846, 847, 848, 850, 851, 852, 854, 855, 856, 857, 858, 865, 876, 884, 891, 904, 905, 911, 913, 915, 933, 980, 995, 997, 999, 1002, 1009, 1013, 1014, 1015, 1020, 1034, 1036, 1042, 1045], "l1_color": 217, "l1_contour": 217, "l1_distanc": 1029, "l1_min_c": [1, 202, 995, 1014, 1029], "l1_plot": 222, "l1_ratio": [46, 49, 54, 103, 139, 155, 192, 194, 197, 200, 234, 235, 245, 247, 258, 263, 272, 277, 278, 302, 314, 317, 323, 359, 384, 409, 536, 538, 545, 646, 647, 652, 658, 659, 660, 661, 662, 663, 668, 676, 678, 681, 995, 1013, 1030, 1032, 1034, 1041, 1043, 1049], "l1_ratio_": [647, 659, 661], "l1_ratios_": 659, "l2": [1, 53, 75, 103, 104, 113, 115, 139, 155, 160, 180, 182, 183, 189, 190, 194, 197, 200, 202, 207, 212, 217, 221, 222, 224, 234, 235, 245, 247, 258, 263, 265, 271, 277, 278, 284, 302, 304, 314, 317, 323, 329, 347, 348, 374, 381, 384, 404, 406, 409, 411, 412, 438, 442, 447, 454, 522, 536, 538, 545, 556, 559, 560, 563, 588, 589, 590, 643, 646, 647, 648, 649, 652, 657, 658, 659, 660, 661, 662, 663, 668, 669, 672, 676, 678, 680, 681, 686, 687, 688, 735, 750, 761, 762, 778, 779, 780, 814, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858, 861, 862, 876, 884, 891, 904, 905, 909, 910, 911, 913, 915, 981, 988, 995, 997, 1002, 1003, 1009, 1013, 1015, 1020, 1031, 1033, 1034, 1036, 1038], "l2014": 411, "l2_color": 217, "l2_contour": 217, "l2_regular": [151, 154, 258, 310, 316, 318, 323, 411, 559, 560], "l_": [401, 611, 652, 741, 999], "l_1": 1013, "l_2": [992, 1013], "l_i": 1009, "l_inf": 55, "l_m": 411, "l_p": [447, 454, 688, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858], "l_x": 53, "la": [0, 310, 369, 394, 1023, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "lab": [0, 367, 465, 534, 902, 1017, 1023, 1040], "labb\u00e9": 1047, "label": [1, 30, 38, 43, 45, 46, 48, 50, 51, 52, 53, 58, 61, 62, 63, 64, 66, 68, 69, 73, 75, 77, 78, 80, 81, 82, 84, 85, 88, 89, 91, 93, 96, 97, 98, 99, 100, 105, 107, 109, 110, 111, 112, 115, 116, 118, 122, 124, 127, 128, 129, 134, 135, 136, 137, 138, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 159, 161, 167, 168, 172, 173, 174, 175, 176, 178, 180, 183, 186, 188, 190, 191, 193, 194, 196, 198, 199, 201, 202, 203, 205, 207, 208, 209, 210, 213, 214, 215, 216, 220, 221, 223, 224, 227, 228, 229, 233, 238, 239, 241, 243, 244, 251, 257, 258, 259, 262, 263, 265, 266, 267, 268, 270, 273, 274, 275, 276, 277, 278, 279, 283, 289, 291, 293, 296, 300, 302, 304, 305, 309, 313, 314, 317, 320, 324, 328, 329, 330, 338, 340, 342, 343, 347, 348, 351, 352, 353, 361, 364, 365, 366, 371, 372, 374, 377, 381, 386, 387, 401, 402, 403, 414, 415, 421, 422, 426, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 456, 458, 459, 462, 466, 484, 485, 486, 491, 492, 493, 494, 500, 501, 506, 507, 510, 512, 513, 517, 520, 521, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 565, 567, 568, 591, 592, 593, 594, 595, 597, 598, 599, 603, 604, 605, 608, 610, 631, 658, 659, 666, 667, 668, 673, 674, 675, 676, 677, 678, 697, 698, 700, 702, 703, 704, 705, 707, 709, 710, 712, 713, 714, 715, 716, 717, 718, 720, 722, 725, 726, 727, 729, 730, 731, 734, 735, 736, 737, 738, 739, 740, 741, 743, 754, 755, 756, 757, 782, 783, 784, 786, 787, 788, 789, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 809, 814, 815, 816, 818, 819, 820, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 850, 851, 853, 854, 861, 862, 864, 868, 871, 872, 875, 877, 878, 885, 888, 899, 900, 901, 904, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 918, 920, 924, 930, 935, 936, 963, 964, 969, 988, 995, 996, 1000, 1001, 1002, 1003, 1005, 1006, 1009, 1013, 1014, 1015, 1018, 1020, 1021, 1025, 1026, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "label1": 386, "label2": 386, "label_a": 273, "label_b": 273, "label_binar": [1, 271, 273, 871, 1033], "label_binarizer_": 833, "label_distributions_": [325, 326, 899, 900, 1040], "label_im": 99, "label_out": 78, "label_pr": [717, 736, 737, 755, 757, 795], "label_prop_model": [899, 900], "label_propag": 1030, "label_ranking_average_precision_scor": [1, 999, 1033, 1037, 1038, 1044], "label_ranking_loss": [1, 999, 1034], "label_spread": 327, "label_tru": [704, 717, 737, 755, 757, 795], "labelbinar": [1, 273, 386, 709, 722, 741, 833, 868, 877, 885, 888, 1000, 1032, 1033, 1034, 1038, 1043], "labelbottom": [156, 264], "labeled_iter_": [328, 901], "labelencod": [1, 386, 400, 567, 878, 1010, 1029, 1037, 1044, 1045, 1048], "labeling1": 999, "labeling2": 999, "labelkfold": [1034, 1035], "labelleft": 249, "labelpad": 264, "labelpropag": [1, 317, 327, 900, 901, 1000, 1012, 1030, 1035, 1036, 1039, 1040, 1041, 1043, 1044, 1045], "labels": [54, 308], "labels_": [73, 74, 75, 76, 77, 78, 79, 81, 82, 84, 85, 88, 91, 94, 95, 96, 98, 100, 317, 319, 348, 372, 374, 386, 404, 422, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 452, 710, 1034], "labels_050": 98, "labels_200": 98, "labels_a": 72, "labels_b": 72, "labels_pr": [404, 704, 705, 714, 715, 717, 731, 736, 737, 755, 757, 786, 795], "labels_tru": [73, 82, 88, 97, 404, 704, 705, 714, 715, 717, 731, 736, 737, 755, 757, 786, 795], "labels_uniqu": 96, "labelshufflesplit": [1034, 1035], "labelspread": [1, 317, 325, 326, 327, 329, 330, 899, 901, 1000, 1012, 1030, 1035, 1036, 1039, 1040, 1043, 1044, 1045], "labelspreadingifit": 327, "labex": 0, "laboratori": [367, 1018], "lacchia": 1036, "lack": [43, 64, 340, 372, 384, 408, 829, 919, 1014, 1043], "lacost": [658, 995], "lacouth": 1042, "lacrosse91": 1042, "lad": 1042, "lag": [42, 43, 146, 149, 180, 209, 263, 489, 560, 701, 742, 745, 746, 748, 790, 821, 826, 827, 830, 1020], "lagacheri": 1033, "lagard": 1032, "lagat": 1039, "lagged_count_": 52, "lagged_count_1d": 52, "lagged_count_1d_1h": 52, "lagged_count_7d": 52, "lagged_count_7d_1h": 52, "lagged_df": 52, "lagged_max_24h": 52, "lagged_max_7d": 52, "lagged_mean_24h": 52, "lagged_mean_7d": 52, "lagged_min_24h": 52, "lagged_min_7d": 52, "lai": [51, 309, 340, 1005], "laid": [0, 182, 372], "lakhotia": [1039, 1040], "lakshmi": 1039, "lakshmikanth": 1036, "lakshya": [1037, 1038, 1039], "lal": 900, "lalliacqua": [1039, 1042], "lam": [314, 315, 1040, 1047], "lama": 492, "lamb": [1034, 1042, 1048], "lambda": [43, 46, 47, 49, 57, 89, 145, 191, 224, 264, 265, 308, 329, 398, 400, 404, 409, 411, 412, 644, 645, 646, 647, 868, 880, 991, 995, 1009, 1037, 1043], "lambda_": [191, 644, 645, 880, 995, 1036], "lambda_1": [644, 645, 995], "lambda_2": [644, 645, 995], "lambda_i": [995, 1009], "lambda_init": [190, 191, 645, 995, 1039], "lambdas_": [308, 880, 1042, 1045], "lami": 1037, "lamond": 1033, "lamp": 1023, "lamu": 1035, "lan": [658, 1044, 1045], "land": [50, 297, 376, 387, 411], "land_mask": 297, "land_refer": [50, 297], "landeau": 1046, "landmark": [881, 893, 1009], "landscap": 168, "lane": [1035, 1049], "langford": [412, 688, 996], "langl": [991, 999, 1013, 1014], "languag": [0, 349, 377, 409, 412, 1013, 1018, 1019, 1023], "language_level": 373, "lanigan": 1036, "lanl": 55, "lannuzel": 1041, "lanterni": 1043, "lanzani": 1035, "lapack": [359, 360, 530, 533, 539, 688, 1044], "lapack_lit": 378, "lapack_svd_driv": 1044, "laplac": [1, 168, 414, 610, 611, 839, 840, 841, 843, 1001, 1049], "laplacian": [1, 226, 364, 401, 437, 449, 459, 620, 639, 643, 691, 695, 765, 766, 774, 900, 995, 996, 1012, 1025, 1030, 1035], "laplacian_kernel": [1, 765, 997, 1034], "laptop": [52, 380, 465, 902, 1043, 1044, 1045], "lar": [0, 1, 123, 163, 180, 189, 194, 195, 198, 200, 203, 369, 394, 468, 469, 475, 499, 529, 535, 537, 540, 541, 543, 544, 546, 651, 652, 653, 654, 655, 656, 663, 664, 665, 678, 681, 682, 683, 684, 685, 686, 1000, 1020, 1021, 1025, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1040, 1042, 1047, 1048], "laradji": [0, 1035], "larg": [0, 1, 38, 43, 51, 52, 53, 59, 63, 64, 72, 74, 78, 81, 82, 83, 85, 86, 88, 105, 107, 120, 124, 137, 139, 140, 146, 149, 150, 152, 159, 172, 173, 185, 186, 190, 191, 198, 200, 207, 209, 211, 212, 213, 224, 238, 243, 258, 261, 267, 270, 273, 286, 293, 301, 304, 306, 316, 317, 320, 336, 341, 343, 348, 349, 359, 367, 372, 374, 378, 381, 384, 385, 386, 390, 398, 400, 404, 406, 408, 409, 410, 411, 413, 415, 417, 439, 441, 443, 444, 447, 448, 449, 450, 455, 459, 470, 472, 497, 512, 532, 534, 536, 538, 539, 542, 545, 547, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 565, 566, 581, 588, 634, 641, 643, 646, 647, 650, 652, 653, 654, 657, 658, 659, 664, 671, 672, 674, 677, 679, 685, 687, 689, 691, 692, 693, 695, 746, 779, 780, 800, 808, 810, 814, 818, 829, 839, 840, 841, 842, 843, 844, 845, 850, 861, 862, 869, 873, 874, 882, 884, 896, 897, 904, 905, 909, 910, 912, 913, 914, 915, 947, 948, 969, 988, 991, 993, 995, 996, 998, 1001, 1002, 1003, 1007, 1009, 1012, 1013, 1014, 1015, 1018, 1019, 1023, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "larger": [43, 46, 64, 72, 74, 77, 81, 88, 111, 113, 118, 129, 137, 147, 149, 168, 173, 174, 179, 183, 184, 188, 191, 194, 221, 222, 223, 231, 237, 239, 249, 255, 258, 265, 267, 273, 274, 281, 284, 286, 299, 300, 302, 304, 336, 340, 345, 348, 349, 365, 367, 372, 378, 386, 401, 402, 404, 405, 406, 408, 409, 411, 412, 414, 437, 440, 446, 447, 449, 451, 453, 513, 525, 539, 542, 559, 560, 561, 565, 566, 581, 588, 643, 652, 672, 673, 674, 675, 679, 687, 692, 704, 719, 736, 797, 849, 850, 881, 883, 884, 885, 893, 898, 947, 948, 969, 972, 991, 992, 995, 996, 998, 999, 1002, 1003, 1007, 1009, 1013, 1014, 1033, 1034, 1037, 1038, 1039, 1042, 1043, 1046, 1047, 1048], "largest": [113, 122, 140, 163, 209, 369, 404, 406, 409, 440, 525, 539, 555, 556, 557, 558, 562, 563, 587, 797, 798, 819, 842, 874, 912, 913, 914, 915, 948, 996, 999, 1009, 1014, 1015], "largest_clust": [404, 440], "largest_coef": [113, 525], "larrald": 1046, "lars_path": [1, 197, 381, 529, 535, 537, 540, 541, 543, 544, 546, 650, 651, 652, 653, 654, 655, 656, 663, 664, 665, 683, 684, 685, 686, 995, 1029, 1031, 1034, 1038, 1040], "lars_path_gram": [1, 682, 995, 1038], "larscv": [1, 395, 650, 665, 682, 683, 1036, 1042, 1046], "larson": [1034, 1038, 1039, 1041, 1043, 1048, 1049], "larsson": [1041, 1042, 1043], "lasagna": 1035, "laska": 1035, "lassifi": 245, "lasso": [1, 42, 55, 99, 129, 154, 180, 183, 189, 200, 205, 206, 214, 254, 316, 320, 343, 359, 384, 406, 407, 409, 411, 412, 413, 468, 469, 475, 499, 522, 529, 535, 537, 540, 541, 543, 544, 546, 596, 644, 646, 647, 649, 650, 651, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 670, 672, 678, 681, 682, 683, 684, 685, 686, 721, 723, 724, 825, 826, 827, 865, 884, 988, 999, 1000, 1013, 1020, 1021, 1025, 1029, 1033, 1034, 1035, 1037, 1038, 1040, 1042, 1043, 1047, 1049], "lasso_cd": [529, 535, 540, 546], "lasso_lar": [129, 529, 535, 540, 546, 1039], "lasso_lars_": [196, 198], "lasso_path": [1, 197, 651, 652, 653, 654, 655, 656, 663, 682, 683, 995, 1029, 1031, 1033, 1042], "lasso_pipelin": 154, "lassocolumntransform": 154, "lassocv": [1, 53, 154, 183, 194, 198, 395, 411, 413, 651, 652, 654, 655, 656, 663, 684, 995, 1029, 1032, 1036, 1039, 1040, 1042, 1043, 1046, 1047, 1048, 1049], "lassolar": [1, 651, 652, 653, 655, 656, 663, 664, 665, 682, 683, 684, 995, 1000, 1029, 1030, 1032, 1036, 1039, 1040, 1042], "lassolars": [1, 196, 198, 413, 651, 654, 655, 995, 1029, 1036, 1038, 1042, 1043], "lassolarscv": [1, 198, 395, 413, 652, 653, 654, 656, 663, 665, 682, 683, 684, 995, 1029, 1036, 1042, 1046], "lassolarsic__criterion": [196, 198], "last": [43, 58, 66, 79, 91, 146, 183, 190, 207, 208, 214, 219, 233, 255, 267, 275, 276, 309, 315, 317, 328, 351, 359, 367, 370, 376, 377, 380, 386, 390, 398, 404, 405, 412, 416, 435, 439, 444, 456, 461, 465, 513, 531, 557, 558, 559, 560, 582, 583, 586, 592, 593, 596, 610, 682, 683, 685, 686, 697, 698, 700, 701, 702, 707, 782, 797, 798, 803, 804, 819, 844, 845, 849, 864, 865, 869, 877, 883, 919, 951, 973, 987, 988, 994, 995, 996, 998, 1000, 1003, 1013, 1019, 1026, 1029, 1035, 1036, 1037, 1038, 1043, 1045, 1046], "last_hour": [43, 52], "last_mean": 973, "last_n": 973, "last_var": 973, "lat": [50, 297, 496, 764], "late": [310, 361], "latenc": [42, 46, 47, 180, 358, 522, 563, 672, 678, 830, 884, 910, 965, 972, 1013, 1018, 1020, 1025, 1032], "latent": [1, 42, 45, 55, 130, 180, 302, 348, 407, 412, 414, 485, 530, 534, 536, 537, 538, 541, 542, 587, 590, 610, 860, 998, 1018, 1020, 1024, 1025, 1031, 1034, 1049], "latent_mean": 610, "latent_mean_and_vari": [414, 610, 1049], "latent_var": 610, "latentdirichletalloc": [1, 54, 361, 377, 409, 1018, 1034, 1036, 1043, 1044, 1048], "later": [0, 50, 86, 134, 139, 147, 167, 184, 188, 190, 243, 258, 281, 297, 349, 355, 370, 374, 378, 384, 385, 398, 411, 850, 873, 874, 882, 884, 991, 1009, 1032, 1035, 1037, 1041], "latest": [313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 370, 372, 376, 378, 380, 1015, 1043], "latestst": 376, "latex": 1029, "latexpdf": 372, "latin": [47, 412], "latitud": [297, 304, 367, 496, 699, 764], "lattarini": 1031, "latter": [43, 54, 254, 264, 273, 274, 292, 309, 343, 361, 369, 386, 403, 408, 411, 412, 418, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 742, 797, 798, 799, 800, 803, 804, 809, 814, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 967, 1002, 1007, 1038], "laughlin": 1036, "launch": [347, 348, 390, 1023], "laur": 1029, "lauren": [0, 356, 692, 696, 996, 1041, 1044], "laurent": [1032, 1033, 1036, 1037, 1044, 1045], "laurenz": 1041, "lauritzen": 1037, "laveen": 1042, "law": [0, 1023], "lawrenc": 258, "lawson": [1036, 1037, 1038], "lawton": 1037, "layer": [1, 43, 67, 142, 152, 169, 171, 180, 216, 219, 222, 244, 298, 301, 302, 306, 307, 330, 341, 344, 359, 380, 411, 512, 513, 520, 565, 830, 860, 861, 862, 865, 884, 1004, 1020, 1021, 1025, 1035], "layout": [134, 263, 304, 384, 904, 905, 906, 909, 931, 1014, 1032, 1034, 1046], "layton": [0, 394, 1029, 1030, 1031, 1032, 1034], "lazaru": 1047, "lazebnik": [758, 759, 997], "lazi": [52, 387, 412, 1013, 1033], "lazyfram": 105, "lazz": 1044, "lb": [871, 1010], "lbath": 1049, "lbfg": [103, 139, 155, 234, 235, 245, 247, 258, 263, 278, 299, 314, 317, 323, 374, 648, 649, 658, 659, 669, 672, 674, 680, 687, 835, 838, 861, 862, 995, 1003, 1033, 1034, 1036, 1037, 1042, 1043, 1044, 1046, 1048, 1049], "lbfgsb": 658, "lbfin": 1039, "lc": [51, 229, 236], "lceil": [401, 1005], "lda": [54, 69, 119, 122, 124, 126, 130, 180, 293, 355, 369, 400, 502, 534, 539, 547, 548, 853, 1018, 1020, 1021, 1024, 1025, 1034], "lda_featur": 377, "lda_model": 377, "lda_np": 400, "ldavid": 1035, "ldflag": 370, "ldirer": 1036, "ldl": [163, 369], "ldot": [995, 999, 1001, 1003, 1013], "ldwy4": [1046, 1047], "le": [172, 658, 872, 990, 995, 1002, 1010, 1012, 1037, 1041, 1042, 1046], "le_": 567, "lead": [0, 46, 62, 64, 66, 67, 72, 85, 88, 94, 104, 140, 143, 144, 146, 162, 163, 183, 184, 185, 190, 194, 198, 200, 201, 205, 207, 211, 238, 240, 243, 258, 264, 265, 267, 270, 271, 277, 289, 290, 301, 304, 306, 309, 310, 315, 336, 343, 348, 351, 355, 359, 360, 366, 371, 374, 380, 381, 385, 386, 401, 402, 403, 404, 406, 408, 409, 410, 411, 413, 449, 459, 462, 465, 494, 513, 525, 533, 536, 537, 538, 541, 545, 549, 555, 556, 557, 558, 561, 562, 563, 564, 605, 630, 646, 647, 650, 652, 653, 654, 660, 661, 662, 663, 679, 691, 695, 712, 746, 797, 803, 804, 821, 832, 844, 845, 849, 868, 875, 885, 896, 897, 902, 904, 912, 913, 914, 915, 988, 993, 995, 996, 998, 999, 1000, 1002, 1003, 1005, 1007, 1009, 1012, 1013, 1015, 1023, 1032, 1034, 1036, 1037, 1038, 1039, 1041, 1042, 1044, 1045, 1046, 1047, 1048], "leader": [372, 1023], "leadership": 0, "leaf": [76, 139, 150, 152, 351, 354, 404, 411, 415, 438, 439, 440, 441, 442, 443, 447, 454, 460, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 844, 845, 846, 847, 848, 849, 850, 852, 854, 855, 856, 912, 913, 914, 915, 916, 917, 1002, 1015, 1032, 1034, 1036, 1040, 1043], "leaf_id": 354, "leaf_rot": 186, "leaf_siz": [415, 441, 443, 447, 452, 453, 454, 844, 845, 846, 847, 848, 849, 850, 852, 854, 855, 856, 1002], "leagu": 367, "leak": [139, 269, 347, 355, 405, 408, 864, 889, 890, 892, 893, 894, 895, 1009, 1029, 1036, 1039, 1045, 1046, 1047], "leakag": [385, 386, 400, 405, 1025], "lean": 398, "leandro": [1038, 1042], "lear": 1023, "learn": [1, 14, 26, 29, 30, 32, 38, 43, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 181, 185, 186, 187, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 324, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 351, 352, 353, 354, 355, 360, 364, 365, 366, 367, 369, 371, 375, 378, 379, 380, 381, 385, 386, 389, 391, 392, 395, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 410, 412, 413, 414, 418, 419, 421, 422, 423, 424, 426, 427, 428, 434, 435, 436, 439, 440, 443, 444, 446, 447, 454, 461, 462, 464, 465, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 506, 507, 508, 510, 512, 513, 514, 515, 516, 518, 519, 520, 522, 523, 528, 529, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 575, 580, 581, 582, 583, 586, 587, 588, 589, 590, 592, 593, 598, 601, 602, 609, 610, 611, 614, 619, 622, 626, 628, 630, 632, 634, 638, 640, 641, 643, 644, 645, 646, 648, 652, 657, 658, 668, 669, 676, 677, 678, 680, 688, 689, 690, 691, 692, 696, 697, 698, 700, 701, 702, 708, 713, 717, 718, 721, 723, 724, 726, 732, 735, 741, 742, 743, 748, 756, 778, 779, 780, 784, 785, 787, 788, 795, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 838, 839, 840, 841, 842, 843, 846, 848, 851, 853, 860, 861, 862, 863, 864, 865, 867, 869, 871, 874, 876, 877, 878, 879, 882, 883, 884, 885, 888, 896, 897, 899, 900, 901, 902, 904, 905, 906, 909, 912, 913, 914, 915, 920, 922, 923, 931, 933, 941, 943, 953, 966, 967, 987, 988, 989, 991, 992, 993, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1009, 1010, 1013, 1014, 1015, 1016, 1020, 1022, 1025, 1026, 1027, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "learn_rat": 1030, "learnalgorithm": 392, "learner": [1, 47, 135, 144, 154, 361, 552, 557, 558, 559, 560, 581, 588, 630, 846, 847, 852, 854, 855, 1001, 1004, 1015, 1017, 1018, 1045], "learning_curv": [1, 266, 318, 395, 806, 994, 1032, 1035, 1036, 1037, 1038, 1039, 1041, 1043, 1044, 1046, 1048], "learning_decai": 534, "learning_method": [54, 377, 534], "learning_offset": [54, 534], "learning_r": [46, 134, 144, 145, 146, 147, 148, 149, 151, 154, 156, 231, 244, 258, 284, 300, 302, 310, 314, 316, 318, 323, 411, 551, 552, 557, 558, 559, 560, 668, 676, 677, 678, 692, 860, 861, 862, 996, 1006, 1013, 1030, 1038, 1042], "learning_rate_": [692, 862], "learning_rate_init": [184, 244, 300, 301, 861, 862], "learningcurvedisplai": [1, 239, 266, 318, 828, 994, 1044, 1045], "learnt": [149, 183, 311, 355, 386, 408, 885, 988, 1009], "least": [1, 37, 44, 52, 54, 111, 112, 114, 115, 122, 123, 137, 147, 161, 163, 167, 175, 180, 182, 189, 190, 193, 194, 199, 202, 207, 209, 211, 212, 214, 223, 224, 237, 243, 264, 277, 281, 283, 309, 311, 315, 316, 336, 348, 349, 359, 365, 367, 369, 371, 372, 376, 378, 380, 384, 386, 387, 395, 404, 406, 407, 408, 409, 411, 412, 413, 414, 415, 441, 445, 447, 453, 454, 455, 458, 471, 478, 479, 480, 481, 482, 492, 499, 514, 529, 535, 537, 539, 540, 541, 543, 544, 545, 546, 547, 555, 556, 557, 558, 560, 562, 563, 564, 592, 593, 601, 635, 643, 646, 648, 650, 651, 652, 653, 654, 655, 656, 657, 663, 664, 665, 666, 667, 668, 669, 671, 672, 674, 676, 678, 679, 680, 682, 683, 684, 685, 686, 687, 692, 697, 712, 716, 718, 750, 785, 801, 805, 806, 812, 814, 815, 816, 818, 819, 821, 825, 828, 829, 830, 861, 862, 865, 876, 884, 909, 912, 913, 914, 915, 939, 963, 989, 992, 996, 999, 1002, 1011, 1013, 1014, 1015, 1019, 1020, 1021, 1023, 1025, 1029, 1031, 1032, 1035, 1036, 1040], "least_absolute_devi": [1039, 1041, 1042], "least_angl": 381, "least_squar": 1042, "leastangle_2002": [163, 369], "leastsquareserror": 1038, "leav": [1, 86, 134, 139, 147, 184, 186, 224, 271, 309, 354, 355, 359, 369, 371, 377, 386, 404, 411, 438, 439, 442, 443, 460, 501, 555, 556, 557, 558, 559, 560, 562, 563, 564, 673, 675, 802, 807, 808, 809, 810, 818, 819, 844, 845, 846, 854, 902, 912, 913, 914, 915, 988, 996, 1002, 1006, 1015, 1029, 1036, 1038, 1040, 1041, 1045], "leaveonegroupout": [1, 269, 408, 801, 808, 809, 1035], "leaveonelabelout": 1035, "leaveoneout": [1, 269, 408, 846, 854, 1047], "leavepgroupsout": [1, 408, 802, 1035], "leaveplabelout": 1035, "leaveplabelsout": 1035, "leavepout": [1, 408, 808], "leaves_parallel": 916, "lebedev": [1035, 1036], "lebel": 1044, "lebourgeoi": 1023, "lectur": [404, 644, 991, 1017], "lecture2": 644, "lecun": [1003, 1013], "led": 1029, "ledoit": [1, 49, 54, 65, 70, 108, 109, 112, 113, 180, 237, 293, 470, 472, 476, 477, 510, 547, 993, 1020], "ledoit_wolf": [1, 113, 406, 469, 1042], "ledoit_wolf_shrinkag": [1, 1042], "ledoitwolf": [1, 69, 108, 110, 113, 127, 148, 180, 295, 406, 466, 467, 471, 472, 473, 474, 800, 1020, 1033], "lee": [409, 1029, 1030, 1033, 1035, 1036, 1037, 1038, 1040, 1041, 1044, 1048, 1049], "leepei": 1033, "leereev": 1036, "leeuw": [635, 996], "lefebvr": [1042, 1043], "lefevr": [409, 536], "left": [45, 46, 51, 53, 54, 61, 69, 70, 74, 77, 79, 84, 88, 95, 97, 104, 107, 112, 113, 118, 122, 123, 134, 137, 139, 140, 141, 143, 146, 149, 154, 170, 176, 179, 183, 186, 202, 207, 208, 209, 211, 217, 219, 220, 223, 224, 233, 237, 241, 243, 244, 249, 251, 252, 255, 260, 261, 262, 263, 265, 273, 274, 276, 287, 289, 297, 299, 302, 304, 317, 319, 320, 322, 326, 335, 336, 340, 354, 367, 372, 374, 376, 401, 404, 407, 408, 410, 411, 412, 414, 421, 427, 443, 469, 479, 480, 481, 482, 496, 547, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 586, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 635, 639, 643, 651, 655, 797, 798, 800, 803, 804, 807, 814, 821, 877, 884, 912, 913, 914, 915, 916, 934, 948, 969, 972, 988, 991, 993, 995, 997, 999, 1001, 1006, 1011, 1013, 1015, 1036, 1038, 1043, 1048], "left_h": 304, "left_impur": [555, 556, 557, 558, 562, 563, 564, 912, 913, 914, 915], "leftarrow": [404, 1003, 1013], "leftmost": 1003, "legaci": [366, 376, 386, 941, 942, 943, 1029, 1036, 1041], "legarreta": [1040, 1042, 1043], "legend": [43, 46, 47, 48, 50, 52, 61, 63, 66, 69, 72, 75, 94, 104, 105, 107, 109, 110, 111, 112, 115, 116, 122, 124, 126, 127, 128, 129, 134, 135, 136, 137, 138, 140, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 156, 159, 167, 168, 172, 173, 174, 175, 176, 183, 184, 188, 190, 191, 193, 196, 197, 198, 199, 201, 202, 203, 205, 207, 208, 209, 210, 212, 213, 214, 215, 216, 219, 220, 221, 223, 224, 229, 236, 237, 238, 239, 241, 244, 251, 258, 259, 261, 263, 264, 266, 267, 268, 269, 271, 274, 276, 277, 278, 279, 281, 287, 289, 290, 291, 296, 300, 305, 309, 314, 317, 320, 327, 335, 338, 340, 342, 347, 351, 352, 353, 700, 702, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "legend1": 126, "legend_el": [126, 150, 201, 219, 267, 287, 340], "legend_handl": 291, "legend_lin": 48, "legend_titl": 213, "legitim": [258, 996], "legitimate_accept": 258, "legitimate_refus": 258, "lego": 1018, "lehoucq": 409, "leibler": [54, 226, 409, 536, 538, 545, 692, 996, 1036], "leibniz": 999, "leig": 1035, "leightonzhang": 1035, "leinweb": [1037, 1038], "leisur": 43, "lejeun": 1036, "lekhwani": 1038, "leland": [1035, 1036, 1037, 1039, 1040, 1045], "lemaitr": [0, 393, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "lemir": 1040, "lemma": [37, 237, 364, 532, 539, 547, 896, 897, 898, 993, 1025, 1032], "lemmat": 412, "lemmatoken": 412, "lemo": [1045, 1046, 1048], "len": [46, 47, 49, 50, 55, 57, 66, 67, 68, 72, 73, 76, 78, 79, 82, 83, 84, 88, 93, 94, 95, 96, 97, 98, 102, 104, 123, 129, 130, 132, 137, 140, 142, 143, 149, 161, 167, 175, 179, 184, 186, 206, 207, 224, 229, 233, 236, 237, 238, 240, 242, 243, 249, 251, 252, 259, 262, 263, 264, 265, 272, 273, 274, 275, 279, 283, 284, 291, 293, 294, 299, 305, 306, 307, 310, 319, 321, 325, 326, 329, 336, 342, 345, 347, 348, 349, 354, 384, 386, 411, 414, 422, 426, 428, 434, 442, 447, 453, 461, 505, 513, 548, 567, 568, 581, 596, 633, 782, 800, 814, 826, 830, 832, 834, 835, 885, 899, 900, 1038, 1041], "lenail": [1037, 1041], "lend": 1023, "lene": 1045, "length": [1, 102, 118, 126, 128, 130, 142, 163, 167, 168, 169, 172, 173, 175, 188, 240, 241, 244, 247, 287, 315, 318, 333, 349, 365, 369, 372, 380, 381, 386, 405, 409, 411, 412, 414, 442, 487, 506, 507, 510, 513, 521, 549, 561, 580, 581, 588, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 631, 632, 646, 647, 650, 651, 652, 653, 654, 656, 657, 660, 661, 662, 663, 681, 684, 702, 781, 800, 803, 804, 814, 830, 832, 835, 836, 838, 846, 847, 848, 850, 852, 891, 917, 930, 932, 936, 954, 955, 969, 972, 998, 1005, 1009, 1029, 1032, 1033, 1035, 1036, 1037, 1038, 1040, 1041, 1045, 1049], "length_scal": [167, 168, 171, 172, 173, 174, 176, 414, 612, 615, 618, 619, 621, 622, 623, 624], "length_scale_bound": [167, 173, 174, 176, 414, 611, 615, 619, 622, 623], "length_scale_grid": 173, "lengthi": [372, 384], "lenient": [878, 1019, 1046], "lenz": [1040, 1044], "leo": 1046, "leogrin": 1047, "leon": [676, 677, 678, 1029, 1047], "leonardo": 1042, "leonc": 1049, "leonenko": [606, 607], "leonieborn": 1035, "leopoldo": 1042, "leq": [170, 409, 411, 995, 999, 1002, 1013, 1014, 1015], "lera": 1036, "leriqu": [1035, 1037], "lernen": 447, "lesne": 1043, "less": [43, 44, 47, 64, 85, 86, 93, 118, 120, 123, 130, 134, 141, 146, 147, 149, 167, 174, 183, 193, 194, 207, 209, 211, 239, 243, 250, 252, 258, 264, 265, 275, 278, 279, 305, 308, 309, 310, 315, 317, 321, 340, 347, 348, 355, 359, 361, 367, 372, 374, 376, 384, 386, 398, 404, 408, 409, 411, 412, 416, 436, 438, 440, 442, 445, 447, 449, 454, 457, 459, 460, 479, 480, 481, 494, 513, 529, 533, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 589, 595, 619, 627, 631, 634, 647, 661, 676, 678, 692, 701, 721, 722, 723, 724, 725, 736, 752, 764, 779, 780, 785, 795, 797, 798, 802, 803, 804, 810, 828, 839, 840, 841, 843, 844, 845, 846, 847, 848, 850, 852, 853, 854, 855, 856, 867, 879, 881, 882, 884, 887, 893, 894, 904, 905, 912, 913, 914, 915, 936, 951, 988, 989, 991, 992, 993, 995, 996, 998, 999, 1002, 1004, 1009, 1013, 1014, 1015, 1018, 1029, 1030, 1032, 1033, 1035, 1036, 1037, 1039, 1043, 1044, 1046, 1048], "lessen": [213, 658, 659], "lesser": [299, 386, 439, 539, 995], "let": [43, 44, 52, 86, 88, 97, 103, 107, 120, 125, 126, 141, 143, 146, 147, 149, 151, 165, 167, 173, 174, 183, 184, 185, 192, 198, 201, 207, 209, 224, 226, 230, 240, 247, 258, 259, 264, 267, 271, 277, 278, 321, 347, 349, 354, 355, 367, 372, 374, 378, 384, 398, 401, 403, 404, 408, 411, 412, 488, 498, 502, 508, 532, 646, 647, 650, 651, 652, 653, 654, 655, 656, 660, 661, 662, 663, 681, 684, 870, 877, 878, 995, 996, 997, 998, 999, 1006, 1007, 1009, 1014, 1015, 1023, 1039, 1048], "letelli": 1035, "letter": [163, 175, 367, 369, 376, 412, 788, 789, 806, 823, 999], "leu": 1043, "leung": 1040, "lev_metr": 384, "levarag": 320, "level": [43, 48, 50, 51, 64, 66, 70, 76, 86, 120, 121, 139, 142, 163, 166, 168, 171, 174, 176, 180, 183, 184, 217, 218, 219, 220, 221, 224, 233, 237, 238, 253, 258, 264, 267, 273, 274, 290, 297, 334, 335, 337, 338, 340, 343, 348, 354, 359, 367, 369, 372, 374, 378, 384, 386, 389, 390, 395, 402, 409, 412, 414, 418, 451, 465, 491, 492, 494, 501, 519, 529, 534, 535, 543, 544, 545, 559, 560, 565, 566, 611, 615, 622, 623, 625, 666, 667, 668, 676, 677, 678, 687, 690, 692, 694, 700, 702, 716, 723, 728, 785, 825, 826, 827, 829, 832, 833, 860, 861, 862, 902, 917, 988, 995, 999, 1000, 1002, 1007, 1013, 1015, 1017, 1018, 1019, 1020, 1032, 1040, 1043, 1044, 1045, 1048], "levelnam": 120, "leven": 384, "levenshtein": [321, 384], "levenshtein_dist": 321, "levequ": [842, 884], "leverag": [43, 47, 72, 82, 116, 224, 321, 347, 348, 359, 360, 370, 386, 400, 408, 411, 879, 988, 995, 1032, 1044, 1047], "levesqu": 1035, "levi": [532, 1036], "levinson": [1037, 1038], "levitski": [1042, 1044, 1045, 1046, 1048, 1049], "lewi": [367, 1036, 1040], "lex": [404, 449, 459], "lexicograph": [386, 565, 788, 794, 846, 854], "lexicon": 1009, "lexsort": 61, "le\u00e3o": 1049, "lf": 380, "lfw": [1, 45, 367, 491, 492, 1029], "lfw_home": 367, "lfw_pairs_train": [367, 491], "lfw_peopl": [45, 367, 492], "lg2012": 411, "lgtm": 1036, "li": [0, 328, 367, 393, 394, 639, 642, 696, 726, 756, 897, 988, 991, 999, 1002, 1009, 1011, 1014, 1029, 1030, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "liabil": 224, "liac": [318, 366, 372, 494, 1044, 1045], "liam": [1037, 1038], "liang": [1035, 1040, 1041, 1046, 1047], "liau": 1032, "lib": [360, 370, 390, 1018], "liberti": 255, "libisel": 1047, "liblinear": [202, 334, 378, 658, 659, 904, 905, 906, 909, 910, 995, 1014, 1029, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1045, 1049], "libomp": [370, 1041], "librari": [45, 258, 264, 316, 318, 323, 355, 364, 366, 367, 370, 371, 372, 373, 378, 380, 384, 385, 386, 390, 398, 400, 461, 626, 658, 902, 904, 905, 906, 907, 909, 910, 995, 999, 1014, 1015, 1018, 1019, 1023, 1027, 1032, 1036, 1037, 1038, 1039, 1040, 1042, 1046], "libsvm": [1, 188, 334, 365, 378, 484, 506, 561, 904, 905, 906, 907, 908, 909, 910, 1014, 1025, 1029, 1031, 1037, 1040, 1043], "libsvmtool": [188, 366, 484, 506, 507], "licenc": 366, "licens": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 313, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 351, 352, 353, 354, 366, 384, 386, 1015, 1023], "lichman": 369, "liddel": 1037, "lidston": [839, 840, 841, 843, 1001], "lie": [52, 93, 115, 162, 183, 238, 304, 327, 334, 336, 409, 411, 605, 709, 852, 854, 855, 856, 904, 905, 993, 996, 999, 1009, 1014], "lieg": 411, "lieret": 1044, "lieu": [1035, 1036], "life": [52, 149, 257, 321, 380, 996], "lifecycl": [1018, 1019], "lifo": 919, "lift": 390, "light": [137, 367], "lighter": [66, 359, 700, 702, 782, 1045], "lightfm": 1018, "lightgbm": [149, 411, 559, 560, 1018, 1038, 1045], "lightgreen": [213, 223], "lightgrei": 49, "lightweight": [373, 800, 814, 825, 826], "ligo": 1036, "lihaitao": 1047, "lik_max": 109, "lik_min": 109, "like": [0, 1, 43, 51, 52, 66, 85, 88, 91, 93, 102, 118, 123, 127, 129, 132, 134, 136, 141, 146, 149, 150, 167, 173, 183, 184, 191, 205, 207, 240, 255, 258, 264, 267, 268, 271, 272, 279, 293, 302, 304, 309, 310, 313, 322, 328, 336, 340, 347, 348, 355, 359, 361, 364, 366, 367, 371, 372, 374, 376, 379, 380, 381, 384, 385, 386, 387, 395, 398, 400, 402, 403, 404, 405, 407, 408, 409, 411, 412, 413, 415, 416, 417, 419, 420, 421, 422, 423, 425, 426, 427, 428, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 455, 456, 457, 458, 459, 460, 461, 462, 464, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 510, 511, 513, 517, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 578, 580, 581, 582, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 766, 767, 768, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 921, 926, 928, 935, 936, 947, 948, 950, 954, 957, 963, 964, 969, 970, 971, 983, 985, 987, 988, 991, 993, 994, 995, 996, 999, 1001, 1002, 1003, 1005, 1006, 1009, 1014, 1015, 1017, 1019, 1023, 1029, 1032, 1033, 1036, 1037, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "likelihood": [1, 69, 90, 108, 110, 111, 112, 113, 127, 148, 167, 168, 169, 171, 172, 173, 174, 176, 180, 196, 224, 253, 256, 264, 270, 295, 302, 304, 374, 386, 402, 406, 409, 411, 414, 434, 466, 467, 468, 469, 470, 471, 472, 473, 474, 513, 530, 534, 539, 547, 548, 549, 610, 611, 631, 645, 658, 712, 741, 797, 798, 800, 827, 830, 849, 851, 860, 880, 892, 906, 907, 909, 910, 995, 998, 1001, 1009, 1014, 1020, 1032, 1033, 1038, 1044], "likewis": [241, 404, 521], "lil": [386, 551, 552, 871, 926, 954, 1002], "lil_matrix": 55, "lili": [1037, 1038], "lilian": [1034, 1035, 1046], "lim": [170, 532], "lima": [1042, 1043, 1049], "limit": [43, 47, 55, 64, 72, 77, 90, 99, 113, 134, 141, 147, 154, 178, 183, 184, 185, 190, 207, 208, 223, 237, 271, 306, 310, 316, 322, 343, 349, 355, 360, 373, 377, 384, 386, 387, 402, 403, 404, 407, 408, 409, 413, 443, 460, 465, 557, 558, 559, 560, 632, 650, 679, 682, 683, 688, 778, 821, 852, 854, 855, 856, 877, 878, 902, 906, 907, 908, 909, 910, 988, 995, 996, 998, 999, 1006, 1007, 1009, 1019, 1025, 1037, 1039, 1042, 1043, 1046, 1048], "limits_": 1002, "lin": [0, 532, 658, 1014, 1034, 1035, 1036, 1037, 1049], "lin_clf": 1014, "linalg": [70, 87, 109, 110, 113, 127, 129, 195, 249, 250, 251, 254, 255, 320, 372, 378, 409, 448, 449, 450, 459, 519, 530, 533, 539, 542, 657, 672, 674, 687, 691, 695, 946, 1048], "linalgerror": 1039, "linalgwarn": 1048, "linar": 1049, "lincoln": 367, "lindenbaum": 532, "lindenstrauss": [37, 88, 180, 229, 232, 364, 486, 500, 896, 897, 898, 1016, 1020, 1025], "lindgren": 1047, "lindquist": 1044, "line": [48, 50, 52, 55, 75, 78, 93, 102, 111, 120, 125, 134, 136, 140, 145, 166, 178, 179, 180, 183, 184, 196, 198, 199, 201, 204, 205, 208, 210, 214, 215, 217, 218, 220, 233, 237, 238, 241, 243, 261, 263, 268, 270, 271, 277, 290, 294, 297, 305, 315, 335, 338, 340, 341, 344, 347, 366, 367, 370, 372, 373, 374, 376, 377, 378, 379, 380, 384, 409, 410, 411, 435, 484, 485, 486, 506, 507, 540, 551, 552, 553, 554, 610, 613, 614, 632, 670, 686, 700, 701, 702, 806, 823, 993, 999, 1003, 1006, 1013, 1018, 1020, 1022, 1031, 1040, 1042, 1045, 1046, 1048], "line0": [51, 229], "line1": [46, 51, 229], "line2": [46, 51, 229, 344], "line2d": [48, 111, 220, 290, 335, 338, 806, 823], "line_": [379, 435, 698, 700, 701, 702, 806, 823], "line_bin": 305, "line_fig": 140, "line_i": 210, "line_kw": [149, 151, 244, 266, 314, 320, 632, 806, 823], "line_kwarg": [154, 701, 1049], "line_profil": 378, "line_trac": 140, "line_x": [210, 223], "line_y_ransac": 210, "linea": 392, "linear": [1, 11, 44, 48, 49, 51, 52, 53, 54, 64, 65, 66, 67, 72, 85, 90, 106, 107, 109, 110, 111, 112, 113, 116, 120, 125, 126, 128, 137, 139, 152, 154, 155, 156, 158, 163, 171, 173, 178, 181, 182, 184, 188, 191, 193, 194, 195, 196, 198, 199, 201, 202, 204, 208, 209, 211, 212, 214, 218, 220, 222, 223, 224, 225, 228, 230, 236, 237, 239, 241, 242, 245, 254, 257, 260, 261, 262, 264, 267, 269, 270, 271, 272, 273, 274, 277, 279, 289, 290, 292, 293, 294, 302, 304, 305, 306, 309, 311, 315, 316, 322, 331, 333, 336, 337, 338, 341, 343, 344, 345, 347, 353, 360, 364, 368, 369, 374, 375, 377, 386, 389, 392, 402, 404, 407, 408, 409, 410, 411, 412, 413, 414, 416, 439, 441, 452, 462, 464, 472, 479, 480, 481, 494, 500, 510, 513, 519, 522, 530, 531, 532, 533, 534, 537, 539, 541, 542, 546, 547, 548, 552, 564, 581, 588, 592, 593, 605, 608, 614, 620, 631, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 684, 687, 688, 689, 690, 691, 692, 693, 701, 707, 716, 719, 750, 753, 765, 767, 774, 800, 811, 815, 827, 830, 844, 845, 849, 853, 860, 861, 862, 865, 869, 870, 871, 874, 877, 879, 881, 882, 883, 884, 893, 897, 904, 905, 906, 907, 908, 909, 910, 988, 990, 991, 992, 994, 999, 1002, 1003, 1004, 1005, 1006, 1007, 1013, 1014, 1020, 1021, 1023, 1024, 1025, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1040, 1041, 1042, 1043, 1048, 1049], "linear_baselin": 315, "linear_kernel": [1, 400, 761, 765, 997, 1037, 1048], "linear_model": [1, 43, 46, 47, 49, 53, 62, 64, 66, 87, 103, 105, 107, 116, 139, 154, 155, 156, 161, 162, 163, 165, 167, 178, 180, 182, 183, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 224, 233, 234, 235, 236, 240, 242, 245, 247, 258, 260, 263, 267, 272, 273, 277, 278, 279, 283, 302, 305, 306, 309, 311, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 329, 347, 355, 359, 361, 371, 372, 374, 378, 380, 381, 385, 386, 395, 400, 403, 405, 411, 424, 429, 435, 462, 535, 537, 540, 541, 543, 544, 546, 565, 566, 567, 568, 596, 609, 631, 632, 634, 635, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 700, 701, 788, 799, 814, 823, 825, 826, 827, 829, 831, 835, 836, 837, 838, 862, 879, 883, 904, 905, 908, 911, 939, 941, 943, 944, 982, 991, 995, 999, 1000, 1005, 1007, 1009, 1013, 1020, 1026, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "linear_model_preprocessor": 207, "linear_pca": 405, "linear_preprocessor": 154, "linear_regress": [209, 279], "linear_sum_assign": [401, 719], "linear_svc": 1014, "linear_svm": 238, "linear_svm_scor": 238, "linear_svm_tim": 238, "lineardiscriminantanalysi": [1, 69, 70, 128, 227, 293, 355, 400, 534, 548, 853, 993, 1000, 1002, 1029, 1032, 1033, 1034, 1035, 1036, 1038, 1041, 1043, 1044, 1045], "linearli": [67, 125, 136, 163, 183, 190, 220, 227, 233, 273, 274, 306, 309, 340, 347, 359, 369, 384, 409, 411, 513, 551, 642, 707, 873, 874, 999, 1002, 1005, 1014, 1036, 1045], "linearly_separ": [67, 299], "linearmodel": 1042, "linearoper": [320, 687], "linearregress": [1, 116, 156, 182, 190, 199, 204, 205, 210, 213, 223, 236, 240, 242, 260, 279, 305, 355, 372, 384, 385, 405, 411, 462, 568, 632, 635, 646, 649, 652, 654, 671, 672, 687, 995, 999, 1000, 1009, 1033, 1034, 1038, 1041, 1042, 1043, 1045, 1048, 1049], "linearregressionifit": 236, "linearsvc": [1, 62, 64, 102, 104, 159, 160, 180, 188, 238, 261, 271, 306, 313, 331, 332, 333, 337, 338, 343, 347, 359, 378, 402, 412, 413, 434, 510, 565, 576, 631, 639, 643, 652, 672, 673, 674, 675, 676, 687, 730, 735, 742, 827, 832, 905, 906, 909, 911, 995, 999, 1000, 1014, 1020, 1029, 1030, 1031, 1035, 1037, 1040, 1045, 1049], "linearsvc__c": 306, "linearsvr": [1, 566, 910, 1014, 1033, 1035, 1040, 1045], "linecollect": [51, 229, 236, 632], "linen": [51, 229], "lineno": 378, "lineplot": [149, 264], "liner": [374, 830], "lines_": [379, 632, 806, 823], "linestyl": [49, 50, 69, 93, 105, 111, 127, 129, 134, 145, 167, 170, 172, 174, 176, 185, 186, 196, 197, 198, 207, 208, 209, 213, 216, 218, 219, 224, 241, 243, 258, 261, 263, 267, 268, 273, 277, 278, 289, 297, 300, 305, 334, 337, 338, 340, 341, 343, 1048], "linewidth": [61, 66, 69, 70, 72, 75, 91, 105, 109, 116, 118, 122, 135, 146, 149, 151, 155, 167, 171, 175, 198, 199, 201, 203, 204, 205, 208, 210, 213, 220, 223, 233, 241, 243, 263, 273, 277, 290, 294, 305, 314, 320, 334, 335, 337, 353], "linger": 209, "linguist": [716, 901, 1012], "lingyi1110": 1044, "link": [51, 55, 134, 183, 184, 190, 207, 211, 224, 249, 258, 267, 294, 351, 360, 366, 371, 372, 373, 374, 376, 380, 386, 402, 404, 406, 409, 411, 414, 559, 560, 610, 648, 669, 680, 688, 705, 862, 929, 931, 995, 1002, 1015, 1016, 1018, 1022, 1027, 1029, 1032, 1033, 1036, 1037, 1040, 1046], "link_thickness_i": 294, "linkag": [71, 74, 75, 76, 79, 81, 85, 88, 89, 90, 100, 180, 186, 437, 438, 442, 443, 460, 510, 512, 520, 884, 1018, 1020, 1032, 1037, 1040], "linkage_matrix": 76, "linkage_tre": 1033, "linkedin": 376, "linker": 373, "linnerrud": [365, 1025], "linnerud": [1, 369, 503], "linprog": [670, 995], "linspac": [43, 47, 49, 50, 53, 61, 63, 72, 73, 75, 77, 82, 88, 111, 112, 121, 129, 135, 146, 167, 168, 170, 171, 172, 173, 174, 176, 184, 190, 191, 193, 194, 199, 201, 203, 207, 208, 209, 213, 216, 217, 218, 219, 220, 231, 233, 236, 237, 239, 241, 253, 264, 266, 267, 271, 272, 273, 274, 279, 289, 290, 296, 297, 305, 307, 317, 318, 335, 336, 339, 340, 341, 343, 344, 631, 632, 806, 828, 844, 845], "lint": 372, "linter": 578, "linthresh": [190, 194], "linu": [1045, 1046, 1047], "linux": [372, 374, 375, 380, 1018, 1029], "lipoprotein": [163, 369], "lippert": 995, "lippmann": 367, "lipschitz": [37, 1011], "lisa": [1037, 1038, 1040, 1041, 1043, 1044], "lise": 1043, "list": [0, 1, 43, 47, 49, 51, 52, 53, 55, 57, 58, 62, 68, 75, 79, 82, 95, 102, 129, 130, 138, 145, 154, 186, 211, 243, 244, 259, 262, 264, 265, 267, 268, 273, 293, 306, 310, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 329, 339, 348, 349, 361, 366, 367, 370, 371, 372, 374, 375, 377, 378, 379, 380, 381, 384, 385, 386, 387, 390, 391, 395, 402, 404, 405, 408, 410, 411, 412, 427, 429, 434, 447, 453, 454, 461, 462, 463, 464, 465, 468, 469, 475, 479, 480, 481, 485, 486, 487, 488, 490, 491, 494, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 512, 513, 514, 515, 516, 517, 518, 521, 530, 548, 549, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 580, 581, 587, 588, 590, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 631, 632, 634, 635, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 678, 679, 681, 684, 686, 692, 696, 697, 699, 702, 710, 711, 712, 713, 716, 718, 725, 733, 742, 746, 754, 778, 781, 783, 788, 794, 797, 798, 800, 803, 804, 806, 811, 812, 814, 823, 825, 826, 827, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 854, 855, 856, 857, 858, 861, 862, 863, 864, 865, 866, 868, 872, 875, 877, 878, 883, 885, 901, 902, 905, 907, 910, 912, 913, 914, 915, 918, 925, 926, 930, 931, 932, 936, 938, 939, 940, 941, 943, 951, 952, 955, 966, 969, 972, 982, 988, 989, 995, 999, 1001, 1002, 1003, 1006, 1007, 1010, 1015, 1018, 1019, 1023, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049], "list_param": 372, "listedcolormap": [67, 70, 142, 155, 292, 295, 299, 306], "listen": 347, "listinfo": 380, "lit": 263, "lite": 1029, "liter": [372, 941, 942, 1023], "literatur": [172, 264, 281, 348, 369, 372, 378, 380, 384, 385, 404, 407, 409, 411, 440, 444, 446, 499, 534, 536, 538, 545, 553, 554, 587, 590, 708, 797, 988, 991, 995, 999, 1039], "litsidi": [1044, 1045], "littl": [183, 184, 185, 186, 233, 367, 412, 459, 644, 800, 814, 948, 989, 996, 998, 1014, 1015, 1030, 1041, 1046], "lituiev": 1042, "liu": [0, 362, 383, 393, 561, 726, 756, 999, 1005, 1032, 1035, 1036, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "liutong": 1037, "live": [50, 102, 183, 258, 297, 367, 372, 404, 496, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 1022], "livesei": 347, "livni": [404, 439], "lizao": 1037, "lizsz": 1035, "lj2017": 404, "lk": 1032, "lkjcalc": 1037, "lkubin": 1040, "ll": [50, 88, 259, 263, 277, 297, 372, 376, 384, 530, 539, 991, 1002, 1015], "llcrnrlat": [50, 297], "llcrnrlon": [50, 297], "lle": [226, 227, 228, 230, 528, 689, 693, 996, 1041], "lle_hessian": 226, "lle_ltsa": 226, "lle_method": 226, "lle_mod": 226, "lle_standard": 226, "lloyd": [404, 440, 444, 446, 456, 1043, 1044], "llvm": 370, "lm": 192, "lmbda": 308, "lmbda_bc": 308, "lmbda_yj": 308, "lml": [168, 169, 173, 414], "ln": [376, 1003, 1009, 1048], "loa": [166, 174, 180, 414, 494, 611, 615, 622, 623, 625, 1020], "load": [1, 9, 43, 45, 50, 51, 52, 54, 63, 68, 80, 86, 103, 104, 120, 130, 139, 141, 142, 144, 150, 151, 154, 155, 156, 160, 161, 172, 183, 184, 188, 192, 207, 214, 222, 235, 236, 240, 242, 243, 244, 245, 247, 254, 258, 260, 262, 264, 269, 271, 276, 278, 281, 284, 288, 293, 300, 301, 302, 314, 315, 317, 318, 320, 322, 323, 327, 328, 329, 352, 353, 354, 359, 364, 367, 369, 375, 378, 385, 398, 407, 408, 409, 411, 479, 480, 481, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 530, 532, 541, 844, 845, 948, 999, 1009, 1019, 1025, 1029, 1034, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "load_ames_h": 154, "load_boston": [1035, 1037, 1042], "load_breast_canc": [1, 163, 186, 328, 351, 377, 591, 594, 595, 597, 674, 675, 788, 999, 1034, 1035, 1040], "load_cont": 501, "load_dataset": 347, "load_diabet": [1, 46, 147, 156, 163, 179, 196, 197, 198, 205, 244, 260, 318, 411, 556, 560, 566, 673, 701, 825, 826, 827, 913, 915, 1007, 1035, 1040, 1043], "load_digit": [1, 68, 84, 85, 91, 104, 105, 161, 200, 227, 237, 238, 262, 263, 266, 272, 286, 288, 293, 300, 302, 319, 325, 326, 378, 405, 416, 442, 443, 530, 531, 532, 533, 598, 599, 638, 639, 668, 688, 689, 690, 691, 693, 695, 1035, 1040], "load_fil": [1, 366, 367, 1031, 1043], "load_iri": [1, 66, 76, 106, 124, 126, 128, 130, 142, 159, 169, 202, 215, 247, 251, 257, 269, 270, 271, 273, 274, 287, 292, 295, 300, 313, 315, 318, 330, 332, 333, 336, 339, 352, 354, 385, 398, 404, 405, 408, 411, 413, 424, 559, 565, 600, 601, 610, 619, 620, 622, 623, 631, 658, 659, 711, 788, 800, 803, 804, 806, 814, 830, 832, 853, 899, 900, 901, 912, 914, 916, 917, 918, 989, 994, 999, 1000, 1001, 1002, 1006, 1009, 1015, 1026, 1035, 1037, 1040], "load_lfw_pair": 1034, "load_linnerud": [1, 837, 1035, 1040], "load_mnist": [214, 284], "load_mtpl2": 224, "load_sample_imag": [1, 582, 583, 586, 1038], "load_svmlight_fil": [1, 366, 1029, 1030, 1035, 1036, 1037, 1044], "load_win": [1, 48, 246, 309, 848, 856, 1040], "loader": [1, 265, 329, 347, 365, 366, 367, 496, 497, 506, 1029, 1034, 1036, 1037, 1040], "loan": [411, 532, 995, 1023], "loayza": 1043, "lobpcg": [80, 449, 459, 688, 691, 695, 1039, 1042, 1043, 1044], "loc": [43, 46, 47, 48, 61, 63, 69, 75, 104, 107, 110, 111, 112, 115, 122, 124, 126, 127, 128, 129, 134, 136, 137, 138, 145, 146, 147, 148, 149, 151, 154, 155, 156, 159, 167, 168, 174, 176, 183, 184, 193, 197, 199, 203, 207, 208, 209, 210, 212, 213, 216, 219, 220, 223, 224, 229, 236, 237, 238, 239, 241, 243, 251, 252, 259, 262, 263, 264, 267, 268, 271, 274, 277, 278, 279, 287, 289, 290, 300, 305, 308, 309, 314, 317, 320, 327, 335, 338, 340, 342, 343, 347, 352, 353, 814, 881, 893], "loc_a": 308, "loc_b": 308, "local": [1, 43, 48, 51, 58, 74, 85, 90, 94, 120, 123, 139, 140, 151, 163, 172, 173, 180, 184, 208, 220, 225, 228, 230, 233, 237, 243, 285, 294, 322, 335, 353, 360, 369, 370, 372, 376, 378, 380, 390, 404, 409, 411, 412, 414, 444, 449, 459, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 500, 536, 538, 542, 545, 547, 557, 558, 561, 564, 610, 611, 688, 689, 690, 691, 692, 693, 695, 696, 758, 759, 847, 850, 853, 855, 865, 874, 897, 900, 908, 966, 997, 998, 1002, 1003, 1015, 1020, 1022, 1024, 1025, 1033, 1037, 1041, 1044, 1047, 1048], "local_filenam": 489, "localcach": 390, "locally_linear_embed": [1, 230, 996, 1048], "locallylinearembed": [1, 51, 226, 227, 228, 317, 688, 690, 692, 996, 1002, 1034, 1035, 1043, 1044, 1045, 1048], "localoutlierfactor": [1, 233, 243, 290, 291, 317, 386, 561, 908, 1005, 1036, 1037, 1039, 1043, 1044, 1045, 1046, 1048], "localoutlierfactor__n_neighbor": 243, "locat": [48, 62, 86, 87, 104, 111, 112, 155, 203, 297, 315, 336, 365, 367, 370, 372, 374, 376, 377, 380, 381, 390, 391, 404, 406, 410, 445, 457, 458, 466, 467, 468, 469, 470, 471, 472, 473, 485, 498, 499, 502, 503, 510, 513, 983, 989, 995, 1000, 1005, 1009, 1015, 1037], "location_": [111, 112, 466, 467, 468, 469, 470, 471, 472, 473], "location_reweight": [466, 471], "lock": [322, 375, 390, 397, 398, 966, 1047, 1048], "loev": 532, "lof": [1, 48, 180, 220, 233, 243, 285, 335, 561, 850, 908, 1005, 1020], "lof_kw": 243, "lofti": [1039, 1040], "log": [1, 43, 58, 62, 63, 64, 66, 109, 120, 134, 144, 146, 154, 159, 163, 168, 169, 171, 172, 173, 176, 196, 198, 202, 207, 212, 216, 224, 237, 239, 253, 258, 294, 309, 347, 367, 369, 370, 372, 380, 381, 386, 401, 402, 404, 405, 406, 409, 411, 412, 414, 445, 448, 457, 462, 467, 468, 469, 470, 471, 472, 473, 530, 534, 539, 547, 548, 549, 551, 553, 555, 557, 560, 562, 589, 590, 592, 593, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 642, 645, 648, 658, 659, 669, 671, 676, 680, 722, 741, 755, 797, 798, 800, 803, 804, 814, 839, 840, 841, 842, 843, 844, 845, 849, 851, 860, 861, 862, 868, 869, 898, 901, 906, 909, 911, 912, 914, 941, 946, 988, 991, 993, 995, 996, 1001, 1002, 1004, 1007, 1009, 1013, 1015, 1018, 1019, 1031, 1032, 1033, 1038, 1039, 1040, 1043, 1046, 1047, 1048], "log10": [159, 173, 183, 265, 336], "log1p": [107, 236, 868, 999, 1009], "log2": [138, 216, 245, 555, 556, 557, 558, 562, 563, 912, 913, 914, 915, 1000, 1048], "log_": 999, "log_2": [401, 561, 1005], "log_bas": 726, "log_den": 289, "log_dens": 849, "log_likelihood": [109, 610, 611, 797, 798], "log_likelihood_gradi": [610, 611], "log_logist": 1046, "log_loss": [1, 62, 63, 66, 145, 148, 168, 258, 309, 323, 329, 347, 386, 402, 411, 555, 557, 559, 562, 646, 658, 676, 912, 914, 988, 995, 999, 1013, 1015, 1031, 1033, 1035, 1043, 1044, 1045, 1046, 1049], "log_loss_test": 66, "log_marginal_likelihood": [168, 169, 171, 173, 176, 414, 610, 611, 1039], "log_marginal_likelihood_value_": [610, 611], "log_prob": [797, 798, 799, 822], "log_reg": [247, 317], "log_reg_input_featur": 317, "log_scal": 1045, "log_scale_transform": [207, 224], "log_scaled_numer": [207, 224], "log_y_prob": 861, "logaddexp": 1046, "logan": [1043, 1044, 1045], "logarithm": [1, 107, 154, 183, 211, 237, 265, 336, 386, 413, 457, 589, 658, 659, 676, 704, 726, 741, 751, 755, 756, 757, 791, 799, 822, 835, 844, 845, 946, 1015, 1036], "logcosh": [416, 531], "logdet": 946, "logged_in": 367, "logger": 1040, "logic": [132, 360, 373, 374, 379, 387, 400, 411, 1015, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "logical_and": [53, 146], "logical_not": [57, 97, 129, 210], "logical_or": [209, 214, 273, 378], "logical_xor": [53, 155, 171, 340], "loginov": 1035, "logist": [1, 62, 64, 66, 101, 103, 107, 139, 161, 180, 189, 197, 204, 205, 211, 213, 217, 234, 236, 247, 258, 263, 272, 275, 277, 278, 281, 283, 300, 301, 302, 309, 317, 343, 347, 386, 387, 402, 405, 411, 413, 414, 434, 486, 494, 500, 502, 510, 539, 557, 559, 610, 631, 646, 657, 658, 659, 666, 668, 676, 741, 800, 814, 830, 833, 860, 861, 862, 864, 865, 884, 911, 933, 935, 999, 1000, 1003, 1004, 1013, 1014, 1020, 1021, 1023, 1025, 1026, 1033, 1036, 1037, 1039, 1040], "logistic__c": 105, "logistic_regress": [258, 823, 831], "logistic_regression_multinomi": 201, "logistic_regression_ovr": 201, "logistic_regression_path": [1037, 1038], "logisticregress": [1, 62, 66, 103, 105, 139, 155, 161, 162, 163, 165, 199, 200, 201, 202, 221, 222, 234, 235, 245, 247, 258, 263, 267, 273, 278, 302, 306, 313, 314, 315, 316, 317, 319, 321, 323, 347, 359, 372, 374, 378, 380, 385, 395, 402, 403, 405, 411, 413, 424, 429, 435, 565, 567, 593, 596, 609, 631, 634, 643, 652, 659, 672, 673, 674, 675, 676, 687, 700, 788, 799, 814, 823, 829, 831, 835, 836, 838, 889, 890, 892, 893, 894, 895, 911, 941, 943, 944, 982, 995, 999, 1000, 1009, 1013, 1014, 1026, 1029, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "logisticregression__c": [202, 258, 306], "logisticregressioncv": [1, 64, 309, 386, 395, 658, 995, 999, 1000, 1033, 1034, 1035, 1037, 1038, 1039, 1043, 1044, 1046, 1047, 1048, 1049], "logisticregressionifit": 302, "logit": [1, 402, 414, 658, 659, 995], "loglik_lw": 109, "loglik_oa": 109, "loglik_r": 109, "loglike_": 530, "loglog": [109, 237], "logloss": 1040, "lognorm": [146, 173, 192, 253, 308, 1009], "logo": [408, 807], "logprob": 849, "logreg": 838, "logspac": [43, 51, 64, 105, 109, 127, 163, 168, 173, 183, 202, 211, 212, 237, 239, 253, 258, 265, 277, 288, 299, 306, 309, 336, 343, 823, 831, 994, 995], "logsumexp": [294, 1036], "loguniform": [45, 167, 272, 988, 1039], "logx": [211, 343], "lohit": 1046, "loic": [1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "loki": [360, 999, 1037, 1040], "lomp": 370, "lon": 764, "london": [405, 412, 463], "londschien": [1042, 1046], "lone": [1044, 1045], "long": [0, 30, 43, 50, 51, 79, 95, 146, 172, 179, 183, 185, 207, 240, 241, 243, 267, 297, 304, 314, 347, 348, 355, 360, 370, 372, 380, 384, 386, 387, 398, 404, 450, 496, 536, 676, 677, 678, 803, 804, 839, 840, 841, 842, 843, 861, 862, 872, 999, 1005, 1009, 1010, 1012, 1013, 1022, 1031, 1035, 1041, 1043], "long_term_trend_kernel": 172, "long_titl": 340, "longer": [0, 43, 70, 86, 137, 183, 184, 197, 301, 316, 323, 372, 374, 404, 408, 411, 412, 446, 534, 561, 631, 994, 998, 999, 1001, 1004, 1014, 1022, 1023, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "longest": [284, 999], "longitud": [297, 304, 367, 496, 699, 764], "longpathsen": 390, "longstand": [1030, 1036], "loo": [386, 808, 1040], "look": [43, 44, 64, 66, 86, 88, 120, 123, 125, 146, 147, 167, 172, 173, 183, 184, 205, 209, 226, 230, 233, 240, 255, 258, 259, 264, 266, 278, 301, 320, 347, 348, 355, 360, 361, 366, 367, 372, 373, 374, 376, 378, 380, 384, 385, 404, 407, 409, 410, 411, 412, 445, 485, 486, 555, 556, 557, 558, 562, 563, 601, 602, 631, 692, 884, 912, 913, 914, 915, 995, 996, 999, 1009, 1013, 1014, 1016, 1017, 1029, 1037, 1039], "lookup": [381, 965, 1038], "loop": [46, 47, 137, 146, 183, 259, 269, 347, 354, 359, 372, 373, 378, 404, 408, 413, 447, 646, 647, 652, 653, 659, 660, 661, 662, 663, 988, 1012, 1013, 1032, 1033, 1036, 1041, 1042, 1045, 1046], "loopym": 1039, "loos": [255, 261, 1014, 1037], "looser": 202, "lope": 1049, "lopusz": 1040, "lorain": 318, "lorek": 1036, "lorentzen": [0, 393, 999, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "lorenz": [207, 224, 1034, 1046], "lorenz_curv": [207, 224], "lose": [211, 223, 349, 367, 386, 407, 412, 414, 947, 948, 989, 995], "losi": [0, 394, 1029], "loss": [1, 25, 46, 52, 61, 62, 63, 64, 66, 104, 129, 140, 145, 146, 147, 148, 151, 154, 156, 160, 167, 168, 180, 189, 193, 199, 201, 202, 209, 211, 212, 214, 218, 219, 224, 239, 244, 258, 271, 272, 300, 301, 309, 310, 316, 318, 320, 321, 323, 329, 333, 334, 338, 340, 343, 347, 384, 386, 402, 409, 414, 461, 462, 494, 506, 507, 530, 536, 537, 538, 541, 545, 550, 551, 552, 556, 557, 558, 559, 560, 563, 643, 646, 649, 658, 659, 666, 667, 668, 669, 670, 671, 672, 676, 677, 678, 679, 703, 706, 709, 722, 723, 734, 735, 740, 741, 742, 745, 746, 747, 748, 749, 750, 751, 752, 753, 790, 791, 796, 800, 803, 804, 814, 826, 827, 830, 861, 862, 864, 865, 868, 869, 877, 878, 879, 884, 904, 905, 910, 911, 913, 915, 948, 952, 992, 995, 1003, 1007, 1012, 1013, 1014, 1015, 1020, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049], "loss_": [300, 861, 862, 1003, 1043], "loss_curve_": [300, 861, 862], "loss_func": 52, "loss_funct": 52, "loss_function_": 1046, "lossfit_timemapermsemaepinball_loss_05pinball_loss_50pinball_loss_95strstrstrstrstrstrstrstr": 52, "lossfunct": 1038, "lossi": 404, "lossili": 386, "lost": [58, 90, 113, 367, 373, 384, 398, 996], "lostanlen": 1039, "lostcoast": 1039, "lot": [43, 113, 149, 183, 211, 367, 372, 373, 380, 409, 411, 803, 804, 896, 897, 988, 1011, 1013, 1014, 1018, 1019, 1023, 1029, 1034, 1036, 1037, 1038, 1039, 1041], "lot_area": 243, "lotan": 1023, "lotconfig": 143, "lotfrontag": 107, "loui": [318, 1034, 1035, 1039, 1041, 1043, 1045, 1046], "louib": [1037, 1038], "loupp": [0, 394, 411, 553, 554, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "lourida": 1035, "low": [1, 37, 43, 50, 51, 72, 83, 112, 116, 122, 124, 127, 134, 137, 150, 155, 163, 185, 202, 204, 207, 209, 211, 220, 226, 228, 233, 237, 243, 249, 250, 252, 255, 257, 258, 264, 266, 270, 271, 290, 291, 301, 308, 310, 311, 319, 328, 335, 336, 347, 354, 368, 369, 372, 377, 380, 384, 386, 390, 401, 402, 403, 408, 409, 412, 439, 441, 446, 465, 519, 522, 533, 581, 588, 602, 679, 692, 696, 705, 726, 742, 789, 849, 878, 885, 902, 948, 965, 988, 994, 995, 996, 998, 999, 1002, 1004, 1005, 1006, 1007, 1009, 1011, 1014, 1015, 1021, 1025, 1030, 1033, 1034, 1035, 1037, 1038, 1043, 1044, 1049], "low_cardin": 310, "low_cardinality_featur": 310, "low_cardinalityindex": 310, "low_i": 204, "low_x": 204, "lower": [37, 44, 52, 63, 64, 66, 67, 69, 91, 110, 116, 120, 122, 127, 134, 137, 140, 142, 146, 149, 150, 161, 167, 169, 171, 173, 175, 183, 184, 185, 194, 195, 197, 199, 207, 208, 209, 210, 219, 226, 230, 236, 237, 242, 251, 255, 258, 261, 263, 264, 266, 267, 271, 272, 274, 277, 278, 287, 288, 290, 291, 306, 309, 317, 321, 328, 336, 347, 348, 349, 352, 367, 372, 386, 402, 403, 404, 407, 408, 409, 410, 411, 412, 415, 441, 445, 461, 464, 496, 507, 530, 532, 539, 542, 557, 558, 559, 560, 561, 587, 588, 590, 602, 611, 613, 614, 615, 617, 619, 620, 622, 623, 625, 632, 633, 635, 637, 677, 679, 712, 716, 725, 728, 734, 739, 797, 798, 850, 852, 854, 855, 856, 858, 885, 904, 905, 906, 907, 908, 911, 934, 994, 995, 996, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1011, 1013, 1014, 1015, 1031, 1032, 1037, 1044, 1046, 1049], "lower_bound": 263, "lower_bound_": [797, 798, 1037], "lower_bounds_": [797, 798, 1049], "lowercas": [265, 412, 420, 439, 440, 442, 444, 446, 479, 480, 481, 482, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 587, 588, 590, 639, 640, 641, 642, 688, 689, 692, 848, 853, 856, 860, 865, 870, 896, 897, 1042], "lowest": [1, 107, 116, 184, 194, 254, 366, 404, 408, 635, 637, 803, 804, 807, 911, 912, 996, 999, 1015, 1044], "loyal": 1034, "loyola": [0, 362, 1042, 1043], "lo\u00efc": [0, 393, 1037, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "lp_model": [325, 326], "lpgo": [408, 809], "lpo": 810, "lprun": 378, "lr": [62, 64, 139, 156, 210, 235, 236, 260, 267, 385, 395, 411, 566, 567, 568, 712, 982, 999, 1049], "lr_": 999, "lr__c": 411, "lr_base": 267, "lrap": [739, 999], "lrjball": [1039, 1040], "lrlinearregress": 156, "ls100": 330, "ls2010": 991, "ls30": 330, "ls50": 330, "ls_pipelin": 329, "lsa": [1, 409, 542, 1031], "lsa_vector": 348, "lshforest": [1033, 1036], "lsi": 409, "lsqr": [69, 311, 547, 657, 672, 674, 687, 993, 1030, 1036, 1043], "lstrip": [67, 79, 95, 233, 299, 306], "lstsq": [129, 372, 657, 670, 1048], "lsturtew": 1042, "lsvc": 413, "lsvm": 188, "lsvm_score": 188, "lsvm_time": 188, "lt": [103, 104, 139, 154, 160, 183, 184, 185, 235, 245, 247, 254, 262, 263, 265, 276, 310, 314, 317, 372, 392], "ltd": [258, 367], "ltg": [163, 369, 499], "ltorgo": 367, "ltsa": [226, 227, 228, 689, 693, 996, 1048], "lu": [539, 542, 947, 948, 1035, 1036, 1037, 1038, 1045, 1046, 1047], "luangkot": 1036, "luc": 1049, "luca": [1029, 1039, 1040, 1041, 1042, 1048, 1049], "lucca": 1042, "luce": 1032, "lucen": 412, "lucgiffon": 1040, "luci": [0, 362, 383, 393, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "luciano": [1037, 1044], "lucieclair": 1043, "lucija": 1037, "lucio": 1038, "lucki": 355, "lucyleeow": 1040, "ludwig": 1029, "luessi": 1031, "lui": [658, 1030, 1032, 1033, 1037, 1046, 1049], "luiz": 1043, "luk": 1038, "luka": [1033, 1040, 1046, 1047], "luke": 1037, "lukowski": 1044, "luk\u00e1\u0161": 1046, "luna": 1043, "lunovian": [1048, 1049], "lunt": 1032, "luo": 1033, "lupo": 1041, "luqi": 1038, "luqu": 1039, "lurk": 1029, "lustig": 995, "lutz": [1035, 1039, 1042, 1046], "luxburg": [404, 449, 459, 691], "luzgin": 1039, "lv_ep": 238, "lvdmaaten": [692, 1036], "lw": [93, 109, 110, 112, 124, 128, 129, 203, 208, 210, 213, 216, 223, 229, 252, 259, 274, 289, 304, 327, 342], "lw_cov_": 113, "lw_mse": 110, "lw_prec_": 113, "lw_score": 127, "lw_shrinkag": 110, "lwda": 447, "lx": 1002, "ly": [238, 852, 854, 855, 856, 1033], "ly648499246": 1042, "lynch": [1030, 1036], "lyon": [1035, 1036], "lyra": [1030, 1033, 1034], "lyrl2004": [367, 495], "l\u00e9o": 1037, "l\u00e9on": [1013, 1043, 1044, 1045, 1048, 1049], "l\u00e9onard": [1039, 1044], "l\u00e9one": 1035, "l\u00e9oni": 1035, "l\u00f3pez": [1033, 1037, 1038, 1041], "l\u00f6fstedt": 1036, "l\u00f6ning": 1041, "m": [0, 43, 47, 50, 57, 63, 64, 79, 91, 92, 96, 97, 98, 111, 112, 120, 134, 156, 193, 207, 224, 264, 268, 271, 276, 297, 320, 329, 332, 342, 347, 359, 360, 366, 367, 369, 370, 372, 376, 378, 386, 390, 401, 402, 404, 406, 409, 411, 413, 415, 441, 442, 443, 447, 454, 470, 471, 498, 511, 526, 530, 532, 534, 539, 639, 645, 649, 664, 671, 685, 686, 689, 693, 708, 716, 726, 741, 756, 758, 759, 797, 798, 850, 875, 948, 977, 978, 989, 991, 993, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1007, 1009, 1013, 1015, 1023, 1037, 1038, 1039, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "m1": [370, 400], "m11": 367, "m2": 400, "m2012": 992, "m2019": 1006, "m_max": 169, "m_state": 263, "ma": [113, 162, 310, 336, 995, 1035, 1040], "maascha": 1044, "maaten": [692, 696, 996], "mabel": [1037, 1041], "mabu": 1042, "mac": [57, 310, 329, 367, 372, 708, 999], "macaulei": 310, "macbook": 1037, "macdonald": [1039, 1040], "mach": [269, 402, 408, 592, 593], "machado": [402, 723], "machin": [0, 1, 39, 43, 45, 48, 52, 64, 66, 96, 105, 140, 159, 160, 163, 167, 172, 181, 185, 199, 201, 204, 218, 221, 246, 258, 263, 264, 267, 270, 281, 298, 304, 309, 311, 315, 318, 321, 332, 337, 340, 343, 347, 349, 359, 360, 365, 366, 367, 369, 372, 375, 379, 384, 385, 386, 389, 392, 398, 402, 404, 408, 409, 411, 412, 414, 434, 436, 445, 468, 469, 475, 500, 502, 508, 514, 515, 516, 528, 530, 532, 539, 542, 553, 554, 555, 556, 557, 558, 562, 563, 564, 592, 593, 610, 611, 614, 619, 622, 634, 638, 639, 641, 643, 644, 645, 650, 651, 654, 655, 656, 657, 658, 659, 676, 682, 683, 692, 708, 713, 725, 735, 741, 743, 785, 788, 797, 829, 830, 844, 845, 850, 853, 860, 861, 862, 864, 882, 884, 890, 904, 905, 906, 907, 909, 910, 914, 915, 988, 989, 991, 992, 995, 996, 997, 999, 1000, 1002, 1005, 1006, 1007, 1009, 1013, 1015, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1029, 1031, 1041, 1042, 1043, 1044, 1046], "machineri": [374, 953], "maciej": 1040, "maci\u00e0": [999, 1042, 1044], "mackai": [644, 645, 995], "mackenbach": 1040, "maco": [373, 374, 375, 390, 400, 1037, 1041, 1043], "macosx": 1029, "macro": [45, 68, 102, 160, 262, 302, 313, 325, 326, 367, 408, 707, 713, 729, 730, 738, 783, 784, 787, 788, 822, 999, 1029, 1037, 1045], "macro_roc_auc_ovo": 273, "macro_roc_auc_ovr": 273, "macroscop": 404, "macsween": [1038, 1039], "mad": [671, 1035], "madan": 1041, "made": [0, 52, 64, 102, 112, 125, 126, 134, 140, 156, 174, 183, 184, 207, 224, 243, 255, 268, 310, 314, 323, 336, 352, 359, 367, 369, 372, 376, 386, 387, 395, 404, 411, 412, 416, 440, 443, 444, 446, 456, 494, 501, 587, 588, 590, 630, 631, 656, 665, 679, 685, 686, 735, 783, 800, 803, 804, 814, 818, 819, 820, 841, 844, 845, 999, 1000, 1005, 1015, 1018, 1023, 1029, 1030, 1031, 1032, 1033, 1036, 1038, 1039, 1042, 1043, 1047], "madelon": 513, "madhura": [1038, 1040, 1041, 1044, 1045], "madinak": 1044, "madsen": [1035, 1037], "mae": [43, 52, 154, 207, 209, 556, 563, 745, 913, 915, 999, 1015, 1036, 1037, 1041, 1042], "mae_test": 183, "mae_train": 183, "maennel": 1044, "magali": 1043, "magazin": [112, 413], "magda": 1040, "magenta": [109, 148], "maggi": [1043, 1047, 1048, 1049], "maggiecheg": [1039, 1043], "maggio": [1040, 1041, 1042], "magic": [240, 373, 378, 414, 616, 621, 624], "magnesium": 369, "magnitud": [43, 129, 136, 168, 179, 183, 223, 243, 269, 304, 309, 316, 321, 359, 367, 378, 404, 408, 411, 414, 613, 652, 704, 884, 995, 999, 1003, 1009, 1013, 1015, 1031, 1038, 1047], "mahajan": [1037, 1039, 1046], "mahal": 111, "mahal_emp_cov": 111, "mahal_robust_cov": 111, "mahalanobi": [108, 112, 127, 180, 210, 404, 406, 447, 454, 466, 467, 468, 469, 470, 471, 472, 473, 699, 778, 779, 780, 993, 1002, 1005, 1020, 1037, 1040, 1041], "mahalanobisdist": 699, "mahapatra": 1036, "mahdavi": 639, "maheshakya": [0, 1032, 1033, 1034], "mahieux": 1023, "mahimkar": 1047, "mahmood": 1047, "mahout": 841, "mai": [0, 1, 25, 47, 57, 62, 74, 79, 80, 89, 103, 116, 120, 143, 144, 149, 163, 171, 173, 175, 179, 183, 186, 188, 191, 194, 198, 201, 211, 213, 231, 240, 243, 267, 269, 271, 272, 278, 299, 309, 326, 336, 340, 343, 347, 348, 349, 355, 359, 360, 361, 364, 366, 367, 368, 369, 371, 372, 374, 376, 377, 380, 384, 386, 387, 390, 395, 398, 401, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 427, 436, 437, 438, 440, 441, 442, 443, 444, 446, 448, 449, 450, 451, 456, 459, 462, 466, 469, 479, 480, 481, 484, 485, 486, 494, 506, 507, 513, 532, 533, 536, 538, 539, 542, 545, 546, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 570, 572, 580, 593, 596, 601, 610, 611, 617, 620, 634, 635, 637, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 672, 673, 674, 676, 677, 678, 679, 681, 684, 686, 688, 689, 691, 692, 693, 695, 697, 705, 711, 712, 715, 716, 718, 719, 721, 722, 723, 724, 726, 738, 756, 763, 785, 786, 800, 802, 803, 804, 805, 814, 815, 816, 819, 820, 825, 829, 832, 837, 838, 839, 840, 841, 843, 846, 847, 848, 850, 852, 854, 855, 856, 862, 863, 864, 867, 869, 879, 881, 882, 883, 884, 885, 887, 893, 896, 897, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 917, 928, 930, 931, 951, 952, 988, 989, 991, 993, 995, 996, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1019, 1029, 1031, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "maikia": [1037, 1038, 1040, 1041], "mail": [367, 372, 376, 380, 384, 387, 1037, 1038], "mailhot": 1029, "mailman": 380, "main": [1, 37, 48, 68, 95, 116, 124, 143, 180, 233, 273, 283, 312, 343, 347, 359, 360, 361, 365, 370, 372, 374, 376, 378, 380, 384, 385, 386, 389, 390, 402, 404, 409, 411, 412, 414, 501, 523, 528, 547, 548, 625, 713, 834, 904, 905, 988, 996, 998, 999, 1006, 1011, 1019, 1022, 1029, 1032, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "mainak": 1036, "maingret": 1040, "mainli": [64, 86, 134, 137, 167, 273, 281, 359, 374, 402, 611, 1001, 1006], "maint": 376, "maint_tool": 376, "maintain": [88, 212, 224, 226, 240, 263, 264, 360, 371, 375, 378, 379, 380, 384, 386, 387, 390, 400, 404, 411, 437, 439, 873, 874, 880, 881, 884, 889, 892, 893, 895, 995, 996, 999, 1009, 1017, 1018, 1019, 1022, 1025, 1044, 1048], "mainten": [0, 372, 376, 380, 384, 387, 390, 397, 995, 1019, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "mainy": 1041, "mair": [635, 996], "mairal": [409, 529, 535], "mairal_icml09": [529, 535], "maisonneuv": 1041, "maithreyi": 1039, "maj": 567, "major": [1, 49, 54, 70, 140, 258, 271, 273, 304, 308, 313, 314, 315, 316, 317, 318, 319, 320, 340, 349, 353, 359, 367, 371, 372, 374, 376, 378, 384, 387, 398, 404, 408, 410, 412, 549, 567, 568, 694, 916, 918, 999, 1002, 1013, 1019, 1023, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "make": [0, 1, 43, 46, 47, 50, 52, 54, 55, 58, 59, 62, 63, 64, 74, 75, 78, 79, 89, 94, 95, 100, 105, 125, 134, 140, 141, 143, 146, 149, 152, 160, 163, 167, 172, 175, 182, 183, 184, 185, 190, 194, 195, 198, 201, 202, 203, 207, 208, 209, 211, 213, 224, 227, 229, 235, 237, 239, 240, 241, 243, 249, 251, 254, 255, 258, 259, 261, 263, 264, 266, 267, 273, 274, 275, 278, 283, 293, 301, 304, 305, 310, 317, 319, 321, 336, 345, 347, 348, 349, 353, 355, 359, 360, 361, 366, 367, 370, 371, 373, 374, 375, 376, 377, 378, 380, 384, 386, 390, 395, 398, 400, 401, 402, 404, 405, 406, 408, 409, 411, 412, 413, 416, 437, 438, 439, 440, 442, 444, 446, 448, 449, 450, 455, 456, 457, 459, 485, 501, 512, 513, 520, 521, 525, 530, 532, 539, 549, 550, 553, 554, 559, 560, 582, 583, 606, 607, 631, 649, 655, 656, 671, 691, 695, 730, 737, 742, 768, 769, 781, 797, 798, 800, 802, 805, 811, 815, 816, 819, 820, 826, 827, 834, 835, 838, 871, 880, 883, 884, 888, 892, 894, 895, 896, 897, 910, 918, 930, 931, 941, 948, 955, 961, 984, 989, 991, 993, 995, 996, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1009, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1023, 1026, 1029, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "make_": 1038, "make_biclust": [1, 59, 511, 1031], "make_blob": [1, 61, 63, 69, 73, 77, 78, 79, 82, 88, 89, 90, 92, 93, 95, 96, 97, 201, 218, 233, 252, 307, 314, 317, 334, 337, 338, 344, 368, 375, 411, 513, 696, 710, 792, 793, 920, 1037, 1040, 1043], "make_cbar": 275, "make_checkerboard": [1, 58, 509, 1031], "make_circl": [1, 67, 79, 95, 125, 152, 231, 299, 300, 306, 327, 368, 1030, 1037, 1040], "make_classif": [1, 62, 64, 67, 138, 139, 141, 160, 162, 165, 261, 267, 275, 276, 294, 299, 306, 313, 315, 319, 321, 322, 323, 343, 345, 355, 368, 375, 400, 403, 411, 434, 435, 484, 510, 551, 553, 555, 562, 604, 606, 609, 666, 697, 698, 700, 702, 799, 822, 823, 828, 829, 831, 834, 861, 864, 904, 911, 988, 999, 1000, 1009, 1014, 1035, 1036, 1037, 1039, 1049], "make_column_selector": [1, 103, 143, 154, 243, 405, 461, 464, 1039], "make_column_transform": [1, 143, 154, 183, 235, 314, 405, 461, 463, 1037, 1049], "make_data": [70, 94], "make_dataset": 1038, "make_ellips": 251, "make_estim": 243, "make_friedman1": [1, 368, 411, 537, 541, 592, 593, 632], "make_friedman2": [1, 368, 611, 613, 614, 615, 616, 617, 621, 624, 625], "make_friedman3": [1, 368], "make_gaussian_quantil": [1, 134, 136, 368, 467, 471, 472, 473, 478, 518], "make_hastie_10_2": [1, 148, 268, 368, 411, 557, 1006], "make_heatmap": 275, "make_low_rank_matrix": [1, 319, 321, 522], "make_ml_clf": 118, "make_moon": [1, 67, 79, 95, 233, 264, 299, 300, 306, 368, 988, 1036, 1040], "make_multilabel_classif": [1, 118, 241, 368, 513, 534, 788, 835, 836, 999, 1031, 1032, 1034, 1040], "make_pipelin": [1, 43, 66, 67, 91, 116, 139, 143, 154, 155, 159, 160, 163, 178, 179, 183, 184, 188, 190, 196, 198, 202, 207, 208, 213, 220, 224, 227, 233, 234, 235, 243, 244, 245, 247, 258, 261, 271, 278, 284, 293, 299, 306, 309, 310, 311, 313, 314, 315, 316, 317, 318, 323, 348, 355, 385, 395, 405, 408, 565, 676, 678, 856, 864, 889, 890, 892, 893, 894, 895, 904, 905, 906, 907, 909, 910, 989, 1002, 1009, 1013, 1014, 1032, 1039, 1042], "make_plot": 304, "make_regress": [1, 49, 107, 190, 192, 193, 195, 210, 211, 277, 314, 320, 355, 368, 375, 385, 405, 552, 554, 558, 563, 605, 607, 608, 635, 646, 647, 649, 651, 652, 653, 655, 660, 661, 662, 663, 664, 665, 667, 671, 679, 681, 682, 683, 685, 686, 687, 862, 905, 922, 999, 1000, 1002], "make_s_curv": [1, 226, 231], "make_scor": [1, 52, 146, 149, 258, 268, 321, 395, 403, 408, 711, 730, 800, 826, 827, 1038, 1046, 1048], "make_sparse_coded_sign": [1, 206, 529, 535, 543, 544, 1043, 1045], "make_sparse_spd_matrix": [1, 113, 475, 527, 1046], "make_sparse_uncorrel": [1, 368], "make_spd_matrix": [1, 525], "make_subplot": 140, "make_swiss_rol": [1, 100, 230, 1043], "make_union": [1, 405, 863, 1032, 1036, 1049], "makedir": 1036, "maker": [182, 183], "makhija": 1044, "makoeppel": 1042, "maksym": 1044, "maladier": 1044, "maladi\u00e8r": [1044, 1045], "malcolm": 1037, "maldonado": [1039, 1042], "male": [103, 183, 318, 377, 877, 878, 1009], "malem": 1046, "malet": 1029, "malform": [55, 1033], "malic": [309, 369], "malic_acid": 48, "malici": 398, "malign": [163, 369, 498], "malik": [404, 449, 459, 691], "mallat": [664, 685, 686, 995], "mallatpursuit93": [664, 685, 686], "mallow": [731, 1035], "maloo": [1037, 1038], "malt": [1042, 1043, 1044, 1046], "maltimor": 1039, "malu": 224, "malzer": 443, "mal\u00e9zieux": 1042, "mamba": 398, "mamduh": 1049, "mame": 1046, "mammal": 50, "mammalian": 409, "man": [409, 589, 769, 839, 843, 997, 999, 1001], "manag": [0, 1, 116, 247, 358, 366, 370, 373, 374, 376, 380, 384, 386, 387, 398, 411, 447, 465, 626, 902, 993, 1015, 1018, 1019, 1023, 1025, 1042, 1045, 1048], "manaileng": 1042, "manasimj": 1047, "mandal": 1039, "mandatori": [372, 412], "mandatorili": 1036, "mandera": 1032, "mandi": [1040, 1043], "mandjev": 1043, "mandyam": 1039, "mangasarian": [163, 369], "mangipudi": 1035, "manh": 1037, "manhattan": [404, 438, 442, 447, 454, 699, 762, 771, 778, 779, 780, 851, 997, 1002, 1033, 1038, 1045], "manhattan_dist": [1, 447, 454, 688, 762, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858, 1029, 1039, 1044, 1045], "manhattandist": 699, "mani": [43, 46, 49, 57, 88, 89, 106, 109, 113, 134, 140, 141, 142, 147, 159, 163, 185, 207, 226, 237, 250, 257, 258, 264, 272, 276, 277, 284, 304, 309, 310, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 347, 355, 359, 361, 367, 369, 371, 372, 374, 385, 386, 387, 390, 398, 401, 402, 404, 405, 406, 409, 411, 412, 413, 414, 416, 501, 539, 564, 605, 608, 627, 639, 650, 654, 658, 659, 666, 667, 668, 676, 677, 678, 692, 695, 774, 778, 800, 804, 814, 861, 862, 877, 882, 884, 904, 988, 989, 991, 995, 996, 998, 999, 1000, 1001, 1002, 1005, 1006, 1009, 1012, 1014, 1016, 1018, 1019, 1023, 1029, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1043, 1044, 1045], "manideep": [1047, 1049], "manifest": [380, 996, 1002], "manifold": [1, 51, 74, 85, 100, 139, 229, 230, 231, 237, 284, 294, 313, 317, 318, 327, 365, 386, 404, 409, 411, 500, 523, 528, 542, 547, 564, 688, 689, 690, 691, 692, 693, 694, 695, 696, 853, 865, 874, 897, 933, 1002, 1020, 1024, 1025, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1046], "manimaran": [1038, 1040, 1041, 1042, 1043], "manipul": [1, 263, 366, 400, 505, 1018, 1035, 1049], "manish": 1040, "maniteja": [1035, 1036, 1037], "mankoo": 1044, "mann": 1039, "mannbi": 1037, "manner": [43, 107, 120, 160, 184, 188, 251, 317, 318, 360, 372, 378, 404, 409, 411, 412, 709, 844, 845, 988, 999, 1015, 1032, 1039], "mannila": 1011, "manning2008": 999, "manoharan": [1036, 1037], "manoj": [0, 394, 1032, 1033, 1034, 1035, 1036], "manraj": 1036, "mansi": 1044, "mansingh": 1043, "mansouri": 1045, "mantovani": 1044, "manu": 367, "manual": [1, 43, 80, 88, 155, 183, 184, 186, 208, 217, 266, 284, 328, 334, 347, 349, 359, 360, 367, 372, 376, 377, 384, 385, 390, 398, 400, 404, 408, 409, 410, 434, 446, 565, 799, 822, 854, 877, 883, 988, 993, 994, 995, 998, 999, 1002, 1009, 1019, 1037, 1039, 1045, 1047], "manuel": [1029, 1033, 1037, 1038, 1041, 1042, 1047], "manufactur": [183, 411], "manvendra": [1035, 1036], "maocx": 1039, "map": [1, 23, 37, 43, 44, 49, 50, 55, 57, 63, 86, 116, 125, 138, 145, 148, 152, 167, 180, 188, 207, 224, 226, 228, 232, 240, 243, 265, 268, 273, 292, 295, 297, 303, 304, 329, 336, 340, 345, 348, 349, 366, 367, 373, 384, 386, 395, 398, 402, 404, 405, 408, 409, 411, 412, 418, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 461, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 494, 496, 500, 507, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 632, 633, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 762, 765, 797, 798, 799, 800, 803, 804, 811, 812, 814, 822, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 892, 893, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 954, 957, 958, 988, 991, 996, 999, 1001, 1011, 1014, 1015, 1020, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1046], "mapd": 999, "mape": [1, 52, 746, 999], "mape_cv_mean": 143, "mape_cv_std": 143, "mapi": 52, "mar": 51, "marc": [1036, 1038, 1039, 1045, 1048, 1049], "march": [172, 726, 756, 999, 1029, 1033, 1037, 1039, 1044], "marchand": 1043, "marchman": [1030, 1031], "marco": [1035, 1037, 1038, 1042, 1043, 1044, 1047, 1048, 1049], "marcofalk": 1036, "marcogorelli": [1037, 1038], "marcolini": 1042, "marcom": 1043, "marcu": [1037, 1046], "mare": 1046, "marek": [1029, 1046], "maren": [0, 362, 383, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "margeta": 1037, "margffoi": 1048, "margin": [30, 43, 51, 62, 64, 136, 145, 168, 169, 170, 171, 172, 173, 180, 183, 184, 189, 216, 217, 219, 220, 241, 243, 264, 281, 304, 307, 310, 331, 332, 334, 335, 336, 338, 340, 344, 369, 402, 409, 411, 414, 510, 610, 611, 631, 645, 676, 735, 833, 881, 893, 906, 909, 995, 999, 1001, 1005, 1006, 1009, 1013, 1014, 1020, 1036, 1038], "margoni": 1049, "marguli": 1039, "mari": [102, 1037, 1038, 1039, 1040, 1043, 1048, 1049], "maria": [404, 1040, 1041, 1042, 1043, 1044], "mariam": 1041, "mariana": 1040, "mariangela": 1042, "mariano": 264, "mariel": 1040, "marielaraj": 1042, "marija": [1040, 1041, 1047, 1049], "marijn": 1041, "marin": [526, 1047], "marina": 404, "marinelm": 1038, "mario": [402, 1033, 1035, 1043, 1044, 1045], "marit": [320, 494], "mari\u00e9": [0, 362, 1038, 1039, 1040, 1041, 1042, 1043, 1049], "mark": [1, 70, 91, 118, 158, 263, 268, 275, 364, 372, 376, 380, 381, 386, 404, 533, 606, 607, 611, 658, 857, 858, 899, 900, 917, 937, 942, 943, 948, 995, 1023, 1025, 1029, 1030, 1035, 1037, 1038, 1045, 1046, 1047, 1048], "markdown": 375, "marker": [49, 50, 55, 64, 66, 70, 72, 73, 77, 85, 88, 91, 92, 93, 96, 97, 115, 118, 122, 140, 153, 174, 175, 188, 196, 202, 204, 205, 207, 209, 210, 221, 223, 227, 249, 251, 252, 258, 259, 264, 266, 267, 268, 291, 304, 309, 327, 351, 375, 376, 412, 1037, 1039, 1040, 1045], "markeredgecolor": [82, 88, 94, 96, 97], "markeredgewidth": [111, 268], "markerfacecolor": [82, 88, 94, 96, 97], "markers": [82, 88, 91, 94, 96, 97, 146, 170, 174, 236, 258, 317], "markerstyl": 258, "market": [42, 80, 85, 149, 180, 226, 227, 404, 406, 451, 468, 469, 689, 996, 1020, 1023], "marketplac": 1023, "markham": [1033, 1040, 1041], "markiwanchyshyn": 1037, "marko": [1029, 1038, 1039, 1045], "markou": 1042, "markov": [414, 611, 1004, 1018, 1029], "markovtsev": 1037, "marktab": 1034, "marku": [404, 447, 454, 1037, 1039, 1040, 1041], "marmo": [0, 363, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "maron": [404, 439], "marr": 183, "marr_unmarri": 183, "marreddi": 1043, "marri": 183, "marriott": 51, "marsgui": 1037, "marsh": 1040, "marshal": 369, "marsi": 1032, "marsland": 528, "marslast": 528, "marszalek": [758, 759, 997], "mart": [51, 1039], "martel": 1043, "martha": 310, "martian": 1039, "martin": [0, 362, 721, 723, 724, 995, 999, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049], "martin1997": 999, "martina": [1039, 1041], "martinbpr": [1034, 1035], "martinez": 1036, "martino": 1034, "martinosorb": 1034, "martinsson": [55, 533, 539, 948], "martynov": 1042, "mart\u00edn": [1042, 1043], "marufo": 1044, "marufur": 1036, "marvin": [1044, 1045], "marwaha": 1037, "marx": 1009, "maryanmorel": [1034, 1035], "marzinotto": [1037, 1038], "mar\u00eda": [1043, 1044, 1045, 1048, 1049], "mas_vnr_typ": 243, "masafumi": 1034, "masanori": [1044, 1045], "masashi": [1039, 1041], "masecchia": 1029, "mash": 412, "mask": [1, 53, 77, 99, 162, 207, 214, 243, 262, 263, 329, 381, 386, 405, 411, 461, 466, 471, 559, 560, 580, 584, 585, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 606, 607, 629, 630, 632, 633, 649, 671, 800, 803, 804, 814, 970, 989, 1006, 1029, 1032, 1034, 1035, 1037, 1039, 1047], "mask_al": 989, "mask_false_neg": 258, "mask_false_posit": 258, "mask_label": 66, "mask_missing_values_onli": 989, "mask_out": 53, "mask_test": 224, "mask_train": [184, 224], "mask_true_neg": 258, "mask_true_posit": 258, "mask_y_pr": 66, "maskani": [1037, 1039, 1040, 1041], "masked_arrai": [162, 336, 800, 814], "masked_equ": 113, "maskedarrai": [268, 1035], "mason": 1033, "mass": [163, 244, 369, 443, 797, 995, 1006], "massachusett": 367, "massia": [0, 1040, 1042, 1043], "massich": [1036, 1037, 1038, 1039], "massil": 1035, "massiv": [384, 1017], "masstran": 1038, "master": [51, 284, 318, 372, 1017, 1023], "masurel": 1030, "masvnrarea": [107, 154], "masvnrtyp": [143, 154], "mat": [366, 412], "match": [0, 1, 43, 58, 72, 87, 120, 121, 123, 129, 140, 180, 188, 189, 207, 228, 229, 236, 243, 340, 349, 367, 374, 376, 400, 404, 409, 411, 412, 425, 446, 461, 463, 489, 506, 507, 513, 524, 529, 535, 540, 546, 549, 565, 566, 570, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 627, 628, 629, 630, 658, 664, 665, 685, 686, 699, 703, 704, 705, 713, 715, 719, 734, 778, 779, 780, 786, 844, 845, 849, 853, 867, 868, 869, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 904, 911, 917, 934, 996, 998, 999, 1001, 1002, 1020, 1021, 1025, 1029, 1035, 1036, 1037, 1039, 1041, 1042, 1045, 1047], "matchingdist": 699, "matchmak": 1023, "matcovici": 1039, "mate": 347, "matem\u00e1tica": 995, "mateo": 1042, "materi": [53, 183, 320, 387, 539, 580, 894, 895, 1017], "matern": [1, 176, 414, 1040, 1044], "mateusz": [1033, 1040, 1041, 1046, 1047], "math": [102, 149, 163, 243, 264, 265, 369, 390, 764], "mathbb": [120, 137, 170, 407, 999, 1006, 1014], "mathbf": [170, 340, 409, 995, 999, 1003, 1004, 1013], "mathcal": [211, 343, 409, 411, 627, 696, 991, 993, 995, 999, 1042], "mathemat": [37, 134, 183, 196, 223, 261, 267, 364, 369, 372, 386, 389, 404, 406, 409, 410, 414, 547, 548, 555, 562, 635, 646, 656, 792, 793, 798, 862, 906, 909, 912, 914, 995, 999, 1003, 1009, 1011, 1021, 1023, 1025, 1043], "matheu": 1035, "mathew": [1044, 1048], "mathi": 1042, "mathia": 1043, "mathieu": [0, 394, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1042], "mathrm": [404, 406, 409, 413, 995, 1015], "mathschi": 1041, "mathur": [1036, 1038, 1039, 1044, 1045, 1047], "mathurin": [0, 1040, 1042, 1043], "mathurinm": [1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "matjansen": 1043, "mato": 1041, "matplotlib": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 161, 162, 163, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 182, 183, 184, 186, 188, 190, 191, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 233, 234, 236, 237, 238, 239, 241, 242, 243, 244, 246, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 263, 264, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 317, 318, 320, 325, 326, 327, 328, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 351, 352, 353, 354, 366, 368, 372, 376, 379, 390, 397, 435, 500, 631, 632, 697, 698, 700, 701, 702, 806, 823, 918, 994, 1018, 1026, 1038, 1041, 1042, 1043, 1044, 1047, 1048], "matric": [1, 37, 70, 74, 75, 111, 113, 120, 212, 250, 251, 253, 254, 255, 284, 297, 314, 320, 323, 329, 347, 348, 364, 366, 374, 375, 384, 385, 386, 404, 405, 406, 407, 409, 412, 413, 419, 447, 448, 450, 461, 470, 478, 479, 480, 481, 524, 532, 533, 536, 538, 539, 542, 545, 547, 548, 553, 554, 561, 564, 580, 581, 588, 643, 646, 647, 652, 653, 658, 664, 672, 674, 687, 754, 760, 768, 774, 778, 779, 780, 781, 792, 797, 798, 830, 848, 851, 856, 867, 871, 873, 876, 879, 881, 882, 884, 887, 889, 891, 893, 894, 895, 896, 897, 906, 907, 909, 910, 926, 948, 955, 964, 969, 971, 972, 989, 991, 993, 996, 997, 998, 1000, 1002, 1003, 1011, 1013, 1014, 1018, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048], "matrix": [1, 7, 10, 42, 45, 46, 48, 52, 53, 57, 58, 59, 68, 70, 74, 76, 79, 87, 95, 102, 110, 111, 112, 113, 115, 120, 121, 122, 130, 174, 180, 186, 189, 195, 208, 212, 229, 234, 237, 238, 240, 254, 256, 258, 271, 301, 317, 320, 325, 326, 340, 345, 347, 348, 349, 354, 359, 367, 368, 369, 372, 374, 378, 381, 384, 385, 386, 400, 401, 405, 406, 407, 412, 413, 414, 415, 416, 426, 427, 435, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 451, 454, 456, 457, 459, 460, 461, 462, 464, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 479, 480, 481, 482, 484, 485, 486, 490, 494, 495, 498, 499, 500, 501, 502, 503, 506, 507, 508, 517, 519, 521, 522, 524, 525, 527, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 542, 543, 544, 545, 546, 547, 548, 551, 552, 553, 554, 555, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 580, 581, 582, 584, 585, 587, 588, 589, 590, 592, 593, 602, 603, 604, 605, 606, 607, 608, 611, 620, 629, 630, 631, 633, 635, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 707, 712, 713, 714, 715, 716, 718, 722, 729, 730, 731, 734, 738, 739, 740, 741, 754, 755, 758, 759, 760, 761, 763, 764, 766, 767, 768, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 787, 788, 792, 793, 796, 797, 798, 799, 800, 803, 804, 814, 822, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 846, 847, 848, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 868, 869, 870, 871, 873, 875, 876, 877, 879, 881, 882, 883, 884, 886, 887, 888, 889, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 921, 926, 928, 929, 930, 931, 936, 945, 946, 947, 948, 949, 952, 954, 955, 963, 964, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 984, 987, 989, 991, 993, 995, 996, 1000, 1001, 1002, 1003, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1020, 1024, 1025, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "matrixorz": 1032, "matshow": [58, 59, 99, 161, 301, 500], "matsubara": 999, "matt": [1032, 1033, 1034, 1039, 1040, 1044, 1045], "matteo": [1033, 1035, 1043], "matter": [129, 209, 255, 340, 355, 404, 405, 411, 565, 668, 676, 678, 995, 1033], "matthew": [1, 371, 377, 534, 743, 1029, 1032, 1036, 1038, 1042, 1043, 1047, 1048], "matthews_corrcoef": [1, 999, 1029, 1035, 1036, 1043], "matthia": [1029, 1031, 1032, 1035, 1036, 1037, 1041, 1044], "matthieu": [0, 394, 1029, 1033, 1044], "matti": [1030, 1033, 1034], "matur": [372, 1018, 1019], "mat\u00e9rn": 619, "mat\u00eda": 1043, "maud": 1032, "mauna": 172, "maura": 1040, "mauroantonioserrano": 1044, "mav": 1047, "mavani": 1037, "mavroforaki": [1033, 1035], "max": [43, 47, 49, 50, 51, 52, 55, 57, 62, 64, 66, 67, 69, 75, 79, 85, 91, 95, 100, 104, 105, 108, 110, 113, 120, 123, 127, 130, 134, 136, 142, 148, 152, 158, 159, 163, 169, 171, 172, 179, 180, 183, 193, 196, 198, 201, 204, 209, 210, 213, 220, 222, 224, 229, 237, 241, 262, 263, 264, 275, 283, 284, 286, 290, 291, 295, 297, 299, 301, 304, 306, 307, 309, 316, 321, 328, 330, 344, 359, 404, 405, 406, 409, 466, 467, 468, 469, 470, 471, 472, 473, 474, 510, 534, 553, 554, 555, 556, 557, 558, 561, 562, 563, 605, 627, 631, 632, 648, 649, 669, 672, 674, 680, 691, 692, 696, 699, 704, 705, 757, 792, 793, 800, 861, 862, 873, 874, 876, 883, 890, 891, 912, 913, 914, 915, 995, 997, 1002, 1009, 1013, 1014, 1020, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "max_": [404, 999], "max_abs_": 873, "max_abs_scal": 1009, "max_bin": [151, 154, 258, 310, 316, 317, 318, 323, 411, 559, 560, 1046], "max_categori": [103, 139, 154, 183, 184, 185, 235, 245, 310, 314, 317, 319, 877, 878, 1009, 1043, 1045], "max_class_cmap": 66, "max_class_disp": 66, "max_cluster_s": 443, "max_column": 224, "max_degre": [879, 1042], "max_depth": [46, 63, 67, 135, 136, 139, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 156, 178, 185, 227, 245, 258, 261, 276, 281, 310, 315, 316, 318, 320, 323, 351, 353, 354, 385, 386, 403, 411, 551, 552, 555, 556, 557, 558, 559, 560, 562, 563, 564, 711, 803, 804, 828, 912, 913, 914, 915, 916, 917, 918, 988, 1006, 1015, 1038, 1040], "max_df": [54, 265, 329, 347, 348, 587, 590, 1040, 1047], "max_dist": 237, "max_doc_update_it": 534, "max_ep": [404, 447, 452, 453, 454], "max_error": [1, 400, 999, 1038, 1048], "max_estim": 138, "max_featur": [54, 63, 67, 138, 141, 148, 150, 151, 154, 156, 185, 242, 245, 258, 261, 265, 276, 310, 315, 318, 320, 323, 353, 354, 411, 413, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 587, 590, 596, 912, 913, 914, 915, 988, 995, 1029, 1031, 1032, 1036, 1037, 1040, 1043, 1046], "max_features_": [557, 558, 596, 912, 913, 914, 915, 1043], "max_fpr": [788, 999, 1037], "max_fun": [244, 861, 862, 1039], "max_i": [241, 1001], "max_idf": 1042, "max_it": [43, 47, 51, 52, 54, 55, 62, 64, 67, 103, 104, 105, 120, 123, 139, 140, 143, 149, 151, 154, 155, 160, 178, 183, 184, 190, 192, 195, 202, 214, 215, 218, 219, 221, 226, 227, 228, 229, 231, 234, 235, 244, 245, 246, 247, 249, 250, 251, 252, 254, 255, 258, 262, 263, 264, 271, 277, 278, 294, 299, 300, 301, 302, 310, 314, 315, 316, 317, 318, 323, 325, 326, 327, 333, 347, 348, 378, 386, 411, 416, 437, 440, 444, 445, 446, 451, 456, 458, 468, 469, 475, 479, 480, 481, 529, 530, 531, 533, 534, 535, 536, 537, 538, 541, 543, 544, 545, 546, 559, 560, 627, 638, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 672, 674, 676, 677, 678, 679, 680, 682, 683, 687, 688, 689, 690, 692, 693, 694, 797, 798, 814, 853, 861, 862, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 989, 991, 995, 1002, 1003, 1012, 1013, 1030, 1033, 1036, 1037, 1038, 1039, 1041, 1043, 1044, 1045, 1046, 1047], "max_iter": 326, "max_iter_list": 149, "max_iter_predict": 610, "max_j": [646, 652], "max_leaf_nod": [63, 134, 139, 140, 141, 148, 151, 154, 156, 185, 207, 245, 258, 276, 310, 315, 316, 318, 320, 323, 353, 354, 411, 555, 556, 557, 558, 559, 560, 562, 563, 564, 912, 913, 914, 915, 1032, 1038, 1040], "max_n": [587, 588, 590, 1029], "max_n_alpha": [651, 655], "max_nbyt": 966, "max_no_improv": [77, 94, 97, 446, 535, 536, 537, 544, 1043, 1044], "max_patch": [83, 412, 582, 583, 1037], "max_resourc": [146, 276, 803, 804, 988], "max_resources_": [803, 804], "max_sampl": [63, 141, 150, 154, 156, 178, 185, 245, 276, 320, 411, 553, 554, 555, 556, 561, 562, 563, 634, 1039, 1042, 1045], "max_samples_": 561, "max_skip": 671, "max_subpopul": [223, 679, 1043], "max_thread": [360, 373], "max_train_s": [43, 52, 408, 821, 1036], "max_trial": [671, 995], "max_val": 934, "max_valu": [627, 1040, 1041, 1048], "max_x": 241, "maxabs_scal": [1, 386, 873, 1037], "maxabsscal": [1, 361, 400, 868, 889, 989, 1009, 1034, 1037, 1038, 1039, 1040, 1045, 1046], "maxent": [1, 658, 659, 995], "maxent_du": 658, "maxi": 1044, "maxim": [115, 116, 120, 126, 130, 146, 190, 254, 255, 258, 265, 269, 273, 274, 277, 278, 294, 309, 315, 336, 340, 351, 354, 369, 386, 401, 403, 404, 407, 409, 411, 413, 414, 547, 593, 610, 611, 644, 645, 648, 669, 679, 680, 720, 800, 803, 804, 814, 873, 879, 889, 993, 995, 998, 999, 1002, 1004, 1014, 1032, 1034, 1039, 1042, 1044, 1047], "maxima": 404, "maximesaur": [1044, 1045], "maximis": [250, 292, 993, 1002], "maximum": [1, 43, 47, 50, 64, 69, 72, 90, 109, 110, 111, 112, 113, 122, 134, 136, 139, 140, 142, 145, 149, 168, 170, 173, 174, 180, 189, 196, 243, 258, 274, 286, 290, 291, 297, 304, 331, 332, 334, 335, 338, 340, 348, 351, 353, 359, 367, 377, 378, 385, 386, 401, 402, 404, 406, 407, 409, 411, 412, 414, 415, 416, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 451, 454, 456, 458, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 479, 480, 481, 496, 507, 509, 510, 511, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 550, 551, 552, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 582, 583, 596, 610, 627, 631, 632, 635, 637, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 672, 674, 676, 677, 678, 679, 682, 683, 685, 686, 687, 688, 689, 690, 692, 693, 694, 716, 744, 781, 797, 800, 803, 804, 806, 814, 821, 828, 853, 860, 861, 862, 868, 869, 873, 874, 876, 879, 880, 881, 883, 892, 893, 898, 899, 900, 901, 904, 905, 909, 912, 913, 914, 915, 916, 918, 927, 934, 988, 994, 995, 996, 998, 999, 1001, 1002, 1003, 1005, 1009, 1013, 1014, 1015, 1020, 1036, 1037, 1039, 1040, 1043, 1044, 1046, 1049], "maxin": [1039, 1040], "maxsiz": 617, "maxval": [509, 511], "maxwel": [0, 362, 1039, 1042, 1043, 1044, 1045, 1048], "maxwelllzh": 1044, "may_share_memori": 1046, "mayank": 1049, "mayb": [106, 301, 376, 412, 1014, 1019], "mayer": [411, 999, 1041, 1043, 1046, 1047], "mayer2022": 411, "mayilvahanan": 404, "mayorov": [1032, 1033, 1034, 1035], "mayur": 1037, "mazari": 1037, "mb": [47, 237, 258, 347, 349, 367, 378, 494, 906, 907, 908, 909, 910, 1014, 1020], "mbilling": 1034, "mbillingr": 1039, "mbk": [77, 97], "mbk_means_cluster_cent": 97, "mbk_means_label": 97, "mbk_means_labels_uniqu": 77, "mblondel": [366, 506], "mbnmf": 54, "mc4229": 1040, "mc_clf": 1006, "mcar": 149, "mcc": [1, 743, 999, 1043], "mccall": 102, "mccallum": [839, 1001], "mccarthi": [0, 356, 1029, 1037], "mcclish": [273, 788], "mcconaghi": 1023, "mccullagh": 995, "mcculloh": [1034, 1035], "mcd": [1, 51, 111, 112, 406, 466, 471], "mcdermott": [1031, 1046], "mcdonald": 51, "mcdowel": 1037, "mcfadden": 999, "mcfee": [1034, 1035], "mcgibbon": [1031, 1032, 1035], "mcgushion": 1038, "mcinn": [404, 1035, 1036, 1037, 1039, 1040, 1045], "mcivor": [1044, 1045], "mcm": [754, 999], "mcm_": 754, "mcmahon": 1046, "mcsherri": [726, 756, 999], "mctiernan": [1043, 1044], "mcve": [377, 384], "md": [1, 226, 227, 228, 229, 376, 380, 688, 692, 694, 1024, 1025, 1029, 1041, 1044, 1049], "md5": 1041, "md5_checksum": 366, "md_scale": 226, "mdarii": 1045, "mdbecker": 1023, "mdi": [140, 141, 147, 180, 181, 186, 411, 413, 461, 494, 562, 630, 634, 830, 864, 878, 1007, 1020], "mdi_import": [185, 186], "me": 347, "me1": 281, "me2": 281, "me3": 281, "mea": 91, "mean": [1, 43, 44, 47, 50, 52, 53, 54, 55, 57, 61, 62, 63, 64, 70, 71, 72, 73, 75, 77, 79, 80, 82, 83, 86, 87, 88, 93, 103, 110, 111, 112, 113, 116, 118, 120, 123, 124, 125, 127, 134, 136, 137, 140, 142, 143, 146, 147, 149, 154, 155, 162, 163, 167, 172, 173, 174, 176, 178, 180, 183, 184, 191, 193, 198, 200, 201, 202, 205, 207, 209, 213, 215, 221, 222, 223, 224, 229, 231, 233, 236, 237, 238, 239, 240, 241, 243, 244, 245, 247, 249, 250, 251, 252, 254, 255, 258, 260, 261, 263, 264, 265, 266, 267, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 283, 284, 295, 304, 307, 309, 310, 311, 313, 316, 319, 321, 322, 328, 336, 339, 340, 343, 345, 346, 347, 349, 355, 359, 364, 366, 367, 369, 370, 372, 373, 374, 376, 377, 378, 380, 381, 384, 385, 386, 395, 400, 401, 402, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 421, 427, 434, 435, 436, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 454, 455, 456, 457, 458, 459, 461, 462, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 485, 499, 500, 510, 517, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 582, 587, 588, 589, 590, 593, 596, 601, 605, 606, 607, 608, 610, 611, 613, 622, 627, 628, 630, 632, 633, 634, 635, 639, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 684, 688, 689, 690, 691, 692, 693, 694, 695, 702, 704, 705, 707, 709, 712, 713, 716, 717, 724, 726, 729, 730, 731, 736, 737, 738, 741, 742, 745, 746, 747, 748, 749, 750, 751, 752, 753, 757, 774, 778, 779, 781, 783, 784, 785, 787, 788, 790, 791, 792, 793, 795, 797, 798, 799, 800, 803, 804, 806, 814, 818, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 850, 851, 852, 854, 855, 857, 858, 860, 861, 862, 863, 865, 866, 868, 869, 873, 874, 876, 880, 882, 884, 885, 890, 892, 893, 895, 897, 899, 900, 904, 905, 906, 907, 909, 910, 912, 913, 914, 915, 921, 926, 930, 931, 933, 972, 973, 979, 983, 988, 989, 990, 993, 995, 996, 998, 1001, 1002, 1003, 1004, 1006, 1007, 1012, 1013, 1014, 1015, 1020, 1023, 1024, 1025, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049], "mean_": [121, 268, 530, 531, 532, 537, 539, 541, 884, 1009, 1037], "mean_absolute_error": [1, 52, 207, 209, 224, 400, 999, 1030, 1032, 1048, 1049], "mean_absolute_percentage_error": [1, 52, 143, 400, 999, 1041, 1043, 1048, 1049], "mean_auc": 274, "mean_change_tol": 534, "mean_fit_tim": [140, 263, 286, 800, 814], "mean_fpr": 274, "mean_gamma_devi": [1, 400, 999, 1039, 1048, 1049], "mean_l1_ratio": 1032, "mean_pinball_loss": [1, 52, 146, 149, 316, 400, 995, 999, 1042, 1049], "mean_pinball_loss_95p": 999, "mean_poisson_devi": [1, 207, 400, 999, 1039, 1048, 1049], "mean_precis": 262, "mean_precision_": 797, "mean_precision_prior": [249, 255, 797], "mean_precision_prior_": 797, "mean_predict": [52, 174], "mean_predictions_gpr": 167, "mean_prior": 797, "mean_prior_": 797, "mean_recal": 262, "mean_scor": [104, 273, 276, 348, 1042], "mean_score_tim": [140, 262, 265, 800, 814], "mean_shift": [1, 1034, 1037], "mean_square_error": 1030, "mean_squared_error": [1, 46, 144, 146, 147, 205, 207, 209, 211, 213, 224, 355, 400, 411, 752, 999, 1030, 1032, 1039, 1040, 1046, 1048, 1049], "mean_squared_log_error": [1, 400, 711, 999, 1036, 1042, 1046, 1048, 1049], "mean_test_": 268, "mean_test_precis": [262, 268], "mean_test_recal": 262, "mean_test_scor": [103, 104, 105, 113, 140, 162, 254, 263, 264, 265, 272, 275, 276, 286, 336, 469, 593, 800, 814, 988, 1035, 1042], "mean_tim": 1035, "mean_tpr": [273, 274], "mean_train_precis": [800, 814], "mean_train_scor": [263, 800, 814, 1035], "mean_tweedie_devi": [1, 224, 400, 999, 1039, 1048, 1049], "mean_variance_axi": [1, 381, 1035, 1042], "mean_y_pr": 172, "meaning": [72, 186, 201, 231, 293, 321, 349, 401, 403, 408, 412, 413, 546, 729, 730, 738, 783, 784, 787, 853, 1003, 1013, 1014, 1029, 1045], "meaningfulli": [207, 999], "meaningless": [184, 412, 906, 909, 1032, 1036], "means_": [70, 249, 250, 251, 252, 254, 255, 547, 548, 797, 798], "means_init": [251, 252, 254, 798], "meanshift": [1, 79, 317, 404, 437, 1032, 1033, 1034, 1037, 1039, 1040, 1043, 1044, 1045, 1047], "meant": [90, 149, 163, 243, 321, 367, 372, 381, 471, 491, 677, 850, 923, 966, 967, 987, 989, 1003, 1005, 1009, 1030], "meantim": [380, 1048], "meanwhil": [384, 1014], "measur": [1, 27, 43, 46, 47, 49, 50, 52, 57, 62, 72, 73, 82, 91, 93, 94, 121, 137, 138, 146, 150, 156, 163, 167, 172, 180, 182, 183, 184, 188, 198, 203, 206, 207, 211, 213, 224, 256, 262, 264, 270, 271, 309, 340, 347, 348, 359, 367, 369, 374, 378, 386, 401, 406, 408, 409, 410, 411, 412, 446, 449, 459, 496, 513, 536, 538, 545, 549, 555, 556, 557, 558, 561, 562, 563, 603, 606, 607, 611, 627, 631, 658, 690, 692, 698, 702, 704, 705, 707, 709, 712, 713, 716, 717, 720, 725, 726, 727, 729, 731, 736, 737, 739, 740, 743, 747, 755, 756, 757, 782, 783, 784, 786, 787, 788, 789, 792, 795, 825, 827, 830, 850, 881, 893, 912, 913, 914, 915, 921, 989, 995, 997, 1002, 1004, 1005, 1007, 1013, 1015, 1020, 1029, 1032, 1034, 1035, 1037, 1039], "mechan": [74, 240, 322, 344, 347, 360, 372, 374, 398, 402, 404, 412, 418, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 461, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 609, 610, 611, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 997, 1015, 1023, 1048], "mecopur": 1046, "med": [57, 102, 273, 367, 1009], "meda": [107, 183, 999], "media": [376, 404, 1023], "median": [1, 43, 52, 72, 103, 107, 111, 112, 146, 178, 179, 183, 209, 213, 223, 235, 243, 304, 314, 316, 317, 367, 406, 411, 413, 437, 451, 455, 458, 471, 550, 552, 556, 563, 596, 627, 630, 635, 670, 671, 679, 721, 753, 851, 882, 894, 913, 915, 989, 1009, 1015, 1032, 1033], "median_absolute_error": [1, 107, 183, 999, 1033, 1039, 1041], "median_predict": 52, "median_unbias": 869, "medic": [267, 408, 712, 995, 1023], "medicin": [267, 712, 999], "medina": [1029, 1031], "medinc": [304, 315, 367, 487], "medium": [42, 180, 239, 311, 322, 336, 404, 643, 878, 992, 995], "medoid": 443, "medoids_": 443, "medri": 1032, "meekail": [0, 393, 1043, 1044, 1045, 1046, 1048], "meena": 1049, "meer": [96, 404, 445], "meet": [372, 384, 387, 413, 570, 602, 861, 862, 901, 999, 1012, 1023, 1037, 1038, 1039], "megabyt": 1043, "megasari": 1041, "meghann": [1037, 1039], "mehak": 1036, "mehdi": [1033, 1042], "mehgarg": 1044, "mehmet": [1036, 1042], "mehmetcanakbai": 1044, "mehrdad": 1043, "mehta": [1033, 1034, 1035, 1037, 1038, 1039, 1040, 1044, 1045], "mehul": 1036, "mei": [1034, 1039], "meier": 1036, "meila": 404, "mein": 412, "meinshausen": 194, "meirel": 1040, "meketon": 1036, "mekinda": 1049, "melani": [1023, 1036, 1037], "melderi": 1037, "melemo2": 1043, "meli": [1042, 1043, 1044], "melissa": 1037, "mellon": 899, "melnik": 1044, "melsyt": [1037, 1038], "mem": [87, 378, 506, 507, 1020], "member": [0, 347, 348, 367, 372, 375, 387, 404, 439, 443, 445, 490, 580, 658, 659, 666, 667, 668, 676, 677, 678, 704, 705, 715, 717, 731, 736, 737, 757, 786, 795, 800, 904, 995, 1002, 1017, 1029, 1041, 1044], "membership": [30, 89, 387, 401, 404, 509, 510, 511, 512, 513, 517, 520, 1014], "memit": 378, "memmap": [360, 367, 386, 409, 506, 532, 1037, 1046], "memoiz": [104, 367, 386], "memor": 185, "memori": [1, 47, 87, 103, 104, 124, 139, 154, 160, 183, 184, 185, 234, 235, 244, 245, 247, 258, 265, 271, 278, 286, 310, 313, 314, 315, 317, 318, 321, 323, 347, 348, 349, 360, 361, 366, 372, 375, 381, 384, 386, 398, 404, 405, 408, 409, 412, 415, 416, 438, 439, 440, 441, 442, 443, 444, 446, 447, 451, 454, 456, 465, 470, 476, 494, 501, 506, 507, 531, 532, 533, 536, 539, 555, 556, 562, 563, 580, 581, 587, 588, 590, 646, 647, 648, 652, 653, 658, 659, 660, 661, 662, 663, 666, 667, 668, 669, 676, 677, 678, 679, 680, 681, 684, 778, 779, 780, 781, 800, 806, 814, 823, 825, 826, 827, 828, 831, 832, 833, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 852, 854, 855, 856, 864, 865, 882, 884, 894, 895, 897, 902, 904, 905, 912, 913, 914, 915, 931, 968, 983, 995, 1001, 1002, 1009, 1011, 1012, 1014, 1015, 1023, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "memory_profil": [378, 390, 397], "memoryerror": [1037, 1041], "memoryview": 373, "memorywis": 398, "men": 369, "menes": 1044, "meng": [1029, 1030, 1033, 1035, 1036], "menoci": 1047, "menon": 402, "mensch": [1034, 1035, 1036, 1037], "mention": [88, 116, 134, 224, 278, 314, 355, 359, 372, 374, 376, 377, 384, 404, 553, 696, 896, 897, 988, 993, 995, 1019, 1022, 1023, 1036, 1037, 1038], "menu": 390, "menuet": 1038, "mercer": 991, "mere": [43, 264, 386, 831, 1013], "merg": [74, 76, 80, 84, 316, 370, 372, 375, 380, 384, 387, 404, 437, 438, 439, 442, 443, 460, 820, 1029, 1036], "merit": [372, 376, 387], "meritocrat": 387, "merritt": 1035, "mersenn": 1040, "merz": 402, "mesfer": 1042, "mesh": [91, 142, 152, 169, 238, 292, 299, 306, 330, 332], "meshgrid": [50, 63, 77, 91, 111, 142, 152, 168, 169, 170, 171, 173, 184, 217, 218, 219, 220, 231, 233, 253, 290, 297, 299, 306, 307, 330, 335, 336, 340, 341, 344, 631], "meshulam": 1032, "meson": [370, 375, 390, 397, 1048], "mess": 1043, "messag": [73, 79, 95, 102, 120, 240, 322, 347, 348, 367, 370, 371, 375, 376, 377, 380, 381, 404, 437, 451, 465, 537, 541, 546, 572, 627, 712, 800, 803, 804, 806, 814, 823, 828, 831, 833, 853, 861, 862, 902, 929, 930, 931, 934, 937, 963, 982, 987, 1009, 1029, 1033, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "met": [240, 374, 413, 532, 539, 627, 671, 821, 995, 999, 1037], "meta": [1, 6, 30, 31, 89, 102, 133, 156, 165, 180, 207, 269, 273, 278, 280, 283, 319, 320, 322, 351, 353, 355, 366, 370, 374, 376, 384, 386, 395, 402, 413, 414, 424, 434, 440, 441, 444, 446, 462, 479, 480, 481, 494, 531, 534, 536, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 574, 589, 596, 602, 609, 610, 611, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 690, 799, 800, 801, 802, 807, 809, 816, 818, 822, 827, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 849, 851, 854, 855, 861, 862, 864, 867, 869, 870, 871, 876, 883, 884, 899, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 921, 953, 957, 960, 987, 988, 1000, 1019, 1020, 1021, 1025, 1029, 1032, 1033, 1034, 1035, 1036, 1037, 1040, 1041, 1043, 1044, 1046], "meta_clf_sample_weight": 240, "meta_est": 240, "meta_meta_est": 240, "metaclassifi": [240, 241], "metaclassifierifit": 240, "metadata": [1, 132, 180, 192, 232, 258, 321, 348, 366, 367, 374, 398, 418, 421, 424, 427, 428, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 461, 462, 465, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 485, 486, 494, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 609, 610, 611, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 956, 957, 958, 959, 960, 982, 999, 1018, 1019, 1020, 1025, 1045], "metadata_rout": [1, 240, 395, 434, 440, 441, 444, 446, 462, 479, 480, 481, 531, 534, 536, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 589, 610, 611, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 690, 799, 801, 802, 807, 809, 818, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 849, 851, 854, 855, 861, 862, 864, 867, 869, 870, 871, 876, 883, 884, 899, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 956, 957, 958, 959, 960], "metadatarequest": [1, 240, 418, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 466, 467, 468, 470, 471, 472, 473, 479, 480, 481, 482, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 555, 556, 557, 558, 559, 560, 562, 563, 564, 580, 581, 582, 587, 588, 589, 590, 591, 594, 595, 597, 598, 599, 602, 609, 610, 611, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 648, 649, 650, 652, 654, 656, 657, 658, 660, 662, 664, 666, 667, 668, 669, 670, 672, 674, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 797, 798, 801, 802, 805, 807, 808, 809, 810, 813, 815, 816, 817, 818, 819, 820, 821, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 957, 959, 1046], "metadatarout": [1, 240, 434, 461, 462, 469, 553, 554, 561, 565, 566, 567, 568, 592, 593, 596, 601, 627, 647, 651, 653, 655, 659, 661, 663, 665, 671, 673, 675, 799, 800, 803, 804, 814, 822, 832, 833, 834, 835, 836, 837, 838, 863, 864, 901, 959, 1046], "metaestim": [1, 89, 386, 901, 921, 961, 1033, 1042, 1043, 1046], "metaestimatormixin": [1, 240], "metaireau": [1029, 1032], "metal": 400, "metaregressor": 240, "metatransfom": 1034, "meteorologi": 402, "meth_nam": 308, "method": [1, 4, 7, 13, 17, 30, 32, 36, 43, 47, 51, 52, 55, 57, 58, 61, 62, 63, 64, 66, 71, 72, 74, 75, 76, 79, 81, 82, 83, 85, 86, 87, 89, 90, 91, 92, 94, 98, 101, 104, 110, 111, 114, 116, 120, 123, 125, 128, 129, 130, 132, 134, 139, 141, 147, 154, 155, 158, 159, 163, 178, 188, 197, 198, 201, 208, 214, 223, 225, 227, 229, 230, 231, 233, 239, 240, 241, 243, 247, 248, 251, 258, 266, 269, 271, 272, 273, 278, 281, 284, 290, 291, 293, 304, 308, 311, 313, 315, 316, 322, 323, 339, 347, 348, 349, 354, 355, 359, 360, 361, 364, 369, 370, 372, 373, 374, 378, 379, 381, 384, 385, 389, 395, 400, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 418, 419, 421, 422, 423, 426, 427, 428, 429, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 453, 454, 456, 459, 461, 462, 465, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 502, 510, 512, 520, 523, 526, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 705, 710, 711, 722, 731, 732, 735, 736, 741, 742, 763, 768, 769, 774, 778, 783, 788, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 892, 893, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 919, 921, 924, 933, 937, 948, 956, 957, 958, 959, 960, 961, 966, 968, 982, 983, 986, 987, 988, 989, 993, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1007, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1020, 1023, 1024, 1025, 1026, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "method_map": [240, 957], "method_max_it": [543, 544, 1039], "method_nam": [240, 957, 960], "methodmap": [1, 240, 957], "methodmetadatarequest": 956, "methodol": 1009, "methodolog": [408, 1022], "methodologi": [539, 877, 989, 999, 1023], "methodpair": 958, "metric": [1, 12, 43, 45, 46, 50, 52, 57, 58, 59, 61, 62, 63, 66, 68, 71, 73, 77, 79, 81, 82, 85, 91, 93, 97, 102, 107, 113, 134, 139, 144, 145, 147, 148, 149, 154, 160, 163, 165, 168, 178, 180, 182, 183, 185, 194, 198, 204, 205, 207, 209, 211, 213, 224, 229, 234, 237, 238, 243, 246, 256, 257, 260, 261, 262, 264, 265, 267, 271, 273, 274, 278, 283, 284, 286, 294, 297, 302, 304, 309, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 328, 329, 347, 348, 355, 359, 364, 367, 372, 374, 384, 385, 386, 389, 395, 399, 402, 403, 409, 410, 411, 414, 415, 421, 434, 438, 441, 442, 443, 447, 451, 452, 453, 454, 459, 466, 518, 533, 547, 548, 549, 551, 553, 555, 556, 557, 559, 562, 563, 565, 567, 577, 610, 620, 628, 631, 634, 638, 639, 640, 641, 642, 643, 658, 663, 666, 668, 674, 675, 676, 688, 690, 692, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 799, 800, 803, 804, 814, 821, 822, 825, 826, 827, 832, 833, 834, 835, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 861, 870, 876, 899, 900, 904, 906, 909, 912, 914, 921, 989, 991, 994, 996, 1000, 1002, 1005, 1007, 1018, 1020, 1025, 1026, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "metric_kwarg": [779, 780], "metric_obj": 699, "metric_param": [415, 441, 443, 447, 452, 453, 454, 688, 692, 846, 847, 848, 849, 850, 852, 854, 855, 856, 857, 858, 1033, 1036, 1043], "metsi": [839, 1001], "metzen": [0, 394, 1029, 1032, 1033, 1034, 1035], "mexican": 129, "meyer89": 1040, "mferrari3": [1037, 1038], "mgrid": 53, "mhadolkar": [1048, 1049], "mhg": 1034, "mi": [64, 72, 158, 404, 606, 607, 704, 755, 757, 989, 999, 1013], "mia": 1044, "miao": 1042, "mib": [359, 465, 902], "mic": [885, 1009], "micah": 1039, "micci": [885, 1009], "mice": [366, 627, 989], "miceprotein": 366, "michael": [369, 402, 404, 447, 628, 637, 691, 797, 989, 995, 1023, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1040, 1041, 1043, 1044, 1046, 1047, 1048, 1049], "michal": [1033, 1036, 1042, 1043], "michali": 404, "michalkrawczyk": [1042, 1043], "micha\u0142": 1040, "micha\u0142owski": 1038, "michel": [0, 394, 1029, 1031, 1032, 1034, 1036, 1043, 1044], "michelbach": 1033, "michiaki": 1035, "micka\u00ebl": [1037, 1038], "micky774": [1043, 1044], "micro": [49, 297, 329, 376, 707, 713, 729, 730, 738, 783, 784, 787, 788, 999, 1029, 1037, 1038, 1044, 1047], "micro_roc_auc_ovr": 273, "microarrai": [401, 448, 511, 628, 989], "microcontrol": 1018, "microphon": 121, "microryzomi": [50, 297, 367, 496], "microryzomys_minutu": 496, "microryzomys_minutus_0": 50, "microsecond": 359, "microsoft": [0, 51, 373, 390], "mid": [63, 336, 999, 1001], "middl": [43, 61, 70, 93, 125, 194, 344, 369, 1006, 1009], "mideast": [57, 367], "midina": 1036, "midnight": 43, "midpoint": 336, "midpointnorm": 336, "midvidi": 1042, "midwest": [163, 369], "might": [43, 44, 52, 67, 77, 79, 93, 95, 102, 142, 149, 152, 160, 165, 173, 183, 184, 185, 188, 207, 224, 233, 258, 264, 266, 270, 278, 287, 300, 315, 321, 322, 340, 345, 355, 359, 360, 366, 370, 372, 373, 374, 376, 377, 378, 384, 386, 387, 390, 398, 402, 403, 405, 408, 409, 410, 411, 412, 414, 429, 440, 485, 494, 499, 501, 506, 513, 521, 534, 553, 554, 555, 559, 560, 562, 578, 579, 581, 610, 611, 627, 650, 654, 655, 656, 658, 659, 676, 678, 692, 757, 794, 802, 803, 804, 817, 820, 828, 853, 869, 884, 897, 916, 918, 920, 922, 926, 930, 931, 948, 968, 988, 989, 991, 993, 995, 996, 998, 999, 1001, 1002, 1006, 1007, 1009, 1014, 1015, 1030, 1032, 1037, 1038, 1040, 1043, 1044, 1045, 1046], "mignon": [1029, 1032, 1033, 1036], "migrat": [372, 376, 1029, 1049], "miguel": [1039, 1047, 1048, 1049], "miguelbarao": 1039, "miguelcsilva": 1047, "mihael": [404, 447, 454], "mihevc": 1039, "mihir": 1049, "mike": 1036, "mikebenfield": 1036, "miketip": [532, 539], "mikhail": [1030, 1031, 1032, 1035, 1036, 1044, 1045], "miki": [1046, 1047], "mikulski": 1040, "milajev": 1033, "milan": 1041, "milana2": 1043, "mileag": 359, "milen": 1036, "mileston": 376, "militari": 102, "mill": 1039, "millawel": 1043, "miller": [367, 1037, 1038, 1042], "million": [77, 89, 172, 188, 412, 692, 996, 1014, 1023, 1043, 1044], "millisecond": 322, "millman": [0, 394, 1038, 1045, 1046], "milman": 1037, "miln": 367, "miltenberg": 1044, "milton": 1046, "milutinov": 1038, "mimic": [66, 178, 207, 347, 818], "mimicri": 347, "min": [43, 49, 50, 51, 52, 53, 62, 64, 67, 85, 91, 107, 120, 123, 134, 136, 142, 145, 146, 152, 163, 169, 171, 172, 173, 179, 183, 193, 196, 198, 201, 204, 209, 210, 213, 227, 237, 238, 241, 283, 290, 291, 297, 299, 301, 304, 306, 307, 309, 321, 330, 344, 381, 404, 405, 407, 409, 479, 480, 482, 510, 532, 533, 536, 538, 539, 547, 548, 561, 627, 631, 632, 654, 655, 656, 657, 682, 683, 704, 757, 780, 803, 804, 853, 861, 862, 874, 883, 890, 948, 965, 990, 995, 999, 1002, 1009, 1035, 1038, 1040, 1041, 1044], "min_": [316, 404, 411, 874, 995, 1009, 1013, 1014, 1015], "min_arg": 52, "min_batch_s": 951, "min_bin_freq": [445, 458], "min_c": 1001, "min_categori": [840, 1041], "min_cluster_s": [79, 98, 319, 404, 443, 447, 453, 1038], "min_degre": [879, 1042], "min_df": [54, 57, 102, 265, 329, 347, 348, 412, 587, 590, 1029, 1031, 1040, 1047], "min_dist": 237, "min_estim": 138, "min_faces_per_person": [45, 367, 492], "min_features_to_select": [162, 593, 1037], "min_frequ": [103, 139, 154, 183, 184, 185, 235, 245, 310, 314, 317, 319, 877, 878, 1009, 1043, 1045], "min_grad_norm": [692, 1035], "min_i": 241, "min_idf": 1042, "min_impurity_decreas": [63, 139, 141, 154, 156, 185, 245, 276, 315, 320, 353, 354, 555, 556, 557, 558, 562, 563, 564, 912, 913, 914, 915, 1015, 1036], "min_impurity_split": 1036, "min_max_axi": 1038, "min_max_scal": 1009, "min_n": [587, 588, 590, 1029], "min_n_compon": 237, "min_po": [1, 381], "min_resourc": [146, 276, 803, 804, 988], "min_resources_": [803, 804], "min_sampl": [79, 82, 98, 384, 386, 404, 415, 441, 443, 447, 452, 453, 454, 671, 995, 1038, 1042], "min_sample_split": 1044, "min_samples_leaf": [63, 139, 140, 141, 145, 146, 151, 154, 156, 185, 245, 258, 276, 310, 313, 315, 316, 318, 320, 323, 351, 353, 354, 411, 555, 556, 557, 558, 559, 560, 562, 563, 564, 912, 913, 914, 915, 1015, 1035], "min_samples_split": [63, 139, 141, 146, 147, 148, 154, 156, 185, 245, 268, 276, 305, 315, 320, 353, 354, 411, 555, 556, 557, 558, 562, 563, 564, 803, 804, 912, 913, 914, 915, 988, 1015, 1035], "min_val": [927, 934], "min_valu": [627, 1040, 1041, 1048], "min_w": 995, "min_weight_fraction_leaf": [63, 139, 141, 154, 156, 185, 245, 276, 315, 320, 353, 354, 555, 556, 557, 558, 562, 563, 564, 912, 913, 914, 915, 1015, 1032, 1035, 1036], "min_x": 241, "mina": [1039, 1040], "mincovdet": [1, 111, 112, 406, 466, 467, 470, 472, 473, 1005, 1029, 1036, 1048, 1049], "mind": [125, 149, 182, 183, 184, 224, 308, 309, 347, 348, 355, 372, 398, 406, 408, 411, 646, 647, 704, 995, 1014, 1018], "minden": [404, 449, 459], "mine": [0, 264, 348, 367, 404, 415, 441, 509, 561, 720, 734, 740, 783, 851, 995, 999, 1005, 1011], "ming": [561, 1005, 1033, 1037, 1038, 1039, 1043], "minghui": [1036, 1037], "mingw": 1032, "minh": 1037, "mini": [1, 47, 97, 120, 317, 361, 386, 412, 437, 439, 444, 446, 448, 450, 529, 531, 534, 535, 536, 537, 538, 540, 541, 543, 544, 1003, 1004, 1029, 1040, 1042], "mini_batch": [448, 450], "minibatch": [47, 79, 404, 409, 446, 532, 676, 860, 861, 862, 1029], "minibatch_iter": 47, "minibatch_kmean": 348, "minibatch_s": [47, 361], "minibatchdictionarylearn": [1, 120, 123, 361, 409, 529, 536, 540, 543, 544, 1030, 1032, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1049], "minibatchkmean": [1, 57, 71, 73, 78, 79, 83, 91, 92, 94, 96, 180, 348, 361, 404, 409, 437, 439, 444, 510, 779, 1020, 1030, 1035, 1036, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "minibatchnmf": [1, 54, 361, 409, 1043, 1045, 1046, 1047], "minibatchsparsepca": [1, 529, 531, 535, 538, 540, 541, 543, 544, 1029, 1030, 1040, 1042, 1043, 1044, 1045, 1046], "miniforg": 380, "miniforge3": 380, "minim": [1, 43, 51, 52, 64, 90, 99, 109, 110, 146, 167, 175, 190, 201, 205, 207, 209, 211, 214, 224, 226, 236, 237, 249, 254, 258, 265, 273, 274, 304, 313, 316, 333, 340, 343, 351, 371, 372, 375, 380, 384, 386, 398, 402, 404, 406, 409, 411, 437, 438, 442, 443, 447, 460, 536, 538, 545, 555, 556, 557, 558, 562, 563, 608, 610, 611, 641, 646, 649, 657, 658, 659, 667, 671, 672, 674, 678, 679, 687, 692, 694, 695, 748, 780, 851, 853, 862, 880, 892, 898, 912, 913, 914, 915, 995, 996, 999, 1002, 1003, 1009, 1011, 1012, 1013, 1014, 1018, 1021, 1025, 1033, 1038, 1039], "minima": [173, 196, 409, 444, 692, 996, 1037], "minimal_reproduc": 380, "minimalist": [377, 412, 1022], "minimis": [52, 263, 404, 408, 658, 659, 1015], "minimum": [1, 48, 88, 90, 111, 146, 147, 149, 162, 198, 216, 237, 243, 274, 290, 291, 375, 381, 390, 397, 401, 404, 411, 412, 438, 442, 443, 447, 451, 453, 466, 467, 470, 471, 472, 473, 509, 511, 539, 550, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 593, 627, 631, 632, 635, 637, 668, 671, 676, 678, 679, 682, 683, 692, 705, 725, 779, 780, 803, 804, 825, 840, 861, 862, 873, 874, 877, 878, 879, 883, 897, 898, 911, 912, 913, 914, 915, 927, 930, 931, 934, 951, 996, 999, 1003, 1005, 1009, 1011, 1015, 1029, 1032, 1036, 1037, 1041, 1042, 1046, 1049], "minimum_cluster_s": 404, "minka": [127, 539, 995], "minkowski": [415, 441, 447, 452, 453, 454, 688, 699, 778, 779, 780, 844, 845, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858, 1002, 1029, 1032, 1042, 1043, 1044, 1045], "minkowski_dist": [447, 454, 688, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858], "minkowskidist": [699, 1042], "minmax_scal": [1, 302, 304, 874, 1034, 1037], "minmaxscal": [1, 43, 44, 104, 159, 161, 188, 227, 243, 300, 315, 361, 400, 405, 461, 890, 989, 1009, 1031, 1034, 1037, 1039, 1040, 1041, 1045, 1046, 1048], "minnesota": 404, "minor": [243, 258, 267, 271, 367, 376, 387, 494, 999, 1029, 1031, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "minu": [264, 760, 999], "minut": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 283, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 351, 352, 353, 354, 367, 372, 996, 999], "minutu": [50, 297, 367, 496], "minval": [509, 511], "minwoo": 1029, "minyushkin": 1035, "miola": 1044, "miott": [1029, 1032], "miotto": 1040, "mir": 412, "miro": 1049, "miroslav": [1030, 1031, 1034], "mirror": [841, 988], "mirza": 1042, "misa": 1044, "misc": [57, 86, 123, 265, 329, 347, 348, 349, 367], "misc_featur": 243, "miscalibr": 64, "miscellan": [365, 366, 1020, 1035, 1036, 1043, 1044, 1046, 1047, 1048, 1049], "miscfeatur": 154, "misclassif": [46, 134, 258, 340, 796, 1013, 1014, 1015, 1030], "misclassifi": [70, 134, 257, 258, 340, 347, 999, 1014], "misclassification_error": 134, "misdetect": 1046, "mish": 412, "mishra": [1041, 1042], "mislabel": [257, 411, 1001], "mislead": [72, 141, 147, 183, 373, 389, 411, 1025, 1042], "mismatch": [79, 998, 1038], "misread": 231, "miss": [1, 20, 103, 154, 163, 185, 235, 245, 258, 264, 284, 314, 318, 321, 355, 359, 364, 367, 369, 371, 372, 377, 386, 400, 403, 404, 405, 406, 408, 443, 469, 487, 494, 496, 499, 555, 556, 559, 560, 562, 563, 564, 627, 628, 629, 630, 639, 645, 672, 690, 694, 727, 769, 826, 847, 865, 873, 874, 878, 880, 881, 882, 884, 885, 889, 892, 893, 895, 912, 913, 914, 915, 921, 995, 996, 999, 1018, 1019, 1020, 1021, 1023, 1025, 1031, 1033, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "missclassif": 134, "missforest": [178, 989], "missing": [149, 179, 411, 627, 628, 630, 1038], "missing_featur": [178, 179], "missing_fract": 149, "missing_fraction_list": 149, "missing_r": 179, "missing_sampl": [178, 179], "missing_valu": [103, 154, 185, 235, 245, 314, 317, 386, 627, 628, 629, 630, 769, 989, 1037, 1038], "missingind": [1, 627, 628, 630, 989, 1037, 1038, 1039, 1043, 1045], "mission": [348, 1023], "misspecifi": 64, "misspel": 412, "mistak": [134, 160, 278, 326, 355, 404, 408, 735, 875, 889, 890, 892, 893, 894, 895, 995, 1000], "misti": [43, 184], "mit": [281, 367, 378, 404, 414, 610, 611, 614, 619, 622, 643, 666, 667, 676, 841, 992], "mitar": 1038, "mitig": [64, 88, 149, 185, 311, 360, 361, 408, 996, 999, 1015, 1041], "mitra": [1039, 1040, 1044], "mitrov": 1038, "mitzi": [1042, 1043], "miwojc": 1043, "mix": [1, 43, 95, 101, 102, 121, 122, 143, 180, 183, 207, 235, 245, 247, 265, 304, 310, 366, 374, 384, 386, 400, 405, 409, 416, 461, 463, 464, 494, 531, 536, 538, 545, 599, 603, 630, 646, 647, 652, 658, 659, 660, 661, 662, 663, 668, 676, 678, 681, 800, 814, 830, 864, 877, 878, 884, 885, 964, 969, 972, 995, 1004, 1020, 1041, 1043, 1044, 1049], "mixed_encoded_preprocessor": 310, "mixed_pip": 310, "mixed_target": 310, "mixin": [1, 372, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 600, 941, 1031, 1040, 1044], "mixing_": [121, 122, 531], "mixtur": [1, 46, 48, 70, 79, 88, 90, 118, 170, 179, 196, 251, 252, 294, 320, 367, 368, 386, 404, 409, 410, 414, 623, 797, 798, 800, 1019, 1020, 1024, 1025, 1029, 1033, 1034, 1035, 1036], "mizil": [62, 64, 402, 434, 436], "mizuki": 1043, "mk": 1015, "mkdir": [47, 378, 380], "mkdtemp": [87, 405], "mkl": [359, 360, 380, 384, 1029], "mkl_num_thread": 360, "mksol": 102, "ml": [47, 163, 281, 366, 369, 377, 498, 500, 508, 995, 997, 1018, 1019, 1023], "ml_map": 392, "mlant": 1043, "mlb": [367, 875], "mlc": 369, "mlcomp": 1029, "mldata": [1029, 1037], "mle": [111, 127, 539, 1037, 1040], "mlewis1729": 1036, "mlflow": 1018, "mlg": 1033, "mlinari\u0107": 1044, "mline": [48, 111, 220, 290, 335, 338], "mljar": 1018, "mlle": [689, 693, 996], "mlliou112": 1036, "mlo": 172, "mlondschien": 1042, "mlop": 1018, "mlp": [180, 184, 244, 298, 300, 494, 830, 861, 862, 1003, 1020], "mlp_disp": 244, "mlp_model": 184, "mlp_preprocessor": 184, "mlpclassifi": [1, 67, 148, 180, 298, 299, 301, 323, 361, 500, 502, 512, 520, 860, 862, 874, 1000, 1003, 1020, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1049], "mlpregressor": [1, 43, 184, 244, 323, 361, 860, 861, 1003, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1048, 1049], "mlxtend": 1018, "mm": 188, "mm_bunch": 50, "mmap_mod": [398, 966], "mmm": 51, "mmse": [110, 406, 417, 472], "mn193": 1046, "mnb": 1001, "mnist": [180, 189, 200, 202, 214, 221, 284, 298, 300, 343, 494, 658, 830, 861, 884, 933, 995, 1003, 1020], "mnist_10000": 284, "mnist_20000": 284, "mnist_784": [214, 222, 284, 301], "mo": [318, 1040], "mobil": 380, "mock": 1039, "mockdatafram": 1039, "modal": [1, 233, 471, 950], "mode": [1, 48, 49, 51, 63, 80, 81, 111, 207, 233, 284, 286, 302, 313, 370, 372, 376, 380, 381, 384, 401, 407, 411, 415, 440, 441, 444, 446, 449, 456, 459, 468, 469, 475, 479, 484, 506, 507, 555, 559, 562, 591, 594, 595, 597, 598, 599, 610, 627, 644, 645, 658, 659, 666, 668, 673, 674, 675, 676, 679, 682, 683, 689, 693, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858, 860, 904, 906, 909, 912, 914, 936, 947, 948, 950, 999, 1002, 1005, 1018, 1030, 1038, 1043, 1046], "model": [1, 6, 7, 21, 28, 34, 37, 40, 42, 44, 45, 48, 49, 51, 53, 54, 58, 59, 61, 62, 63, 64, 66, 70, 74, 75, 76, 82, 87, 88, 89, 91, 94, 101, 103, 105, 109, 113, 116, 119, 120, 130, 133, 134, 135, 137, 139, 142, 145, 146, 148, 149, 151, 153, 154, 155, 156, 157, 159, 160, 170, 171, 173, 174, 175, 176, 179, 181, 182, 186, 191, 193, 195, 197, 199, 200, 201, 202, 204, 208, 209, 211, 212, 213, 214, 218, 219, 221, 222, 223, 233, 236, 241, 249, 251, 252, 253, 257, 259, 260, 262, 265, 267, 268, 269, 270, 272, 273, 278, 279, 281, 284, 286, 287, 288, 290, 293, 297, 305, 308, 310, 311, 313, 315, 317, 318, 319, 321, 322, 323, 325, 326, 333, 335, 336, 337, 338, 339, 341, 343, 345, 348, 349, 352, 355, 364, 366, 367, 374, 378, 386, 389, 395, 400, 401, 402, 403, 404, 405, 407, 409, 410, 411, 412, 413, 414, 423, 427, 429, 434, 439, 446, 462, 464, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 485, 486, 487, 494, 496, 498, 499, 500, 501, 507, 520, 522, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 587, 588, 592, 593, 596, 601, 605, 608, 609, 610, 611, 615, 627, 632, 633, 635, 637, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 691, 697, 698, 700, 701, 702, 706, 712, 721, 722, 723, 724, 734, 735, 741, 750, 753, 785, 788, 789, 792, 797, 798, 800, 803, 804, 805, 806, 814, 815, 816, 817, 821, 822, 823, 826, 827, 828, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 847, 849, 850, 851, 853, 855, 860, 861, 862, 864, 865, 867, 869, 871, 876, 877, 879, 880, 881, 883, 884, 885, 889, 890, 892, 893, 894, 895, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 919, 982, 989, 991, 992, 993, 996, 997, 1000, 1002, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1026, 1029, 1030, 1031, 1032, 1033, 1034], "model_1": 264, "model_1_scor": 264, "model_2": 264, "model_2_scor": 264, "model__estimator__max_depth": 988, "model_coef": 182, "model_color": 342, "model_detail": 142, "model_displai": 139, "model_fixed_threshold": 258, "model_from_previous_vers": 398, "model_i": 264, "model_i_scor": 264, "model_idx": 243, "model_k": 264, "model_k_scor": 264, "model_l1": 343, "model_l2": 343, "model_nam": [140, 243, 283], "model_no_cf": 311, "model_param": 221, "model_prop": 43, "model_scor": [264, 283], "model_select": [1, 43, 44, 45, 46, 49, 52, 61, 62, 64, 66, 67, 68, 87, 103, 104, 105, 106, 107, 109, 116, 125, 127, 134, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 153, 154, 155, 159, 160, 162, 165, 167, 178, 179, 180, 182, 183, 185, 186, 188, 194, 204, 205, 207, 209, 214, 221, 222, 224, 234, 239, 240, 243, 245, 246, 247, 251, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 283, 286, 287, 288, 292, 293, 299, 301, 302, 306, 308, 309, 310, 311, 313, 314, 315, 318, 319, 320, 321, 322, 323, 328, 329, 336, 339, 343, 351, 354, 355, 372, 377, 385, 386, 395, 400, 403, 405, 408, 411, 434, 435, 556, 558, 565, 566, 578, 659, 697, 698, 700, 702, 730, 742, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 853, 861, 862, 864, 912, 913, 914, 915, 988, 989, 994, 999, 1001, 1002, 1007, 1009, 1014, 1020, 1026, 1033, 1035, 1036], "model_step": 43, "model_titl": 142, "model_typ": 263, "model_with_cf": 311, "modelsplinetransform": 155, "modelstandardscal": 155, "moder": [264, 372, 414, 451, 1005], "modern": [43, 149, 412, 465, 501, 589, 690, 694, 730, 902, 996, 1018, 1019, 1045], "modif": [372, 387, 407, 411, 412, 443, 1012, 1046, 1047], "modifi": [107, 194, 216, 226, 227, 228, 240, 243, 319, 345, 372, 374, 386, 401, 404, 411, 414, 440, 444, 451, 456, 465, 479, 480, 481, 482, 493, 508, 580, 610, 611, 613, 619, 626, 676, 678, 689, 693, 719, 729, 730, 768, 783, 784, 787, 902, 928, 980, 981, 995, 1012, 1013, 1019, 1024, 1025, 1029, 1031, 1032, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1044, 1048], "modified_fil": 372, "modified_hub": [46, 676, 1013], "modified_huber_loss": 216, "modified_tol": [689, 693], "modrak": [1044, 1045], "modroiu": 999, "modul": [6, 10, 15, 30, 31, 71, 72, 82, 86, 108, 114, 117, 119, 120, 133, 157, 164, 166, 177, 180, 181, 187, 189, 221, 225, 226, 248, 256, 280, 281, 282, 285, 298, 300, 301, 303, 322, 323, 324, 331, 346, 350, 366, 367, 370, 371, 372, 373, 374, 376, 377, 378, 380, 381, 384, 386, 389, 390, 398, 402, 404, 407, 411, 412, 413, 415, 441, 501, 533, 578, 579, 659, 939, 988, 993, 995, 997, 999, 1000, 1003, 1005, 1006, 1009, 1011, 1013, 1015, 1016, 1023, 1030, 1031, 1032, 1034, 1035, 1039, 1043], "modulo": [412, 1040], "moeller": 1035, "mogavero": 1039, "moham": [1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1046, 1047, 1049], "mohamedbsh": 1044, "mohammad": [1037, 1038], "mohit": [1043, 1046, 1049], "mohn": [1037, 1041], "mohr": 1035, "moin": 1041, "moisel": 1048, "mois\u00e9": 1011, "moitra": [1029, 1030, 1031], "mojca": 1040, "mojdeh": 1046, "mokeeva": [1048, 1049], "mola": [1040, 1046, 1048], "molden": 1031, "molecul": 996, "molin": 1044, "molla": [1030, 1031], "molnar": [184, 1006], "moment": [359, 409, 414, 437, 615, 623, 861, 862, 964, 1003, 1004], "momentum": [244, 300, 861, 862, 1003], "mon": [43, 149, 184], "mona": [166, 174, 180, 414, 494, 611, 615, 622, 623, 625, 1020], "monaf": 1044, "monei": [224, 1023], "monitor": [144, 194, 214, 375, 386, 551, 552, 557, 558, 559, 560, 1003, 1022, 1032, 1037, 1039, 1041], "mono": [646, 647, 652, 653, 660, 661, 662, 663, 681, 684], "monografia": 995, "monomi": 208, "monotoinc": 314, "monoton": [1, 22, 43, 62, 133, 180, 184, 224, 236, 244, 314, 402, 555, 556, 557, 558, 559, 560, 562, 563, 632, 635, 636, 694, 706, 880, 892, 906, 909, 912, 913, 914, 915, 996, 1000, 1009, 1014, 1020, 1036, 1040, 1044, 1046], "monotonic_cst": [63, 141, 149, 151, 154, 156, 185, 245, 258, 276, 310, 314, 315, 316, 318, 320, 323, 353, 354, 411, 555, 556, 559, 560, 562, 563, 912, 913, 914, 915, 1044, 1047], "mont": [238, 414, 611, 641, 642, 991, 1004], "montecchio": 1033, "montesel": 1047, "month": [0, 43, 172, 184, 310, 367, 372, 376, 387, 1029], "month_co": 43, "month_sin": 43, "monthli": [172, 387, 999], "montoya": 1036, "montreal": 318, "mooc": [384, 1025], "moodi": 1034, "moon": [264, 300, 306, 347, 348, 520], "moonkyung94": 1043, "moor": [0, 735, 999, 1023, 1046], "moosmann": 564, "moradizadeh": 1043, "morai": [1047, 1048], "moral": [57, 347, 658, 1037, 1041, 1042, 1047], "morawiec": [1036, 1037], "more": [0, 1, 10, 36, 43, 45, 46, 47, 50, 51, 52, 53, 57, 62, 63, 64, 67, 72, 74, 75, 78, 79, 80, 82, 85, 86, 88, 90, 93, 100, 107, 111, 118, 120, 123, 127, 134, 135, 137, 140, 141, 143, 145, 146, 147, 148, 149, 150, 154, 161, 163, 167, 173, 176, 179, 180, 183, 184, 186, 188, 190, 191, 194, 195, 198, 200, 201, 203, 205, 207, 208, 209, 211, 221, 222, 223, 224, 226, 230, 233, 238, 239, 240, 241, 243, 245, 249, 251, 252, 254, 255, 257, 258, 262, 263, 264, 265, 266, 267, 270, 271, 278, 281, 283, 284, 286, 287, 294, 299, 300, 302, 304, 305, 306, 309, 310, 311, 313, 314, 315, 317, 318, 319, 320, 321, 322, 326, 333, 336, 340, 341, 343, 345, 347, 348, 349, 351, 352, 353, 354, 355, 359, 360, 361, 364, 365, 366, 367, 369, 371, 372, 373, 374, 376, 378, 379, 380, 385, 386, 387, 390, 395, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 427, 429, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 572, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 699, 701, 703, 704, 705, 707, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 918, 920, 922, 923, 944, 946, 948, 950, 963, 966, 982, 985, 987, 988, 989, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1021, 1023, 1025, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "moreau": [1035, 1036, 1037, 1038, 1039], "moreov": [173, 306, 317, 323, 355, 404, 408, 414, 897, 999, 1007, 1023, 1037, 1043, 1044], "moreyra": 1042, "morgan": [1011, 1015], "mori": 1044, "morikko": 1036, "morina": 1042, "moritz": [1042, 1044], "morn": 43, "moroz": 1035, "morril": 1029, "mors": 1040, "mose": 1049, "moslei": 999, "mosley2013": 999, "mosold": 154, "most": [1, 10, 43, 45, 47, 51, 53, 57, 61, 64, 66, 85, 86, 88, 95, 109, 115, 116, 126, 128, 134, 140, 141, 147, 149, 154, 158, 159, 160, 162, 163, 172, 179, 182, 183, 184, 185, 186, 188, 194, 207, 208, 224, 240, 244, 249, 255, 258, 261, 262, 267, 271, 272, 274, 278, 281, 283, 293, 304, 310, 311, 313, 316, 319, 321, 326, 336, 340, 347, 348, 349, 355, 359, 360, 361, 367, 368, 370, 372, 373, 374, 376, 377, 378, 380, 384, 386, 387, 390, 395, 398, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 440, 441, 443, 447, 453, 454, 457, 465, 494, 501, 519, 522, 530, 532, 537, 541, 547, 549, 559, 560, 562, 563, 564, 565, 587, 588, 590, 592, 603, 611, 627, 630, 649, 658, 672, 674, 676, 678, 687, 688, 692, 695, 725, 728, 758, 759, 763, 785, 794, 797, 798, 803, 804, 819, 832, 833, 846, 847, 848, 850, 852, 853, 854, 855, 856, 879, 881, 889, 890, 892, 893, 894, 895, 902, 921, 942, 947, 948, 950, 963, 988, 989, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1005, 1006, 1007, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1022, 1023, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1044, 1046, 1048], "most_common": 57, "most_frequ": [267, 549, 627, 630, 854, 989, 999, 1037, 1039, 1041], "mostli": [1, 66, 80, 102, 207, 224, 309, 374, 380, 384, 386, 409, 411, 412, 519, 779, 780, 1014, 1018, 1023, 1037, 1038, 1039, 1045, 1049], "mother": 996, "motiv": [129, 372, 374, 386, 991, 999, 1009, 1023, 1042], "motmoti": 1039, "motoda": 404, "motor": 224, "motorcycl": [57, 367], "mottl": [1037, 1038], "moudgalya": [1045, 1046], "moufad": 1044, "moulavi": [404, 443], "mounir": 1049, "mount": 380, "mountain": 1037, "mountford": [1045, 1046], "mous": 366, "mouseid": 366, "moussa": 1035, "move": [63, 64, 142, 265, 302, 336, 371, 372, 378, 400, 402, 404, 547, 548, 569, 570, 571, 574, 576, 577, 941, 942, 943, 967, 1029, 1030, 1034, 1037, 1039, 1042, 1043, 1048], "moveabl": 405, "movelikeriv": 1038, "movement": 367, "movi": 412, "movie_entri": 412, "moya": 1041, "mp": 995, "mpce": 57, "mpl": [66, 70, 249, 250, 251, 255, 304], "mpl_toolkit": [50, 100, 126, 184, 226, 228, 297], "mplot3d": [100, 126, 184, 226, 228], "mpoemsl": 1043, "mppca": [532, 539], "mprun": 378, "mpy": 412, "mr": [318, 1030, 1033, 1043], "mrandrewandrad": 1035, "mrastgoo": [1044, 1046, 1048], "mrg": 380, "mridul": 1035, "mrinal": 1043, "mrinaltyagi": 1043, "mrl09": 409, "mrmjauh": 1036, "mro": [374, 421, 427, 1039, 1040, 1048], "mrs2008": 589, "msabati": 1043, "msc": 369, "mschaffenroth": 1039, "mse": [44, 46, 109, 110, 144, 146, 147, 178, 179, 207, 209, 211, 213, 279, 320, 647, 653, 999, 1015, 1040, 1042], "mse_path_": [198, 647, 651, 653, 655, 661, 663], "mse_valu": 46, "mses_california": 179, "mses_diabet": 179, "msft": 51, "msg": [284, 982], "msle": 999, "msm": [163, 369], "mssubclass": 154, "mst": 404, "msvc": 1032, "msvcp140": 1043, "mt19937": [271, 276, 933, 1040], "mthorrel": [1036, 1039], "mtrand": 355, "mtse": 679, "mu": [54, 111, 112, 264, 409, 417, 470, 472, 473, 476, 477, 478, 538, 545, 993, 995, 1036, 1039], "mu_i": 1001, "mu_j": 404, "mu_k": 993, "muayyad": 1037, "much": [37, 43, 45, 46, 48, 52, 57, 62, 75, 88, 111, 113, 118, 123, 129, 139, 146, 147, 154, 155, 167, 178, 179, 183, 184, 185, 186, 188, 205, 209, 237, 240, 243, 258, 264, 266, 267, 270, 275, 277, 301, 305, 309, 310, 311, 315, 316, 318, 336, 341, 347, 348, 355, 359, 360, 361, 367, 372, 373, 374, 377, 380, 384, 385, 390, 398, 402, 403, 406, 407, 408, 409, 410, 411, 412, 413, 444, 445, 494, 532, 533, 534, 536, 557, 558, 559, 560, 658, 659, 666, 667, 668, 676, 677, 678, 692, 779, 780, 803, 804, 818, 846, 854, 879, 897, 904, 988, 991, 994, 995, 996, 998, 999, 1000, 1002, 1003, 1005, 1007, 1011, 1012, 1014, 1015, 1019, 1023, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "mudd": 1042, "mueller": [0, 393, 1023, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "muhammad": [1037, 1038, 1042], "mukherje": 1040, "mula": 1041, "multi": [1, 50, 67, 124, 126, 133, 142, 152, 156, 169, 171, 180, 189, 194, 195, 198, 201, 206, 216, 219, 222, 225, 228, 232, 233, 237, 241, 244, 256, 261, 273, 274, 283, 298, 300, 306, 307, 313, 318, 322, 330, 341, 344, 347, 352, 354, 360, 367, 369, 375, 381, 386, 390, 404, 411, 412, 414, 421, 434, 449, 459, 466, 471, 493, 494, 502, 503, 508, 512, 513, 517, 518, 520, 539, 547, 548, 549, 551, 553, 555, 556, 557, 559, 562, 563, 565, 567, 610, 631, 633, 643, 646, 647, 652, 653, 657, 658, 660, 661, 662, 663, 666, 668, 672, 673, 674, 675, 676, 681, 684, 690, 702, 703, 713, 720, 734, 740, 742, 783, 799, 800, 814, 822, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 851, 852, 854, 860, 861, 862, 865, 871, 884, 888, 899, 900, 904, 906, 909, 912, 914, 916, 917, 918, 920, 924, 930, 933, 936, 988, 1000, 1002, 1006, 1009, 1013, 1018, 1020, 1021, 1024, 1025, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1042, 1043, 1045, 1046, 1047, 1048, 1049], "multi_class": [66, 103, 104, 139, 155, 160, 234, 235, 245, 247, 258, 263, 271, 273, 278, 302, 313, 314, 317, 323, 610, 658, 659, 788, 904, 920, 995, 1000, 1014, 1029, 1033, 1037, 1042, 1044, 1047, 1048], "multi_confus": 754, "multi_label": 920, "multi_layer_regressor": 411, "multi_output": [381, 924, 930, 987], "multi_target_forest": 1000, "multialign": 276, "multiarch": 380, "multiclass": [1, 31, 63, 140, 189, 201, 222, 234, 241, 243, 246, 256, 261, 269, 271, 274, 283, 300, 302, 333, 344, 351, 367, 368, 374, 375, 377, 386, 395, 400, 404, 408, 411, 434, 449, 459, 486, 494, 502, 555, 557, 559, 562, 565, 566, 593, 601, 610, 631, 632, 633, 658, 659, 666, 668, 673, 674, 675, 676, 702, 706, 708, 709, 729, 730, 734, 735, 738, 743, 754, 783, 784, 787, 788, 789, 794, 800, 801, 803, 804, 805, 806, 814, 816, 818, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 871, 885, 904, 906, 909, 912, 914, 962, 963, 964, 993, 995, 1009, 1010, 1014, 1015, 1020, 1021, 1025, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1044, 1045, 1046, 1048], "multiclass_color": [631, 1049], "multiclass_colors_": [66, 631], "multicollinear": [115, 141, 147, 180, 181, 185, 328, 407, 498, 562, 634, 655, 830, 995, 1007, 1020], "multicor": [1041, 1042], "multidimension": [1, 407, 688, 690, 692, 694, 996, 1002], "multigrid": 459, "multiindex": 1043, "multilabel": [1, 30, 31, 115, 117, 180, 232, 271, 281, 282, 367, 374, 375, 386, 399, 479, 484, 494, 495, 506, 507, 513, 521, 539, 555, 562, 565, 658, 674, 675, 703, 707, 713, 726, 729, 730, 734, 735, 738, 739, 754, 756, 783, 784, 787, 788, 794, 796, 830, 833, 835, 837, 861, 868, 871, 875, 877, 888, 909, 912, 914, 936, 962, 963, 964, 1010, 1020, 1021, 1025, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1042, 1043, 1044, 1045, 1046, 1047], "multilabel_": [833, 1034], "multilabel_confusion_matrix": [1, 400, 713, 729, 730, 738, 784, 787, 999, 1038], "multilabelbinar": [1, 386, 833, 868, 877, 1000, 1032, 1034, 1035, 1037, 1038], "multilay": [384, 997], "multilearn": 1018, "multimetr": [711, 988, 1039, 1044, 1048], "multimetric_": [800, 803, 804, 814], "multimod": 233, "multinomi": [1, 47, 66, 180, 189, 200, 202, 221, 241, 259, 273, 281, 301, 322, 343, 367, 368, 372, 409, 411, 494, 510, 521, 549, 551, 557, 559, 631, 658, 659, 741, 830, 833, 839, 840, 841, 842, 843, 884, 933, 999, 1000, 1015, 1020, 1021, 1025, 1029, 1033, 1035, 1036, 1037, 1042, 1043, 1047, 1048, 1049], "multinomialdevi": 1040, "multinomialhmm": 1029, "multinomialnb": [1, 47, 361, 367, 412, 839, 840, 841, 842, 1001, 1031, 1033, 1036, 1037, 1041, 1042, 1044], "multioutput": [1, 41, 153, 273, 283, 386, 395, 400, 427, 462, 479, 480, 481, 549, 552, 554, 555, 556, 558, 560, 562, 563, 566, 568, 611, 632, 633, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 678, 679, 721, 723, 728, 745, 746, 748, 750, 751, 753, 785, 788, 790, 791, 825, 833, 835, 836, 837, 838, 847, 855, 862, 871, 905, 907, 910, 912, 913, 914, 915, 936, 963, 964, 999, 1020, 1021, 1025, 1029, 1030, 1031, 1035, 1036, 1042, 1043, 1048], "multioutput_arrai": 372, "multioutputclassifi": [1, 395, 788, 833, 835, 837, 999, 1036, 1038, 1039, 1040, 1041, 1045, 1046], "multioutputregressor": [1, 153, 395, 427, 462, 479, 480, 481, 552, 554, 556, 558, 560, 563, 566, 568, 611, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 678, 679, 836, 838, 847, 855, 862, 905, 907, 910, 913, 915, 1035, 1036, 1038, 1040, 1041, 1045, 1046], "multipl": [1, 25, 52, 80, 101, 104, 118, 129, 134, 140, 142, 144, 159, 180, 183, 203, 238, 258, 264, 269, 272, 276, 281, 283, 286, 313, 319, 322, 323, 339, 359, 360, 361, 366, 368, 369, 372, 374, 375, 376, 377, 384, 386, 398, 400, 404, 405, 406, 407, 409, 411, 412, 413, 414, 415, 416, 441, 457, 461, 463, 464, 466, 471, 485, 488, 490, 493, 494, 495, 501, 502, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 549, 551, 552, 553, 554, 557, 558, 559, 560, 561, 580, 598, 606, 607, 610, 611, 627, 632, 634, 639, 640, 641, 642, 646, 647, 650, 652, 653, 654, 657, 660, 661, 662, 663, 666, 667, 668, 671, 673, 676, 678, 679, 689, 690, 692, 693, 694, 702, 711, 721, 723, 728, 745, 746, 748, 750, 751, 753, 785, 788, 790, 791, 793, 797, 798, 800, 801, 802, 803, 804, 805, 806, 812, 814, 815, 816, 817, 818, 819, 820, 826, 827, 828, 830, 834, 835, 836, 837, 838, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 866, 869, 881, 885, 893, 896, 897, 904, 905, 906, 909, 926, 941, 947, 948, 969, 972, 991, 994, 995, 996, 1000, 1001, 1002, 1006, 1007, 1012, 1013, 1015, 1018, 1020, 1029, 1030, 1032, 1035, 1036, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1049], "multipleloc": [226, 289], "multiplex": 1015, "multipli": [183, 211, 224, 264, 354, 359, 381, 386, 409, 411, 412, 417, 461, 472, 513, 536, 538, 539, 545, 555, 559, 562, 646, 648, 652, 654, 658, 659, 660, 662, 668, 669, 670, 672, 676, 677, 678, 680, 686, 687, 689, 693, 764, 906, 909, 912, 914, 936, 974, 975, 976, 988, 991, 995, 999, 1013, 1026, 1040], "multiprocess": [384, 386, 966, 1002, 1029, 1037, 1043], "multirespons": 995, "multiscal": 459, "multisurfac": [163, 369], "multitarget": 381, "multitask": [283, 412, 1000], "multitaskelasticnet": [1, 646, 647, 652, 661, 662, 663, 681, 995, 1000, 1029, 1036, 1037, 1040, 1042], "multitaskelasticnetcv": [1, 395, 646, 647, 652, 660, 662, 663, 681, 995, 1000, 1032, 1039, 1040, 1042, 1046, 1049], "multitasklasso": [1, 203, 652, 660, 663, 995, 1000, 1029, 1037, 1040, 1042], "multitasklassocv": [1, 395, 661, 662, 1000, 1032, 1039, 1040, 1042, 1046, 1049], "multithread": [359, 404, 774, 778, 904, 905, 906, 907, 908, 909, 910], "multivari": [1, 120, 183, 364, 406, 409, 412, 470, 514, 515, 516, 627, 628, 629, 630, 649, 671, 678, 679, 839, 840, 841, 842, 843, 993, 995, 998, 1001, 1025], "multivariate_norm": [113, 116, 249, 417, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478], "multiwai": 1015, "muma": 112, "mungui": 1042, "munoz": [1035, 1041], "muoki": 1041, "murad": 1032, "murashkin": 1033, "murata": [1042, 1043], "murder": 347, "murezzda": 1045, "murmurhash": 381, "murmurhash3": [1, 412, 581, 588, 965], "murmurhash3_32": [1, 381], "murmurhash3_x86_32": [381, 965], "murphi": [402, 643, 992], "murrai": [1035, 1036], "music": 1023, "must": [88, 183, 184, 186, 192, 194, 223, 224, 233, 244, 259, 290, 305, 310, 347, 355, 367, 371, 372, 373, 374, 376, 378, 380, 386, 387, 395, 400, 402, 404, 405, 408, 409, 411, 412, 413, 414, 415, 425, 435, 438, 441, 442, 443, 444, 446, 447, 448, 452, 454, 456, 458, 459, 461, 463, 464, 466, 471, 484, 506, 507, 510, 521, 529, 535, 536, 537, 538, 539, 540, 541, 542, 545, 551, 552, 557, 558, 559, 560, 565, 566, 580, 581, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 610, 611, 617, 620, 627, 628, 629, 630, 632, 633, 638, 642, 643, 648, 649, 652, 658, 659, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 682, 685, 686, 687, 688, 689, 692, 693, 694, 695, 696, 699, 703, 706, 716, 735, 746, 764, 771, 774, 778, 781, 788, 792, 793, 794, 796, 797, 798, 800, 801, 803, 804, 805, 807, 809, 810, 812, 814, 815, 816, 818, 819, 821, 825, 828, 830, 831, 839, 840, 841, 842, 843, 846, 847, 848, 850, 852, 853, 854, 855, 856, 859, 860, 861, 862, 864, 867, 868, 869, 871, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 888, 904, 905, 906, 907, 908, 909, 910, 911, 917, 921, 969, 973, 982, 984, 987, 988, 989, 995, 996, 997, 999, 1002, 1003, 1005, 1006, 1013, 1014, 1015, 1029, 1032, 1036, 1040, 1042, 1043, 1046], "mutabl": 374, "mutat": [355, 987, 1037], "mutual": [1, 72, 73, 82, 88, 91, 157, 180, 386, 411, 413, 443, 591, 594, 595, 598, 599, 605, 606, 607, 608, 704, 705, 715, 755, 757, 786, 795, 802, 817, 820, 988, 995, 999, 1000, 1020, 1029, 1035, 1045], "mutual_info_classif": [1, 104, 413, 591, 594, 595, 598, 599, 1035, 1041, 1044, 1047], "mutual_info_regress": [1, 158, 317, 413, 591, 594, 595, 598, 599, 608, 1035, 1036, 1041, 1043, 1044, 1045, 1047], "mutual_info_scor": [1, 72, 404, 704, 999, 1037, 1040, 1041], "mu\u00f1oz": [1042, 1044], "mwestt": 1038, "my": [366, 372, 377, 380, 494, 941, 943, 999], "my_custom_loss_func": 999, "my_data": 377, "my_dataset": 484, "my_estim": [374, 405], "my_extra_param": 374, "my_featur": 372, "my_fil": 378, "my_func": [373, 378], "my_g": [416, 531], "my_group": [240, 395], "my_kernel": [332, 1014], "my_memb": [94, 96, 97], "my_other_weight": [240, 395], "my_pipelin": 1038, "my_script": 360, "my_tag": 374, "my_test_script": 380, "my_token": 412, "my_weight": [240, 395], "myatt": [1038, 1039], "mycach": [506, 507], "mycluster": 422, "myenugula": [1047, 1049], "myer": [1032, 1036], "myestim": [374, 418, 420, 421, 423, 424, 425, 426, 427], "myestimator0": 420, "myestimator1": 420, "mymultioutputestim": 374, "mypi": [372, 376, 390, 397, 1040], "myself": 372, "mysvmlightfil": 506, "mytag": 374, "mytransform": [374, 428], "m\u00e9hault": [1037, 1038], "m\u00f6rtberg": 1035, "m\u00fcller": [0, 387, 409, 533, 870, 1003, 1009, 1013, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1043], "n": [1, 43, 44, 46, 47, 49, 50, 54, 55, 57, 66, 68, 69, 72, 74, 75, 91, 102, 107, 111, 115, 118, 120, 123, 125, 127, 129, 130, 134, 136, 137, 141, 158, 161, 163, 165, 167, 171, 176, 184, 186, 191, 194, 201, 207, 208, 209, 211, 221, 223, 224, 226, 236, 237, 238, 241, 249, 251, 252, 262, 264, 267, 269, 270, 271, 273, 274, 277, 284, 287, 289, 302, 306, 308, 309, 315, 318, 320, 326, 340, 343, 354, 359, 366, 369, 370, 372, 376, 378, 380, 381, 386, 390, 391, 395, 401, 402, 404, 407, 408, 409, 410, 411, 412, 414, 415, 441, 442, 444, 445, 447, 466, 468, 471, 475, 486, 513, 514, 515, 516, 521, 526, 536, 538, 539, 545, 555, 556, 557, 558, 561, 562, 563, 564, 587, 588, 589, 590, 606, 607, 614, 627, 649, 671, 679, 692, 696, 699, 706, 707, 709, 755, 805, 808, 810, 815, 816, 819, 840, 844, 845, 849, 869, 896, 898, 912, 913, 914, 915, 927, 946, 951, 952, 973, 977, 978, 988, 991, 993, 995, 996, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1009, 1011, 1013, 1014, 1015, 1029, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1046, 1047], "n1": 123, "n2": 123, "n4": 123, "n_": [111, 112, 186, 264, 316, 404, 409, 411, 646, 652, 685, 696, 991, 995, 999, 1001, 1002, 1006, 1009, 1011, 1014, 1015], "n_alpha": [154, 212, 469, 646, 647, 650, 651, 652, 653, 654, 655, 656, 660, 661, 662, 663, 673, 675, 681, 682, 683, 684, 1032, 1049], "n_atom": 1030, "n_averag": 69, "n_bar": 179, "n_batch_iter_": 534, "n_best": 448, "n_bin": [62, 64, 66, 86, 207, 224, 305, 307, 311, 435, 436, 869, 1009], "n_bins_": 869, "n_bootstrap": [267, 1030], "n_bulk_repeat": 49, "n_byte": 237, "n_c": [404, 659], "n_call": [844, 845], "n_candid": [276, 803, 804, 988], "n_candidates_": [276, 803, 804, 988], "n_candidates_0": 988, "n_candidates_i": 988, "n_categori": [311, 840, 878, 1009], "n_categorical_featur": [143, 559, 560, 632, 633], "n_categories_": 840, "n_center": [77, 510], "n_channel": [582, 583, 586], "n_class": [1, 45, 72, 118, 134, 136, 141, 142, 160, 162, 221, 227, 238, 241, 251, 271, 272, 273, 293, 294, 313, 352, 354, 355, 368, 372, 374, 386, 411, 434, 485, 486, 500, 513, 517, 521, 547, 548, 549, 551, 553, 555, 557, 559, 562, 565, 567, 592, 593, 603, 610, 631, 634, 639, 658, 659, 666, 667, 668, 674, 675, 676, 677, 697, 707, 709, 716, 718, 722, 735, 738, 741, 754, 788, 794, 799, 800, 803, 804, 814, 822, 825, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 846, 851, 853, 854, 861, 864, 871, 872, 875, 878, 885, 888, 899, 900, 901, 904, 905, 906, 908, 909, 912, 914, 916, 917, 935, 936, 995, 999, 1000, 1003, 1010, 1013, 1014, 1034, 1035, 1036, 1038, 1039, 1040, 1046], "n_classes_": [549, 551, 553, 555, 557, 562, 610, 832, 833, 912, 914, 1030, 1039, 1041], "n_classes_pr": [714, 755], "n_classes_tru": [714, 755], "n_classifi": [66, 567, 568], "n_cluster": [1, 57, 58, 59, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 87, 89, 90, 91, 92, 93, 94, 95, 97, 99, 100, 120, 317, 348, 372, 386, 404, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 456, 457, 458, 459, 460, 509, 511, 710, 792, 793, 1029, 1033, 1035, 1037, 1038, 1040, 1043], "n_clusters_": [73, 82, 88, 96, 438, 442], "n_clusters_list": 78, "n_clusters_per_class": [67, 138, 160, 162, 261, 294, 299, 306, 345, 368, 377, 513, 604, 606], "n_clusters_rang": 72, "n_clusters_tru": 94, "n_col": [45, 57, 120, 242, 419, 448, 450, 509, 511, 632], "n_column": [401, 448, 450], "n_column_clust": [448, 450, 511], "n_comp": [130, 188], "n_comparison": 264, "n_compon": [43, 44, 45, 51, 54, 66, 79, 85, 90, 91, 92, 102, 104, 105, 106, 115, 116, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 152, 155, 188, 206, 226, 227, 228, 229, 230, 231, 233, 237, 238, 241, 245, 249, 250, 251, 252, 253, 254, 255, 263, 288, 293, 302, 309, 315, 317, 320, 321, 348, 374, 377, 378, 386, 405, 407, 409, 416, 448, 449, 459, 461, 479, 480, 481, 482, 524, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 639, 640, 641, 642, 688, 689, 690, 691, 692, 693, 694, 695, 696, 797, 798, 853, 860, 863, 896, 897, 898, 948, 991, 993, 996, 998, 1002, 1030, 1031, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1046, 1047, 1048], "n_components_": [105, 127, 386, 438, 442, 532, 536, 537, 538, 539, 540, 541, 896, 897, 1038, 1040], "n_components_fa": 127, "n_components_pca": 127, "n_components_pca_ml": 127, "n_components_rang": 237, "n_connected_compon": 460, "n_connected_components_": [438, 442, 1038], "n_core": 140, "n_core_sampl": [415, 441], "n_cpu": [360, 386], "n_cv": [408, 434], "n_cv_alpha": [651, 655], "n_cv_fold": [143, 310, 806, 823, 828, 831], "n_digit": 91, "n_dim": [475, 525, 527, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 1046], "n_dimens": [797, 798], "n_dimensions_of_x": [906, 907, 908, 909, 910], "n_dir": 53, "n_e": 404, "n_element": [414, 617], "n_encoded_featur": [877, 878], "n_error": 291, "n_error_outli": [220, 290, 335], "n_error_outliers_sgd": 220, "n_error_test": [220, 290, 335], "n_error_test_sgd": 220, "n_error_train": [220, 335], "n_error_train_sgd": 220, "n_estim": [46, 49, 63, 67, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 150, 152, 153, 154, 156, 178, 185, 186, 227, 242, 245, 246, 251, 261, 276, 306, 313, 315, 320, 359, 385, 386, 411, 413, 551, 552, 553, 554, 555, 556, 557, 558, 561, 562, 563, 564, 565, 566, 567, 568, 632, 803, 804, 988, 1005, 1006, 1026, 1037, 1045], "n_estimators_": [144, 557, 558], "n_estimators_ful": 144, "n_exampl": 47, "n_face": 242, "n_featur": [45, 47, 54, 62, 63, 64, 67, 68, 69, 70, 75, 85, 91, 93, 94, 109, 110, 111, 112, 113, 118, 120, 127, 134, 136, 138, 140, 141, 160, 162, 163, 178, 179, 188, 190, 193, 194, 195, 203, 204, 206, 210, 211, 221, 223, 227, 233, 237, 238, 240, 249, 254, 261, 267, 271, 273, 274, 276, 277, 294, 299, 306, 313, 314, 315, 317, 319, 320, 321, 343, 345, 347, 348, 349, 355, 359, 365, 366, 368, 372, 374, 377, 384, 385, 386, 395, 404, 405, 406, 407, 409, 411, 412, 415, 416, 417, 419, 421, 422, 423, 426, 427, 428, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 454, 455, 456, 457, 458, 460, 461, 462, 463, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 486, 487, 488, 490, 492, 499, 502, 506, 507, 510, 513, 514, 517, 519, 521, 522, 524, 526, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 696, 697, 698, 700, 701, 702, 710, 725, 758, 759, 760, 761, 763, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 792, 793, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 864, 867, 868, 869, 870, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 922, 947, 948, 973, 974, 975, 976, 977, 978, 979, 980, 981, 987, 991, 995, 1000, 1002, 1003, 1009, 1013, 1014, 1015, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049], "n_feature_influ": 49, "n_features_": [162, 592, 593, 1042, 1044], "n_features_a": 853, "n_features_b": 853, "n_features_in_": [374, 386, 425, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 461, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 610, 611, 627, 628, 629, 630, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 797, 798, 799, 800, 803, 804, 814, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 987, 1040, 1042, 1044, 1047], "n_features_max": 69, "n_features_missing_ind": 630, "n_features_new": [428, 439, 442, 530, 532, 535, 537, 540, 541, 547, 565, 567, 568, 581, 582, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 628, 630, 635, 638, 639, 640, 641, 642, 853, 860, 867, 868, 869, 870, 873, 874, 876, 877, 878, 879, 881, 882, 883, 884, 896, 897], "n_features_opt": 104, "n_features_out": 630, "n_features_out_": 883, "n_features_rang": 69, "n_features_to_comput": 1037, "n_features_to_select": [161, 163, 315, 413, 592, 601, 1041, 1043], "n_features_to_select_": 601, "n_features_with_miss": 629, "n_features_with_missing_": 627, "n_fold": [647, 651, 653, 655, 659, 661, 663, 1030, 1031, 1035], "n_gram_rang": 1029, "n_group": [408, 809, 1035], "n_i": [1001, 1009], "n_imag": 262, "n_index": [846, 847, 848, 850, 852, 854, 855], "n_inform": [62, 64, 67, 138, 141, 160, 162, 190, 194, 210, 211, 261, 267, 277, 294, 299, 306, 313, 343, 345, 368, 377, 513, 522, 551, 552, 553, 554, 562, 563, 604, 605, 606, 607, 608, 646, 647, 652, 660, 661, 662, 665, 681, 682, 683, 834, 922, 1000, 1037], "n_init": [57, 77, 78, 83, 90, 91, 94, 97, 226, 227, 228, 229, 254, 314, 317, 348, 404, 440, 444, 446, 448, 449, 450, 456, 459, 690, 694, 797, 798, 1029, 1037, 1043, 1044, 1045, 1049], "n_init_rang": 94, "n_inlier": 233, "n_input_features_": 1042, "n_instanc": [49, 633], "n_iter": [45, 55, 103, 149, 167, 214, 265, 272, 284, 302, 338, 378, 385, 416, 451, 475, 530, 531, 542, 543, 544, 545, 646, 647, 652, 653, 660, 661, 662, 663, 681, 682, 683, 684, 685, 686, 687, 692, 694, 803, 804, 812, 814, 860, 862, 947, 948, 988, 1013, 1030, 1035, 1036, 1037, 1041, 1043, 1044, 1045, 1047], "n_iter_": [43, 123, 149, 214, 252, 386, 437, 444, 445, 446, 468, 469, 479, 480, 481, 529, 530, 531, 534, 535, 536, 537, 538, 541, 559, 560, 627, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 674, 676, 677, 678, 679, 680, 690, 692, 797, 798, 853, 861, 862, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 1033, 1036, 1037, 1039, 1042, 1043, 1045], "n_iter_no_chang": [46, 140, 144, 149, 151, 154, 156, 214, 244, 258, 310, 316, 318, 323, 347, 377, 386, 411, 557, 558, 559, 560, 666, 667, 668, 676, 677, 678, 861, 862, 1013, 1037, 1040], "n_iter_search": 272, "n_iter_without_progress": [227, 692, 1034, 1035], "n_iterations_": [276, 803, 804], "n_iters_": 1035, "n_job": [51, 52, 63, 87, 103, 104, 105, 139, 140, 141, 146, 147, 150, 154, 155, 156, 162, 163, 178, 183, 184, 185, 186, 227, 229, 234, 235, 236, 245, 247, 254, 258, 262, 263, 264, 265, 266, 268, 276, 277, 278, 281, 284, 302, 310, 313, 314, 315, 317, 318, 320, 323, 327, 343, 360, 372, 386, 408, 411, 415, 434, 441, 443, 445, 447, 449, 452, 453, 454, 455, 458, 461, 464, 469, 529, 533, 534, 535, 537, 540, 541, 543, 544, 546, 553, 554, 555, 556, 561, 562, 563, 564, 565, 566, 567, 568, 593, 601, 606, 607, 610, 632, 634, 639, 647, 651, 653, 655, 657, 658, 659, 661, 663, 665, 666, 668, 676, 679, 688, 689, 690, 691, 692, 693, 694, 774, 778, 781, 800, 803, 804, 806, 814, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 836, 837, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858, 863, 866, 899, 900, 966, 988, 999, 1000, 1002, 1029, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1044, 1047], "n_k": [404, 548], "n_kernel": 612, "n_kernel_param": [610, 611], "n_knot": [43, 66, 155, 208, 316, 883, 1009, 1042], "n_l1_ratio": [647, 659, 661, 1032], "n_l1_ratios_": 659, "n_label": [51, 118, 241, 386, 484, 521, 713, 720, 726, 739, 740, 754, 756, 792, 793, 820, 999, 1035, 1037], "n_labeled_point": [325, 326], "n_layer": [861, 862], "n_layers_": [861, 862], "n_leav": [460, 912, 913, 914, 915], "n_leaves_": [438, 442], "n_left": 561, "n_local_tri": 457, "n_m": 1015, "n_mask": 207, "n_missing_featur": 629, "n_missing_sampl": 179, "n_nearest_featur": 627, "n_neighbor": [51, 79, 95, 100, 178, 226, 227, 228, 230, 233, 243, 284, 286, 287, 290, 291, 292, 293, 296, 309, 313, 315, 327, 347, 411, 449, 601, 606, 607, 628, 688, 689, 691, 693, 695, 696, 846, 847, 848, 850, 852, 853, 857, 899, 900, 989, 996, 1002, 1005, 1012, 1036, 1043, 1045, 1046], "n_neighbors_": [691, 850], "n_neighbors_list": [243, 286], "n_neighbour": 1043, "n_node": [354, 438, 442, 460, 555, 556, 562, 563, 564, 912, 913, 914, 915, 954], "n_node_sampl": 354, "n_nodes_ptr": [555, 556, 562, 563, 564], "n_noise_": 82, "n_nonzero": 129, "n_nonzero_coef": [206, 524, 529, 535, 540, 543, 544, 546, 650, 664, 685, 686, 1047], "n_nonzero_coefs_": [664, 665, 1047], "n_nonzero_column": 349, "n_numerical_featur": 143, "n_order": 191, "n_original_featur": [591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602], "n_out": 564, "n_outlier": [111, 112, 150, 210, 233, 291], "n_output": [354, 386, 411, 421, 427, 428, 434, 439, 442, 462, 466, 479, 480, 481, 530, 532, 534, 535, 537, 540, 541, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 565, 566, 567, 568, 581, 582, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 610, 611, 628, 630, 633, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 672, 673, 674, 675, 676, 678, 679, 721, 723, 728, 745, 746, 748, 750, 751, 753, 754, 785, 788, 790, 791, 799, 800, 803, 804, 806, 814, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 851, 853, 854, 855, 860, 861, 862, 863, 867, 868, 869, 870, 873, 874, 876, 877, 878, 879, 881, 882, 883, 884, 896, 897, 899, 900, 904, 905, 906, 907, 909, 910, 912, 913, 914, 915, 936, 969, 999, 1000, 1015, 1036, 1039], "n_output_featur": 628, "n_output_features_": 879, "n_outputs_": [549, 550, 555, 556, 562, 563, 564, 861, 862, 912, 913, 914, 915], "n_oversampl": [104, 245, 263, 448, 450, 539, 542, 948, 1043], "n_pack": [1, 951, 952], "n_patch": [582, 583, 586], "n_permut": [270, 408, 829], "n_pixel": [242, 262], "n_point": [259, 844, 845], "n_points_per_clust": 98, "n_popul": [381, 968], "n_possible_iterations_": [803, 804], "n_predict": 49, "n_pt": 53, "n_q": 404, "n_quantil": [107, 184, 308, 881, 893, 1038], "n_quantiles_": 881, "n_queri": [688, 846, 847, 848, 850, 852, 854, 855, 856], "n_random_featur": 198, "n_redund": [62, 64, 67, 141, 160, 162, 261, 267, 294, 299, 306, 345, 368, 377, 434, 513, 551, 553, 562, 834], "n_refin": [51, 469], "n_region": 80, "n_regions_plu": 80, "n_regressor": 568, "n_relevant_featur": 203, "n_remaining_candidates_": [803, 804], "n_repeat": [137, 141, 147, 162, 183, 185, 186, 264, 278, 281, 313, 408, 513, 634, 815, 816, 1007], "n_required_iterations_": [803, 804], "n_resourc": 988, "n_resources_": [276, 803, 804, 988], "n_resources_0": 988, "n_resources_i": 988, "n_restarts_optim": [172, 173, 174, 414, 610, 611], "n_retri": [485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 1043, 1047], "n_row": [45, 57, 120, 401, 419, 448, 450, 509, 511], "n_row_clust": [448, 450, 511], "n_run": [72, 94, 188, 348], "n_sampl": [45, 46, 49, 54, 61, 62, 63, 64, 68, 69, 70, 72, 73, 74, 76, 77, 78, 79, 82, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 100, 102, 107, 109, 110, 111, 112, 113, 116, 118, 120, 121, 125, 127, 134, 136, 137, 138, 139, 140, 141, 145, 146, 147, 148, 150, 151, 155, 162, 163, 165, 176, 178, 179, 182, 190, 192, 193, 194, 195, 196, 199, 201, 203, 204, 206, 207, 208, 210, 211, 214, 218, 221, 223, 224, 226, 227, 228, 229, 230, 231, 233, 237, 238, 240, 243, 250, 252, 253, 254, 255, 261, 262, 264, 267, 268, 271, 273, 274, 275, 276, 277, 279, 284, 294, 306, 307, 308, 311, 314, 315, 317, 319, 320, 321, 322, 323, 327, 334, 337, 338, 343, 345, 347, 348, 355, 365, 369, 372, 374, 377, 381, 384, 385, 386, 395, 403, 404, 405, 406, 407, 408, 409, 411, 415, 416, 417, 419, 421, 422, 423, 426, 427, 428, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 479, 480, 481, 482, 484, 485, 486, 487, 488, 490, 492, 499, 502, 506, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 613, 614, 615, 616, 617, 618, 621, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 770, 771, 772, 773, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 920, 922, 935, 936, 947, 948, 950, 952, 962, 968, 969, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 987, 988, 991, 995, 999, 1000, 1002, 1003, 1009, 1010, 1011, 1013, 1014, 1015, 1029, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "n_samples1": 870, "n_samples2": 870, "n_samples_": 539, "n_samples_1": [338, 1014], "n_samples_2": [338, 1014], "n_samples_a": [792, 793], "n_samples_fit": [427, 462, 479, 480, 481, 552, 554, 556, 558, 560, 563, 566, 568, 611, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 678, 679, 688, 837, 838, 846, 847, 848, 850, 852, 854, 855, 856, 862, 905, 907, 910, 913, 915], "n_samples_fit_": [284, 846, 847, 848, 850, 852, 854, 855, 856], "n_samples_i": [612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 758, 759, 760, 761, 763, 764, 766, 767, 768, 769, 774, 775, 776, 777, 778, 779, 780, 781], "n_samples_per_cent": 94, "n_samples_rang": [110, 237], "n_samples_seen": 884, "n_samples_seen_": [532, 873, 874, 884, 1037], "n_samples_test": [277, 906, 907, 908, 909, 910, 1002, 1009], "n_samples_train": [277, 906, 907, 908, 909, 910], "n_samples_transform": [284, 848, 856], "n_samples_x": [611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 758, 759, 760, 761, 763, 764, 766, 767, 768, 769, 774, 775, 776, 777, 778, 779, 780, 781], "n_seed": 458, "n_selected_featur": [591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602], "n_skips_": 1036, "n_skips_invalid_data_": 671, "n_skips_invalid_model_": 671, "n_skips_no_inliers_": 671, "n_spline": [43, 883], "n_split": [43, 52, 140, 145, 149, 162, 178, 179, 183, 251, 259, 263, 264, 266, 269, 270, 274, 278, 281, 320, 328, 336, 343, 355, 408, 801, 802, 803, 804, 805, 807, 808, 809, 810, 813, 815, 816, 817, 818, 819, 820, 821, 827, 1035, 1037, 1047], "n_splits_": [800, 803, 804, 814], "n_steps_": [123, 446, 535, 536, 1042], "n_subpopulation_": 679, "n_subsampl": [679, 936], "n_subsets_of_featur": 593, "n_support_": [906, 907, 908, 909, 910, 1014, 1039], "n_support_vector": 46, "n_sv": [906, 907, 908, 909, 910, 1014, 1039], "n_svd_vec": [448, 450], "n_t": [555, 556, 557, 558, 562, 563, 564, 912, 913, 914, 915], "n_t_l": [555, 556, 557, 558, 562, 563, 564, 912, 913, 914, 915], "n_t_r": [555, 556, 557, 558, 562, 563, 564, 912, 913, 914, 915], "n_target": [172, 386, 407, 479, 480, 481, 482, 522, 554, 611, 643, 646, 647, 650, 651, 652, 653, 654, 656, 657, 660, 661, 662, 663, 664, 665, 671, 672, 673, 674, 675, 681, 684, 685, 686, 687, 1000, 1041, 1043, 1045], "n_task": [203, 995], "n_test": [47, 49, 69, 137, 264, 1029, 1032], "n_test_docu": 47, "n_test_po": 47, "n_threshold": [635, 727, 782, 789], "n_tick": [806, 823, 828, 831], "n_top": 272, "n_top_word": 54, "n_topic": [377, 534, 1036], "n_tot": 699, "n_total_sampl": [325, 326], "n_train": [47, 49, 69, 137, 264, 1029, 1032], "n_train_po": 47, "n_transformed_featur": 864, "n_tree": 46, "n_trees_per_iter": 559, "n_trees_per_iteration_": [557, 558, 559, 560], "n_trials_": 671, "n_uncorrelated_featur": 270, "n_unequ": 699, "n_unique_categori": 310, "n_unique_label": [729, 730, 738, 783, 784, 787, 964], "n_unique_tick": [806, 828], "n_val": [559, 560], "n_valu": [823, 831, 1037], "n_values_": 1037, "n_values_feature_j": 633, "n_x": [87, 584], "n_y": [87, 584, 1001, 1009], "n_z": 584, "na": [627, 628, 629, 630, 769, 778, 928, 930, 931, 1039, 1040, 1043, 1044, 1045, 1046], "nabarun": 1037, "nabla": 1003, "nabsolut": 213, "nacross": 278, "nada": 57, "nadeau": [264, 1037], "nadia": 1041, "nadim": 1042, "nadirhan": 1043, "nadya": 1035, "nagarajan": [645, 995], "nagarjuna": [1036, 1037], "nagasaka": 1042, "naghshhnejad": [1039, 1040], "naipawat": [1043, 1044], "naiv": [1, 32, 64, 67, 152, 264, 266, 283, 347, 349, 367, 402, 411, 412, 434, 542, 839, 840, 841, 842, 843, 993, 994, 1002, 1007, 1021, 1025, 1029, 1030, 1031, 1032, 1037, 1039, 1042, 1044], "naive_bay": [1, 47, 61, 62, 64, 67, 152, 265, 266, 347, 355, 361, 367, 411, 434, 567, 839, 840, 841, 842, 843, 865, 993, 1000, 1001, 1030, 1031, 1033, 1034, 1035, 1036], "naive_linear_pipelin": 43, "naive_linear_predict": 43, "naivebay": 361, "naivebayesna": 392, "naivelycalibratedlinearsvc": [62, 64], "najera": 1036, "najork": [726, 756, 999], "naka": 1042, "nakamura": 1043, "nakano": [1036, 1037], "nalepa": 1036, "naman": 1046, "name": [1, 43, 45, 46, 48, 49, 50, 51, 55, 57, 62, 64, 66, 67, 72, 79, 91, 95, 103, 105, 107, 113, 121, 126, 137, 138, 139, 140, 143, 146, 149, 154, 178, 183, 184, 185, 198, 205, 207, 209, 211, 213, 221, 223, 224, 226, 227, 233, 239, 240, 242, 243, 247, 251, 258, 259, 261, 262, 265, 267, 268, 271, 273, 274, 278, 281, 284, 292, 293, 299, 300, 306, 308, 310, 317, 318, 321, 322, 323, 329, 341, 347, 348, 349, 360, 361, 366, 367, 370, 372, 374, 376, 377, 379, 380, 386, 390, 395, 401, 404, 408, 411, 412, 414, 418, 420, 425, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 454, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 508, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 573, 575, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 687, 688, 689, 690, 691, 692, 697, 698, 699, 700, 702, 708, 709, 711, 713, 730, 732, 733, 742, 779, 780, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 809, 812, 814, 818, 822, 823, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 929, 930, 931, 934, 938, 939, 940, 941, 943, 956, 957, 958, 960, 963, 982, 986, 987, 988, 993, 995, 1000, 1006, 1007, 1009, 1015, 1029, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "name_to_color": 310, "named_estim": [178, 565, 566, 567, 568], "named_estimators_": [565, 566, 567, 568, 1037, 1039], "named_step": [105, 116, 161, 405, 592, 593, 596, 864, 865, 904, 905, 995, 1036, 1038], "named_transform": [863, 1044], "named_transformers_": 461, "namedtupl": [1, 617, 1045], "namespac": 400, "namiya": 1036, "nan": [1, 103, 104, 107, 143, 149, 154, 178, 179, 183, 184, 185, 224, 235, 243, 245, 254, 258, 259, 262, 263, 264, 267, 276, 310, 313, 314, 317, 318, 319, 320, 321, 322, 359, 364, 381, 386, 411, 443, 465, 494, 553, 554, 555, 556, 559, 560, 562, 563, 592, 593, 596, 602, 605, 608, 627, 628, 629, 630, 635, 712, 713, 714, 721, 722, 723, 724, 728, 729, 730, 769, 778, 783, 784, 785, 787, 800, 803, 804, 806, 814, 823, 826, 827, 828, 831, 873, 874, 878, 880, 881, 884, 885, 889, 892, 893, 895, 921, 928, 929, 930, 931, 973, 988, 999, 1009, 1015, 1025, 1032, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048], "nan_euclidean": [628, 762, 778, 779, 780, 1048], "nan_euclidean_dist": [1, 313, 762, 989, 1039], "nandana": [1035, 1036, 1037], "nandiyawar": 1048, "nanshan": 1042, "nanta": 1032, "nanxin": 1037, "nanyang": 369, "naois": [1044, 1046], "naoki": [1031, 1041], "naoya": [1035, 1036, 1037, 1038], "naozin555": 1042, "napa": 310, "narasimhan": 851, "nardelli": 1032, "narendra": [1040, 1046], "narendramukherje": 1040, "narendran": 1037, "narin": [1036, 1037], "narinek": [1036, 1037], "narr": [372, 386, 658, 904, 909, 1029, 1030], "narrai": 593, "narrow": [52, 137, 146, 304, 306, 377, 844, 845], "nartayxd": 1043, "nasa": [102, 347, 348, 369], "nasdaq": 51, "naser": 1039, "nasir": 1037, "nass": 1044, "nastegiano": 1043, "nat": [606, 607, 704, 755, 757, 1043], "natalia": [1048, 1049], "natasha": 1039, "natchiappan": [1042, 1043], "nate": [1035, 1036, 1042], "nath": [1037, 1048, 1049], "nathan": [533, 1037, 1041, 1044, 1047, 1048], "nathaniel": [1036, 1037, 1039], "nathansquan": 1043, "nati": 1044, "nation": [50, 111, 297, 367, 851], "nativ": [43, 149, 153, 172, 178, 258, 360, 367, 386, 398, 411, 494, 555, 556, 559, 560, 562, 563, 836, 837, 995, 999, 1000, 1018, 1039, 1041], "native_result": 143, "natl": [689, 693, 996], "natur": [43, 64, 67, 140, 146, 174, 183, 184, 188, 194, 207, 208, 223, 224, 230, 243, 249, 255, 273, 283, 347, 372, 374, 386, 408, 409, 411, 412, 415, 441, 447, 454, 549, 589, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 692, 704, 741, 755, 757, 846, 847, 848, 850, 852, 854, 855, 856, 883, 946, 995, 996, 998, 999, 1002, 1004, 1009, 1013, 1018, 1029, 1037], "naul": [1034, 1035], "nav": 51, "navarret": [1037, 1038, 1039], "navarro": 1044, "navi": [69, 102, 110, 124, 128, 129, 153, 190, 210, 217, 229, 250, 251, 252, 255, 271, 273, 289, 296, 327], "navig": [380, 1031], "navin": 900, "navistar": 51, "navkal": 1037, "navratil": 999, "navratil2007": 999, "nawazish": [1044, 1045], "naziya": 1047, "nb": [47, 127, 152, 355, 841, 1001], "nbclaim": 224, "nber": 49, "nbr": [852, 1002], "nbrown": [1047, 1048], "nbrs_": [688, 689], "nbsp": [51, 63, 103, 104, 139, 141, 146, 150, 151, 154, 155, 156, 160, 172, 183, 184, 185, 192, 198, 234, 235, 236, 240, 244, 245, 246, 247, 254, 258, 262, 263, 264, 265, 271, 276, 278, 302, 310, 314, 315, 317, 318, 320, 323, 327, 353, 354], "nbviewer": [51, 63, 103, 104, 139, 141, 150, 151, 154, 155, 156, 160, 172, 183, 184, 185, 192, 234, 235, 236, 240, 244, 245, 246, 247, 254, 258, 262, 263, 264, 265, 271, 276, 278, 302, 310, 314, 315, 317, 318, 320, 323, 327, 353, 354], "nbyte": [86, 237], "nca": [227, 292, 293, 294, 853, 1002], "nca_pip": 1002, "ncall": 378, "ncanip": 853, "nclass": 259, "ncluster": 79, "ncol": [43, 44, 52, 66, 68, 70, 86, 90, 99, 120, 125, 130, 144, 184, 205, 207, 208, 209, 214, 224, 226, 227, 236, 243, 258, 260, 266, 267, 275, 277, 278, 284, 287, 300, 305, 306, 308, 309, 318, 342, 343, 348, 368], "nconstant": 155, "ncorrect": 264, "ncsu": [163, 369], "ncv": [448, 450], "nd": [1042, 1046], "ndarrai": [86, 91, 207, 247, 262, 263, 264, 372, 373, 374, 378, 379, 400, 412, 415, 416, 419, 420, 422, 425, 426, 428, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 460, 461, 462, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 485, 486, 487, 488, 490, 491, 492, 493, 495, 498, 499, 500, 501, 502, 503, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 700, 701, 702, 715, 718, 721, 722, 723, 727, 728, 738, 745, 746, 748, 751, 753, 754, 759, 760, 761, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 785, 789, 790, 791, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 927, 928, 929, 930, 935, 936, 945, 947, 948, 949, 950, 955, 962, 964, 965, 968, 970, 971, 973, 974, 975, 976, 979, 984, 985, 987, 999, 1014, 1032, 1036, 1039, 1040, 1043, 1044, 1045, 1046], "ndataset": [221, 306], "ndbscan": 98, "ndcg": [726, 756, 999, 1036], "ndcg_score": [1, 726, 999, 1036, 1039, 1044, 1045], "ndenumer": 218, "ndepend": 184, "ndim": [646, 647, 652, 653, 660, 661, 662, 663, 681, 684, 930, 931], "ndimag": [53, 80, 81, 87, 302], "ndingwal": 1036, "ndirangu": [1039, 1043], "ndom_stat": 139, "ne": [999, 1002], "neal": [995, 1042], "near_uniqu": 311, "nearbi": [404, 1002], "nearer": [1, 848, 856, 1002], "nearest": [1, 33, 51, 53, 67, 68, 74, 75, 83, 84, 87, 91, 94, 99, 104, 109, 113, 120, 123, 150, 171, 179, 192, 200, 218, 222, 228, 231, 242, 243, 257, 288, 290, 293, 294, 301, 302, 309, 336, 341, 345, 364, 369, 381, 384, 386, 404, 410, 415, 418, 428, 441, 443, 445, 447, 449, 454, 458, 459, 494, 500, 502, 606, 607, 627, 628, 630, 631, 635, 688, 689, 691, 692, 696, 792, 793, 800, 830, 844, 845, 846, 847, 848, 850, 851, 852, 853, 854, 855, 856, 857, 858, 864, 865, 869, 884, 972, 996, 1005, 1014, 1020, 1021, 1025, 1029, 1031, 1032, 1033, 1034, 1036, 1038, 1039, 1041], "nearest_neighbor": [79, 449, 691], "nearest_neighbor_algorithm": [846, 854, 855], "nearest_neighbors_algorithm": [847, 852], "nearestcentroid": [1, 295, 347, 1000, 1002, 1029, 1033, 1036, 1041, 1044, 1048], "nearestneighbor": [1, 284, 317, 390, 404, 415, 441, 443, 445, 458, 688, 689, 693, 846, 847, 848, 850, 854, 855, 856, 1002, 1029, 1033, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1048], "nearli": [37, 62, 267, 367, 386, 764, 999, 1002, 1011], "neat": 1029, "necess": [996, 1002], "necessari": [46, 53, 138, 194, 207, 212, 249, 258, 264, 265, 271, 286, 322, 340, 359, 367, 370, 371, 372, 373, 375, 376, 380, 384, 400, 404, 406, 411, 449, 459, 485, 486, 488, 490, 491, 492, 493, 495, 532, 644, 645, 646, 652, 656, 657, 660, 661, 662, 663, 664, 665, 671, 673, 675, 676, 691, 695, 795, 867, 876, 887, 891, 897, 988, 991, 995, 998, 1001, 1009, 1015, 1029, 1037], "necessarili": [43, 63, 66, 67, 104, 123, 183, 207, 214, 224, 238, 239, 250, 271, 306, 347, 348, 366, 398, 400, 402, 404, 411, 627, 852, 854, 855, 856, 993, 996, 998, 999], "need": [30, 43, 48, 51, 68, 80, 86, 88, 90, 113, 122, 132, 140, 143, 145, 146, 147, 149, 154, 163, 167, 172, 178, 179, 183, 196, 202, 209, 223, 224, 227, 229, 233, 236, 238, 240, 243, 244, 249, 250, 254, 255, 258, 262, 264, 266, 267, 269, 281, 283, 284, 286, 309, 313, 320, 323, 328, 336, 347, 348, 353, 355, 359, 360, 361, 366, 367, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 385, 386, 387, 389, 390, 395, 398, 400, 401, 402, 403, 404, 405, 407, 408, 409, 411, 412, 413, 414, 420, 434, 438, 442, 446, 461, 462, 464, 501, 539, 549, 570, 581, 582, 587, 588, 589, 590, 603, 627, 635, 638, 639, 640, 642, 647, 649, 653, 661, 663, 666, 668, 671, 676, 679, 692, 711, 720, 721, 722, 723, 724, 730, 781, 785, 797, 798, 800, 803, 804, 814, 815, 816, 825, 833, 836, 844, 845, 861, 864, 867, 871, 876, 877, 881, 899, 906, 909, 921, 941, 957, 988, 989, 991, 993, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1009, 1010, 1012, 1013, 1014, 1015, 1017, 1019, 1023, 1026, 1029, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "needl": [163, 369], "needs_proba": [1038, 1046], "needs_threshold": 1046, "neeraj": 1036, "neg": [1, 42, 43, 45, 61, 93, 107, 109, 116, 140, 145, 146, 151, 173, 179, 180, 182, 183, 189, 199, 205, 207, 224, 253, 254, 258, 261, 264, 267, 271, 273, 274, 278, 284, 304, 308, 317, 321, 347, 378, 386, 387, 404, 408, 411, 412, 413, 415, 416, 427, 437, 441, 449, 462, 466, 479, 480, 481, 485, 529, 531, 533, 534, 535, 536, 538, 540, 542, 545, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 568, 587, 590, 591, 594, 595, 597, 598, 599, 601, 603, 604, 605, 606, 607, 608, 611, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 669, 670, 672, 673, 675, 677, 678, 679, 680, 687, 698, 699, 704, 705, 712, 713, 715, 716, 718, 719, 721, 722, 723, 724, 727, 729, 730, 731, 735, 738, 741, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 758, 759, 782, 783, 784, 785, 787, 789, 790, 791, 793, 797, 798, 806, 823, 825, 830, 837, 838, 847, 850, 855, 862, 871, 880, 882, 883, 888, 892, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 931, 946, 948, 997, 999, 1000, 1002, 1003, 1004, 1005, 1013, 1014, 1020, 1024, 1025, 1029, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1048, 1049], "neg_": [806, 823, 1035], "neg_brier_scor": [999, 1039], "neg_label": [258, 278, 871, 888], "neg_log_loss": [64, 258, 999], "neg_lr": 267, "neg_lr_bas": 267, "neg_lr_base_std": 267, "neg_max_error": [999, 1048], "neg_mean_absolute_error": [43, 154, 209, 999], "neg_mean_absolute_percentage_error": [52, 143, 999, 1007], "neg_mean_gamma_devi": 999, "neg_mean_pinball_loss_05p_scor": 146, "neg_mean_pinball_loss_95p_scor": 146, "neg_mean_poisson_devi": 999, "neg_mean_squared_error": [178, 179, 209, 239, 279, 320, 827, 999, 1007, 1035], "neg_mean_squared_log_error": 999, "neg_median_absolute_error": 999, "neg_root_mean_squared_error": [43, 149, 310, 999], "neg_root_mean_squared_log_error": 999, "neg_root_mean_squared_log_error_scor": 1046, "negat": [386, 806, 823, 999], "negate_scor": [239, 806, 823], "negative_class": 712, "negative_likelihood_ratio": [267, 712], "negative_linestyl": 233, "negative_loglik": 109, "negative_mahal_dist": 466, "negative_outlier_factor": 850, "negative_outlier_factor_": [243, 291, 850, 1005], "neglig": [183, 1002, 1032, 1046], "neigh": [781, 846, 847, 848, 850, 852, 854, 855, 856], "neigh_dist": [846, 847, 848, 850, 852, 854, 855, 856], "neigh_ind": [846, 847, 848, 850, 852, 854, 855, 856], "neighbor": [1, 51, 67, 74, 79, 81, 93, 99, 104, 149, 150, 152, 178, 179, 192, 227, 228, 230, 231, 233, 242, 243, 257, 288, 289, 290, 291, 293, 294, 295, 297, 301, 315, 317, 318, 345, 347, 364, 369, 381, 384, 386, 390, 404, 410, 411, 412, 415, 418, 428, 438, 441, 442, 443, 445, 447, 449, 454, 455, 458, 460, 494, 500, 502, 561, 568, 601, 606, 607, 627, 628, 631, 688, 689, 690, 691, 692, 693, 695, 696, 702, 781, 789, 800, 830, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 864, 865, 884, 900, 908, 972, 1000, 1005, 1020, 1021, 1024, 1025, 1029, 1031, 1032, 1033, 1034, 1035, 1036], "neighbor_feat_idx": 627, "neighborhood": [1, 88, 113, 128, 180, 226, 284, 285, 286, 287, 295, 296, 369, 386, 404, 409, 415, 441, 447, 454, 500, 502, 513, 539, 547, 628, 631, 696, 830, 846, 847, 850, 852, 853, 854, 855, 856, 858, 864, 865, 884, 996, 1005, 1020, 1021, 1025, 1038], "neighborhoodcomponentanalysi": 293, "neighborhoodcomponentsanalysi": [1, 227, 292, 293, 294, 1002, 1038, 1043, 1047], "neighbors_algorithm": [688, 689], "neighborsbas": [1041, 1044], "neighborsclassifi": [852, 854, 855, 856, 1029], "neighborsregressor": 1029, "neighbour": [443, 459, 692, 1004], "neighbourhood": [853, 1002], "neighbourhood_components_analysi": 853, "neil": 1041, "neill": 1041, "neither": [179, 183, 313, 347, 355, 384, 402, 434, 593, 628, 934, 1002, 1015], "nelder": 995, "nell": [0, 394, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1041], "nelson": [0, 1035, 1036, 1041, 1047], "nemour": 51, "neo": 1037, "nep": 1039, "neptun": 1018, "neq": [404, 999, 1001, 1009], "nest": [125, 134, 180, 198, 240, 256, 258, 259, 281, 320, 360, 378, 386, 390, 404, 408, 414, 418, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 453, 459, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 502, 517, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 797, 798, 799, 800, 803, 804, 805, 814, 822, 826, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 988, 999, 1002, 1020, 1029, 1030, 1033, 1035, 1036, 1037, 1043], "nested_lin": 269, "nested_scor": 269, "nesterov": [300, 861, 862, 1003, 1045, 1046], "nesterovs_momentum": [244, 300, 861, 862], "nestor": 1044, "net": [1, 25, 67, 180, 189, 194, 195, 198, 200, 203, 217, 240, 277, 345, 378, 408, 468, 469, 475, 499, 522, 555, 556, 557, 558, 562, 563, 564, 644, 646, 647, 652, 657, 658, 659, 660, 661, 662, 663, 668, 676, 678, 681, 682, 684, 860, 912, 913, 914, 915, 988, 999, 1004, 1013, 1020, 1021, 1023, 1025, 1029, 1034, 1038, 1039, 1041], "netbsd": 1029, "neto": [589, 730, 1047], "nettei": 1042, "network": [34, 45, 243, 301, 322, 359, 360, 361, 366, 367, 376, 386, 387, 398, 404, 409, 411, 416, 494, 531, 533, 565, 566, 696, 741, 861, 862, 995, 997, 999, 1013, 1015, 1018, 1021, 1024, 1025, 1029, 1043, 1047], "networkx": [55, 381], "neural": [34, 44, 45, 67, 264, 301, 386, 398, 408, 409, 411, 416, 531, 533, 536, 538, 545, 565, 566, 639, 645, 696, 741, 797, 853, 860, 861, 862, 870, 991, 995, 996, 997, 999, 1002, 1005, 1009, 1013, 1014, 1015, 1018, 1021, 1023, 1024, 1025, 1029, 1041], "neural_network": [1, 67, 180, 184, 244, 298, 299, 300, 301, 302, 323, 361, 384, 860, 861, 862, 1000, 1003, 1020, 1031, 1046], "neuro": 1018, "neurodebian": 0, "neuroimag": [1017, 1023], "neuron": [861, 862, 997, 1003], "neutral": 716, "nevalu": 154, "never": [140, 241, 321, 355, 372, 374, 381, 384, 398, 403, 404, 405, 407, 408, 447, 454, 521, 553, 554, 555, 562, 864, 865, 987, 991, 1009, 1039, 1042, 1049], "nevertheless": [43, 186, 411], "new": [1, 43, 46, 47, 49, 83, 89, 91, 93, 102, 103, 126, 127, 134, 136, 138, 139, 140, 144, 146, 149, 153, 154, 160, 162, 163, 167, 173, 179, 185, 186, 205, 207, 213, 220, 233, 240, 247, 258, 263, 266, 271, 283, 288, 290, 310, 314, 317, 320, 321, 322, 323, 326, 329, 335, 340, 355, 360, 361, 366, 367, 369, 370, 371, 374, 375, 376, 378, 380, 381, 385, 386, 387, 390, 398, 402, 403, 404, 405, 408, 409, 410, 411, 412, 413, 414, 429, 434, 435, 437, 439, 440, 442, 444, 445, 446, 449, 459, 460, 461, 469, 479, 480, 481, 502, 506, 507, 532, 539, 542, 553, 554, 555, 556, 561, 562, 563, 564, 580, 601, 630, 631, 635, 640, 641, 642, 645, 646, 652, 688, 689, 690, 697, 698, 700, 701, 702, 788, 797, 798, 799, 800, 803, 804, 806, 814, 822, 823, 834, 850, 851, 873, 874, 879, 880, 881, 883, 884, 885, 892, 893, 901, 919, 928, 933, 973, 988, 989, 991, 995, 999, 1000, 1002, 1003, 1004, 1005, 1009, 1011, 1012, 1013, 1014, 1019, 1023, 1025, 1027, 1031, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "new_data": [288, 374], "new_valu": [565, 566, 567, 568], "newaxi": [51, 53, 57, 61, 77, 113, 129, 135, 168, 192, 199, 208, 209, 210, 212, 213, 223, 236, 238, 279, 289, 296, 353, 401, 534, 995], "newei": 1037, "newer": [167, 371, 390, 409], "newgroups20": 221, "newli": [370, 374, 376, 385, 411, 460, 1006, 1035, 1036, 1044], "newsgroup": [1, 46, 54, 57, 237, 265, 329, 348, 349, 365, 401, 412, 485, 486, 1025], "newsgroups_test": 367, "newsgroups_train": [367, 485], "newsgroups_vector": 486, "newsl": [885, 1009], "newslett": 366, "newswir": 367, "newton": [207, 224, 302, 610, 648, 658, 659, 669, 680, 788, 861, 862, 995, 1033, 1034, 1036, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "newton_cg": 1039, "next": [46, 62, 93, 111, 140, 142, 143, 147, 156, 174, 182, 186, 202, 205, 207, 234, 240, 242, 246, 247, 251, 259, 264, 270, 283, 309, 310, 311, 315, 326, 347, 351, 354, 355, 370, 372, 374, 376, 392, 398, 400, 401, 404, 405, 408, 411, 506, 507, 610, 634, 692, 698, 700, 702, 781, 797, 798, 830, 966, 988, 992, 998, 999, 1009, 1023, 1026, 1029, 1042, 1043], "nezar": 1039, "nff": 699, "nfit": 326, "nfkd": [587, 588, 590, 1039], "nfor": 241, "nfrom": 172, "nft": 699, "ng": [404, 409, 691, 850, 1003, 1005, 1040], "ngiam": 1003, "ngo": 1041, "ngram_rang": [265, 329, 412, 587, 588, 590], "ngram_vector": 412, "ngroup": 259, "ngshya": 1040, "nguyen": [1039, 1040, 1043, 1044], "nguy\u1ec5n": 1044, "ni": [1035, 1040], "nic": 1042, "nice": [43, 100, 208, 240, 304, 359, 409], "nicer": 631, "nichol": 1033, "nichola": [1037, 1038, 1040], "nicholson": [1035, 1036, 1037], "nick": [163, 369, 1029, 1035, 1036, 1037, 1038], "nicki": 1043, "nickledav": 1035, "nicknam": 367, "nico": [1035, 1042], "nicol": 1036, "nicola": [0, 393, 658, 995, 1012, 1029, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1049], "nicolashug": 1038, "nicolasservel": 1040, "nicolau": 1037, "nicula": [0, 394, 1029, 1030, 1031, 1032, 1033, 1034, 1036, 1037, 1038], "niculescu": [62, 64, 402, 434, 436], "nidhin": 1039, "niederb\u00fchl": 1037, "niederhut": [1037, 1039], "nielsen": [743, 1037], "nielsenmarkus11": [1036, 1037], "nigam": [839, 1001], "nigel": 1042, "night": 52, "nightli": [0, 360, 375, 376], "nightwalkx": 1045, "nihal": 1044, "nihar": 1037, "niket": 1043, "nikhil": 1043, "nikita": [1036, 1037, 1039, 1042, 1043, 1044, 1048], "nikla": [1039, 1040], "nikolai": [1032, 1033, 1034, 1035, 1037, 1038, 1043, 1045], "nil": 1041, "nilearn": 1018, "nilesh": 1037, "nilotp": [635, 637], "nima": 1044, "nima10khodaveisi": 1044, "ninertia": 97, "ning": 1048, "ningchi": 1035, "ninh": 188, "ninja": [370, 1023], "nip": [127, 369, 513, 539, 564, 641, 999], "nipal": [407, 480, 481], "nipy_spectr": [51, 74, 80, 81, 84, 85, 93, 94], "niri": 270, "nirvan": [1037, 1041], "nishan": 1039, "nishihara": 1041, "nishu": 1045, "nist": [369, 999], "nistir": 369, "nit": 372, "nithish": [1047, 1048], "nitinramvelraj": 1044, "nitish": 1036, "nitya": 1039, "niuk": 1045, "niyogi": 996, "nizam": 1037, "nizhibitski": 1030, "nk": 696, "nkish": 1040, "nkmean": 79, "nl": 378, "nl1_ratio": 200, "nlasso": 194, "nlathia": 1035, "nlearn": 300, "nlog": 173, "nlogn": 692, "nlp": [367, 409, 412, 839, 843, 997, 1023], "nls_max_it": 1034, "nltk": [412, 1018], "nm": 359, "nmcd": 111, "nmd": 229, "nmean": 124, "nmf": [1, 10, 54, 104, 378, 412, 533, 536, 542, 545, 1024, 1025, 1029, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047], "nmf_estim": 120, "nmi": [72, 404, 717, 736, 737, 757], "nmixtur": 79, "nmle": 111, "nmodel": 263, "nmse": [44, 279], "nmslib": 284, "nmslib_": 284, "nmslibtransform": 284, "nn": [178, 242, 412, 695], "nn_candid": 276, "nn_compon": [237, 238], "nn_sampl": [237, 276], "nndsvd": [409, 536, 538, 545, 1038, 1041], "nndsvda": [54, 409, 536, 538, 545, 1038, 1041], "nndsvdar": [409, 536, 538, 545, 1038], "nneq": 699, "nnl": [204, 657], "nnlnr": [1044, 1045], "nnmf": [412, 1024, 1025, 1029], "nntp": [347, 367], "nnz": [195, 348, 367, 699], "no_chang": 901, "no_interact": [559, 560, 1044], "no_mathjax": 372, "no_structur": [79, 95], "no_valid": [923, 987], "no_weight": 219, "no_weights_handl": 219, "noa": [1040, 1046], "noah": 995, "noam": 1048, "noc": 51, "noced": 658, "nodar": 1042, "node": [1, 51, 76, 143, 147, 194, 313, 319, 320, 351, 354, 380, 381, 404, 406, 409, 411, 438, 439, 442, 460, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 650, 654, 656, 682, 683, 692, 844, 845, 912, 913, 914, 915, 916, 918, 954, 1002, 1004, 1005, 1006, 1015, 1032, 1033, 1034, 1035, 1036, 1038, 1041, 1042, 1043, 1044, 1046, 1048], "node_count": [313, 351, 354, 912, 913, 914, 915], "node_depth": 354, "node_id": [354, 916, 918], "node_idx": 354, "node_ind": 354, "node_index": 354, "node_position_model": 51, "noel": [0, 394, 1029, 1030, 1031, 1032, 1033, 1041], "noelano": 1041, "nof": 150, "nogil": [322, 373, 1048], "noinfo": 243, "noir": 310, "nois": [44, 49, 53, 58, 59, 64, 67, 69, 75, 79, 82, 85, 87, 88, 94, 95, 100, 107, 116, 120, 121, 123, 125, 127, 135, 137, 146, 151, 152, 155, 166, 167, 168, 172, 176, 180, 190, 192, 193, 194, 198, 199, 204, 205, 206, 209, 210, 211, 212, 223, 229, 231, 233, 235, 236, 239, 264, 272, 277, 279, 296, 299, 300, 306, 311, 314, 320, 342, 353, 355, 368, 374, 377, 385, 402, 404, 405, 409, 411, 413, 414, 415, 441, 443, 449, 509, 511, 512, 513, 514, 515, 516, 520, 522, 523, 528, 530, 532, 539, 605, 606, 607, 608, 611, 613, 614, 615, 616, 617, 621, 622, 624, 625, 644, 645, 646, 649, 650, 651, 652, 653, 654, 655, 656, 663, 664, 665, 671, 679, 685, 686, 692, 881, 893, 899, 922, 992, 994, 995, 996, 999, 1002, 1012, 1020, 1030, 1035, 1040, 1042, 1043], "noise_coef": 87, "noise_kernel": 172, "noise_level": [167, 172, 173, 612, 625], "noise_level_bound": [172, 173, 625], "noise_level_grid": 173, "noise_std": 174, "noise_vari": [196, 530, 656, 995, 1043], "noise_variance_": [120, 196, 530, 532, 539, 656, 1036, 1043], "noise_variance_init": 530, "noiseless": [123, 997], "noisi": [44, 69, 82, 88, 95, 121, 134, 155, 159, 167, 173, 194, 205, 206, 209, 229, 236, 255, 265, 271, 273, 274, 277, 309, 353, 355, 404, 412, 414, 415, 441, 443, 447, 519, 522, 948, 994, 996, 1002, 1014], "noisier": 996, "noisili": 184, "noisy_circl": [79, 95], "noisy_moon": [79, 95], "noiz": 115, "nolan": 1046, "noll": [207, 224], "nomenclatur": [995, 1035], "nomin": [184, 366, 386, 387, 411, 412, 580, 581, 716, 1009, 1019], "non": [0, 1, 25, 42, 44, 45, 48, 49, 52, 53, 61, 62, 64, 66, 69, 70, 72, 82, 90, 95, 103, 107, 111, 113, 121, 122, 123, 125, 136, 143, 151, 152, 154, 155, 159, 160, 162, 171, 173, 180, 182, 183, 184, 185, 186, 189, 190, 194, 195, 197, 199, 202, 203, 205, 206, 208, 209, 213, 220, 221, 222, 224, 229, 230, 234, 235, 236, 237, 239, 243, 249, 251, 255, 256, 257, 258, 259, 263, 264, 273, 281, 284, 288, 290, 302, 304, 306, 308, 309, 314, 315, 316, 317, 319, 320, 323, 329, 331, 333, 338, 339, 340, 343, 344, 347, 348, 349, 354, 355, 359, 360, 364, 367, 368, 372, 373, 374, 376, 377, 378, 380, 381, 384, 386, 387, 398, 400, 402, 404, 405, 408, 410, 411, 412, 413, 414, 416, 434, 438, 442, 443, 447, 449, 453, 459, 460, 461, 462, 464, 465, 485, 491, 494, 495, 501, 502, 506, 524, 530, 533, 534, 536, 538, 542, 545, 547, 549, 550, 551, 555, 556, 557, 558, 559, 560, 562, 563, 564, 570, 587, 588, 590, 591, 594, 595, 596, 597, 598, 599, 602, 603, 604, 605, 606, 607, 608, 610, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 630, 631, 635, 638, 643, 650, 652, 657, 658, 659, 660, 664, 665, 666, 667, 668, 669, 672, 676, 677, 678, 685, 686, 687, 688, 689, 690, 691, 692, 694, 698, 699, 702, 706, 707, 712, 715, 717, 719, 720, 726, 727, 728, 735, 737, 739, 740, 745, 746, 747, 748, 749, 750, 751, 752, 753, 755, 756, 758, 759, 778, 782, 785, 788, 789, 790, 791, 794, 797, 798, 800, 801, 805, 807, 808, 809, 810, 812, 818, 826, 830, 833, 852, 854, 855, 856, 859, 864, 865, 867, 868, 869, 872, 876, 877, 878, 879, 880, 881, 883, 884, 891, 892, 893, 894, 895, 897, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 929, 930, 931, 946, 948, 952, 955, 963, 969, 988, 989, 990, 991, 992, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1020, 1024, 1025, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049], "non_determinist": [374, 923, 1043], "non_neg": [581, 1036], "non_negative_factor": [1, 1038, 1040, 1041, 1042, 1046], "non_nest": 269, "non_nested_scor": 269, "non_nested_scores_lin": 269, "non_noisy_label": 319, "non_outliers_mask": 304, "non_zero": [46, 51], "nonblasdotwarn": 1041, "none": [43, 47, 48, 49, 51, 52, 55, 63, 66, 69, 74, 76, 77, 79, 85, 87, 88, 89, 95, 103, 104, 122, 125, 129, 138, 139, 141, 142, 143, 145, 148, 149, 150, 151, 154, 155, 156, 160, 163, 168, 172, 174, 175, 178, 179, 183, 184, 185, 186, 190, 192, 207, 208, 214, 217, 224, 226, 234, 235, 236, 239, 240, 241, 243, 244, 245, 246, 247, 254, 257, 258, 259, 261, 262, 263, 264, 265, 271, 276, 278, 289, 291, 295, 302, 308, 310, 311, 314, 315, 316, 317, 318, 320, 323, 326, 327, 329, 334, 336, 337, 340, 341, 342, 347, 348, 353, 354, 367, 368, 369, 372, 374, 379, 381, 386, 395, 398, 404, 408, 411, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 501, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 700, 701, 702, 703, 707, 708, 709, 711, 712, 713, 714, 716, 718, 720, 721, 722, 723, 724, 726, 727, 728, 729, 730, 732, 734, 735, 738, 739, 740, 741, 742, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 758, 759, 760, 761, 763, 764, 766, 767, 768, 769, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 790, 791, 793, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 893, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 923, 927, 928, 929, 930, 931, 933, 934, 935, 936, 939, 941, 942, 943, 947, 948, 951, 952, 954, 955, 959, 960, 963, 966, 968, 969, 972, 973, 979, 982, 983, 985, 987, 988, 995, 999, 1009, 1012, 1015, 1025, 1029, 1030, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "nonecheck": 373, "nonetheless": [386, 999], "nonexist": 632, "nonflavanoid": 369, "nonlinear": [279, 316, 644, 688, 689, 693, 696, 870, 995, 996, 1004, 1009], "nonmetr": [690, 694, 996], "nonneg": [404, 409, 450, 536, 538, 545, 881], "nonner": 1040, "nono": 392, "nonoclusteringclusteringkmeanskmeansyesyesspectralclusteringspectr": 392, "nonoisomapisomapspectralembeddingspectr": 392, "nonojustlookingjust": 392, "nonolassolassoelasticnetelasticnetyesyesridgeregressionridgeregressionsvr": 392, "nonolinearsvclinear": 392, "nonononoyesyesmeanshiftmeanshiftvbgmmvbgmmyesyesminibatchkmeansminibatch": 392, "nonopredict": 392, "nonopredictingstructurepredict": 392, "nonosvcsvcensembleclassifiersensembl": 392, "nonosvr": 392, "nonotoughlucktough": 392, "nonoverlap": 369, "nonparametr": [413, 414, 606, 607], "nonzero": [50, 51, 55, 57, 88, 129, 136, 206, 215, 229, 237, 241, 268, 326, 327, 334, 345, 349, 352, 401, 415, 441, 521, 522, 529, 535, 540, 546, 587, 590, 685, 686, 699, 846, 847, 850, 852, 854, 855, 999], "nonzero_coef": 995, "nopenguinsland": 1048, "noptic": 98, "noptimum": 173, "noqa": [100, 126, 146, 163, 178, 179, 184, 226, 228, 275, 276, 315, 347, 376, 578, 579, 627, 803, 804, 988, 1038], "nor": [146, 261, 267, 347, 355, 359, 377, 384, 402, 412, 434, 443, 593, 934, 1003, 1015, 1040, 1049], "norbert": [0, 362, 1031, 1041, 1042, 1043, 1048], "nordbi": 1046, "nore\u00f1a": 1042, "norm": [1, 51, 53, 54, 55, 66, 70, 75, 87, 123, 170, 173, 190, 194, 195, 200, 229, 249, 250, 251, 253, 255, 261, 265, 289, 304, 336, 348, 378, 381, 386, 404, 412, 413, 439, 440, 444, 456, 457, 461, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 486, 529, 532, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 588, 589, 590, 596, 643, 646, 647, 652, 653, 657, 658, 659, 660, 661, 662, 663, 664, 672, 674, 676, 678, 681, 684, 685, 686, 692, 693, 770, 841, 876, 891, 904, 906, 909, 980, 981, 992, 995, 997, 999, 1009, 1013, 1032, 1034, 1036, 1040], "norm1": 461, "norm2": 461, "norm_diag": 525, "norm_laplacian": 695, "norm_ord": [596, 1036], "norm_y_weight": 1041, "normal": [1, 25, 36, 44, 49, 51, 54, 55, 57, 58, 63, 65, 70, 72, 75, 79, 80, 90, 94, 95, 99, 105, 107, 109, 110, 111, 115, 116, 121, 134, 135, 137, 140, 145, 146, 149, 150, 151, 155, 158, 170, 173, 174, 180, 182, 183, 189, 190, 191, 192, 193, 194, 199, 202, 204, 205, 209, 210, 211, 213, 220, 224, 229, 243, 249, 254, 255, 257, 258, 261, 264, 270, 289, 290, 293, 303, 305, 309, 314, 317, 320, 321, 328, 336, 348, 349, 355, 364, 367, 368, 369, 372, 377, 381, 385, 386, 400, 401, 402, 404, 405, 407, 410, 411, 412, 416, 437, 446, 448, 449, 450, 459, 461, 462, 472, 479, 480, 481, 486, 494, 510, 513, 517, 524, 525, 531, 534, 539, 540, 542, 546, 547, 550, 560, 561, 578, 579, 581, 587, 588, 589, 590, 611, 625, 627, 639, 658, 659, 669, 672, 676, 680, 687, 690, 691, 694, 695, 697, 703, 704, 706, 718, 724, 726, 734, 736, 741, 745, 749, 750, 752, 755, 756, 757, 761, 770, 794, 795, 796, 803, 804, 830, 832, 841, 843, 849, 850, 853, 864, 865, 868, 869, 872, 874, 877, 878, 879, 880, 881, 882, 884, 889, 890, 892, 893, 894, 895, 899, 900, 947, 948, 952, 969, 974, 975, 980, 981, 991, 993, 995, 996, 997, 998, 1001, 1005, 1010, 1012, 1014, 1015, 1020, 1025, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049], "normal_unbias": 869, "normalis": [183, 611, 788], "normalization_": [639, 991], "normalize_compon": [1037, 1039], "normalize_i": [172, 176, 414, 611, 1043], "normalized_discounted_cumulative_gain": 756, "normalized_mutual_info_scor": [1, 72, 404, 736, 755, 795, 999, 1037, 1043], "normalized_stress": [226, 690, 694, 996, 1044], "normalized_weight": 192, "norms_squar": 686, "north": [369, 404], "northern": 310, "northrop": 51, "northwestern": 658, "norvan": 1039, "nose": [369, 1032, 1036], "nosetest": 1031, "not_memb": 183, "notabl": [201, 240, 304, 366, 386, 403, 494, 728, 877, 996, 998, 1002, 1033, 1036, 1043, 1049], "notarstefano": [1037, 1038], "notat": [150, 386, 405, 409, 412, 589, 712, 995, 999, 1038, 1045], "notch": 1023, "note": [0, 30, 43, 44, 46, 47, 50, 51, 53, 57, 58, 63, 64, 68, 72, 86, 99, 103, 104, 111, 113, 115, 116, 118, 123, 137, 138, 140, 142, 146, 147, 151, 163, 165, 167, 174, 178, 182, 183, 184, 185, 186, 188, 196, 198, 202, 205, 207, 208, 209, 211, 214, 220, 222, 224, 226, 227, 228, 230, 233, 234, 236, 238, 239, 240, 241, 243, 250, 258, 259, 260, 264, 267, 270, 272, 273, 278, 283, 284, 286, 290, 291, 300, 304, 305, 308, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 326, 328, 330, 336, 340, 347, 354, 359, 360, 366, 369, 370, 372, 373, 374, 376, 378, 379, 384, 385, 386, 390, 395, 398, 399, 402, 404, 406, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 427, 429, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 456, 457, 458, 459, 461, 462, 465, 466, 469, 470, 472, 473, 475, 476, 477, 478, 479, 480, 481, 484, 487, 494, 496, 507, 513, 517, 525, 528, 531, 532, 534, 536, 537, 538, 539, 541, 542, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 580, 581, 582, 588, 589, 591, 592, 593, 596, 598, 599, 602, 603, 605, 606, 607, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 629, 630, 632, 633, 635, 636, 638, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 695, 696, 699, 700, 707, 708, 709, 713, 715, 716, 720, 721, 722, 723, 724, 728, 729, 730, 732, 734, 738, 741, 746, 754, 755, 758, 763, 764, 768, 770, 774, 778, 782, 783, 784, 785, 787, 788, 789, 792, 793, 794, 796, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 917, 920, 921, 926, 936, 937, 941, 947, 948, 960, 963, 973, 982, 988, 989, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1005, 1006, 1007, 1009, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1022, 1025, 1026, 1027, 1029, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047], "notebook": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 351, 352, 353, 354, 373, 374, 378, 405, 465, 902, 1015, 1018, 1019, 1040, 1043], "notes_neighbor": 1029, "notfittederror": [1, 132, 386, 853, 982, 1033, 1035, 1038, 1039, 1045, 1046], "noth": [57, 102, 321, 347, 348, 377, 540, 714, 867, 876, 931, 1009], "nothman": [0, 387, 393, 412, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1046, 1047, 1048, 1049], "notic": [46, 52, 62, 63, 70, 86, 90, 111, 137, 139, 140, 146, 149, 162, 190, 194, 233, 246, 261, 262, 264, 265, 267, 273, 274, 284, 309, 340, 347, 348, 349, 355, 374, 377, 387, 403, 408, 411, 494, 539, 561, 988, 998, 999, 1005, 1026, 1042], "notif": [372, 376], "notifi": [1, 570, 571, 572, 1027, 1039, 1048], "notimplementederror": [551, 552, 891, 1036, 1046], "notin": 404, "notion": [273, 340, 348, 361, 384, 404, 409, 411, 995, 999], "notmatthancock": [1037, 1039], "noto": 1042, "notplancha": [1047, 1048], "noun": 386, "nouri": [359, 1030, 1032], "novak": 1032, "novarti": 51, "novaya": [1039, 1042], "novel": [220, 290, 335, 355, 402, 988], "novelti": [180, 220, 233, 243, 285, 291, 335, 850, 1020, 1021, 1024, 1025, 1029, 1037], "novemb": [163, 207, 224, 369, 376, 1034, 1035, 1037], "novic": 1031, "now": [43, 44, 46, 52, 55, 58, 86, 90, 103, 116, 125, 134, 135, 139, 141, 142, 143, 146, 147, 154, 156, 163, 165, 167, 172, 173, 174, 179, 182, 183, 184, 185, 188, 190, 192, 195, 196, 198, 202, 208, 209, 211, 229, 230, 238, 240, 258, 260, 264, 267, 275, 276, 277, 278, 281, 287, 309, 314, 315, 317, 318, 319, 320, 321, 322, 323, 327, 336, 347, 348, 349, 355, 359, 361, 367, 372, 373, 378, 384, 385, 386, 390, 401, 404, 408, 409, 411, 412, 416, 424, 461, 506, 507, 510, 534, 547, 578, 579, 581, 627, 630, 649, 653, 658, 663, 684, 690, 694, 702, 726, 756, 797, 798, 803, 804, 836, 851, 863, 864, 973, 989, 995, 999, 1005, 1008, 1009, 1014, 1015, 1019, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "nowadai": 372, "nozawa": [1044, 1045], "np": [1, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 69, 70, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 87, 88, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 109, 110, 111, 112, 113, 115, 116, 118, 121, 122, 123, 124, 127, 129, 130, 135, 136, 137, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 162, 163, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 227, 228, 229, 231, 233, 236, 237, 238, 239, 240, 241, 242, 243, 245, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 283, 284, 288, 289, 290, 291, 293, 294, 295, 296, 297, 299, 302, 304, 305, 306, 307, 308, 309, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 332, 334, 335, 336, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 352, 353, 354, 355, 359, 366, 367, 372, 374, 377, 378, 381, 384, 386, 395, 401, 403, 404, 405, 408, 409, 410, 411, 412, 414, 417, 418, 419, 420, 421, 422, 425, 426, 427, 428, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 482, 491, 494, 495, 498, 502, 506, 507, 508, 512, 513, 514, 515, 516, 517, 518, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 555, 556, 557, 558, 559, 561, 562, 563, 564, 567, 568, 580, 581, 584, 585, 587, 588, 592, 593, 596, 600, 603, 605, 608, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 636, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 687, 691, 692, 694, 695, 699, 702, 703, 706, 707, 709, 712, 713, 714, 715, 726, 727, 729, 730, 732, 734, 735, 738, 739, 754, 756, 763, 769, 773, 778, 781, 782, 783, 784, 787, 788, 789, 794, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 823, 826, 827, 828, 830, 831, 832, 833, 836, 837, 839, 840, 841, 842, 843, 844, 845, 849, 850, 851, 852, 854, 855, 856, 860, 861, 868, 869, 871, 872, 877, 878, 879, 880, 881, 883, 884, 885, 892, 893, 896, 897, 898, 899, 900, 901, 904, 906, 907, 909, 910, 912, 913, 914, 915, 921, 926, 927, 928, 929, 930, 931, 933, 935, 936, 946, 947, 948, 954, 955, 962, 963, 965, 968, 969, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 984, 988, 989, 994, 995, 997, 999, 1000, 1002, 1003, 1005, 1009, 1010, 1011, 1013, 1014, 1015, 1030, 1032, 1035, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "npach": [1044, 1045], "nperiod": 155, "npolynomi": 43, "npropag": 79, "nqy18": 412, "nrandom": 270, "nreceiv": 273, "nrow": [43, 44, 66, 68, 70, 90, 99, 105, 120, 149, 176, 184, 207, 209, 214, 224, 226, 227, 230, 243, 258, 266, 267, 284, 306, 308, 309, 318, 326, 342, 343, 368], "nsampl": [374, 797, 798], "nswdemand": 149, "nswprice": 149, "nt": 55, "nt_uri": 55, "ntest": 293, "ntf": 699, "nth": [271, 707, 999], "nthe": [184, 262, 354], "ntime": [50, 275], "nto": [213, 273], "ntol": 163, "ntrain": 83, "ntree": 43, "ntrue": [45, 325, 326], "ntt": 699, "ntu": [188, 366, 484, 506, 507, 658], "ntwo": 368, "nu": [1, 46, 48, 50, 176, 220, 233, 335, 359, 411, 414, 619, 677, 906, 907, 908, 1005, 1013, 1014, 1040, 1044], "nuanc": [201, 386], "nuc": 281, "nuclear": [163, 369], "nuclei": [163, 369], "nudge_dataset": 302, "nuff": 1036, "nugmanov": [1037, 1038], "nuisanc": 414, "nukariya": [1041, 1042], "null": [79, 103, 183, 184, 185, 258, 264, 270, 404, 408, 494, 648, 669, 680, 704, 731, 757, 795, 829, 995, 996, 999, 1014, 1039], "null_count": 52, "nullabl": [627, 628, 629, 630, 1040, 1044], "nullformatt": [226, 228, 231, 284], "nullloc": 289, "num": [43, 51, 103, 163, 167, 172, 173, 174, 184, 185, 209, 271, 272, 317, 319, 320, 411, 494, 632], "num_col": 247, "num_cor": 378, "num_depend": 258, "num_featur": [997, 1044], "num_linear_processor": 154, "num_missing_cel": 149, "num_pip": 247, "num_preprocess": 461, "num_proc": [235, 314], "num_sampl": [800, 814, 1044], "num_selector": 154, "num_sent": 102, "num_thread": 284, "num_tree_processor": 154, "num_trial": 269, "numba": [284, 1019], "number": [1, 43, 44, 46, 47, 49, 51, 52, 53, 57, 58, 62, 63, 64, 68, 69, 71, 73, 74, 76, 78, 79, 80, 81, 82, 83, 86, 87, 88, 90, 94, 95, 96, 98, 100, 102, 103, 104, 105, 107, 113, 115, 116, 118, 120, 122, 124, 125, 127, 134, 135, 137, 140, 142, 144, 145, 146, 147, 150, 154, 159, 160, 161, 163, 175, 176, 179, 180, 183, 184, 188, 194, 198, 206, 207, 208, 209, 214, 220, 221, 222, 223, 224, 226, 233, 237, 241, 243, 244, 249, 250, 252, 254, 255, 257, 258, 259, 262, 263, 264, 265, 266, 269, 270, 271, 272, 273, 277, 281, 284, 286, 290, 291, 304, 306, 307, 310, 313, 314, 315, 316, 317, 318, 319, 321, 322, 329, 336, 341, 343, 348, 349, 351, 354, 355, 360, 361, 364, 366, 367, 368, 369, 370, 372, 375, 376, 378, 379, 380, 381, 384, 385, 386, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 427, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 571, 580, 581, 582, 583, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 606, 607, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 701, 702, 703, 704, 705, 707, 712, 713, 714, 716, 718, 720, 724, 728, 729, 730, 731, 734, 735, 738, 740, 752, 755, 774, 778, 781, 782, 783, 784, 785, 786, 787, 788, 789, 792, 793, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 893, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 920, 930, 931, 934, 947, 948, 951, 952, 968, 969, 972, 973, 988, 991, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1011, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1025, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "number_norm": 57, "numbernormalizingvector": 57, "numer": [1, 43, 52, 57, 99, 103, 107, 143, 154, 163, 172, 175, 184, 185, 198, 207, 224, 243, 245, 247, 271, 294, 310, 316, 320, 349, 366, 367, 369, 375, 377, 378, 384, 385, 386, 400, 404, 406, 411, 412, 413, 414, 416, 417, 437, 440, 444, 456, 468, 469, 472, 475, 486, 487, 488, 494, 498, 499, 500, 502, 503, 508, 529, 531, 533, 538, 539, 545, 559, 560, 565, 580, 589, 611, 617, 620, 627, 630, 632, 633, 646, 652, 654, 672, 687, 690, 694, 714, 778, 788, 794, 800, 803, 804, 806, 814, 823, 826, 827, 828, 831, 839, 840, 841, 842, 843, 861, 862, 867, 872, 877, 878, 885, 916, 917, 918, 930, 931, 947, 948, 988, 989, 995, 996, 1000, 1007, 1009, 1010, 1015, 1022, 1023, 1029, 1030, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "numeric_featur": [103, 317], "numeric_onli": 184, "numeric_preprocessor": 245, "numeric_transform": [103, 317], "numerical_column": [183, 185, 464], "numerical_columns_subset": 143, "numerical_featur": [184, 310], "numerical_pip": 185, "numerical_transform": 103, "numfocu": 0, "numpi": [1, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 69, 70, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 127, 129, 130, 135, 136, 137, 139, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 162, 163, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 227, 228, 229, 231, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 283, 284, 288, 289, 290, 291, 293, 294, 295, 296, 297, 299, 302, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 332, 334, 335, 336, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 352, 353, 354, 355, 359, 365, 366, 367, 370, 372, 373, 374, 375, 376, 378, 380, 381, 384, 385, 386, 390, 395, 397, 398, 400, 401, 404, 405, 408, 409, 410, 411, 412, 417, 418, 419, 420, 421, 422, 425, 426, 427, 428, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 482, 487, 491, 492, 494, 501, 504, 506, 507, 519, 525, 529, 532, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 567, 568, 580, 581, 584, 585, 587, 588, 590, 600, 603, 618, 627, 628, 629, 630, 631, 632, 633, 643, 646, 647, 649, 652, 653, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 670, 672, 676, 677, 678, 684, 687, 688, 691, 692, 693, 694, 695, 699, 702, 703, 706, 707, 709, 712, 714, 726, 727, 729, 730, 732, 734, 735, 738, 739, 754, 756, 773, 779, 781, 782, 783, 784, 787, 788, 789, 794, 796, 797, 798, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 823, 827, 830, 831, 832, 833, 836, 837, 839, 840, 841, 842, 843, 844, 845, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 867, 868, 871, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 904, 906, 907, 909, 910, 912, 926, 927, 928, 929, 933, 935, 945, 946, 947, 948, 952, 954, 955, 962, 963, 968, 969, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 984, 985, 988, 989, 994, 995, 997, 999, 1000, 1002, 1005, 1009, 1011, 1014, 1015, 1017, 1019, 1029, 1032, 1033, 1035, 1036, 1037, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "numpydoc": [372, 386, 390, 397], "nune": 1030, "nuniformli": 150, "nuniqu": 310, "nurseit": 1046, "nusvc": [1, 359, 434, 907, 1000, 1014, 1029, 1030, 1031, 1034, 1037, 1039, 1040, 1041, 1043], "nusvr": [1, 46, 359, 910, 1014, 1031, 1037, 1039, 1040, 1041, 1043, 1044], "nutshel": [997, 999], "nv": 51, "nvidia": [0, 384], "nvirginica": 273, "nwanna": 1044, "nwith": [72, 90, 94, 162, 348], "nx": [50, 297, 367, 496], "nxorabl": 1039, "ny": [50, 52, 263, 297, 367, 369, 496, 989, 1011], "nyc": [400, 1023], "nymark": 1044, "nystroem": [1, 43, 66, 155, 178, 220, 233, 238, 364, 640, 641, 642, 677, 870, 909, 910, 1025, 1030, 1036, 1039, 1041, 1042, 1043], "nystroem_approx_svm": 238, "nystroem_scor": 238, "nystroem_tim": 238, "nystrom": [879, 1038, 1039], "nystr\u00f6m": [43, 991], "nyu": [0, 853], "nz": 528, "nzw": 1037, "n\u00e1jera": [1033, 1034, 1035, 1036], "n\u00e1pole": 1042, "o": [0, 55, 57, 64, 66, 73, 82, 88, 93, 94, 96, 97, 113, 115, 122, 151, 163, 175, 196, 202, 205, 207, 221, 239, 249, 258, 264, 266, 273, 304, 305, 309, 314, 317, 320, 329, 340, 351, 359, 367, 369, 372, 380, 390, 404, 406, 409, 411, 415, 417, 441, 444, 445, 447, 470, 472, 497, 532, 603, 627, 666, 667, 692, 832, 860, 875, 916, 968, 991, 993, 995, 996, 999, 1000, 1002, 1003, 1013, 1014, 1015, 1029, 1032, 1035, 1037, 1038, 1041, 1042, 1044, 1045, 1046], "oa": [1, 49, 54, 65, 70, 108, 112, 113, 127, 148, 180, 237, 293, 295, 406, 466, 467, 470, 471, 473, 474, 510, 547, 800, 993, 1020], "oa_ms": 110, "oa_shrinkag": 110, "oak": 310, "ob2019": 999, "obaja": 1033, "obei": [386, 997], "obj": [240, 398, 565, 566, 937, 957, 959, 960, 961, 966], "obj_func": [610, 611], "object": [1, 43, 50, 53, 54, 57, 63, 64, 79, 83, 95, 99, 102, 103, 123, 126, 132, 149, 154, 162, 172, 180, 184, 194, 207, 222, 224, 232, 240, 244, 246, 247, 258, 261, 262, 271, 273, 276, 297, 310, 316, 317, 319, 320, 325, 348, 349, 355, 365, 366, 367, 372, 373, 375, 377, 378, 379, 381, 385, 386, 387, 395, 398, 404, 405, 406, 409, 412, 413, 414, 418, 420, 425, 427, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 454, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 475, 479, 480, 481, 482, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 513, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 573, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 687, 688, 689, 690, 691, 692, 693, 694, 697, 698, 699, 700, 701, 702, 711, 718, 730, 732, 733, 742, 758, 759, 781, 782, 789, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 919, 930, 931, 932, 933, 934, 937, 941, 942, 944, 953, 955, 956, 957, 958, 959, 960, 961, 963, 965, 966, 983, 984, 985, 986, 995, 996, 997, 998, 1002, 1005, 1006, 1009, 1012, 1013, 1014, 1018, 1020, 1025, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "object_nam": [240, 957, 960], "obozinski": 409, "obscur": [1006, 1045], "observ": [1, 43, 44, 46, 48, 50, 52, 53, 58, 61, 63, 64, 66, 70, 72, 75, 78, 86, 95, 103, 109, 111, 112, 113, 121, 122, 125, 126, 127, 134, 137, 138, 140, 141, 146, 149, 150, 153, 163, 167, 170, 172, 173, 174, 176, 183, 184, 185, 190, 191, 201, 204, 207, 208, 209, 211, 220, 224, 230, 231, 236, 237, 243, 258, 260, 264, 266, 267, 271, 277, 278, 284, 287, 290, 297, 309, 319, 321, 328, 335, 336, 340, 341, 347, 348, 349, 353, 367, 369, 386, 390, 402, 404, 406, 407, 408, 409, 410, 413, 414, 438, 440, 442, 443, 444, 446, 456, 457, 466, 467, 468, 469, 470, 471, 472, 473, 522, 530, 549, 550, 561, 610, 611, 646, 652, 657, 701, 709, 716, 718, 758, 842, 850, 883, 885, 995, 998, 999, 1003, 1004, 1005, 1006, 1007, 1009, 1012, 1013, 1014, 1015, 1022, 1030, 1042, 1043, 1044, 1045], "observatori": 172, "obsolet": [1029, 1045], "obstruct": 1036, "obtain": [22, 43, 46, 48, 51, 52, 58, 64, 88, 90, 91, 103, 106, 107, 125, 127, 134, 143, 146, 147, 152, 163, 169, 171, 183, 184, 194, 207, 209, 211, 220, 230, 243, 249, 250, 251, 258, 260, 264, 265, 266, 270, 273, 277, 287, 309, 316, 334, 340, 348, 349, 354, 355, 367, 369, 374, 386, 398, 402, 403, 404, 406, 407, 409, 411, 412, 413, 414, 434, 439, 466, 494, 530, 531, 553, 554, 555, 556, 557, 558, 561, 562, 563, 592, 605, 614, 645, 659, 661, 666, 668, 672, 674, 676, 677, 687, 708, 712, 726, 739, 756, 793, 806, 823, 829, 832, 833, 836, 850, 861, 881, 893, 906, 909, 912, 913, 948, 988, 989, 991, 993, 995, 998, 999, 1000, 1002, 1003, 1005, 1006, 1009, 1013, 1014, 1035, 1037, 1040, 1042, 1043, 1044, 1045, 1046], "obviat": 991, "obviou": [183, 340, 355, 359, 372, 401, 409], "obvious": 359, "oc": 1044, "occas": 372, "occasion": [387, 727, 1038], "occup": [183, 304, 320, 494], "occupation_cler": 183, "occupation_manag": 183, "occupation_oth": 183, "occupation_profession": 183, "occupation_sal": 183, "occupation_servic": 183, "occupi": [404, 999], "occur": [54, 102, 144, 207, 211, 224, 343, 355, 372, 380, 387, 401, 404, 406, 408, 412, 441, 506, 507, 570, 580, 589, 627, 671, 712, 798, 800, 803, 804, 806, 814, 823, 826, 827, 828, 831, 874, 935, 999, 1001, 1009, 1029, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1049], "occurr": [1, 207, 310, 348, 349, 367, 372, 376, 404, 408, 412, 567, 568, 580, 588, 589, 617, 627, 628, 629, 630, 783, 839, 867, 1001, 1030, 1035], "ocean": 297, "ocsvm": [48, 220], "oct": [692, 769, 996, 1002], "octob": [110, 367, 1029, 1036, 1042, 1043, 1045], "od280": 369, "od315": 369, "odd": [267, 411, 512, 712, 999, 1036, 1037], "ofcategoriesknownnumb": 392, "off": [44, 51, 53, 66, 72, 74, 75, 81, 85, 86, 109, 113, 115, 120, 140, 149, 162, 163, 165, 180, 201, 211, 227, 238, 242, 256, 257, 263, 265, 266, 267, 277, 281, 304, 321, 326, 328, 330, 336, 345, 347, 367, 372, 374, 386, 403, 404, 406, 413, 439, 494, 551, 552, 557, 558, 587, 590, 634, 656, 658, 692, 715, 797, 798, 800, 803, 804, 814, 816, 822, 827, 865, 884, 952, 998, 1004, 1014, 1019, 1020, 1029, 1033, 1034, 1036], "offer": [43, 140, 197, 374, 380, 384, 385, 386, 390, 398, 408, 409, 411, 412, 988, 989, 1000, 1003, 1015, 1018, 1019, 1022, 1023, 1035, 1047, 1048], "offic": 1023, "offici": [0, 367, 374, 384, 386, 390, 491, 495, 1018, 1037, 1038, 1041, 1049], "offlin": [258, 359, 372, 1022], "offset": [137, 188, 384, 406, 409, 466, 506, 507, 561, 632, 633, 641, 642, 644, 645, 677, 728, 775, 777, 850, 908, 999, 1013, 1037, 1048], "offset_": [466, 561, 677, 850, 908, 1037], "offset_init": 677, "offsetbox": 227, "offsetimag": 227, "often": [43, 57, 61, 62, 64, 69, 102, 106, 140, 149, 152, 155, 171, 178, 183, 184, 205, 208, 224, 227, 243, 251, 263, 266, 269, 304, 309, 336, 345, 347, 348, 349, 359, 360, 366, 367, 369, 372, 374, 377, 380, 384, 385, 386, 389, 392, 398, 402, 404, 405, 406, 408, 409, 411, 412, 414, 416, 465, 519, 522, 531, 534, 646, 647, 652, 653, 660, 661, 662, 663, 672, 674, 687, 728, 874, 882, 890, 902, 988, 989, 991, 994, 995, 996, 997, 998, 999, 1001, 1002, 1004, 1005, 1006, 1009, 1012, 1013, 1015, 1030, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "og": 412, "ogbonna": 1042, "ogordon100": 1042, "ogrid": 53, "ogu": 412, "ogura": 1044, "oh": [877, 1039], "ohad": 1043, "ohayon": [1037, 1038, 1045], "ohio": 367, "ohno": 402, "oj_lappi": 1041, "oja": [416, 531], "ojala": [270, 408, 829], "ojeda": 1043, "ok": [49, 372, 1005], "okal": 1033, "okbalefthand": 1035, "okhlopkov": [1035, 1036], "okon": 1043, "okroshiashvili": 1042, "ol": [190, 199, 204, 205, 213, 223, 316, 656, 995], "ol2001": 989, "olatunji": 1044, "old": [224, 372, 376, 378, 404, 465, 534, 646, 652, 902, 996, 1019, 1022, 1029, 1034, 1035, 1037, 1042, 1043, 1044], "olden": 1037, "older": [240, 371, 376, 398, 1027, 1032, 1039, 1041], "oldest": [376, 494], "oldid": 999, "oldja": 1041, "oleg": 1039, "oleggio": 1033, "olegovich": 1036, "oleh": [1041, 1043], "oleksandr": [1037, 1038, 1039, 1040, 1043], "oleksii": 1046, "olemiss": 679, "olga": [628, 989], "oli": 1036, "oliblum90": [1036, 1037], "olicairn": 1040, "olimpio": 1037, "oliph": 1029, "oliv": [1037, 1038, 1040, 1041, 1042], "olivar": 1049, "oliveira": [1035, 1037, 1039, 1043], "olivetti": [1, 120, 365, 409, 493, 1025, 1029, 1037], "olivetti_fac": 493, "olivi": [0, 387, 393, 900, 1012, 1019, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "oll": 1044, "olr": 190, "olsen": 1036, "olshen": [912, 913, 1015], "olson": 1035, "olszewski": 1042, "olvi": [163, 369], "om": 1036, "omah": 1049, "omar": [0, 393, 1039, 1044, 1045, 1046, 1047, 1048, 1049], "omarmanzoor": 1045, "omega": [343, 407, 993], "omega_": 993, "omega_k": [407, 993], "omer": 1034, "omit": [141, 182, 183, 330, 377, 417, 472, 532, 666, 668, 676, 807, 809, 832, 833, 836, 839, 840, 841, 842, 843, 861, 997, 1004], "omohundro": 1002, "omp": [1, 123, 129, 206, 409, 529, 535, 540, 546, 664, 665, 685, 686, 1021, 1025, 1029, 1037], "omp_cv": 206, "omp_get_max_thread": 373, "omp_num_thread": 360, "omtcyfz": 1036, "on_fail": [941, 1048], "on_skip": [941, 1048], "onc": [1, 43, 47, 83, 160, 163, 167, 172, 201, 227, 240, 243, 258, 262, 265, 277, 278, 281, 284, 310, 313, 317, 347, 349, 353, 354, 355, 359, 361, 366, 367, 370, 372, 374, 376, 377, 378, 379, 380, 385, 386, 387, 398, 403, 404, 405, 407, 408, 409, 411, 412, 413, 414, 446, 448, 450, 465, 469, 506, 507, 536, 542, 549, 557, 558, 589, 590, 596, 611, 619, 627, 647, 651, 653, 655, 661, 663, 665, 666, 667, 668, 676, 677, 678, 697, 712, 716, 718, 736, 781, 801, 805, 808, 818, 821, 822, 839, 840, 841, 842, 843, 916, 995, 996, 999, 1002, 1009, 1013, 1014, 1015, 1026, 1029, 1037, 1039, 1040, 1041, 1042, 1046], "one": [0, 1, 30, 43, 47, 48, 49, 52, 54, 55, 62, 63, 64, 68, 69, 70, 72, 75, 81, 86, 88, 90, 91, 93, 94, 97, 99, 103, 112, 120, 123, 125, 126, 129, 139, 140, 144, 146, 149, 150, 154, 155, 156, 162, 163, 165, 167, 174, 175, 178, 182, 183, 184, 185, 186, 188, 190, 191, 194, 198, 199, 201, 202, 203, 205, 207, 209, 215, 216, 221, 224, 228, 233, 240, 241, 243, 247, 251, 254, 258, 260, 261, 262, 263, 264, 265, 267, 268, 271, 272, 273, 274, 281, 283, 284, 289, 302, 305, 306, 309, 310, 313, 315, 316, 317, 321, 322, 328, 335, 336, 344, 347, 348, 349, 351, 354, 355, 359, 360, 361, 366, 367, 368, 369, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 384, 386, 387, 389, 390, 392, 395, 398, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 441, 442, 443, 444, 446, 447, 448, 449, 450, 452, 453, 454, 457, 459, 461, 466, 471, 484, 485, 487, 488, 490, 491, 492, 493, 494, 498, 499, 500, 501, 502, 503, 506, 507, 508, 510, 512, 532, 537, 538, 539, 541, 545, 549, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 567, 580, 582, 583, 587, 588, 589, 590, 610, 611, 615, 616, 620, 627, 630, 631, 632, 633, 634, 635, 643, 647, 648, 649, 650, 654, 657, 658, 659, 661, 666, 668, 669, 671, 673, 674, 675, 676, 678, 680, 688, 692, 695, 699, 703, 711, 716, 720, 729, 730, 734, 738, 750, 751, 754, 763, 771, 774, 778, 779, 780, 781, 783, 784, 787, 788, 790, 791, 792, 793, 796, 797, 798, 799, 800, 803, 804, 806, 807, 808, 810, 812, 814, 816, 818, 819, 820, 822, 823, 825, 827, 828, 830, 831, 832, 833, 834, 836, 837, 844, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 860, 864, 867, 868, 869, 871, 872, 874, 875, 876, 877, 878, 883, 884, 885, 888, 890, 904, 906, 907, 908, 909, 910, 912, 913, 914, 915, 923, 926, 936, 939, 941, 950, 969, 988, 989, 991, 993, 994, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1013, 1014, 1015, 1016, 1018, 1023, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "one_class": 241, "one_d_arrai": 921, "one_d_label": 924, "one_hot": [310, 321], "one_hot_encod": [43, 143], "one_hot_encoder_": 564, "one_hot_linear_pipelin": 43, "one_hot_linear_predict": 43, "one_hot_poly_pipelin": 43, "one_hot_poly_predict": 43, "one_hot_result": 143, "one_hot_tim": 43, "one_imag": [412, 583, 586], "one_vs_on": [414, 610, 1000], "one_vs_rest": [610, 1000], "oneclasssvm": [1, 48, 50, 220, 233, 316, 335, 561, 677, 850, 1005, 1013, 1014, 1031, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044], "oned": 390, "onehot": [245, 305, 306, 405, 869, 1009], "onehot_categor": [207, 224], "onehotencod": [1, 43, 103, 139, 143, 154, 183, 184, 207, 224, 235, 243, 245, 247, 310, 314, 316, 319, 320, 321, 366, 386, 405, 411, 463, 464, 564, 580, 581, 867, 871, 872, 875, 878, 885, 989, 1009, 1030, 1033, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048], "ones": [43, 50, 70, 78, 88, 103, 112, 144, 150, 162, 167, 188, 194, 211, 212, 233, 236, 240, 263, 264, 272, 275, 291, 308, 326, 345, 359, 360, 372, 380, 386, 404, 406, 408, 411, 419, 422, 426, 447, 530, 564, 580, 610, 611, 618, 644, 645, 658, 659, 670, 676, 703, 796, 802, 807, 818, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858, 879, 883, 954, 995, 999, 1004, 1005, 1009, 1014, 1029, 1037, 1038, 1039], "onetoonefeaturemixin": [1, 374, 428], "onevsoneclassifi": [1, 281, 395, 833, 834, 1030, 1032, 1033, 1035, 1036, 1038, 1041, 1043, 1046], "onevsrestclassifi": [1, 201, 221, 241, 271, 273, 281, 395, 402, 658, 659, 832, 834, 904, 1030, 1031, 1033, 1035, 1036, 1042, 1043, 1046, 1047, 1049], "ong": 708, "ongari": 1046, "onggo": 1045, "ongo": [319, 373, 387], "onli": [1, 25, 30, 43, 46, 50, 53, 54, 58, 61, 62, 63, 64, 66, 69, 70, 72, 74, 75, 82, 86, 88, 91, 99, 102, 103, 104, 106, 107, 112, 123, 124, 126, 130, 134, 136, 141, 142, 143, 145, 153, 154, 158, 159, 160, 163, 167, 169, 174, 176, 179, 182, 183, 184, 188, 194, 198, 205, 207, 208, 210, 213, 214, 215, 224, 226, 227, 233, 235, 237, 239, 240, 244, 247, 249, 250, 251, 254, 255, 258, 260, 262, 264, 266, 267, 270, 271, 272, 273, 275, 276, 277, 278, 281, 283, 284, 290, 292, 295, 297, 301, 304, 305, 309, 310, 315, 316, 325, 326, 328, 332, 333, 336, 340, 341, 343, 344, 347, 348, 349, 351, 352, 354, 355, 359, 360, 361, 365, 366, 367, 369, 370, 372, 374, 376, 377, 378, 379, 380, 381, 384, 386, 387, 390, 395, 398, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 419, 420, 424, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 456, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 479, 480, 481, 482, 486, 487, 488, 490, 492, 494, 495, 498, 499, 500, 501, 502, 503, 506, 507, 508, 510, 514, 517, 521, 522, 526, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 580, 581, 582, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 699, 707, 709, 712, 713, 726, 729, 730, 734, 736, 737, 738, 741, 743, 756, 758, 760, 774, 778, 779, 780, 781, 783, 784, 787, 788, 792, 793, 794, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 809, 814, 818, 821, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 920, 921, 923, 924, 925, 926, 928, 929, 930, 931, 934, 935, 936, 939, 948, 950, 954, 956, 961, 966, 987, 988, 989, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1013, 1014, 1015, 1018, 1019, 1023, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "onlin": [0, 1, 44, 45, 47, 54, 71, 84, 120, 123, 180, 220, 242, 258, 322, 361, 367, 371, 377, 384, 386, 404, 409, 412, 414, 439, 443, 444, 446, 493, 529, 534, 535, 536, 537, 543, 544, 581, 583, 666, 667, 676, 678, 839, 840, 841, 842, 843, 846, 847, 852, 854, 855, 873, 874, 884, 904, 905, 991, 995, 1003, 1005, 1017, 1020, 1021, 1023, 1025, 1029, 1033, 1034, 1036, 1044], "onlineldavb": 534, "only_non_neg": 1042, "only_physical_cor": 140, "onnx": [1018, 1019, 1025], "onnxruntim": 398, "onto": [116, 227, 228, 238, 304, 384, 409, 412, 416, 443, 445, 458, 531, 537, 541, 627, 628, 630, 688, 993, 997, 1002], "onward": [878, 1033, 1047, 1048], "onx": 398, "oob": [133, 145, 180, 411, 513, 555, 556, 562, 563, 1020, 1031, 1042, 1046], "oob_best_it": 145, "oob_color": 145, "oob_decision_function_": [553, 555, 562], "oob_error": 138, "oob_improvement_": [145, 411, 557, 558, 1031], "oob_lin": 145, "oob_prediction_": [554, 556, 563], "oob_scor": [63, 138, 141, 154, 156, 185, 245, 276, 320, 411, 553, 554, 555, 556, 562, 563, 1034, 1036], "oob_score_": [138, 553, 554, 555, 556, 557, 558, 562, 563, 1031, 1045], "oob_scores_": [557, 558, 1045], "op": [376, 423, 609, 658, 659, 666, 667, 668, 676, 677, 678, 861, 862, 904, 1009], "opaqu": 1007, "open": [0, 47, 51, 55, 228, 366, 367, 370, 371, 372, 376, 378, 384, 385, 387, 398, 405, 412, 484, 494, 506, 507, 989, 1017, 1018, 1022, 1023, 1032, 1036, 1037, 1039, 1045], "open_pric": 51, "openbla": [359, 360, 380, 384, 1042, 1046, 1047], "openblas_num_thread": 360, "opencv": 367, "opengraph": [372, 390, 397], "openml": [1, 43, 52, 103, 154, 172, 183, 207, 214, 222, 224, 234, 258, 278, 281, 283, 301, 365, 390, 494, 1025, 1037, 1039, 1042], "openml100": 366, "openmp": [314, 370, 375, 384, 386, 404, 411, 1040, 1042, 1045, 1047], "opentsn": 692, "oper": [1, 19, 53, 163, 175, 180, 234, 239, 246, 256, 258, 259, 261, 271, 322, 349, 359, 360, 369, 370, 372, 375, 378, 384, 386, 387, 390, 398, 400, 403, 408, 409, 411, 412, 413, 417, 439, 445, 458, 465, 472, 479, 480, 481, 482, 502, 531, 532, 539, 549, 550, 564, 570, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 616, 621, 624, 630, 635, 643, 658, 689, 693, 702, 706, 707, 708, 727, 774, 781, 782, 788, 789, 819, 827, 830, 833, 844, 845, 867, 871, 876, 887, 888, 902, 909, 912, 950, 971, 995, 1002, 1009, 1014, 1018, 1020, 1023, 1033, 1035, 1036, 1037, 1039, 1040, 1045, 1048, 1049], "operand": 414, "operation": [224, 1023], "operatornam": [409, 741, 995, 999, 1015], "opinion": 387, "opitz": 999, "opportun": [532, 1013], "oppos": [100, 240, 374, 400, 404, 900, 1002, 1014, 1029, 1047], "opposit": [62, 86, 100, 125, 183, 184, 198, 258, 271, 386, 402, 406, 408, 413, 440, 444, 446, 466, 536, 538, 545, 561, 712, 730, 850, 908, 1029], "opposite_lof_scor": 850, "opt": [370, 374], "opta": 897, "optic": [1, 71, 79, 180, 317, 328, 365, 415, 441, 443, 452, 453, 454, 500, 1020, 1024, 1025, 1038, 1042, 1043, 1044, 1045, 1046, 1047], "optim": [46, 52, 53, 64, 86, 87, 90, 93, 104, 109, 110, 120, 144, 145, 147, 149, 162, 163, 167, 168, 171, 172, 173, 174, 175, 194, 196, 198, 201, 202, 214, 222, 239, 243, 258, 262, 263, 269, 272, 277, 278, 281, 283, 288, 302, 304, 309, 317, 321, 328, 338, 343, 347, 348, 349, 355, 359, 366, 369, 372, 374, 375, 384, 386, 390, 399, 401, 403, 404, 406, 408, 409, 411, 413, 414, 415, 441, 444, 445, 446, 447, 449, 454, 458, 459, 469, 470, 476, 529, 532, 533, 535, 537, 541, 555, 556, 557, 558, 572, 610, 611, 619, 620, 635, 638, 640, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 672, 673, 674, 676, 677, 678, 680, 681, 682, 683, 684, 687, 690, 692, 694, 695, 701, 719, 723, 730, 799, 800, 814, 822, 846, 847, 848, 850, 852, 853, 854, 855, 856, 861, 862, 880, 892, 896, 897, 904, 905, 906, 907, 908, 909, 910, 991, 992, 993, 994, 995, 996, 999, 1000, 1001, 1002, 1003, 1004, 1013, 1014, 1015, 1018, 1023, 1025, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1043, 1044, 1045, 1049], "optima": 414, "optimis": [374, 404, 1002, 1032, 1042, 1044], "optimist": [52, 198, 269, 347, 355, 707, 995, 999], "optimum": [94, 173, 183, 188, 258, 277, 403, 409, 469, 995, 998], "option": [0, 1, 43, 80, 85, 127, 140, 147, 173, 179, 192, 194, 208, 243, 258, 267, 273, 314, 321, 347, 351, 355, 361, 366, 367, 368, 370, 372, 373, 374, 376, 377, 378, 380, 381, 384, 386, 387, 390, 398, 404, 405, 407, 408, 409, 411, 412, 415, 428, 434, 438, 439, 440, 441, 442, 443, 444, 445, 446, 449, 456, 458, 459, 460, 461, 462, 465, 479, 480, 481, 482, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 580, 581, 582, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 610, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 687, 688, 689, 690, 692, 694, 695, 709, 711, 713, 717, 729, 730, 735, 736, 737, 757, 758, 759, 764, 766, 767, 771, 774, 775, 776, 777, 778, 781, 783, 784, 787, 792, 793, 795, 799, 801, 802, 803, 804, 806, 807, 809, 818, 822, 823, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 893, 896, 897, 899, 900, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 918, 937, 984, 988, 989, 995, 998, 999, 1002, 1009, 1012, 1014, 1015, 1019, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "option_context": 224, "ora": 1042, "oracl": [1, 69, 207, 224, 417, 466, 467, 470, 471, 472, 473, 993, 1029], "orallo": 999, "orang": [46, 48, 86, 111, 118, 121, 122, 127, 134, 146, 148, 149, 151, 174, 179, 196, 198, 205, 216, 241, 252, 258, 263, 295, 314, 320, 323, 392, 1000, 1046], "orazbayev": 1043, "orbit": [347, 348], "order": [1, 43, 53, 58, 61, 64, 81, 88, 97, 98, 104, 109, 129, 142, 143, 147, 149, 155, 172, 182, 183, 186, 188, 198, 202, 207, 208, 213, 220, 224, 228, 237, 240, 243, 245, 247, 251, 259, 262, 264, 271, 283, 302, 304, 309, 310, 311, 315, 316, 321, 323, 343, 347, 349, 355, 359, 360, 367, 372, 373, 374, 377, 378, 381, 386, 390, 391, 395, 398, 404, 405, 406, 408, 409, 410, 411, 412, 414, 416, 434, 437, 440, 443, 444, 446, 447, 452, 453, 454, 456, 461, 485, 486, 487, 493, 495, 513, 532, 533, 537, 538, 539, 541, 545, 549, 551, 553, 555, 557, 562, 565, 580, 587, 590, 592, 593, 596, 605, 606, 607, 610, 622, 627, 631, 640, 658, 659, 665, 676, 685, 686, 688, 689, 693, 697, 699, 700, 702, 704, 709, 712, 713, 716, 718, 722, 726, 729, 730, 738, 740, 741, 742, 754, 756, 778, 782, 783, 784, 787, 788, 789, 794, 799, 800, 801, 803, 804, 805, 807, 811, 814, 818, 819, 821, 822, 825, 832, 833, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 851, 854, 861, 864, 875, 877, 878, 879, 883, 884, 885, 888, 889, 890, 892, 893, 894, 895, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 930, 931, 936, 948, 964, 968, 989, 995, 996, 999, 1000, 1002, 1003, 1009, 1012, 1013, 1014, 1015, 1019, 1022, 1029, 1031, 1032, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "order_": [835, 838], "order_centroid": 348, "ordereddict": 138, "ordering_": [98, 404, 447, 452, 453, 454], "ordin": [43, 86, 103, 154, 243, 307, 310, 311, 315, 318, 366, 386, 411, 494, 565, 869, 872, 877, 878, 885, 995, 996, 1009, 1019, 1037, 1043], "ordinal_encod": [143, 243], "ordinal_result": 143, "ordinalencod": [1, 143, 154, 184, 185, 207, 243, 310, 318, 366, 386, 580, 840, 872, 877, 885, 989, 1001, 1009, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1046], "ordinari": [1, 137, 167, 180, 189, 190, 193, 194, 199, 204, 207, 209, 210, 212, 223, 311, 316, 499, 635, 646, 652, 654, 655, 656, 657, 672, 678, 682, 683, 687, 750, 785, 830, 1013, 1020, 1021, 1025], "ordinarili": [384, 386], "ordowski": 999, "oregon": 310, "oren": 1037, "oresti": 1038, "orfano": [1042, 1043, 1044, 1045, 1046, 1049], "org": [43, 51, 52, 55, 61, 63, 103, 104, 139, 141, 150, 151, 154, 155, 156, 160, 172, 183, 184, 185, 188, 192, 207, 214, 222, 224, 234, 235, 236, 240, 244, 245, 246, 247, 254, 258, 262, 263, 264, 265, 271, 276, 278, 283, 301, 302, 310, 314, 315, 317, 318, 320, 323, 327, 353, 354, 360, 365, 370, 372, 375, 378, 380, 387, 395, 408, 594, 636, 668, 671, 676, 695, 705, 769, 846, 847, 852, 853, 854, 855, 882, 898, 912, 913, 941, 943, 995, 999, 1015, 1025, 1037, 1041], "organ": [0, 50, 52, 102, 111, 347, 366, 371, 372, 387, 852, 957, 1018], "orgera": 1048, "ori": 1035, "orient": [66, 120, 183, 226, 229, 304, 386, 916, 996], "orig": [53, 291], "orig_coin": [80, 81], "orig_data_ax": 125, "origin": [43, 44, 53, 58, 59, 63, 66, 80, 81, 84, 89, 91, 106, 107, 120, 122, 123, 126, 129, 149, 152, 159, 160, 163, 167, 169, 171, 172, 178, 179, 184, 188, 196, 198, 211, 226, 227, 228, 229, 230, 231, 237, 238, 239, 243, 255, 258, 261, 267, 277, 287, 292, 302, 305, 309, 319, 322, 326, 340, 347, 349, 355, 360, 367, 369, 371, 372, 374, 376, 377, 384, 386, 398, 401, 404, 405, 409, 411, 412, 414, 415, 416, 417, 429, 434, 438, 440, 441, 442, 443, 444, 446, 447, 456, 460, 461, 462, 472, 479, 480, 481, 491, 492, 493, 499, 517, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 571, 575, 580, 583, 589, 593, 606, 607, 609, 610, 611, 614, 630, 632, 635, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 690, 692, 696, 701, 709, 728, 763, 769, 799, 801, 802, 807, 809, 818, 822, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 849, 850, 851, 854, 855, 861, 862, 864, 867, 868, 869, 870, 871, 872, 873, 876, 877, 878, 880, 881, 882, 883, 884, 893, 896, 897, 898, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 928, 930, 931, 935, 936, 959, 969, 972, 992, 993, 995, 996, 998, 999, 1002, 1005, 1010, 1011, 1012, 1013, 1016, 1018, 1023, 1032, 1033, 1035, 1037, 1039, 1041, 1043, 1045, 1049], "original_param": 148, "original_sklearn_vers": [398, 575], "original_space_centroid": 348, "orii": 1031, "orphan": [445, 458, 1029], "orr": [1003, 1013], "orr\u00f9": 1032, "orthogon": [1, 37, 87, 121, 122, 123, 129, 180, 189, 409, 524, 529, 535, 537, 540, 541, 546, 664, 665, 685, 686, 1011, 1020, 1021, 1025, 1029], "orthogonal_mp": [1, 546, 664, 665, 686, 995], "orthogonal_mp_gram": [1, 664, 665, 685, 1043], "orthogonalmatchingpursuit": [1, 206, 665, 685, 686, 995, 1000, 1029, 1031, 1034, 1037, 1042, 1047], "orthogonalmatchingpursuitcv": [1, 206, 395, 664, 1031, 1042, 1046], "orthonorm": [1, 45, 381, 947, 991], "orthotrop": 1002, "ortiz": [1039, 1045], "os": 1047, "osa": 1037, "osaid": 1037, "osborn": [1032, 1033], "oscar": [1032, 1036], "oscil": [151, 184, 212, 404, 437], "oscillatori": [208, 1009], "osei": 1043, "osendorf": [1029, 1030], "oserror": [390, 485, 486, 487, 488, 490, 491, 492, 493, 495, 496], "osindero": [860, 1004], "osman": [1038, 1044], "osx": 359, "other": [0, 1, 25, 43, 47, 51, 52, 61, 64, 66, 67, 69, 72, 75, 79, 85, 90, 99, 101, 103, 104, 116, 122, 123, 125, 127, 137, 139, 140, 142, 143, 146, 147, 149, 150, 155, 158, 178, 179, 180, 182, 183, 184, 185, 188, 190, 197, 201, 202, 207, 211, 224, 226, 227, 228, 230, 233, 234, 235, 237, 239, 240, 243, 244, 245, 251, 254, 258, 259, 261, 263, 264, 265, 266, 273, 274, 278, 281, 289, 290, 291, 303, 304, 308, 309, 311, 313, 314, 316, 320, 321, 323, 325, 336, 340, 342, 345, 347, 348, 351, 353, 354, 355, 359, 364, 365, 367, 368, 369, 370, 372, 374, 376, 377, 378, 380, 381, 385, 386, 387, 390, 395, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 434, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 449, 454, 461, 462, 466, 479, 480, 481, 485, 494, 495, 501, 531, 532, 533, 534, 536, 539, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 580, 587, 588, 589, 590, 596, 601, 609, 610, 611, 612, 613, 620, 627, 628, 630, 631, 635, 639, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 687, 690, 692, 696, 699, 704, 712, 718, 763, 774, 778, 785, 792, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 814, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 849, 851, 854, 855, 859, 861, 862, 864, 865, 867, 869, 870, 871, 873, 874, 876, 877, 878, 880, 881, 882, 883, 884, 885, 892, 899, 900, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 941, 943, 957, 987, 988, 989, 991, 992, 993, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1012, 1013, 1014, 1015, 1019, 1020, 1021, 1022, 1023, 1025, 1030, 1032, 1033, 1035, 1036, 1037, 1038, 1042, 1043, 1044, 1045, 1046, 1048], "other_parti": 258, "other_payment_plan": 258, "other_scor": 377, "otherwis": [50, 89, 95, 136, 176, 179, 192, 209, 214, 258, 263, 297, 340, 343, 355, 361, 374, 376, 378, 386, 395, 404, 406, 408, 412, 414, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 442, 443, 448, 450, 451, 461, 464, 479, 480, 481, 482, 494, 525, 533, 534, 536, 538, 539, 545, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 587, 589, 590, 596, 601, 610, 611, 614, 631, 632, 633, 644, 645, 646, 652, 658, 659, 660, 662, 665, 666, 667, 668, 673, 675, 676, 677, 678, 685, 686, 690, 692, 696, 697, 698, 700, 702, 703, 707, 709, 713, 714, 716, 724, 726, 727, 728, 729, 730, 738, 741, 752, 754, 755, 756, 766, 774, 778, 781, 782, 783, 784, 785, 787, 788, 789, 792, 793, 794, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 814, 818, 819, 822, 823, 828, 833, 844, 845, 846, 847, 848, 849, 850, 852, 853, 854, 859, 861, 862, 868, 869, 871, 875, 884, 885, 886, 889, 890, 891, 893, 894, 895, 904, 905, 906, 907, 908, 909, 910, 917, 919, 930, 931, 933, 947, 948, 959, 961, 982, 984, 987, 994, 995, 996, 999, 1002, 1003, 1005, 1006, 1009, 1011, 1013, 1014, 1018, 1023, 1031, 1037, 1038, 1039, 1042, 1045], "ott": 1033, "oudshoorn": [627, 989], "ought": 359, "our": [0, 43, 44, 46, 50, 51, 52, 77, 86, 89, 102, 103, 111, 112, 116, 120, 121, 134, 135, 141, 143, 144, 146, 147, 158, 163, 167, 172, 173, 174, 178, 180, 182, 183, 184, 185, 186, 207, 211, 224, 228, 230, 240, 257, 258, 263, 264, 267, 270, 271, 277, 287, 301, 304, 310, 314, 316, 321, 322, 330, 333, 339, 341, 343, 347, 348, 349, 355, 360, 371, 374, 375, 377, 380, 384, 385, 386, 387, 395, 400, 404, 408, 411, 412, 414, 415, 441, 447, 561, 644, 692, 708, 720, 726, 738, 756, 846, 847, 848, 850, 852, 854, 855, 856, 988, 989, 995, 996, 999, 1005, 1009, 1012, 1013, 1014, 1019, 1022, 1023, 1036, 1037, 1039, 1040, 1043, 1044, 1046, 1048, 1049], "our_rand_r": 1038, "oura": [1042, 1043, 1044], "ourselv": 1023, "ouss1508": [1044, 1045], "oussama": 1049, "out": [0, 1, 42, 43, 46, 48, 49, 51, 52, 54, 55, 63, 75, 83, 88, 102, 103, 127, 133, 138, 140, 141, 147, 148, 180, 182, 183, 184, 185, 194, 207, 209, 211, 214, 224, 243, 249, 251, 258, 262, 264, 267, 272, 276, 277, 281, 283, 309, 310, 316, 322, 328, 330, 332, 333, 336, 343, 347, 358, 367, 369, 370, 372, 374, 375, 376, 378, 384, 386, 392, 398, 404, 407, 409, 411, 412, 414, 420, 430, 431, 432, 433, 439, 440, 442, 443, 444, 446, 451, 469, 479, 480, 481, 482, 497, 513, 514, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 547, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 587, 588, 590, 603, 606, 607, 634, 639, 640, 641, 642, 651, 655, 666, 668, 673, 675, 676, 688, 689, 692, 701, 727, 741, 800, 802, 803, 804, 805, 807, 808, 809, 810, 814, 830, 839, 840, 841, 842, 843, 846, 848, 853, 854, 856, 860, 861, 862, 870, 874, 881, 893, 896, 897, 919, 962, 964, 968, 987, 989, 993, 994, 998, 999, 1000, 1002, 1007, 1009, 1019, 1020, 1021, 1023, 1025, 1029, 1031, 1033, 1035, 1037, 1038, 1041, 1042, 1045, 1047], "out_activation_": [861, 862], "out_bounds_predict": 209, "out_fil": [916, 1015], "out_of_bound": [236, 635], "out_of_cluster_doc": 57, "outcom": [43, 140, 183, 273, 277, 386, 392, 411, 567, 658, 709, 742, 794, 832, 899, 900, 901, 906, 909, 995, 999, 1015, 1022, 1033, 1037, 1039], "outdat": 375, "outer": [58, 125, 269, 327, 448, 512, 640, 650, 651, 654, 991, 1030], "outer_cv": [269, 320], "outer_numb": 327, "outermost": 340, "outli": [48, 111, 386, 466, 471, 995, 1005], "outlier": [1, 42, 70, 79, 87, 111, 112, 146, 150, 167, 180, 189, 205, 209, 210, 211, 212, 213, 220, 232, 285, 303, 308, 311, 335, 367, 386, 404, 406, 411, 426, 432, 443, 461, 463, 466, 467, 468, 469, 470, 471, 472, 473, 487, 488, 490, 494, 508, 510, 520, 522, 561, 631, 639, 649, 670, 671, 672, 676, 677, 678, 679, 692, 702, 830, 850, 854, 865, 873, 874, 876, 877, 878, 880, 881, 882, 883, 884, 889, 890, 891, 892, 893, 894, 895, 907, 908, 910, 999, 1013, 1014, 1018, 1020, 1021, 1024, 1025, 1029, 1034, 1035, 1037, 1048], "outlier_detector": [243, 426, 923], "outlier_label": [854, 1039], "outlier_label_": 854, "outlier_mask": 210, "outlier_plot": 111, "outliermixin": [1, 1046, 1048], "outliers_": 649, "outliers_cov": 111, "outliers_fract": 233, "outliers_index": 112, "outliers_offset": 112, "outlin": [99, 142, 372, 374, 386, 387, 389, 404, 988, 1025], "outlying": 1005, "outperform": [109, 116, 149, 154, 205, 281, 309, 384, 408, 411, 449, 459, 1001, 1009], "output": [1, 30, 31, 51, 54, 62, 64, 72, 86, 92, 123, 133, 134, 137, 142, 154, 155, 156, 167, 175, 178, 180, 183, 232, 240, 247, 252, 257, 258, 262, 264, 267, 271, 273, 274, 278, 281, 284, 305, 308, 310, 311, 313, 316, 317, 319, 321, 348, 349, 354, 365, 366, 367, 369, 372, 374, 378, 380, 382, 384, 385, 386, 402, 403, 404, 405, 407, 408, 411, 412, 413, 414, 420, 425, 428, 434, 438, 439, 440, 442, 443, 444, 446, 447, 449, 456, 457, 459, 460, 461, 462, 463, 464, 465, 479, 480, 481, 482, 485, 488, 490, 491, 492, 493, 494, 495, 501, 503, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 611, 627, 628, 629, 630, 631, 632, 633, 635, 638, 639, 640, 641, 642, 646, 647, 650, 652, 653, 654, 657, 658, 660, 661, 662, 663, 666, 667, 668, 671, 673, 674, 676, 678, 679, 681, 682, 683, 684, 688, 689, 690, 692, 694, 696, 699, 700, 713, 714, 721, 723, 724, 726, 728, 735, 745, 746, 748, 750, 751, 752, 753, 754, 756, 761, 767, 772, 785, 788, 790, 791, 797, 798, 799, 801, 802, 803, 804, 805, 806, 812, 814, 815, 816, 817, 818, 819, 820, 822, 825, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 847, 848, 849, 853, 854, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 892, 893, 896, 897, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 920, 924, 925, 930, 931, 933, 936, 948, 949, 956, 959, 967, 985, 988, 989, 991, 993, 995, 996, 999, 1000, 1001, 1002, 1003, 1006, 1009, 1014, 1020, 1021, 1025, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "output_dict": [713, 1037, 1041], "output_distribut": [107, 184, 304, 308, 405, 880, 881, 892, 893, 1009], "output_fil": 484, "output_indices_": [461, 1042], "output_label": 327, "output_label_arrai": 327, "outputcodeclassifi": [1, 281, 395, 832, 833, 1036, 1041, 1045, 1046], "outputs_2d_": [846, 854, 1039], "outreach": 387, "outsid": [45, 48, 57, 142, 208, 209, 236, 247, 398, 412, 443, 635, 883, 1005, 1037], "outward": 304, "outweigh": 1033, "ouvert": [758, 759, 997], "ova": [215, 666, 668, 676, 1013], "ovb": [182, 183], "over": [0, 1, 30, 43, 46, 47, 48, 58, 61, 63, 64, 67, 72, 83, 88, 89, 104, 105, 106, 120, 137, 140, 144, 149, 150, 158, 162, 167, 175, 178, 182, 184, 193, 201, 203, 207, 214, 224, 233, 243, 258, 263, 264, 265, 267, 269, 271, 272, 273, 276, 289, 297, 299, 300, 306, 316, 317, 319, 325, 347, 348, 359, 360, 361, 367, 368, 371, 372, 374, 378, 385, 386, 400, 402, 404, 405, 408, 409, 410, 411, 412, 414, 416, 443, 446, 461, 469, 507, 531, 532, 534, 535, 536, 537, 544, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 580, 581, 587, 588, 590, 593, 601, 630, 632, 633, 634, 644, 645, 646, 647, 652, 653, 658, 660, 661, 662, 663, 665, 666, 667, 668, 676, 677, 678, 685, 686, 697, 716, 718, 739, 763, 788, 793, 797, 800, 803, 804, 806, 811, 812, 814, 823, 825, 826, 827, 828, 829, 831, 860, 861, 862, 863, 879, 883, 904, 912, 914, 921, 927, 936, 941, 942, 943, 988, 995, 996, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1012, 1013, 1014, 1015, 1018, 1019, 1023, 1029, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1049], "overal": [43, 78, 134, 137, 140, 144, 154, 172, 201, 224, 258, 261, 273, 284, 309, 310, 348, 359, 371, 372, 378, 401, 402, 411, 444, 446, 461, 468, 469, 475, 547, 851, 885, 996, 999, 1015, 1023, 1039], "overallqu": 154, "overcom": [141, 211, 359, 412], "overcomplet": 409, "overconstrain": 149, "overestim": [127, 355, 408], "overfit": [43, 64, 139, 144, 146, 149, 180, 184, 185, 186, 190, 205, 208, 211, 233, 251, 256, 258, 259, 263, 265, 269, 277, 278, 299, 305, 306, 308, 309, 310, 311, 336, 343, 351, 353, 367, 386, 402, 403, 408, 411, 434, 485, 486, 559, 560, 565, 566, 657, 800, 803, 804, 814, 822, 826, 827, 861, 862, 864, 879, 883, 994, 1003, 1005, 1007, 1009, 1015, 1020, 1023, 1032], "overflow": [371, 380, 384, 400, 1022, 1032, 1036, 1037, 1038, 1039, 1040, 1042, 1049], "overflowerror": 1039, "overhead": [47, 284, 360, 361, 372, 378, 381, 384, 386, 411, 438, 442, 446, 532, 699, 836, 837, 839, 840, 841, 842, 843, 844, 845, 1001, 1002, 1032, 1037, 1038, 1041], "overlai": [380, 632], "overlaid": 1006, "overlap": [1, 51, 52, 72, 88, 126, 147, 162, 201, 251, 348, 401, 404, 408, 411, 412, 586, 792, 793, 801, 802, 805, 807, 808, 809, 810, 817, 818, 820, 996, 1009, 1035], "overli": [52, 62, 63, 198, 269, 355, 409, 999], "overlin": [264, 401], "overparameter": 995, "overrid": [184, 322, 374, 412, 443, 447, 454, 540, 546, 587, 588, 590, 592, 593, 596, 632, 633, 656, 664, 685, 686, 806, 823, 846, 847, 848, 850, 852, 854, 855, 856, 1029, 1037, 1039, 1043, 1045], "overridden": [374, 386, 414, 540, 546, 616, 621, 624, 632, 633, 694, 1037, 1038, 1045], "oversampl": [542, 1029], "oversc": 1044, "overset": [409, 1006], "overst": 183, "oversubscript": [778, 1043], "overview": [107, 180, 269, 280, 283, 351, 373, 375, 385, 386, 399, 400, 494, 734, 743, 800, 816, 827, 832, 833, 834, 912, 1001, 1013, 1020, 1024, 1025], "overwhelm": 372, "overwrit": [149, 443, 494, 631, 1029, 1040, 1045, 1046], "overwrite_": 1029, "overwritten": [439, 530, 531, 532, 534, 539, 546, 606, 607, 644, 645, 646, 647, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 672, 674, 679, 681, 682, 683, 684, 686, 1042], "ovo": [281, 313, 788, 832, 906, 909, 999, 1000, 1014], "ovo_tpr": 273, "ovo_tre": 281, "ovr": [1, 66, 104, 160, 221, 245, 246, 262, 264, 271, 281, 283, 313, 315, 344, 658, 659, 788, 833, 904, 906, 909, 999, 1000, 1014, 1029, 1034, 1035, 1037, 1038, 1039, 1043, 1044], "ovr_jaccard_scor": 283, "ovr_tre": 281, "ow": 93, "owen": [649, 1038, 1039], "own": [1, 15, 52, 70, 140, 224, 240, 254, 284, 286, 327, 348, 360, 366, 375, 377, 380, 381, 390, 403, 404, 416, 420, 437, 451, 531, 555, 562, 646, 797, 798, 846, 847, 848, 850, 852, 854, 855, 856, 878, 912, 914, 936, 941, 995, 999, 1001, 1002, 1005, 1009, 1014, 1018, 1023, 1036, 1037, 1039, 1046, 1048, 1049], "own_telephon": 258, "owner": [240, 367, 369, 956, 957], "ownership": 374, "oyamada": 1034, "oyindamola": 1044, "oywa": 1039, "ozga": 1037, "ozsvald": 1031, "p": [0, 1, 50, 53, 61, 63, 64, 76, 94, 111, 112, 115, 118, 127, 145, 159, 163, 170, 188, 218, 223, 224, 226, 228, 237, 264, 270, 271, 297, 366, 367, 369, 377, 380, 401, 402, 403, 404, 406, 407, 409, 411, 413, 414, 415, 417, 439, 441, 443, 444, 447, 452, 453, 454, 466, 468, 471, 472, 475, 496, 526, 532, 536, 538, 539, 545, 547, 548, 549, 551, 553, 554, 555, 556, 557, 559, 562, 563, 564, 589, 591, 592, 593, 594, 595, 597, 598, 599, 603, 604, 605, 606, 607, 608, 615, 616, 627, 640, 643, 649, 688, 690, 692, 694, 699, 705, 709, 715, 724, 741, 752, 786, 788, 802, 808, 809, 810, 813, 829, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 854, 855, 856, 857, 858, 860, 864, 865, 880, 892, 898, 914, 915, 916, 992, 993, 995, 996, 997, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1009, 1013, 1014, 1029, 1030, 1032, 1035, 1037, 1044, 1045, 1046, 1048, 1049], "p0": 63, "p1": 63, "p1d": 63, "p2": [63, 224], "p5": 948, "p592": 138, "p_": [159, 1002, 1015], "p_c": [118, 521], "p_e": 716, "p_grid": 269, "p_i": 1002, "p_k": [271, 999], "p_n": [271, 707, 999], "p_o": 716, "p_val": 264, "p_val_uncorrect": 264, "p_valu": [603, 604, 605], "p_w": 118, "p_w_c": [118, 521], "pa": [666, 667, 901, 995, 999, 1012], "pab": [1044, 1045], "pablo": [1039, 1042, 1043], "pabloduque0": 1042, "pace": 367, "pacha": 1037, "pacif": 264, "pack": [381, 1037], "packag": [0, 80, 86, 178, 240, 284, 323, 360, 365, 366, 369, 370, 372, 373, 374, 376, 380, 381, 384, 386, 390, 391, 398, 406, 411, 412, 449, 475, 646, 647, 989, 995, 998, 1002, 1009, 1015, 1023, 1029, 1035, 1037, 1038, 1039], "packet": 359, "pacman": 390, "paczuski": [1037, 1038], "pad": [120, 142, 178, 184, 226, 243, 347, 352, 412, 587, 588, 590], "page": [0, 51, 55, 63, 103, 104, 139, 141, 150, 151, 154, 155, 156, 160, 163, 172, 183, 184, 185, 192, 226, 234, 235, 236, 240, 244, 245, 246, 247, 254, 258, 262, 263, 264, 265, 271, 276, 278, 302, 310, 314, 315, 317, 318, 320, 322, 323, 327, 353, 354, 359, 367, 369, 372, 374, 376, 378, 380, 384, 387, 404, 406, 470, 514, 515, 516, 628, 644, 834, 899, 948, 989, 995, 999, 1000, 1027, 1029, 1033, 1034], "page_links_en": 55, "page_links_filenam": 55, "page_links_url": 55, "pagerank": [55, 948], "pagh": [188, 991], "pai": [183, 224, 372], "paid": [258, 995], "pain": 384, "paint": [916, 918], "pair": [1, 49, 52, 72, 79, 91, 97, 125, 136, 138, 142, 146, 171, 175, 191, 215, 218, 224, 237, 259, 264, 271, 273, 330, 332, 334, 336, 337, 338, 340, 348, 352, 367, 384, 386, 401, 402, 405, 408, 412, 414, 434, 437, 438, 442, 447, 454, 460, 468, 469, 475, 491, 506, 507, 581, 591, 594, 595, 597, 598, 599, 610, 613, 614, 615, 617, 619, 620, 622, 623, 625, 627, 632, 633, 643, 645, 692, 699, 700, 705, 706, 707, 715, 731, 740, 758, 759, 763, 766, 769, 770, 771, 772, 773, 774, 776, 778, 779, 780, 781, 782, 786, 832, 844, 845, 919, 999, 1000, 1001, 1002, 1009, 1015, 1029, 1041, 1042, 1044, 1045, 1046], "pair_confusion_matrix": [1, 404, 1041], "pair_list": 273, "pair_scor": 273, "paired_cosine_dist": [1, 400, 1048], "paired_dist": [1, 763, 769, 778, 1033], "paired_euclidean_dist": [1, 400, 1048], "paired_manhattan_dist": 1, "pairidx": 352, "pairplot": [126, 182, 183], "pairwis": [1, 37, 97, 182, 183, 229, 237, 243, 273, 313, 317, 318, 347, 359, 364, 386, 400, 404, 409, 414, 438, 443, 451, 455, 458, 459, 465, 484, 506, 507, 533, 559, 560, 620, 638, 639, 640, 641, 642, 643, 688, 690, 692, 694, 696, 699, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 788, 792, 793, 832, 848, 852, 856, 870, 902, 921, 991, 996, 999, 1002, 1011, 1014, 1025, 1029, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1043, 1044, 1045, 1046, 1047, 1048], "pairwise_bayesian": 264, "pairwise_bayesian_df": 264, "pairwise_comp_df": 264, "pairwise_dist": [1, 75, 321, 386, 404, 415, 441, 443, 447, 454, 688, 696, 762, 771, 779, 780, 792, 793, 848, 850, 852, 856, 997, 1029, 1033, 1035, 1037, 1038, 1040, 1041, 1046, 1047, 1048], "pairwise_dist_chunk_s": [465, 902], "pairwise_distance_funct": [692, 696, 778, 781, 1002], "pairwise_distances_argmin": [1, 97, 317, 780, 1037, 1043, 1044, 1045, 1046], "pairwise_distances_argmin_min": [1, 317, 779, 1032, 1037, 1043, 1044, 1045, 1046], "pairwise_distances_chunk": [1, 359, 778, 1037, 1040, 1046], "pairwise_indices_": 832, "pairwise_kernel": [1, 386, 414, 449, 459, 643, 765, 870, 997, 1029, 1036, 1046], "pairwise_kernel_funct": [620, 643, 774], "pairwise_kernels_kwarg": 620, "pairwise_t_test": 264, "pairwisedistancesreduct": 360, "pairwisekernel": [1, 414], "paislei": [409, 534], "pakdd": 404, "pal": [1037, 1043], "palacio": 1042, "palafox": 1029, "palett": [0, 183, 202, 264], "palevioletr": [220, 290, 335], "palioura": [839, 1001], "paliw": 1037, "palladium": 1023, "palmol": 51, "pami": [369, 404, 725], "pamnani": 1037, "pan": [392, 1048], "panchal": 1041, "pancholi": 1036, "panda": [1, 43, 51, 62, 66, 102, 103, 104, 134, 140, 141, 143, 146, 149, 151, 155, 162, 172, 178, 182, 183, 184, 185, 186, 190, 194, 198, 207, 211, 214, 224, 243, 244, 247, 254, 258, 262, 264, 265, 267, 275, 276, 278, 281, 309, 310, 311, 313, 316, 317, 322, 343, 347, 348, 366, 367, 371, 372, 374, 375, 376, 380, 384, 386, 390, 397, 405, 428, 439, 440, 442, 444, 446, 461, 463, 465, 479, 480, 481, 482, 486, 487, 488, 490, 494, 498, 499, 500, 502, 503, 508, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 559, 560, 564, 565, 566, 567, 568, 580, 581, 582, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 627, 628, 629, 630, 632, 633, 635, 638, 639, 640, 641, 642, 688, 689, 692, 800, 803, 804, 814, 830, 848, 853, 856, 860, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 902, 926, 988, 989, 1009, 1018, 1019, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049], "pandata": [1044, 1045], "pandei": [1036, 1041], "panel": [255, 289, 304, 410, 1018], "panga": [1044, 1045], "panico": [1037, 1041], "pankaj": 1041, "pano": 1035, "panpiort8": [1039, 1041], "paolo": [0, 394, 1029, 1033, 1039, 1047], "papadopoulo": [1042, 1043, 1044, 1045, 1046, 1049], "papapanagiot": 1036, "paper": [0, 163, 188, 258, 264, 369, 378, 384, 404, 406, 411, 439, 446, 475, 491, 502, 532, 539, 561, 641, 658, 666, 667, 671, 676, 679, 692, 788, 841, 850, 853, 896, 897, 995, 999, 1002, 1005, 1014, 1029, 1036, 1037], "paper355": 671, "papier": [664, 685, 686], "par": 1009, "paraboloid": 995, "paradi": 1044, "paradigm": 995, "paragraph": [412, 501], "parallel": [1, 53, 138, 140, 142, 184, 209, 265, 314, 315, 317, 341, 354, 358, 364, 370, 372, 373, 375, 384, 386, 405, 408, 415, 416, 434, 441, 443, 445, 446, 447, 449, 454, 455, 458, 461, 464, 469, 529, 531, 532, 533, 535, 537, 539, 540, 541, 543, 544, 546, 553, 554, 555, 556, 561, 562, 563, 564, 565, 566, 567, 568, 588, 593, 601, 606, 607, 610, 632, 634, 639, 658, 688, 689, 690, 691, 692, 693, 694, 781, 800, 803, 804, 806, 811, 814, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 836, 837, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858, 863, 866, 899, 900, 967, 1019, 1025, 1029, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1044, 1045, 1048], "parallel_backend": [360, 415, 434, 441, 443, 445, 447, 449, 454, 455, 458, 461, 464, 469, 529, 533, 534, 535, 537, 540, 541, 543, 544, 546, 553, 554, 555, 556, 561, 562, 563, 564, 565, 566, 567, 568, 593, 601, 606, 607, 610, 632, 634, 639, 647, 651, 653, 655, 657, 658, 659, 661, 663, 665, 666, 668, 676, 679, 688, 689, 690, 691, 692, 693, 694, 774, 778, 781, 800, 803, 804, 806, 814, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 836, 837, 846, 847, 850, 852, 854, 855, 857, 858, 863, 866, 899, 900, 1037, 1047], "parallel_batch_queri": 284, "parallel_coordin": 265, "parallel_help": 1039, "parallelis": [265, 465, 902, 1036], "param": [79, 88, 94, 95, 103, 144, 145, 147, 148, 226, 239, 240, 262, 264, 267, 272, 276, 288, 300, 320, 368, 372, 374, 386, 395, 411, 414, 418, 421, 427, 428, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 461, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 684, 688, 689, 690, 691, 692, 712, 797, 798, 799, 800, 803, 804, 812, 814, 822, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 956, 957, 987, 988, 999, 1035, 1039, 1040, 1042, 1043, 1046, 1047, 1048, 1049], "param1": 374, "param2": 374, "param3": 374, "param_": 140, "param_c": [275, 800], "param_classifier__c": 103, "param_covariance_typ": 254, "param_degre": 800, "param_dist": [272, 276, 315], "param_distribut": [103, 167, 265, 272, 276, 315, 385, 804, 812, 814, 1045], "param_gamma": [275, 800, 814], "param_grid": [43, 45, 103, 104, 105, 106, 140, 146, 239, 245, 254, 258, 262, 263, 264, 268, 269, 272, 275, 281, 286, 306, 320, 322, 336, 386, 395, 405, 411, 730, 742, 800, 803, 811, 812, 988, 999], "param_kernel": [800, 814], "param_list": 812, "param_min_samples_split": 268, "param_n_compon": 254, "param_nam": [140, 265, 277, 319, 343, 395, 823, 831, 994], "param_pca__n_compon": 105, "param_preprocessor__cat__selector__percentil": 103, "param_preprocessor__num__imputer__strategi": 103, "param_rang": [277, 319, 343, 823, 831, 994, 1045], "param_reduce_dim__n_compon": 263, "param_valu": 46, "paramet": [1, 25, 27, 43, 44, 48, 49, 50, 51, 53, 54, 63, 64, 70, 79, 87, 88, 91, 93, 94, 95, 103, 104, 105, 110, 112, 113, 118, 120, 126, 132, 134, 138, 139, 140, 141, 142, 143, 144, 147, 148, 149, 150, 151, 154, 155, 156, 160, 163, 167, 168, 171, 172, 173, 174, 175, 176, 178, 180, 183, 184, 185, 190, 191, 192, 193, 194, 196, 197, 198, 200, 205, 207, 209, 211, 212, 214, 222, 223, 224, 230, 231, 233, 234, 235, 236, 238, 239, 240, 244, 245, 246, 247, 249, 250, 251, 252, 254, 255, 257, 258, 264, 265, 266, 268, 269, 271, 272, 275, 276, 278, 281, 284, 286, 287, 290, 291, 297, 299, 300, 302, 304, 305, 306, 308, 309, 310, 313, 314, 316, 317, 318, 319, 320, 322, 323, 327, 329, 331, 333, 338, 340, 341, 342, 344, 345, 347, 348, 349, 351, 352, 353, 354, 355, 359, 360, 361, 364, 365, 367, 374, 375, 377, 379, 380, 381, 384, 395, 399, 402, 403, 404, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 573, 575, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 939, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 989, 990, 991, 992, 993, 994, 996, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1011, 1012, 1013, 1015, 1018, 1019, 1020, 1025, 1026, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "parameter": [351, 414, 614, 615, 622, 623, 797, 798, 995, 996, 1004, 1009, 1015], "parameter_grid": 265, "parameter_nam": [565, 566, 567, 568], "parametergrid": [1, 800, 1031, 1037], "parameters_str": 88, "parametersampl": [1, 814, 1031, 1037, 1041], "parametr": [1, 48, 61, 62, 113, 236, 288, 308, 316, 402, 405, 410, 411, 434, 549, 551, 635, 685, 696, 880, 892, 941, 943, 995, 998, 1001, 1002, 1009, 1012, 1015, 1037, 1039, 1042], "parametrize_with_check": [1, 313, 322, 374, 386, 941, 942, 1039, 1040, 1048], "params_str": 276, "parcel": [87, 100, 404], "parch": [185, 318], "pardeep": 1041, "pardi": 1049, "parent": [47, 182, 240, 354, 372, 376, 386, 404, 439, 460, 957, 958, 1029, 1046], "parent_hourly_wag": 182, "parenthes": 937, "parenthesi": [76, 372], "paresh": [1038, 1039], "pareto": 209, "pargent": 1009, "pari": [0, 369, 405, 463, 764, 872, 1010, 1043], "pariet": [1023, 1029], "parikh": [1038, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "parimi": [1047, 1048], "paris_in_radian": 764, "paristech": 0, "pariti": 1015, "parizi": 1044, "park": [1034, 1039, 1041, 1044, 1045, 1048, 1049], "parmet": 1046, "parmind": 1036, "parquet": 52, "parra": 1037, "parri": [1034, 1035, 1036], "parrot": 347, "pars": [47, 55, 359, 366, 367, 373, 506], "parse_vers": [147, 186, 313, 670], "parser": [47, 149, 258, 278, 313, 317, 494, 1044, 1045], "parsifalxu": [1047, 1048], "parsimoni": [409, 1009], "parsing_tim": 47, "parson": [1040, 1042], "part": [0, 44, 45, 67, 71, 84, 94, 103, 113, 120, 123, 126, 137, 140, 142, 146, 152, 155, 160, 172, 180, 190, 240, 242, 252, 258, 259, 261, 279, 299, 306, 309, 311, 316, 322, 349, 361, 367, 369, 372, 374, 378, 380, 385, 386, 390, 392, 400, 402, 403, 404, 408, 409, 411, 412, 414, 443, 446, 491, 492, 493, 519, 529, 535, 540, 572, 583, 584, 585, 613, 625, 793, 869, 887, 889, 890, 891, 892, 893, 894, 895, 988, 989, 991, 996, 1000, 1018, 1019, 1020, 1021, 1023, 1025, 1029, 1037, 1038, 1040, 1042, 1044, 1048, 1049], "part3": 408, "part_of_speech": 412, "partev": [1043, 1044, 1045, 1046], "parthiv": 1041, "parti": [224, 281, 319, 360, 371, 374, 384, 398, 802, 809, 1029, 1040, 1045, 1046, 1048], "partial": [1, 43, 47, 51, 83, 114, 115, 122, 151, 180, 181, 224, 232, 315, 318, 369, 372, 386, 389, 400, 406, 407, 409, 411, 414, 461, 479, 480, 481, 482, 494, 499, 532, 534, 539, 560, 588, 632, 633, 657, 788, 830, 832, 833, 860, 861, 862, 865, 877, 878, 881, 884, 913, 996, 1003, 1013, 1020, 1025, 1026, 1030, 1037, 1038, 1042, 1046, 1049], "partial_correl": 51, "partial_depend": [1, 184, 632, 1006, 1030, 1038, 1039, 1040, 1041, 1044, 1045, 1049], "partial_fit": [47, 83, 120, 317, 361, 374, 386, 404, 409, 439, 446, 532, 534, 535, 536, 588, 596, 658, 659, 666, 667, 668, 676, 677, 678, 832, 833, 836, 837, 839, 840, 841, 842, 843, 860, 861, 862, 873, 874, 884, 904, 987, 995, 1001, 1003, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1040, 1042, 1043, 1044, 1045, 1046, 1048], "partial_fit_": 1042, "partial_fit_classifi": 47, "partial_fit_param": [596, 832, 833, 836, 837], "partialdependencedisplai": [1, 149, 151, 184, 244, 314, 315, 316, 318, 320, 379, 633, 1006, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048], "particip": [371, 372, 387, 1023], "particl": 1004, "particular": [43, 50, 53, 64, 66, 72, 74, 75, 93, 103, 109, 118, 125, 128, 143, 146, 149, 150, 171, 178, 183, 184, 207, 209, 214, 238, 258, 265, 267, 273, 284, 293, 297, 304, 313, 314, 317, 322, 348, 349, 355, 359, 360, 366, 367, 370, 371, 372, 374, 376, 377, 378, 380, 381, 385, 386, 387, 390, 404, 405, 408, 409, 411, 412, 413, 414, 443, 466, 470, 494, 542, 561, 608, 653, 658, 663, 672, 674, 684, 687, 712, 728, 785, 836, 929, 931, 989, 991, 993, 995, 999, 1002, 1003, 1004, 1005, 1007, 1009, 1023, 1029, 1032, 1036, 1037, 1038, 1040, 1042, 1043, 1044, 1046, 1048], "particularli": [58, 67, 102, 103, 106, 129, 152, 183, 208, 235, 264, 273, 278, 306, 314, 321, 322, 323, 345, 355, 359, 372, 374, 381, 386, 404, 405, 407, 410, 412, 494, 609, 806, 823, 841, 948, 968, 995, 996, 999, 1001, 1007, 1019, 1023, 1029, 1034, 1036, 1037, 1043], "partit": [80, 99, 102, 150, 152, 264, 301, 386, 401, 402, 404, 408, 411, 446, 448, 450, 459, 509, 555, 556, 557, 558, 561, 562, 563, 704, 705, 715, 786, 852, 912, 913, 914, 915, 998, 1002, 1005, 1009, 1015], "partli": [80, 398, 769], "partnership": 1023, "parvu": 369, "pasbi": [1036, 1037], "pascal": 999, "pascual": 1032, "paskov": 1036, "pass": [1, 43, 46, 47, 58, 59, 70, 73, 140, 149, 151, 160, 165, 184, 192, 194, 208, 234, 236, 237, 240, 243, 244, 246, 254, 258, 262, 265, 311, 313, 316, 321, 322, 323, 341, 349, 355, 359, 360, 361, 367, 372, 373, 374, 377, 378, 379, 380, 381, 384, 386, 395, 398, 400, 403, 404, 405, 408, 409, 411, 412, 414, 415, 416, 421, 422, 426, 427, 434, 435, 437, 439, 440, 441, 443, 444, 445, 446, 447, 449, 451, 454, 456, 457, 459, 461, 462, 464, 465, 466, 469, 471, 479, 480, 481, 485, 488, 490, 493, 494, 495, 501, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 580, 581, 587, 588, 589, 590, 592, 593, 596, 601, 606, 607, 610, 611, 617, 620, 626, 631, 632, 634, 635, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 684, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 711, 730, 732, 733, 742, 763, 774, 778, 779, 780, 781, 788, 792, 793, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 812, 814, 815, 816, 817, 818, 819, 820, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 875, 876, 877, 878, 879, 881, 883, 884, 885, 893, 894, 895, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 924, 929, 930, 931, 937, 941, 943, 947, 948, 950, 952, 955, 957, 960, 961, 969, 972, 982, 987, 988, 989, 995, 997, 999, 1000, 1001, 1002, 1003, 1006, 1009, 1012, 1013, 1014, 1019, 1023, 1026, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "passiv": [1, 47, 666, 667, 1021, 1025, 1030], "passiveaggress": [361, 412], "passiveaggressiveclassifi": [1, 47, 359, 361, 995, 1000, 1030, 1033, 1034, 1036, 1037, 1040, 1042, 1047], "passiveaggressiveregressor": [1, 361, 995, 1030, 1033, 1036, 1037, 1040, 1042, 1047], "passo": [0, 394, 1029, 1030], "passthrough": [43, 104, 143, 154, 183, 184, 207, 224, 243, 310, 318, 405, 461, 464, 565, 566, 863, 864, 1009, 1038, 1040, 1043, 1044, 1046], "passthrough_numer": [207, 224], "passthroughpassthrough": 184, "passthroughpassthroughhigh_cardinalityindex": 310, "passthroughpassthroughtransformedtargetregressor": 183, "past": [50, 52, 376, 377, 380, 384, 387, 408, 409, 411, 536, 553, 554, 678, 821, 1023, 1045], "pat": [628, 989], "patch": [1, 70, 83, 243, 249, 250, 251, 254, 255, 259, 367, 384, 409, 411, 553, 554, 582, 583, 586, 1029, 1037], "patch_height": [582, 583, 586], "patch_siz": [83, 123, 412, 582, 583, 586], "patch_width": [582, 583, 586], "patchextractor": [1, 412, 1045], "patel": [1037, 1039, 1040, 1041, 1043, 1048, 1049], "path": [1, 47, 55, 180, 189, 194, 195, 198, 200, 203, 211, 222, 277, 351, 366, 370, 372, 376, 380, 381, 386, 398, 438, 442, 447, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 506, 507, 546, 555, 556, 561, 562, 563, 564, 592, 593, 596, 646, 647, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 681, 682, 683, 684, 685, 686, 688, 864, 865, 884, 911, 912, 913, 914, 915, 954, 988, 995, 996, 1005, 1020, 1029, 1030, 1033, 1035, 1036, 1038, 1039, 1041, 1042, 1044, 1045, 1049], "path_length": 954, "path_method": [688, 996], "pathak": [1044, 1045], "patheffect": 75, "pathlib": [47, 1044, 1045], "pathlik": [494, 1045], "patholog": [85, 998, 1035], "pathwai": 373, "pati": 1031, "patienc": [380, 386], "patient": [46, 156, 163, 179, 369, 380, 403, 408, 995], "patil": [1043, 1046], "paton": 1042, "patric": [1041, 1042], "patricio": 1043, "patrick": [1036, 1037, 1042, 1043, 1046, 1047], "patrini": [1034, 1035, 1036], "pattaniyil": 1039, "pattern": [43, 52, 58, 96, 113, 119, 120, 126, 127, 167, 178, 180, 184, 194, 211, 240, 243, 316, 340, 347, 348, 349, 355, 369, 372, 374, 387, 401, 404, 405, 408, 409, 411, 412, 445, 461, 463, 502, 530, 532, 539, 553, 554, 638, 708, 725, 741, 769, 788, 789, 797, 884, 991, 993, 995, 999, 1000, 1006, 1014, 1016, 1019, 1020, 1023, 1041], "patterson": [492, 1034], "paul": [367, 1032, 1035, 1036, 1037, 1038, 1042, 1043], "paula": [1039, 1040, 1047], "pauli": 1034, "paulo": [1036, 1042, 1044], "paus": 80, "pava": 635, "pavel": [1030, 1038], "pavlo": [1037, 1038], "pavlyk": [1037, 1038, 1039, 1040], "pawel": 1038, "pawe\u0142": [1032, 1036, 1041, 1042], "pawson": 1048, "payn": 1039, "pazzani": 64, "pb_q": [316, 995], "pbl": 146, "pc": [57, 229, 329, 349, 367], "pca": [1, 10, 42, 45, 55, 68, 69, 84, 101, 102, 104, 106, 107, 116, 119, 122, 130, 180, 215, 227, 229, 236, 238, 241, 245, 251, 257, 263, 270, 272, 275, 284, 287, 288, 293, 302, 316, 333, 352, 355, 364, 374, 386, 400, 404, 405, 410, 420, 470, 473, 481, 494, 500, 502, 512, 530, 531, 532, 533, 537, 538, 541, 542, 547, 643, 658, 688, 690, 692, 696, 800, 826, 830, 853, 860, 863, 864, 866, 874, 882, 884, 919, 991, 993, 996, 1002, 1009, 1013, 1015, 1020, 1024, 1025, 1029, 1031, 1032, 1033, 1035, 1036, 1037, 1040, 1042, 1043, 1044, 1046, 1047], "pca0": 420, "pca1": [405, 420], "pca2": [405, 420], "pca_2": 116, "pca__n_compon": 105, "pca_back_proj_ax": 125, "pca_estim": 120, "pca_proj_ax": 125, "pca_scor": 127, "pcd": [860, 1004], "pchelintsev": 1041, "pclass": [103, 185, 247, 313, 317, 318], "pcolor": 168, "pcolormesh": [70, 152, 155, 287, 292, 332, 336, 340, 631], "pcr": [116, 407], "pd": [43, 51, 62, 66, 103, 104, 134, 140, 141, 146, 151, 155, 162, 178, 182, 183, 184, 185, 186, 190, 194, 198, 207, 211, 214, 224, 244, 247, 254, 262, 264, 265, 267, 275, 276, 278, 281, 309, 310, 311, 316, 317, 343, 347, 348, 377, 386, 405, 461, 463, 627, 628, 629, 630, 632, 778, 928, 930, 931, 988, 989, 1006, 1009, 1040, 1042, 1043, 1044, 1046], "pd2000": 999, "pd_": 1006, "pd_line_kw": 632, "pd_result": 632, "pdb": 380, "pdbcl": 380, "pdf": [163, 264, 289, 304, 369, 372, 404, 413, 439, 446, 529, 532, 535, 539, 641, 644, 658, 664, 666, 667, 671, 676, 679, 682, 683, 685, 686, 692, 841, 853, 860, 897, 899, 995, 999, 1012, 1015, 1022, 1029], "pdist": [692, 778, 781], "pdp": [1, 632, 1006, 1043], "pdp_lim": 632, "pdp_line_kw": 632, "pe": [192, 582], "pe_tran": 582, "peai": 1038, "peak": [43, 52, 64, 184, 402, 408, 1043], "pear": 1000, "pearson": [1, 605, 608, 1042], "pearu": 1029, "pedersen": [1033, 1045], "pedigo": [1041, 1042], "pedregosa": [0, 394, 1029, 1030, 1031, 1032, 1033, 1035], "pedro": [1030, 1032, 1033, 1037, 1049], "peek": [184, 372, 1006], "peer": 1023, "peev": [1037, 1040], "pegaso": 1013, "pei": [404, 1036], "peixinho": 1043, "pelennor": 1043, "penal": [1, 53, 113, 154, 194, 198, 202, 205, 207, 211, 222, 224, 277, 309, 343, 404, 406, 409, 411, 413, 466, 467, 468, 469, 470, 471, 472, 473, 475, 559, 560, 647, 652, 653, 658, 661, 663, 676, 705, 715, 734, 786, 795, 877, 904, 905, 911, 995, 999, 1001, 1003, 1013, 1014], "penalis": [221, 696], "penalti": [1, 25, 46, 49, 103, 104, 113, 139, 155, 160, 180, 189, 190, 194, 197, 198, 202, 205, 207, 211, 221, 222, 234, 235, 245, 247, 258, 263, 271, 272, 277, 278, 299, 302, 314, 316, 317, 323, 329, 341, 347, 359, 380, 384, 406, 409, 413, 468, 469, 470, 471, 472, 473, 475, 500, 529, 535, 536, 537, 538, 540, 541, 545, 546, 596, 643, 646, 647, 648, 649, 652, 653, 654, 657, 658, 659, 660, 661, 662, 668, 669, 670, 672, 676, 678, 680, 681, 687, 814, 884, 904, 905, 907, 909, 910, 911, 988, 995, 998, 1003, 1009, 1013, 1014, 1020, 1031, 1034, 1036, 1038, 1039, 1041, 1042, 1044, 1045, 1049], "peng": [679, 995, 1035, 1036, 1037, 1039, 1041], "peopl": [1, 45, 102, 183, 242, 267, 347, 348, 360, 361, 367, 369, 371, 372, 376, 387, 410, 491, 492, 641, 841, 1018, 1048], "pep": [51, 1029], "pep073": 373, "pep257": 386, "pep440": 376, "pep8": [374, 376], "pepsi": 51, "per": [43, 49, 58, 66, 70, 86, 97, 139, 140, 143, 172, 174, 183, 184, 207, 221, 224, 243, 247, 250, 258, 260, 271, 273, 304, 310, 315, 320, 321, 343, 347, 349, 359, 367, 368, 372, 377, 378, 381, 384, 386, 402, 404, 408, 409, 410, 411, 412, 414, 443, 445, 447, 454, 458, 461, 465, 484, 494, 498, 500, 501, 502, 506, 508, 510, 513, 521, 530, 532, 533, 534, 537, 539, 541, 547, 548, 559, 560, 567, 582, 587, 590, 610, 611, 631, 632, 633, 641, 642, 658, 659, 666, 667, 668, 671, 673, 674, 675, 676, 678, 692, 696, 713, 716, 720, 722, 741, 754, 758, 759, 781, 783, 797, 798, 825, 832, 833, 834, 836, 837, 840, 842, 851, 860, 863, 869, 871, 873, 874, 877, 878, 884, 885, 902, 904, 905, 906, 907, 908, 909, 910, 935, 936, 948, 973, 988, 991, 995, 998, 999, 1000, 1003, 1006, 1013, 1014, 1015, 1019, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1041, 1042, 1043, 1045, 1046], "perc": 259, "percal": 378, "percent": [134, 490, 599, 1012], "percent10": [243, 490], "percentag": [1, 52, 87, 128, 143, 200, 224, 259, 267, 408, 413, 532, 539, 542, 547, 592, 593, 648, 669, 680, 703, 734, 746, 818, 819, 820, 834, 916, 918, 1000, 1015, 1031, 1035, 1041, 1042], "percentil": [1, 49, 52, 103, 146, 149, 184, 243, 247, 304, 359, 591, 594, 595, 597, 598, 599, 602, 605, 632, 633, 748, 869, 1009, 1034, 1042], "percentile_5_predict": 52, "percentile_95_predict": 52, "percentile_perf_in_u": 49, "percentiles_class": 259, "percept": [158, 184, 1006], "perceptron": [1, 47, 67, 142, 152, 169, 171, 180, 216, 219, 222, 244, 298, 306, 307, 330, 341, 344, 361, 384, 412, 512, 513, 520, 666, 676, 830, 860, 861, 862, 865, 884, 997, 1000, 1004, 1013, 1020, 1021, 1025, 1033, 1035, 1036, 1037, 1041], "percol": 74, "perdisci": [404, 439], "perdok": 1044, "pere": 1046, "peredachi": [606, 607], "pereira": [1034, 1037, 1038, 1048, 1049], "peretti": 1044, "perez": [1037, 1044], "perf_count": 243, "perfect": [58, 63, 72, 102, 112, 123, 125, 207, 347, 348, 372, 404, 408, 551, 552, 690, 694, 704, 705, 708, 717, 726, 728, 731, 737, 743, 756, 757, 785, 786, 795, 995, 999, 1002, 1014, 1023, 1043], "perfectli": [63, 64, 72, 267, 279, 340, 389, 404, 411, 435, 565, 605, 704, 705, 715, 717, 736, 737, 757, 786, 795, 877, 994, 996, 999, 1014, 1042, 1043], "perform": [1, 25, 27, 29, 30, 41, 43, 46, 52, 57, 61, 62, 63, 68, 71, 73, 75, 82, 86, 90, 91, 92, 93, 94, 95, 97, 99, 100, 102, 103, 106, 109, 116, 123, 129, 132, 134, 140, 141, 143, 144, 145, 147, 148, 149, 153, 154, 158, 161, 162, 163, 168, 176, 178, 179, 180, 183, 184, 185, 186, 188, 194, 198, 205, 207, 209, 211, 213, 214, 223, 224, 227, 228, 230, 233, 238, 241, 243, 250, 251, 254, 256, 258, 259, 260, 261, 262, 264, 265, 266, 269, 270, 272, 273, 275, 277, 278, 281, 283, 284, 297, 302, 304, 306, 308, 310, 311, 313, 319, 320, 322, 324, 326, 327, 336, 339, 340, 343, 347, 349, 353, 355, 358, 360, 361, 367, 369, 374, 375, 376, 378, 380, 381, 384, 385, 386, 389, 395, 398, 399, 400, 401, 402, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 422, 426, 437, 439, 440, 441, 443, 444, 445, 447, 449, 451, 452, 456, 458, 465, 466, 479, 480, 481, 482, 492, 500, 510, 513, 529, 530, 531, 533, 535, 540, 541, 542, 543, 544, 546, 548, 549, 550, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 580, 581, 582, 587, 588, 589, 590, 593, 600, 601, 602, 610, 611, 627, 630, 631, 638, 640, 645, 651, 654, 655, 656, 658, 664, 665, 666, 667, 668, 670, 673, 675, 676, 677, 678, 682, 683, 685, 687, 689, 690, 693, 694, 697, 703, 704, 705, 707, 708, 712, 713, 726, 729, 730, 738, 740, 742, 755, 756, 757, 778, 783, 784, 786, 787, 788, 794, 795, 796, 797, 798, 800, 803, 804, 811, 812, 814, 818, 825, 826, 827, 829, 830, 833, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 851, 853, 854, 859, 860, 861, 862, 864, 865, 867, 870, 871, 873, 874, 876, 877, 878, 880, 881, 884, 885, 887, 889, 890, 891, 893, 894, 895, 899, 900, 902, 906, 907, 908, 909, 910, 912, 913, 914, 915, 930, 931, 971, 982, 987, 988, 989, 991, 993, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1012, 1013, 1014, 1015, 1018, 1019, 1020, 1023, 1024, 1025, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "performancetip": 378, "perhap": [102, 142, 369, 371, 380, 410], "perimet": [163, 369], "period": [1, 52, 149, 155, 167, 172, 176, 376, 386, 387, 402, 414, 615, 821, 883, 1037, 1042, 1044], "periodic_spline_transform": 43, "periodicity_bound": [167, 172, 176, 615], "peripheri": 404, "perla": 1032, "perm_scores_iri": 270, "perm_scores_rand": 270, "perm_sorted_idx": 186, "permalink": 376, "perman": 380, "permiss": [371, 376, 387, 390, 391, 528, 1023, 1044], "permit": [405, 464, 587, 588, 590, 800, 803, 804, 814, 826, 865, 866, 999, 1000, 1001, 1035], "permut": [1, 50, 58, 59, 72, 112, 115, 140, 147, 158, 180, 181, 222, 256, 264, 311, 328, 389, 399, 404, 411, 413, 461, 494, 498, 502, 557, 558, 562, 563, 627, 630, 634, 679, 704, 705, 717, 736, 737, 755, 757, 795, 817, 819, 829, 830, 864, 878, 909, 912, 913, 948, 968, 969, 972, 999, 1013, 1020, 1025, 1029, 1035, 1042, 1044], "permutation_import": [1, 141, 147, 185, 186, 313, 411, 1007, 1039, 1041, 1042, 1046], "permutation_scor": 829, "permutation_test_scor": [1, 270, 395, 408, 1029, 1036, 1041, 1048], "permuted_categori": 311, "perp_tol": 534, "perpendicular": [70, 341], "perperogl": 1009, "perplex": [180, 225, 226, 228, 230, 284, 512, 523, 534, 692, 996, 1020, 1034, 1036, 1043], "perri": 1039, "perrin": 1035, "perrot": [0, 1029], "persian": 1018, "persist": [380, 384, 409, 443, 610, 611, 860, 1004, 1018, 1025, 1035, 1038], "persola": 1037, "person": [45, 183, 258, 267, 367, 371, 408, 412, 491, 492, 493, 1009, 1037], "personal_statu": 258, "perspect": [88, 93, 207, 278, 359, 367, 384, 387, 528, 643, 904, 992], "pertin": 207, "perturb": [183, 223, 302, 409, 411, 998], "peru": [50, 297, 367, 496], "pervas": [355, 372], "pessimist": [145, 411], "pessoa": 1042, "pestrickland": 1035, "pet": [316, 320, 788, 999], "pet_cat": 316, "pet_dog": 316, "pet_fish": 316, "petal": [126, 128, 130, 142, 247, 315, 318, 369, 405, 830, 917, 1015], "petal_col": 318, "petar": 1044, "pete": [1036, 1040, 1041], "peter": [0, 96, 394, 404, 445, 447, 454, 649, 792, 793, 995, 999, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1042, 1044, 1045, 1046, 1049], "peterlongo": 1046, "peterson": [1029, 1031], "petfood": 1023, "petrov": [1036, 1037, 1045], "petrushev": 1038, "pe\u00f1a": 1033, "pfaffel": 1042, "pfahring": [835, 1000], "pfe": 51, "pfister": 1009, "pfizer": 51, "pft": 208, "pg": [51, 378, 1034], "pg_i": 649, "pgithub": 1041, "ph": 1041, "pham": [188, 991, 1036], "phan": 409, "pharmaceut": 369, "phase": [43, 194, 203, 359, 627, 991, 996, 1002, 1023, 1037, 1039], "phase_nois": 75, "phd": [0, 404, 411, 1019, 1023], "phenol": 369, "phenomena": 172, "phenomenon": [348, 1009], "phi": [75, 409, 411, 743, 870, 991, 999, 1009, 1014], "phi_coeffici": 999, "phil": [1034, 1045], "philipp": [1031, 1032, 1035, 1044], "phillip": [1, 50, 297, 367, 496], "phlypo": 1032, "phongpanagnam": 1042, "phongpanangam": 1042, "photogrammetr": 995, "php": 999, "phrase": 412, "phy": [606, 607], "phyo": 1043, "physic": [1, 102, 140, 263, 360, 503, 965, 995, 1045], "physician": 403, "physiolog": [267, 369], "pi": [43, 53, 70, 74, 75, 121, 129, 151, 153, 158, 167, 191, 194, 196, 203, 208, 228, 249, 250, 251, 254, 255, 279, 297, 314, 320, 353, 390, 410, 414, 514, 515, 516, 615, 642, 993, 994, 995, 1001], "pianomania": 1034, "pick": [88, 93, 186, 241, 272, 317, 325, 367, 372, 376, 404, 411, 440, 457, 521, 673, 914, 915, 988, 995, 996, 998, 1013, 1040], "pickl": [376, 386, 412, 588, 844, 845, 1018, 1019, 1025, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1042, 1043, 1044, 1045, 1046], "pickleabl": [868, 1035], "pickup": 1037, "pico": [1032, 1033], "pict": [834, 1000], "pictur": [51, 55, 59, 71, 86, 99, 123, 180, 237, 255, 367, 387, 404, 409, 412, 459, 491, 492, 519, 1019, 1020], "piec": [70, 81, 165, 208, 360, 998], "piecewis": [129, 316, 401, 990, 995, 1009, 1015], "pierr": [1029, 1037, 1038, 1040, 1042, 1044, 1046, 1047], "pierreablin": 1037, "pierreattard": [1042, 1043], "pierretallott": [1037, 1038, 1039], "pierron": 1032, "piet": [1043, 1044], "pieter": [55, 1035, 1036, 1043], "pietro": [1029, 1032, 1046], "pietruh": 1037, "pig": 783, "pillow": [372, 376, 390, 397], "pim": 1038, "pin": [378, 398, 400], "pinaki": 1037, "pinbal": [1, 52, 146, 149, 316, 411, 560, 670, 723, 748, 995, 1042, 1043], "pinball_loss_05": 52, "pinball_loss_50": 52, "pinball_loss_95": 52, "ping": [897, 1011, 1035, 1036], "pink": 191, "pinki": 1043, "pinot": 310, "pinto": 1029, "pintor": 1040, "pinvh": [1036, 1038], "piontek": 1045, "piotr": [1037, 1038, 1047, 1048], "pip": [284, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 360, 370, 372, 376, 378, 380, 390, 398, 400, 1015], "pip3": [370, 390], "pipe": [104, 105, 143, 161, 240, 245, 263, 310, 315, 316, 385, 395, 405, 412, 589, 864, 889, 890, 892, 893, 894, 895, 988, 1009], "pipe_sgd": 220, "pipegraph": 384, "pipelin": [1, 6, 43, 66, 67, 87, 91, 103, 106, 107, 116, 139, 140, 143, 155, 157, 159, 161, 162, 163, 178, 179, 184, 185, 188, 190, 196, 198, 202, 207, 208, 213, 220, 224, 227, 232, 233, 234, 236, 238, 243, 244, 247, 256, 258, 261, 271, 272, 275, 278, 279, 284, 286, 287, 292, 293, 299, 302, 306, 309, 311, 313, 314, 315, 316, 317, 318, 319, 323, 329, 347, 348, 355, 359, 364, 366, 367, 372, 374, 386, 395, 398, 400, 408, 412, 414, 418, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 461, 462, 464, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 485, 500, 513, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 604, 606, 609, 610, 611, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 697, 698, 700, 701, 702, 713, 797, 798, 799, 800, 803, 804, 814, 822, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 988, 989, 991, 995, 1002, 1003, 1008, 1009, 1013, 1014, 1017, 1018, 1019, 1020, 1021, 1023, 1025, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1046], "pipelineifit": [103, 139, 160, 183, 185, 234, 244, 247, 271, 317, 323], "pipelineinot": [154, 235, 245, 265, 278, 310, 314, 323], "pipelineminmaxscal": 104, "pipelinepca": 263, "pipelinepreprocessor": [103, 245], "pipelinestandardscal": 258, "pita": 1046, "pitfal": [163, 180, 181, 182, 185, 211, 212, 264, 315, 385, 386, 389, 408, 462, 464, 494, 653, 672, 673, 701, 753, 815, 827, 830, 865, 877, 884, 995, 1020, 1025], "pitkin": [184, 1006], "pitt": 57, "pitter": 1044, "pivot": [80, 275, 276], "pivot_t": 275, "pixel": [1, 44, 45, 53, 58, 68, 81, 86, 120, 161, 188, 237, 262, 301, 302, 369, 404, 409, 412, 413, 491, 492, 493, 584, 585, 606, 607, 1002, 1004, 1015], "pixelwis": 120, "pixi": 398, "piyg": 306, "pkdd": 0, "pkg": 370, "pkgsrc": 390, "pkl": 398, "pl": [1, 52, 105, 116, 172, 263, 320, 369, 407, 479, 480, 481, 482, 1034], "place": [1, 43, 93, 234, 244, 288, 359, 372, 373, 374, 377, 379, 387, 402, 408, 412, 414, 438, 439, 442, 443, 479, 480, 481, 513, 580, 589, 628, 630, 631, 768, 774, 778, 781, 797, 887, 889, 890, 891, 892, 893, 894, 895, 977, 978, 1018, 1029, 1036, 1039, 1040, 1042, 1046, 1047, 1048], "placehold": [57, 376, 627, 628, 629, 630, 815, 816, 819, 820, 987, 989], "plagre": 1036, "plai": [121, 147, 169, 215, 257, 295, 332, 333, 359], "plain": [205, 338, 414, 657, 1013], "plan": [51, 366, 370, 372, 373, 387, 398, 1009, 1032], "planar": 404, "plane": [51, 163, 218, 238, 261, 290, 338, 340, 341, 369, 449, 459, 993, 995, 1014], "plant": [270, 273, 274, 365, 999, 1025], "plasma": 304, "plasma_r": 304, "plateau": [140, 144, 162, 258, 262, 266], "platform": [0, 322, 375, 376, 386, 387, 1017, 1018, 1022, 1023, 1034, 1037, 1038, 1040, 1042, 1043, 1046, 1047, 1048], "platt": [402, 434, 906, 907, 909, 910, 1014], "platypu": 347, "playlist": 1017, "pldtc325": 1036, "pleas": [0, 1, 51, 55, 63, 103, 104, 139, 141, 147, 150, 151, 154, 155, 156, 160, 165, 172, 183, 184, 185, 192, 211, 234, 235, 236, 238, 240, 243, 244, 245, 246, 247, 254, 258, 262, 263, 264, 265, 271, 276, 278, 284, 294, 302, 310, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 327, 340, 353, 354, 360, 366, 367, 370, 372, 373, 374, 376, 380, 384, 385, 386, 390, 395, 398, 400, 404, 411, 412, 418, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 461, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 494, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 609, 610, 611, 627, 628, 629, 630, 631, 632, 633, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 697, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 827, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 893, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 942, 988, 999, 1003, 1009, 1013, 1014, 1018, 1019, 1022, 1029, 1032, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "pleasant": [371, 1023], "plenti": 62, "plgreenliru": 1040, "plo": [366, 606, 607], "plot": [1, 43, 44, 45, 50, 51, 52, 54, 62, 63, 64, 65, 67, 68, 69, 71, 72, 75, 77, 78, 87, 88, 89, 91, 92, 93, 94, 95, 98, 104, 105, 106, 107, 110, 111, 112, 116, 117, 120, 123, 124, 127, 128, 129, 130, 133, 134, 136, 137, 138, 139, 141, 144, 145, 146, 148, 149, 151, 152, 153, 155, 158, 159, 161, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 180, 181, 182, 183, 185, 186, 188, 189, 193, 196, 197, 198, 199, 201, 204, 206, 207, 208, 209, 210, 213, 214, 216, 218, 219, 221, 223, 224, 228, 229, 230, 231, 232, 233, 236, 237, 239, 241, 242, 247, 249, 250, 251, 253, 255, 256, 257, 258, 259, 261, 263, 264, 265, 267, 269, 270, 274, 275, 276, 277, 278, 279, 281, 284, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 299, 300, 301, 304, 305, 306, 307, 308, 309, 311, 314, 317, 318, 319, 320, 326, 327, 330, 331, 332, 336, 337, 338, 341, 342, 343, 344, 345, 348, 349, 350, 351, 354, 372, 375, 381, 384, 386, 389, 390, 399, 402, 404, 406, 408, 410, 411, 435, 436, 438, 447, 453, 461, 468, 494, 499, 500, 502, 510, 521, 551, 555, 558, 559, 560, 562, 563, 568, 610, 622, 631, 632, 633, 639, 657, 658, 672, 676, 697, 698, 700, 701, 702, 703, 707, 718, 727, 735, 741, 761, 782, 784, 787, 788, 789, 800, 806, 817, 823, 825, 826, 827, 828, 830, 831, 842, 862, 865, 869, 877, 878, 879, 881, 883, 884, 904, 906, 909, 912, 913, 918, 992, 993, 995, 996, 998, 999, 1000, 1002, 1003, 1005, 1013, 1014, 1015, 1018, 1019, 1020, 1025, 1030, 1032, 1033, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "plot_": [316, 390], "plot_2d": [118, 226], "plot_3d": 226, "plot_accuraci": 47, "plot_adaboost_multiclass": [134, 1020], "plot_adaboost_regress": [135, 1020], "plot_adaboost_twoclass": [136, 1020], "plot_adjusted_for_chance_measur": [72, 1020], "plot_affinity_propag": [73, 1020], "plot_agglomerative_clust": [74, 1020], "plot_agglomerative_clustering_metr": [75, 1020], "plot_agglomerative_dendrogram": [76, 1020], "plot_all_sc": [304, 1020], "plot_anomaly_comparison": [233, 1020], "plot_ard": [190, 1020], "plot_arg": 300, "plot_bayesian_ridge_curvefit": [191, 1020], "plot_benchmark_throughput": 49, "plot_bias_vari": [137, 1020], "plot_bicluster_newsgroup": [57, 1020], "plot_birch_vs_minibatchkmean": [77, 1020], "plot_bisect_kmean": [78, 1020], "plot_caching_nearest_neighbor": [286, 1020], "plot_calibr": [61, 372, 1020], "plot_calibration_curv": [62, 1020], "plot_calibration_multiclass": [63, 1020], "plot_causal_interpret": [182, 1020], "plot_chance_level": [243, 258, 271, 273, 274, 700, 702, 1045], "plot_classif": [287, 1020], "plot_classification_prob": [66, 1020], "plot_classifier_chain_yeast": [283, 1020], "plot_classifier_comparison": [67, 1020], "plot_clust": 85, "plot_cluster_comparison": [79, 1020], "plot_coin_segment": [80, 1020], "plot_coin_ward_segment": [81, 1020], "plot_color": [136, 352], "plot_column_transform": [102, 1020], "plot_column_transformer_mixed_typ": [103, 1020], "plot_compare_calibr": [64, 1020], "plot_compare_cross_decomposit": [115, 1020], "plot_compare_gpr_krr": [167, 1020], "plot_compare_method": [226, 1020], "plot_compare_reduct": [104, 1020], "plot_concentration_prior": [249, 1020], "plot_confusion_matrix": [257, 313, 1020, 1039, 1040, 1041, 1042], "plot_cost_complexity_prun": [351, 1020], "plot_cost_sensitive_learn": [258, 1020], "plot_covariance_estim": [109, 1020], "plot_custom_kernel": [332, 1020], "plot_cv_indic": [259, 1020], "plot_cv_predict": [260, 1020], "plot_cyclical_feature_engin": [43, 1020], "plot_dbscan": [82, 1020], "plot_decision_funct": 345, "plot_dendrogram": 76, "plot_det": [261, 1020], "plot_det_curv": [1041, 1042], "plot_dict_face_patch": [83, 1020], "plot_digit": 44, "plot_digits_agglomer": [84, 1020], "plot_digits_classif": [68, 1020], "plot_digits_denois": [44, 1020], "plot_digits_kde_sampl": [288, 1020], "plot_digits_linkag": [85, 1020], "plot_digits_pip": [105, 1020], "plot_discret": [305, 1020], "plot_discretization_classif": [306, 1020], "plot_discretization_strategi": [307, 1020], "plot_display_object_visu": [234, 1020], "plot_distribut": 304, "plot_document_classification_20newsgroup": [347, 1020], "plot_document_clust": [348, 1020], "plot_elastic_net_precomputed_gram_matrix_with_weighted_sampl": [192, 1020], "plot_ellips": [70, 249], "plot_embed": 227, "plot_ensemble_oob": [138, 1020], "plot_estimator_represent": [235, 1020], "plot_f_test_vs_mi": [158, 1020], "plot_face_compress": [86, 1020], "plot_face_recognit": [45, 1020], "plot_faces_decomposit": [120, 1020], "plot_feature_agglomeration_vs_univariate_select": [87, 1020], "plot_feature_effect": 347, "plot_feature_select": [159, 1020], "plot_feature_selection_pipelin": [160, 1020], "plot_feature_transform": [139, 1020], "plot_feature_union": [106, 1020], "plot_forest_hist_grad_boosting_comparison": [140, 1020], "plot_forest_import": [141, 1020], "plot_forest_iri": [142, 1020], "plot_frozen_exampl": [165, 1020], "plot_galleri": [45, 120], "plot_gmm": [250, 1020], "plot_gmm_covari": [251, 1020], "plot_gmm_init": [252, 1020], "plot_gmm_pdf": [253, 1020], "plot_gmm_select": [254, 1020], "plot_gmm_sin": [255, 1020], "plot_gpc": [168, 1020], "plot_gpc_iri": [169, 1020], "plot_gpc_isoprob": [170, 1020], "plot_gpc_xor": [171, 1020], "plot_gpr_co2": [172, 1020], "plot_gpr_noisi": [173, 1020], "plot_gpr_noisy_target": [174, 1020], "plot_gpr_on_structured_data": [175, 1020], "plot_gpr_prior_posterior": [176, 1020], "plot_gpr_sampl": 176, "plot_gradient_boosting_categor": [143, 1020], "plot_gradient_boosting_early_stop": [144, 1020], "plot_gradient_boosting_oob": [145, 1020], "plot_gradient_boosting_quantil": [146, 1020], "plot_gradient_boosting_regress": [147, 1020], "plot_gradient_boosting_regular": [148, 1020], "plot_grid_search_digit": [262, 1020], "plot_grid_search_refit_cal": [263, 1020], "plot_grid_search_stat": [264, 1020], "plot_grid_search_text_feature_extract": [265, 1020], "plot_hashing_vs_dict_vector": [349, 1020], "plot_hdbscan": [88, 1020], "plot_hgbt_regress": [149, 1020], "plot_huber_vs_ridg": [193, 1020], "plot_hyperplan": [201, 215, 241], "plot_ica_blind_source_separ": [121, 1020], "plot_ica_vs_pca": [122, 1020], "plot_idx": 142, "plot_image_denois": [123, 1020], "plot_incremental_pca": [124, 1020], "plot_indic": [267, 345], "plot_inductive_clust": [89, 1020], "plot_influ": 46, "plot_info": 143, "plot_iris_dtc": [352, 1020], "plot_iris_svc": [333, 1020], "plot_isolation_forest": [150, 1020], "plot_isotonic_regress": [236, 1020], "plot_iterative_imputer_variants_comparison": [178, 1020], "plot_johnson_lindenstrauss_bound": [237, 1020], "plot_kde_1d": [289, 1020], "plot_kernel_approxim": [238, 1020], "plot_kernel_pca": [125, 1020], "plot_kernel_ridge_regress": [239, 1020], "plot_kind": 43, "plot_kmeans_assumpt": [90, 1020], "plot_kmeans_digit": [91, 1020], "plot_kmeans_plusplu": [92, 1020], "plot_kmeans_silhouette_analysi": [93, 1020], "plot_kmeans_stability_low_dim_dens": [94, 1020], "plot_label_propagation_digit": [325, 1020], "plot_label_propagation_digits_active_learn": [326, 1020], "plot_label_propagation_structur": [327, 1020], "plot_lasso_and_elasticnet": [194, 1020], "plot_lasso_dense_vs_sparse_data": [195, 1020], "plot_lasso_lars_": [196, 1020], "plot_lasso_lasso_lars_elasticnet_path": [197, 646, 647, 652, 653, 660, 661, 662, 663, 681, 684, 1020], "plot_lasso_model_select": [198, 647, 653, 1020], "plot_lda": [69, 1020], "plot_lda_qda": [70, 1020], "plot_learning_curv": [266, 1020], "plot_likelihood_ratio": [267, 1020], "plot_linear_model_coefficient_interpret": [183, 1020], "plot_linearsvc_support_vector": [334, 1020], "plot_linkage_comparison": [95, 1020], "plot_lle_digit": [227, 1020], "plot_lof_novelty_detect": [290, 1020], "plot_lof_outlier_detect": [291, 1020], "plot_logist": [199, 1020], "plot_logistic_l1_l2_spars": [200, 1020], "plot_logistic_multinomi": [201, 1020], "plot_logistic_path": [202, 1020], "plot_lw_vs_oa": [110, 1020], "plot_mahalanobis_dist": [111, 1020], "plot_manifold_spher": [228, 1020], "plot_map_data_to_norm": [308, 1020], "plot_md": [229, 1020], "plot_mean_shift": [96, 1020], "plot_metadata_rout": [240, 1020], "plot_method": [48, 70, 155, 220, 287, 292, 332, 334, 335, 337, 338, 340, 631], "plot_mini_batch_kmean": [97, 1020], "plot_missing_valu": [179, 1020], "plot_mlp_alpha": [299, 1020], "plot_mlp_training_curv": [300, 1020], "plot_mnist_filt": [301, 1020], "plot_model_complexity_influ": [46, 1020], "plot_monotonic_constraint": [151, 1020], "plot_multi_metric_evalu": [268, 1020], "plot_multi_task_lasso_support": [203, 1020], "plot_multiclass_overview": [281, 1020], "plot_multilabel": [241, 1020], "plot_multioutput_face_complet": [242, 1020], "plot_n_features_influ": 49, "plot_nca_classif": [292, 1020], "plot_nca_dim_reduct": [293, 1020], "plot_nca_illustr": [294, 1020], "plot_nearest_centroid": [295, 1020], "plot_nested_cross_validation_iri": [269, 1020], "plot_nnl": [204, 1020], "plot_num": [79, 95, 233], "plot_obs_pr": 224, "plot_ols_ridg": [205, 1020], "plot_omp": [206, 1020], "plot_on_dataset": 300, "plot_oneclass": [335, 1020], "plot_opt": [98, 1020], "plot_out_of_core_classif": [47, 1020], "plot_outlier_detection_bench": [243, 1020], "plot_outlier_detection_win": [48, 1020], "plot_partial_depend": [184, 313, 314, 315, 1020, 1034, 1038, 1039, 1040, 1041, 1042, 1043], "plot_partial_dependence_visualization_api": [244, 1020], "plot_pca_iri": [126, 1020], "plot_pca_vs_fa_model_select": [127, 1020], "plot_pca_vs_lda": [128, 1020], "plot_pcr_vs_pl": [116, 1020], "plot_permutation_import": [185, 186, 1020], "plot_permutation_importance_multicollinear": [186, 1020], "plot_permutation_tests_for_classif": [270, 1020], "plot_pipeline_displai": [245, 1020], "plot_poisson_regression_non_normal_loss": [207, 1020], "plot_polynomial_interpol": [208, 879, 883, 1020], "plot_precision_recal": [271, 1020], "plot_precision_recall_curv": [313, 1039, 1041, 1042], "plot_prediction_lat": [49, 1020], "plot_quantile_regress": [209, 1020], "plot_random_forest_embed": [152, 1020], "plot_random_forest_regression_multioutput": [153, 1020], "plot_random_multilabel_dataset": [118, 1020], "plot_randomized_search": [272, 1020], "plot_rang": 136, "plot_ransac": [210, 1020], "plot_rbf_paramet": [336, 1020], "plot_rbm_logistic_classif": [302, 1020], "plot_regress": [296, 1020], "plot_release_highlights_0_22_0": [313, 1020], "plot_release_highlights_0_23_0": [314, 1020], "plot_release_highlights_0_24_0": [315, 1020], "plot_release_highlights_1_0_0": [316, 1020], "plot_release_highlights_1_1_0": [317, 1020], "plot_release_highlights_1_2_0": [318, 1020], "plot_release_highlights_1_3_0": [319, 1020], "plot_release_highlights_1_4_0": [320, 1020], "plot_release_highlights_1_5_0": [321, 1020], "plot_release_highlights_1_6_0": [322, 1020], "plot_release_highlights_1_7_0": [323, 1020], "plot_result": [70, 143, 249, 250, 255], "plot_rfe_digit": [161, 1020], "plot_rfe_with_cross_valid": [162, 1020], "plot_ridge_coeff": [211, 1020], "plot_ridge_path": [212, 1020], "plot_robust_fit": [213, 1020], "plot_robust_vs_empirical_covari": [112, 1020], "plot_roc": [273, 1020], "plot_roc_crossv": [274, 1020], "plot_roc_curv": [313, 1039, 1041], "plot_roc_curve_visualization_api": [246, 1020], "plot_roc_pr_curv": 258, "plot_sampl": [122, 255], "plot_scalable_poly_kernel": [188, 1020], "plot_scaling_import": [309, 1020], "plot_scatt": 89, "plot_segmentation_toi": [99, 1020], "plot_select_from_model_diabet": [163, 1020], "plot_self_training_varying_threshold": [328, 1020], "plot_semi_supervised_newsgroup": [329, 1020], "plot_semi_supervised_versus_svm_iri": [330, 1020], "plot_separating_hyperplan": [337, 1020], "plot_separating_hyperplane_unbalanc": [338, 1020], "plot_set_output": [247, 1020], "plot_sgd_early_stop": [214, 1020], "plot_sgd_iri": [215, 1020], "plot_sgd_loss_funct": [216, 1020], "plot_sgd_penalti": [217, 1020], "plot_sgd_separating_hyperplan": [218, 1020], "plot_sgd_weighted_sampl": [219, 1020], "plot_sgdocsvm_vs_ocsvm": [220, 1020], "plot_sparse_cod": [129, 1020], "plot_sparse_cov": [113, 1020], "plot_sparse_logistic_regression_20newsgroup": [221, 1020], "plot_sparse_logistic_regression_mnist": [222, 1020], "plot_species_distribut": 50, "plot_species_distribution_model": [50, 1020], "plot_species_kd": [297, 1020], "plot_spectral_biclust": [58, 1020], "plot_spectral_coclust": [59, 1020], "plot_stack_predictor": [154, 1020], "plot_step": [136, 142, 352], "plot_step_coars": 142, "plot_stock_market": [51, 1020], "plot_subfigur": 241, "plot_successive_halving_heatmap": [275, 1020], "plot_successive_halving_iter": [276, 1020], "plot_surfac": 184, "plot_svm_anova": [339, 1020], "plot_svm_kernel": [340, 1020], "plot_svm_margin": [341, 1020], "plot_svm_regress": [342, 1020], "plot_svm_scale_c": [343, 1020], "plot_svm_tie_break": [344, 1020], "plot_swissrol": [230, 1020], "plot_t_sne_perplex": [231, 1020], "plot_target_encod": [310, 1020], "plot_target_encoder_cross_v": [311, 1020], "plot_theilsen": [223, 1020], "plot_time_series_lagged_featur": [52, 1020], "plot_titl": 249, "plot_tomography_l1_reconstruct": [53, 1020], "plot_top_word": 54, "plot_topics_extraction_with_nmf_lda": [54, 1020], "plot_train_error_vs_test_error": [277, 1020], "plot_training_data_with_decision_boundari": 340, "plot_transformed_target": [107, 1020], "plot_tre": [1, 352, 354, 1015, 1038, 1040, 1041, 1042, 1044, 1045, 1047], "plot_tree_regress": [353, 1020], "plot_tuned_decision_threshold": [278, 1020], "plot_tweedie_regression_insurance_claim": [224, 1020], "plot_underfitting_overfit": [279, 1020], "plot_unveil_tree_structur": [354, 1020], "plot_varimax_fa": [130, 1020], "plot_voting_decision_region": [155, 1020], "plot_voting_regressor": [156, 1020], "plot_ward_structured_vs_unstructur": [100, 1020], "plot_weighted_sampl": [345, 1020], "plotli": [140, 265, 372, 390, 397], "pls1": [407, 481], "pls2": [407, 481], "plsca": [115, 480], "plscanon": [1, 115, 479, 481, 482, 1000, 1021, 1025, 1033, 1037, 1039, 1041, 1043, 1047], "plsregress": [1, 115, 116, 1000, 1021, 1025, 1036, 1039, 1041, 1043, 1045, 1047, 1048], "plssvd": [1, 479, 480, 1021, 1025, 1041, 1043, 1047], "plsw2a": 407, "plt": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 161, 162, 163, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 182, 183, 184, 186, 188, 190, 191, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 233, 234, 236, 237, 238, 239, 241, 242, 243, 244, 246, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 263, 264, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 317, 318, 320, 325, 326, 327, 328, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 351, 352, 353, 354, 368, 379, 435, 500, 631, 632, 697, 698, 700, 701, 702, 806, 823, 918, 1006, 1026], "plu": [271, 369, 377, 679, 835, 838, 1000, 1013], "plug": [409, 995, 1023], "plugin": 390, "plural": 1035, "pm": [176, 184, 274, 411, 999], "pmlr": 696, "pmml": 1018, "png": [0, 68, 916], "pnucci": 1045, "po": [147, 412], "podshumok": [1035, 1036], "poesio": 716, "poetri": 398, "poh": [1037, 1038], "point": [1, 7, 37, 43, 48, 50, 52, 53, 63, 66, 67, 72, 73, 75, 76, 82, 85, 88, 91, 93, 97, 100, 111, 112, 115, 118, 119, 121, 123, 125, 126, 134, 136, 140, 142, 143, 144, 149, 152, 162, 163, 165, 169, 174, 175, 180, 183, 185, 190, 198, 203, 205, 207, 208, 209, 211, 213, 215, 218, 219, 223, 224, 226, 227, 228, 229, 230, 233, 236, 238, 251, 255, 256, 257, 261, 263, 265, 266, 267, 271, 273, 274, 281, 283, 284, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 299, 305, 306, 308, 310, 321, 325, 326, 328, 330, 332, 336, 337, 338, 340, 341, 344, 345, 347, 348, 349, 352, 353, 355, 359, 360, 361, 366, 367, 368, 369, 370, 371, 372, 374, 376, 377, 378, 380, 384, 386, 387, 400, 403, 404, 409, 410, 411, 412, 415, 416, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 449, 451, 452, 453, 454, 455, 457, 458, 466, 469, 471, 494, 496, 502, 510, 512, 513, 517, 520, 523, 528, 531, 533, 539, 550, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 610, 611, 628, 631, 632, 633, 637, 638, 639, 644, 645, 647, 651, 653, 655, 657, 658, 661, 663, 670, 671, 673, 675, 676, 678, 679, 682, 683, 688, 689, 690, 691, 692, 693, 694, 698, 701, 702, 706, 707, 710, 713, 717, 723, 725, 727, 731, 736, 737, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 764, 779, 780, 789, 790, 791, 797, 798, 800, 814, 816, 822, 825, 827, 834, 844, 845, 846, 847, 848, 849, 850, 852, 854, 855, 856, 857, 858, 861, 862, 865, 869, 874, 883, 884, 898, 899, 900, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 918, 920, 928, 969, 991, 993, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1009, 1011, 1012, 1014, 1015, 1018, 1019, 1020, 1025, 1029, 1030, 1031, 1033, 1035, 1036, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "pointer": [372, 380, 439, 1038], "pointplot": 149, "points_color": 226, "pointwis": [137, 174, 415, 441], "poisson": [1, 43, 52, 180, 189, 241, 323, 368, 411, 461, 462, 494, 521, 550, 556, 560, 563, 648, 669, 672, 680, 706, 724, 745, 749, 750, 752, 830, 862, 864, 865, 868, 869, 877, 878, 879, 884, 913, 915, 952, 995, 1015, 1020, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1049], "poisson_gbrt": 207, "poisson_glm": 207, "poissonregressor": [1, 207, 224, 314, 317, 322, 648, 680, 995, 1040, 1043, 1044, 1048], "pokorni": 1044, "pola": 52, "polar": [105, 172, 263, 372, 374, 384, 390, 397, 428, 439, 440, 442, 444, 446, 461, 465, 479, 480, 481, 482, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 559, 560, 564, 565, 566, 567, 568, 580, 581, 582, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 688, 689, 692, 848, 853, 856, 860, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 902, 1046, 1047], "pole": 228, "poli": [43, 188, 264, 333, 340, 342, 449, 533, 620, 765, 774, 800, 879, 906, 907, 908, 909, 910, 995, 1009], "polici": [149, 182, 183, 207, 224, 258, 375, 386, 533, 539, 995, 1044], "policyhold": [207, 224, 995], "polit": [57, 347, 367, 371, 995, 1000], "pollak": [1047, 1048], "polli": 347, "pollut": [347, 728, 785, 999, 1005], "polmauri": 1036, "poloso": 1043, "polycollect": [806, 823], "polynomi": [1, 54, 155, 178, 180, 187, 189, 207, 213, 238, 245, 264, 279, 315, 316, 333, 342, 364, 368, 449, 488, 620, 639, 640, 641, 643, 645, 672, 765, 774, 775, 830, 865, 874, 876, 879, 883, 904, 906, 907, 908, 909, 910, 994, 1014, 1020, 1021, 1025, 1041, 1042], "polynomial_featur": 279, "polynomial_kernel": [1, 400, 765, 997, 1046, 1048], "polynomialcountsketch": [1, 188, 639, 641, 991, 1041, 1043, 1046], "polynomialfeatur": [1, 43, 66, 155, 190, 207, 208, 213, 245, 279, 315, 340, 883, 995, 1009, 1033, 1037, 1038, 1039, 1042, 1043, 1045, 1046], "polysemi": 409, "polytop": 513, "pomegran": 1018, "ponc": [409, 529, 535], "poncho": 1023, "pone": 366, "ponnuthurai": 369, "ponzi": 310, "pooch": [86, 372, 390, 397], "pooja": [1044, 1045, 1046], "pool": [384, 442, 635, 851, 968, 1019, 1040], "pooling_func": [442, 1037], "poolqc": 143, "poolsawat": [1043, 1044], "poor": [184, 188, 270, 328, 402, 408, 409, 690, 694, 738, 841, 844, 845, 993, 994, 996, 1001, 1036, 1037, 1038, 1040, 1042], "poor_scor": [920, 922], "poorer": [143, 355, 409], "poorest": 1001, "poorli": [62, 64, 95, 109, 116, 137, 148, 205, 230, 360, 404, 411, 526, 630, 995, 996, 1035], "poorna": [1039, 1041], "pop": [354, 384, 919, 1037], "popa": [1039, 1040], "popitem": 919, "popo": 1032, "popul": [104, 109, 111, 149, 183, 207, 243, 267, 273, 304, 367, 381, 386, 406, 437, 487, 712, 718, 846, 847, 848, 850, 852, 854, 855, 856, 968, 999, 1005, 1009, 1015], "popular": [5, 9, 178, 230, 367, 370, 377, 380, 384, 386, 410, 411, 412, 414, 449, 459, 989, 991, 995, 997, 1004, 1013, 1019], "port": [370, 390, 1039], "portabl": [398, 1018], "portfolio": [207, 224, 993], "portion": [0, 45, 47, 112, 144, 163, 273, 359, 367, 369, 372, 378, 386, 788, 825, 842, 988, 998, 1002], "portland": [404, 415, 441], "portnoi": [995, 1046], "portrait": [45, 409], "pos_class": 47, "pos_label": [234, 243, 258, 278, 386, 403, 435, 436, 698, 700, 702, 706, 707, 709, 727, 729, 730, 738, 782, 783, 784, 787, 789, 799, 871, 888, 999, 1026, 1037, 1041, 1043, 1047], "pos_lr": 267, "pos_lr_bas": 267, "pos_lr_base_std": 267, "pos_tagg": 412, "pos_vector": 412, "pos_window": 412, "pose": [211, 272, 995], "posit": [0, 1, 43, 45, 47, 50, 51, 61, 62, 64, 100, 130, 149, 151, 154, 155, 156, 161, 182, 183, 192, 194, 197, 204, 207, 208, 209, 211, 224, 229, 236, 237, 243, 258, 261, 264, 267, 271, 273, 274, 277, 278, 304, 314, 315, 319, 321, 345, 347, 354, 359, 367, 371, 372, 374, 379, 381, 386, 387, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 416, 435, 436, 439, 443, 444, 446, 461, 464, 492, 496, 498, 502, 506, 507, 508, 523, 525, 527, 528, 529, 531, 533, 534, 535, 540, 543, 544, 546, 547, 548, 555, 559, 560, 561, 562, 591, 592, 593, 594, 595, 597, 598, 599, 601, 605, 609, 610, 611, 620, 631, 632, 643, 646, 647, 648, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 669, 672, 673, 674, 675, 677, 680, 681, 682, 683, 684, 687, 690, 698, 700, 702, 707, 709, 712, 713, 715, 716, 718, 720, 722, 724, 727, 729, 730, 731, 735, 736, 738, 739, 740, 741, 743, 744, 752, 754, 758, 766, 782, 783, 784, 787, 788, 789, 797, 798, 799, 803, 804, 827, 844, 845, 846, 848, 850, 851, 852, 854, 856, 857, 867, 868, 871, 877, 880, 883, 888, 892, 896, 897, 899, 900, 904, 905, 908, 909, 910, 912, 914, 921, 924, 927, 946, 948, 965, 967, 990, 991, 995, 997, 999, 1000, 1002, 1003, 1004, 1006, 1009, 1014, 1026, 1030, 1032, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049], "position": 386, "positive_class": [47, 712], "positive_class_indic": 345, "positive_cod": [120, 529, 535, 540, 543, 544], "positive_dict": [120, 529, 535, 543, 544], "positive_featur": 377, "positive_likelihood_ratio": [267, 712], "positive_onli": [921, 924], "posix": [360, 384], "posixpath": 52, "possa": 1036, "possibl": [30, 43, 52, 55, 63, 64, 72, 82, 88, 103, 109, 120, 137, 140, 149, 151, 167, 183, 184, 185, 186, 201, 207, 223, 224, 238, 240, 258, 263, 264, 265, 266, 267, 269, 270, 271, 273, 274, 283, 313, 336, 343, 347, 348, 355, 359, 360, 361, 365, 366, 367, 372, 373, 374, 375, 376, 378, 380, 384, 385, 386, 390, 395, 398, 401, 402, 403, 404, 405, 407, 408, 409, 411, 412, 414, 416, 418, 427, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 459, 462, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 479, 480, 481, 482, 494, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 687, 688, 689, 690, 691, 692, 709, 712, 721, 722, 723, 724, 728, 742, 756, 778, 783, 785, 788, 797, 798, 799, 800, 802, 803, 804, 806, 812, 813, 814, 818, 819, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 928, 930, 931, 934, 939, 969, 972, 988, 991, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1007, 1009, 1014, 1015, 1019, 1023, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1042, 1043, 1044, 1045, 1049], "possibli": [90, 116, 163, 207, 221, 340, 348, 369, 371, 398, 404, 411, 412, 448, 450, 588, 839, 840, 841, 842, 843, 909, 910, 912, 913, 914, 915, 988, 991, 996, 1002, 1009, 1044, 1048], "post": [1, 46, 54, 57, 102, 162, 163, 165, 180, 234, 256, 268, 271, 281, 317, 321, 328, 347, 348, 349, 350, 354, 359, 367, 371, 372, 377, 385, 399, 404, 445, 485, 486, 494, 498, 549, 555, 556, 557, 558, 559, 562, 563, 609, 658, 700, 702, 712, 718, 742, 784, 787, 799, 800, 816, 822, 827, 830, 865, 884, 902, 912, 913, 914, 915, 999, 1015, 1020, 1022, 1023, 1025, 1040], "post1": [370, 390, 396, 397, 1027], "poster": [347, 371, 372], "posterior": [166, 167, 168, 173, 180, 190, 258, 264, 278, 409, 414, 547, 548, 550, 610, 611, 613, 614, 615, 619, 622, 623, 627, 644, 645, 708, 797, 799, 822, 993, 1018, 1020, 1035, 1038, 1049], "posteriori": [995, 1001], "postfit_hook": 46, "postpon": [374, 376], "postprocess": [61, 402, 533, 539], "postprocessor": 1040, "postscript": 916, "potenti": [1, 43, 64, 88, 109, 149, 179, 182, 184, 190, 201, 258, 263, 290, 291, 299, 319, 320, 322, 340, 349, 359, 360, 370, 372, 386, 390, 395, 403, 404, 408, 411, 412, 465, 479, 480, 481, 482, 494, 522, 547, 555, 556, 559, 560, 562, 563, 571, 605, 611, 634, 763, 822, 894, 895, 902, 912, 913, 914, 915, 1005, 1013, 1015, 1018, 1032, 1039, 1040, 1043, 1046, 1047], "poughon": 1036, "poundal": 102, "pour": 999, "pourbozorg": [1037, 1038, 1039], "pow": [676, 677, 678, 861, 862], "powel": [45, 367, 1049], "power": [1, 43, 46, 55, 140, 144, 182, 208, 224, 255, 267, 272, 288, 304, 305, 308, 325, 333, 359, 360, 385, 402, 404, 407, 410, 411, 412, 415, 441, 479, 480, 481, 530, 533, 539, 542, 630, 680, 694, 724, 747, 749, 752, 846, 847, 854, 855, 857, 858, 879, 880, 881, 892, 893, 947, 948, 995, 996, 999, 1007, 1009, 1013, 1014, 1023, 1032, 1035, 1037, 1039, 1040, 1042, 1046], "power_iteration_norm": [104, 245, 263, 400, 539, 542, 947, 948, 1043], "power_t": [244, 676, 677, 678, 861, 862, 1013], "power_transform": [1, 880, 893, 1037], "powers_": 879, "powertransform": [1, 308, 881, 892, 989, 1009, 1037, 1040, 1043, 1045, 1048, 1049], "pox": 281, "poznik": [1042, 1043, 1044], "pp": [0, 96, 163, 263, 369, 404, 406, 412, 415, 416, 441, 445, 449, 459, 509, 531, 532, 539, 589, 635, 643, 664, 685, 686, 720, 726, 730, 740, 756, 769, 783, 839, 841, 843, 860, 880, 892, 992, 999, 1001, 1002, 1012], "pp2013": 991, "pp84": 414, "ppc64le": 380, "ppf": 264, "ppm": 172, "pprint": [55, 146, 240, 265, 367, 943], "pq": [52, 318], "pr": [0, 360, 372, 375, 376, 380, 412, 741, 999, 1022, 1039, 1041, 1049], "pr_displai": 234, "pr_number": 380, "prabakaran": [1037, 1038, 1041, 1043, 1044], "prabhakar": 409, "practic": [64, 86, 103, 111, 116, 123, 140, 143, 144, 149, 167, 182, 183, 188, 194, 201, 209, 212, 233, 239, 265, 272, 290, 291, 315, 321, 336, 340, 360, 372, 374, 375, 376, 378, 380, 385, 386, 404, 406, 408, 409, 410, 411, 412, 414, 444, 449, 459, 519, 522, 588, 632, 633, 670, 797, 843, 897, 904, 988, 989, 993, 995, 998, 999, 1000, 1001, 1002, 1005, 1006, 1009, 1018, 1019, 1021, 1023, 1024, 1025, 1031, 1035, 1037, 1039, 1041], "practicalswift": 1035, "practition": [138, 211], "pradeep": [1037, 1038], "pragmat": 372, "prakash": [1034, 1036, 1042], "pramod": 1043, "pranayanchuri": 1042, "prang": 373, "prasanth": 1044, "pratama": 1040, "pratap": [1033, 1036, 1043], "prathmesh": 1038, "pratik": 1036, "pratiqu": 369, "pravar": 1037, "pravarmahajan": [1036, 1037], "pre": [44, 103, 183, 198, 277, 304, 322, 349, 370, 372, 386, 390, 403, 406, 408, 409, 411, 412, 413, 415, 416, 440, 441, 444, 456, 531, 533, 609, 690, 712, 763, 867, 909, 999, 1004, 1009, 1014, 1015, 1018, 1025, 1032, 1037, 1043, 1047], "pre_dispatch": [103, 104, 245, 254, 258, 262, 263, 264, 800, 806, 814, 823, 825, 826, 827, 828, 831, 966, 1032], "preambl": 88, "prec": [113, 234, 525, 999], "prec_": 113, "prec_macro": 408, "preced": [360, 372, 376, 484, 999, 1029], "precipit": 402, "precis": [1, 7, 45, 52, 62, 68, 102, 107, 113, 120, 160, 173, 174, 180, 188, 234, 256, 257, 258, 262, 302, 304, 325, 326, 372, 386, 400, 401, 402, 403, 404, 406, 409, 411, 440, 466, 467, 468, 469, 470, 471, 472, 473, 475, 502, 521, 530, 532, 539, 542, 644, 645, 646, 648, 650, 651, 652, 654, 655, 656, 657, 669, 672, 674, 680, 682, 683, 687, 699, 700, 706, 707, 708, 713, 727, 729, 730, 731, 739, 741, 763, 782, 783, 784, 787, 788, 797, 798, 822, 830, 833, 844, 845, 850, 865, 884, 888, 904, 909, 916, 918, 948, 993, 995, 1002, 1003, 1014, 1020, 1029, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1049], "precision_": [51, 113, 466, 467, 468, 469, 470, 471, 472, 473], "precision_macro": 408, "precision_recall_curv": [1, 234, 271, 700, 706, 707, 727, 999, 1030, 1031, 1035, 1042, 1043, 1045, 1047], "precision_recall_fscore_support": [1, 400, 713, 729, 730, 784, 787, 999, 1033, 1037, 1039, 1045], "precision_scor": [1, 62, 258, 271, 400, 708, 787, 999, 1029, 1031, 1032, 1033, 1034, 1039, 1045, 1049], "precision_threshold": 262, "precisionrecalldisplai": [1, 258, 271, 316, 707, 782, 784, 787, 999, 1039, 1042, 1045, 1046, 1047, 1048], "precisions_": [797, 798], "precisions_cholesky_": [797, 798, 1043], "precisions_init": [254, 798, 1043, 1045], "precompil": 370, "precomput": [119, 120, 154, 180, 189, 229, 240, 284, 286, 345, 374, 381, 384, 386, 404, 412, 415, 427, 437, 438, 441, 442, 443, 447, 449, 454, 462, 468, 479, 480, 481, 522, 529, 533, 535, 538, 539, 540, 546, 552, 554, 556, 558, 560, 563, 566, 568, 610, 611, 620, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 678, 679, 681, 682, 684, 685, 688, 690, 691, 692, 696, 774, 778, 781, 792, 793, 800, 814, 837, 838, 846, 847, 848, 850, 851, 852, 854, 855, 856, 862, 905, 906, 907, 908, 909, 910, 913, 915, 921, 974, 975, 976, 991, 995, 997, 1002, 1014, 1020, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047], "precompute_dist": [1033, 1040], "precompute_gram": 1031, "precomputed_nearest_neighbor": [449, 691], "precondit": [404, 449, 459, 695, 1015, 1045], "pred": [43, 46, 50, 52, 68, 344, 347, 367, 648, 669, 680, 697, 718, 729, 730, 738, 783, 784, 787, 999], "pred1": 156, "pred2": 156, "pred3": 156, "pred4": 156, "pred_background": 50, "pred_decis": [735, 999, 1042], "pred_entropi": [325, 326], "pred_nam": 45, "pred_ort": 398, "pred_scor": 46, "pred_test": 50, "pred_typ": 49, "predecessor": [134, 447, 452, 453, 454, 1046], "predecessor_": [447, 454], "predecessor_correct": [447, 453], "predefin": [1, 268, 813, 988, 1002, 1044, 1046], "predefinedsplit": [1, 408, 1033], "predetermin": [404, 996], "predict": [1, 4, 12, 27, 42, 45, 46, 47, 50, 60, 62, 63, 64, 66, 68, 70, 72, 79, 89, 90, 91, 95, 102, 103, 104, 105, 107, 115, 130, 132, 133, 134, 136, 137, 138, 140, 141, 142, 143, 144, 147, 149, 150, 151, 152, 153, 154, 160, 161, 163, 165, 166, 167, 169, 170, 172, 173, 174, 175, 176, 178, 179, 180, 183, 184, 185, 186, 188, 190, 193, 194, 201, 204, 205, 208, 209, 210, 211, 213, 214, 215, 220, 221, 223, 224, 233, 234, 236, 238, 240, 242, 250, 251, 252, 253, 254, 255, 256, 257, 261, 262, 264, 266, 267, 270, 273, 274, 278, 279, 281, 283, 287, 290, 291, 292, 295, 296, 302, 304, 305, 309, 310, 313, 314, 315, 316, 317, 319, 320, 321, 322, 326, 328, 329, 330, 332, 333, 335, 336, 340, 342, 343, 344, 347, 348, 352, 354, 355, 358, 360, 364, 367, 369, 372, 374, 379, 381, 386, 389, 395, 398, 399, 400, 402, 404, 405, 407, 409, 411, 412, 413, 418, 421, 426, 427, 434, 435, 436, 437, 439, 440, 441, 444, 445, 446, 462, 466, 479, 480, 481, 484, 499, 506, 522, 532, 539, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 576, 581, 592, 593, 605, 609, 610, 611, 613, 614, 615, 616, 622, 625, 627, 628, 630, 631, 632, 633, 634, 635, 637, 639, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 697, 698, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 712, 714, 715, 718, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 734, 735, 738, 741, 742, 743, 746, 748, 750, 752, 756, 782, 783, 784, 785, 786, 787, 788, 789, 793, 794, 796, 797, 798, 799, 800, 803, 804, 806, 814, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 850, 851, 854, 855, 861, 862, 864, 865, 871, 879, 883, 884, 885, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 920, 923, 972, 988, 989, 990, 991, 992, 993, 994, 995, 997, 998, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1009, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1020, 1023, 1025, 1026, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "predict_ecoc": 1033, "predict_joint_log_proba": [839, 840, 841, 842, 843, 1044], "predict_log_proba": [374, 386, 547, 548, 549, 551, 553, 555, 557, 562, 592, 593, 658, 659, 676, 799, 800, 803, 804, 814, 822, 825, 835, 839, 840, 841, 842, 843, 851, 861, 864, 901, 906, 909, 912, 914, 1014, 1029, 1042, 1046, 1048, 1049], "predict_ovo": 1033, "predict_ovr": 1033, "predict_param": [240, 462, 565, 566, 592, 593, 1042], "predict_proba": [30, 61, 62, 63, 64, 66, 70, 152, 155, 163, 165, 168, 169, 170, 171, 258, 273, 278, 283, 299, 306, 309, 313, 315, 321, 347, 374, 379, 386, 402, 403, 408, 411, 434, 435, 547, 548, 549, 551, 553, 555, 557, 559, 562, 565, 567, 592, 593, 610, 619, 620, 622, 623, 631, 632, 633, 658, 659, 676, 698, 700, 702, 722, 727, 741, 742, 788, 797, 798, 799, 800, 803, 804, 814, 822, 825, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 846, 851, 854, 861, 864, 871, 899, 900, 901, 906, 909, 912, 914, 923, 995, 999, 1001, 1003, 1006, 1012, 1013, 1014, 1015, 1026, 1029, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049], "predict_proba_ovr": 1033, "predicted_label": [325, 326], "prediction_df": 149, "prediction_perform": 46, "prediction_performance_comput": 46, "prediction_performance_label": 46, "prediction_pow": 46, "prediction_tim": [46, 47], "prediction_titl": 45, "predictionerrordisplai": [1, 43, 52, 107, 154, 183, 260, 318, 999, 1044, 1046, 1048], "predictions_kr": 167, "predictive_analyt": 1015, "predictive_word": 347, "predictor": [1, 107, 133, 135, 143, 156, 178, 179, 180, 207, 224, 235, 374, 385, 386, 405, 407, 408, 411, 414, 463, 464, 479, 480, 481, 494, 514, 515, 516, 553, 554, 560, 563, 566, 601, 610, 630, 632, 633, 648, 653, 657, 669, 673, 680, 701, 825, 827, 836, 837, 864, 865, 877, 878, 884, 972, 995, 1000, 1020, 1030, 1036, 1039], "predispatch": [806, 823, 828, 831], "predit": 116, "predomin": [374, 1030], "prefer": [73, 79, 88, 149, 155, 255, 263, 273, 304, 355, 359, 360, 361, 372, 373, 374, 386, 404, 408, 409, 411, 412, 437, 451, 468, 469, 475, 484, 506, 507, 627, 632, 633, 654, 658, 659, 701, 726, 728, 742, 757, 758, 835, 853, 879, 904, 905, 954, 966, 988, 991, 993, 995, 999, 1004, 1014, 1015, 1018, 1022, 1030, 1036, 1038, 1042, 1043, 1046, 1049], "prefetch": 966, "prefit": [258, 386, 403, 413, 434, 565, 566, 596, 822, 1041, 1042, 1043, 1048, 1049], "prefix": [1, 55, 102, 265, 286, 313, 372, 376, 378, 380, 414, 420, 439, 440, 442, 444, 446, 461, 464, 479, 480, 481, 482, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 639, 640, 641, 642, 688, 689, 692, 806, 828, 848, 853, 856, 860, 863, 864, 866, 870, 896, 897, 1035, 1036, 1042, 1044, 1047], "prein": [0, 362, 1041, 1042, 1043, 1048], "preiss": 1042, "preliminari": [322, 459, 1048], "prematur": 1042, "prepar": [208, 240, 323, 347, 359, 376, 378, 380, 1015, 1023, 1037, 1045], "prepend": [183, 1029], "preprint": 369, "preprocess": [1, 43, 44, 45, 49, 64, 66, 67, 77, 79, 82, 86, 88, 91, 95, 102, 103, 104, 105, 107, 116, 120, 130, 139, 143, 155, 159, 161, 163, 172, 178, 179, 185, 188, 190, 192, 196, 198, 200, 202, 207, 208, 213, 222, 224, 227, 234, 235, 244, 247, 258, 261, 271, 273, 278, 279, 287, 292, 293, 299, 300, 302, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 329, 336, 339, 348, 361, 364, 366, 369, 372, 377, 385, 386, 398, 400, 401, 404, 405, 408, 411, 412, 413, 461, 462, 463, 464, 486, 565, 580, 581, 587, 588, 590, 630, 658, 659, 672, 674, 676, 678, 687, 833, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 904, 905, 906, 907, 909, 910, 989, 995, 1000, 1003, 1010, 1013, 1014, 1016, 1018, 1020, 1022, 1023, 1025, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "preprocessor": [103, 154, 183, 207, 235, 243, 245, 265, 310, 314, 316, 317, 318, 320, 405, 412, 587, 588, 590, 1018, 1029, 1032, 1037, 1039], "preprocessor__cat__selector__percentil": 103, "preprocessor__num__imputer__strategi": 103, "preprocessor_list": 243, "prescrib": 386, "presenc": [1, 48, 93, 95, 111, 112, 132, 182, 186, 194, 211, 243, 304, 370, 373, 386, 406, 408, 409, 644, 646, 652, 712, 726, 756, 769, 833, 867, 875, 877, 884, 982, 989, 995, 999, 1000, 1013, 1022, 1032, 1033, 1035, 1039, 1041, 1043], "present": [0, 1, 43, 44, 52, 78, 82, 118, 120, 127, 139, 140, 146, 149, 150, 155, 162, 163, 173, 176, 190, 193, 194, 198, 207, 233, 236, 240, 254, 258, 262, 267, 270, 273, 274, 284, 304, 307, 309, 348, 369, 370, 377, 384, 386, 395, 402, 404, 406, 409, 411, 412, 422, 423, 426, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 461, 465, 466, 467, 468, 469, 470, 471, 472, 473, 486, 487, 488, 489, 490, 494, 498, 499, 500, 501, 502, 503, 508, 529, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 547, 548, 559, 560, 561, 564, 567, 568, 580, 581, 582, 587, 588, 590, 609, 617, 627, 628, 629, 630, 650, 654, 677, 688, 689, 690, 691, 712, 716, 729, 730, 738, 769, 783, 784, 787, 797, 798, 800, 803, 804, 812, 814, 828, 846, 847, 848, 850, 852, 854, 855, 856, 863, 868, 876, 877, 878, 879, 880, 882, 885, 896, 897, 908, 916, 918, 919, 948, 982, 998, 999, 1000, 1001, 1006, 1009, 1019, 1032, 1037, 1039, 1040, 1041, 1043, 1044, 1046, 1048, 1049], "preserv": [37, 43, 125, 230, 237, 259, 375, 408, 409, 411, 412, 580, 587, 588, 590, 630, 646, 652, 696, 774, 778, 818, 819, 820, 888, 925, 930, 931, 969, 989, 995, 996, 1009, 1011, 1018, 1029, 1032, 1033, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1047, 1048, 1049], "preserves_dtyp": 925, "preset": [666, 668, 676, 1003], "presort": [1034, 1039], "press": [367, 404, 409, 414, 415, 441, 589, 610, 611, 614, 619, 622, 643, 839, 843, 992, 995, 997, 1001], "pressur": [163, 369], "preston": [1034, 1035, 1036], "presum": [183, 283, 404, 412, 839], "prettenhof": [0, 394, 1029, 1030, 1031, 1032, 1033, 1034], "pretti": [184, 230, 262, 347, 359, 372, 384, 861, 862, 1003, 1038], "preuss": 1045, "prev_scor": 55, "preval": [134, 313, 386, 700, 712, 999], "prevalence_pos_label": [271, 700], "prevent": [1, 43, 88, 144, 146, 160, 182, 208, 211, 263, 304, 310, 311, 336, 347, 351, 355, 372, 374, 376, 384, 385, 398, 400, 404, 409, 412, 439, 446, 485, 486, 559, 560, 589, 590, 609, 611, 728, 785, 861, 862, 889, 890, 892, 893, 894, 895, 999, 1001, 1004, 1005, 1009, 1015, 1031, 1032, 1034, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1047, 1049], "previou": [43, 66, 78, 86, 103, 120, 137, 143, 144, 146, 154, 167, 172, 173, 182, 183, 184, 194, 195, 208, 237, 239, 240, 258, 264, 267, 271, 304, 309, 317, 347, 348, 349, 355, 359, 367, 372, 374, 376, 377, 378, 380, 384, 386, 387, 390, 403, 404, 411, 412, 465, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 630, 646, 648, 652, 653, 658, 660, 662, 666, 667, 668, 669, 676, 677, 678, 680, 698, 707, 727, 819, 821, 835, 838, 853, 861, 862, 901, 918, 995, 1003, 1009, 1019, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "previous": [46, 86, 90, 103, 134, 173, 183, 258, 262, 271, 278, 317, 322, 367, 380, 384, 390, 404, 409, 412, 437, 440, 451, 522, 532, 539, 649, 658, 659, 666, 667, 668, 676, 677, 678, 904, 995, 1009, 1018, 1026, 1029, 1030, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "previous_loss": [666, 667, 668, 677], "previs": 234, "preya": 1049, "price": [51, 107, 143, 144, 149, 154, 243, 310, 989, 995, 996, 1023], "priceless": 372, "prieur": 1042, "primal": [658, 659, 677, 904, 905, 1013, 1014], "primari": [386, 409, 513, 921, 1006, 1022, 1023], "primarili": [255, 269, 372, 386, 400, 404, 958, 1023, 1038, 1039], "primat": 347, "primdal": 1037, "primit": 1044, "princ": 1042, "princip": [1, 42, 114, 115, 119, 122, 124, 125, 128, 130, 152, 180, 215, 226, 238, 241, 251, 257, 270, 287, 293, 309, 315, 333, 352, 364, 404, 407, 416, 481, 502, 529, 530, 531, 532, 533, 535, 537, 538, 539, 540, 541, 542, 543, 544, 548, 657, 688, 689, 690, 692, 693, 830, 853, 865, 884, 919, 947, 948, 996, 1002, 1020, 1024, 1025, 1029], "principl": [134, 174, 289, 349, 372, 384, 386, 387, 400, 408, 411, 948, 988, 998, 1002, 1013, 1036], "print": [1, 43, 45, 46, 47, 49, 50, 51, 52, 54, 55, 57, 58, 59, 61, 63, 68, 73, 77, 78, 80, 81, 82, 83, 85, 86, 91, 93, 94, 96, 100, 102, 103, 105, 106, 107, 111, 115, 116, 118, 120, 123, 126, 127, 128, 130, 134, 137, 140, 141, 142, 143, 145, 147, 149, 155, 159, 160, 162, 163, 165, 167, 168, 170, 172, 176, 182, 184, 185, 186, 188, 194, 195, 197, 200, 204, 205, 207, 209, 210, 211, 214, 221, 222, 224, 227, 228, 231, 235, 237, 239, 240, 243, 247, 252, 257, 258, 262, 264, 265, 267, 269, 272, 273, 277, 284, 288, 295, 297, 300, 301, 302, 306, 309, 311, 313, 314, 315, 317, 319, 320, 321, 322, 325, 326, 329, 336, 347, 348, 349, 351, 354, 355, 359, 366, 367, 373, 374, 380, 386, 395, 398, 405, 408, 411, 412, 414, 461, 464, 465, 469, 475, 487, 492, 500, 510, 511, 539, 542, 547, 548, 557, 558, 559, 560, 562, 563, 567, 568, 576, 582, 583, 584, 586, 587, 588, 590, 612, 617, 618, 630, 646, 647, 649, 650, 652, 653, 654, 656, 660, 661, 662, 663, 666, 667, 676, 677, 684, 696, 713, 717, 737, 795, 797, 798, 799, 801, 802, 805, 807, 808, 809, 810, 813, 815, 816, 817, 818, 819, 820, 821, 822, 826, 827, 828, 829, 831, 833, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 853, 854, 855, 856, 861, 862, 863, 864, 865, 866, 874, 880, 884, 892, 902, 903, 904, 905, 906, 909, 911, 917, 929, 934, 961, 982, 989, 999, 1000, 1001, 1002, 1007, 1015, 1029, 1031, 1037, 1038, 1040, 1044, 1048], "print_changed_onli": [465, 902, 1038, 1040, 1041], "print_datafram": 262, "print_progress": 966, "print_rout": 240, "prior": [1, 42, 46, 55, 80, 81, 90, 99, 100, 118, 166, 167, 173, 179, 180, 190, 192, 194, 248, 250, 254, 255, 258, 261, 264, 294, 372, 374, 386, 390, 395, 404, 407, 409, 411, 413, 414, 462, 521, 534, 546, 547, 548, 549, 557, 611, 613, 614, 615, 619, 622, 623, 630, 644, 645, 646, 647, 651, 652, 654, 655, 656, 660, 661, 662, 672, 678, 681, 716, 797, 839, 840, 841, 842, 843, 851, 864, 865, 879, 906, 909, 967, 988, 991, 993, 995, 998, 999, 1001, 1007, 1015, 1016, 1020, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1042, 1045], "prior_k": 547, "priori": [207, 223, 273, 283, 304, 386, 404, 411, 587, 593, 998, 1045], "priorit": [403, 1019, 1036], "prioriti": [371, 632, 832, 833, 1019, 1032], "prioritis": 372, "priors_": [547, 548], "privaci": 1018, "privat": [0, 322, 374, 376, 386, 387, 926, 1023, 1029, 1037, 1039, 1040, 1042, 1043, 1048, 1049], "privileg": [243, 380], "priyam": 1044, "priyank": [1047, 1048], "priyansh": [1047, 1048], "priyash": 1047, "prng": 113, "pro": [398, 998], "proanthocyanin": 369, "prob_pos_calibr": 165, "prob_pos_clf": [61, 165], "prob_pos_isoton": 61, "prob_pos_sigmoid": 61, "prob_pr": [435, 436], "prob_tru": [435, 436], "proba": [62, 64, 434, 553, 912, 914], "proba_": [906, 909, 1040], "proba_map": 88, "proba_neg_class": [62, 64], "proba_pos_class": [62, 64], "probabilist": [54, 63, 64, 113, 119, 130, 133, 166, 167, 170, 173, 174, 180, 208, 239, 258, 347, 386, 402, 410, 411, 434, 470, 473, 530, 532, 533, 539, 557, 567, 587, 588, 610, 622, 631, 639, 643, 645, 658, 676, 703, 741, 799, 800, 826, 865, 871, 879, 883, 884, 906, 907, 909, 910, 992, 993, 995, 998, 999, 1004, 1009, 1014, 1015, 1018, 1020, 1023, 1029, 1032, 1036, 1049], "probabilisticpca": [1029, 1032], "probabilities_": [88, 443], "probabilities_or_label": 567, "probabl": [0, 1, 4, 30, 52, 60, 64, 65, 70, 88, 107, 118, 136, 147, 149, 155, 158, 165, 166, 167, 168, 169, 180, 183, 186, 201, 218, 226, 230, 234, 236, 237, 245, 246, 258, 262, 264, 266, 267, 270, 271, 274, 278, 302, 304, 308, 313, 315, 321, 328, 330, 342, 359, 367, 368, 374, 378, 384, 386, 403, 404, 408, 409, 412, 413, 414, 430, 431, 432, 433, 434, 435, 436, 443, 444, 446, 502, 510, 513, 521, 525, 547, 548, 549, 551, 553, 555, 557, 559, 562, 565, 567, 568, 592, 593, 609, 610, 613, 614, 622, 627, 631, 632, 633, 639, 658, 659, 671, 676, 692, 698, 700, 702, 703, 706, 707, 709, 712, 716, 720, 722, 726, 727, 729, 739, 740, 741, 756, 782, 784, 787, 788, 789, 794, 797, 798, 799, 800, 803, 804, 814, 822, 829, 830, 833, 835, 836, 839, 840, 841, 842, 843, 846, 849, 851, 854, 860, 861, 865, 869, 879, 883, 885, 897, 898, 899, 900, 901, 904, 906, 909, 912, 914, 969, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1009, 1011, 1012, 1013, 1015, 1019, 1020, 1021, 1022, 1025, 1026, 1029, 1031, 1033, 1035, 1037, 1038, 1039, 1040, 1041, 1043], "probable_clust": 89, "probas_pr": 1047, "probb_": [906, 909, 1040], "probe": 1007, "probinette4": 1041, "probl": [606, 607], "problem": [1, 10, 25, 42, 43, 44, 45, 50, 52, 53, 54, 63, 66, 72, 87, 88, 90, 99, 120, 134, 137, 140, 146, 147, 167, 180, 185, 188, 190, 194, 195, 198, 201, 202, 203, 205, 207, 209, 211, 223, 224, 228, 233, 234, 241, 243, 246, 262, 264, 269, 273, 274, 278, 279, 281, 283, 284, 289, 296, 308, 316, 320, 321, 333, 336, 340, 343, 344, 347, 348, 354, 355, 359, 367, 368, 369, 370, 371, 373, 374, 377, 378, 380, 381, 384, 386, 392, 400, 402, 403, 404, 406, 408, 410, 411, 412, 413, 414, 415, 416, 441, 444, 446, 447, 449, 454, 459, 462, 475, 501, 506, 507, 513, 514, 515, 516, 521, 522, 526, 529, 531, 535, 537, 540, 541, 542, 543, 544, 545, 546, 549, 550, 555, 559, 562, 565, 569, 571, 588, 610, 631, 643, 648, 650, 652, 654, 655, 656, 657, 658, 659, 664, 665, 666, 668, 669, 672, 673, 674, 675, 676, 677, 679, 680, 685, 686, 687, 688, 689, 691, 693, 695, 708, 716, 719, 729, 730, 735, 738, 739, 783, 784, 787, 788, 797, 798, 801, 802, 803, 804, 805, 807, 808, 809, 810, 815, 816, 817, 818, 819, 820, 824, 832, 833, 834, 844, 845, 846, 847, 848, 849, 850, 852, 854, 855, 856, 870, 871, 877, 885, 888, 894, 895, 904, 905, 912, 914, 936, 948, 989, 990, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1007, 1009, 1013, 1016, 1019, 1021, 1023, 1024, 1025, 1029, 1030, 1032, 1034, 1035, 1036, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1049], "problemat": [43, 183, 258, 260, 405, 989, 1037], "proc": [64, 110, 402, 412, 447, 689, 693, 839, 988, 996, 1001, 1005], "proce": [0, 83, 160, 192, 370, 376, 407, 408, 411, 437, 877, 995], "procedur": [25, 80, 89, 140, 146, 163, 191, 196, 254, 266, 307, 311, 336, 347, 355, 372, 384, 385, 386, 387, 402, 406, 408, 409, 411, 413, 529, 535, 536, 538, 543, 544, 545, 551, 552, 553, 554, 557, 558, 592, 594, 601, 608, 644, 672, 674, 687, 728, 785, 846, 854, 861, 862, 881, 893, 921, 969, 988, 995, 1001, 1009, 1012, 1013, 1014, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "proceed": [111, 163, 367, 369, 404, 415, 436, 441, 509, 696, 708, 726, 756, 851, 901, 999, 1011, 1012, 1013], "process": [0, 1, 19, 37, 43, 44, 57, 63, 66, 67, 70, 80, 81, 83, 99, 102, 104, 106, 110, 112, 121, 122, 124, 127, 134, 136, 142, 144, 146, 151, 152, 182, 190, 193, 209, 211, 216, 217, 218, 219, 239, 240, 241, 243, 249, 250, 253, 255, 258, 264, 266, 267, 276, 281, 299, 304, 307, 315, 319, 326, 330, 340, 341, 348, 349, 351, 359, 360, 361, 367, 371, 372, 374, 376, 378, 381, 384, 385, 386, 398, 400, 404, 405, 406, 408, 409, 410, 411, 412, 413, 417, 445, 446, 472, 494, 502, 521, 532, 533, 534, 535, 536, 559, 560, 561, 587, 588, 590, 610, 611, 613, 614, 615, 617, 618, 619, 622, 623, 625, 627, 632, 633, 639, 643, 664, 672, 685, 686, 703, 723, 741, 781, 797, 799, 800, 803, 804, 814, 822, 825, 826, 827, 836, 837, 853, 867, 871, 873, 874, 875, 884, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 966, 988, 991, 995, 999, 1002, 1009, 1011, 1013, 1015, 1018, 1019, 1020, 1021, 1023, 1025, 1029, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1045, 1046, 1048, 1049], "process_rout": [1, 240, 1046], "processor": [103, 154, 183, 415, 434, 441, 443, 445, 447, 449, 454, 455, 458, 461, 464, 469, 529, 533, 534, 535, 537, 540, 541, 543, 544, 546, 553, 554, 555, 556, 561, 562, 563, 564, 565, 566, 567, 568, 593, 601, 606, 607, 610, 632, 634, 639, 647, 651, 653, 655, 657, 658, 659, 661, 663, 665, 666, 668, 676, 679, 688, 689, 690, 691, 692, 693, 694, 774, 778, 781, 800, 803, 804, 806, 814, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 846, 847, 850, 852, 854, 855, 857, 858, 863, 866, 899, 900], "procter": 51, "prod": [348, 621], "prod_": 1001, "prod_i": 991, "proding": 1045, "produc": [52, 53, 62, 63, 79, 90, 102, 123, 146, 147, 148, 150, 155, 194, 201, 270, 302, 328, 355, 360, 367, 368, 372, 374, 377, 386, 387, 404, 405, 408, 409, 411, 437, 440, 443, 449, 517, 534, 557, 561, 580, 587, 592, 593, 632, 633, 802, 803, 804, 812, 817, 820, 825, 869, 879, 906, 909, 990, 991, 995, 997, 998, 999, 1002, 1005, 1006, 1010, 1012, 1013, 1014, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "product": [1, 58, 103, 120, 155, 167, 172, 184, 340, 355, 359, 374, 375, 378, 381, 401, 409, 448, 536, 538, 545, 581, 588, 589, 590, 613, 614, 633, 640, 664, 665, 685, 686, 761, 763, 775, 777, 876, 879, 896, 897, 949, 988, 991, 995, 997, 1009, 1011, 1013, 1014, 1018, 1023, 1025, 1037], "production": 1023, "prof": 378, "profession": 183, "professor": 1023, "profil": [207, 359, 372, 375, 519, 522, 995, 1023], "profile_default": 378, "profit": [0, 258, 321, 1046], "prog": [163, 369], "prognosi": [163, 369], "program": [0, 83, 163, 348, 355, 360, 361, 369, 370, 372, 374, 378, 384, 506, 635, 670, 894, 895, 995, 1014, 1015, 1018, 1019, 1022, 1029, 1031], "programmat": [374, 497, 1038], "progress": [43, 46, 47, 120, 156, 163, 179, 202, 289, 317, 322, 369, 376, 377, 387, 395, 400, 404, 557, 558, 692, 833, 835, 838, 853, 861, 862, 1023, 1029, 1031, 1038, 1043], "prohibit": [182, 243, 408, 411, 627, 1004, 1012, 1036], "proj": [53, 649], "proj_gradi": 378, "proj_oper": 53, "project": [1, 37, 45, 47, 50, 53, 55, 69, 72, 88, 91, 100, 119, 120, 122, 124, 126, 130, 171, 173, 175, 180, 184, 226, 227, 228, 229, 230, 232, 238, 241, 250, 267, 288, 293, 297, 302, 333, 348, 359, 364, 366, 370, 371, 372, 377, 378, 381, 386, 387, 390, 401, 407, 409, 410, 416, 437, 443, 448, 449, 459, 471, 479, 480, 481, 482, 486, 500, 502, 529, 531, 532, 533, 535, 537, 539, 540, 541, 542, 546, 547, 571, 581, 588, 641, 642, 649, 672, 674, 688, 691, 695, 696, 834, 853, 881, 896, 897, 898, 947, 948, 993, 995, 996, 997, 1000, 1002, 1003, 1005, 1012, 1015, 1020, 1022, 1023, 1025, 1029, 1030, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "projected_data": 237, "projected_dist": 237, "projectedgradientnmf": 1034, "prokopi": [1034, 1037], "prolin": [57, 309, 369], "promin": [123, 386], "promis": [386, 999, 1019], "promot": [183, 439, 708, 1018, 1040, 1042, 1046], "prompt": [370, 372, 376, 390, 397, 412], "prone": [64, 207, 251, 308, 384, 402], "pronounc": [74, 75, 85, 172], "proof": [384, 411, 898, 1011], "prop": [105, 112, 213, 251, 290, 335, 354], "prop_cycl": 274, "propag": [1, 58, 68, 71, 72, 82, 96, 161, 180, 324, 367, 437, 451, 500, 510, 512, 697, 704, 705, 713, 714, 717, 718, 737, 793, 795, 864, 878, 899, 900, 901, 966, 967, 1003, 1020, 1021, 1024, 1025, 1029, 1041, 1044, 1049], "proper": [64, 88, 198, 201, 224, 258, 361, 374, 378, 402, 411, 446, 539, 551, 676, 709, 948, 973, 994, 995, 996, 999, 1014, 1029, 1039, 1040, 1041, 1042, 1043, 1044, 1046], "properli": [43, 52, 62, 88, 151, 172, 259, 277, 313, 361, 370, 372, 376, 380, 410, 904, 905, 906, 907, 908, 909, 910, 988, 1032, 1034, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "properti": [51, 62, 174, 175, 209, 223, 250, 263, 286, 309, 322, 354, 359, 365, 372, 374, 390, 401, 402, 404, 406, 409, 411, 413, 414, 419, 439, 442, 449, 565, 566, 567, 568, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 632, 655, 699, 704, 705, 708, 864, 904, 905, 988, 991, 994, 995, 996, 999, 1000, 1002, 1005, 1009, 1012, 1014, 1015, 1016, 1019, 1034, 1038, 1039, 1042, 1043, 1046, 1047, 1048, 1049], "property_magnitud": 258, "propon": 102, "proport": [54, 63, 75, 149, 162, 195, 207, 219, 224, 233, 243, 258, 267, 270, 271, 287, 291, 294, 343, 345, 354, 359, 367, 402, 404, 406, 408, 409, 411, 412, 435, 436, 443, 466, 471, 513, 547, 548, 553, 555, 557, 558, 559, 560, 561, 562, 582, 583, 587, 590, 627, 632, 658, 659, 666, 667, 668, 674, 675, 676, 678, 696, 701, 712, 722, 801, 802, 803, 804, 817, 820, 830, 850, 851, 861, 862, 878, 904, 905, 906, 909, 910, 912, 914, 916, 918, 936, 988, 998, 999, 1002, 1005, 1013, 1014, 1015, 1034, 1046], "propos": [90, 109, 110, 284, 367, 372, 374, 384, 386, 404, 406, 411, 416, 447, 533, 606, 607, 676, 677, 678, 861, 862, 995, 998, 1002, 1013, 1036], "proprietari": 1015, "propto": [410, 1001], "prorokovi\u0107": 1047, "protect": [373, 376, 966], "protein": 366, "protocol": [398, 999, 1018, 1032, 1045, 1046], "protocol_typ": 243, "prototyp": 1023, "prove": [121, 1023], "proven": [264, 993, 997, 1022, 1023], "provenc": 310, "provid": [0, 1, 30, 31, 44, 47, 50, 52, 61, 64, 66, 70, 72, 77, 88, 93, 112, 120, 141, 149, 152, 154, 155, 167, 173, 183, 184, 190, 195, 196, 198, 201, 208, 211, 227, 231, 234, 235, 240, 254, 258, 263, 264, 265, 266, 270, 294, 297, 301, 304, 308, 313, 314, 316, 318, 322, 334, 340, 343, 347, 348, 351, 354, 355, 359, 361, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 378, 380, 381, 384, 385, 386, 389, 390, 395, 398, 400, 401, 403, 404, 405, 406, 408, 409, 411, 412, 413, 414, 415, 416, 418, 421, 425, 434, 437, 439, 440, 441, 443, 444, 446, 447, 449, 456, 457, 461, 462, 479, 480, 481, 489, 491, 492, 494, 496, 499, 530, 531, 532, 533, 534, 536, 538, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 587, 589, 590, 592, 593, 600, 604, 610, 611, 627, 632, 633, 634, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 690, 694, 699, 702, 709, 722, 735, 741, 742, 764, 774, 778, 788, 792, 794, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 812, 813, 814, 816, 818, 819, 820, 821, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 861, 862, 864, 867, 869, 870, 871, 874, 875, 876, 879, 881, 883, 884, 899, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 919, 920, 922, 935, 936, 941, 953, 957, 959, 974, 975, 976, 987, 988, 989, 991, 994, 995, 996, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1022, 1023, 1026, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049], "provinc": 310, "provost": [788, 999], "proxi": [182, 183, 409, 413, 860, 1034], "prun": 378, "prune": [180, 350, 354, 413, 498, 555, 556, 557, 558, 562, 563, 592, 644, 830, 912, 913, 914, 915, 1002, 1020, 1021, 1025, 1029, 1032, 1039, 1040], "przybocki": 999, "ps_lsvm_score": 188, "ps_lsvm_time": 188, "pseudo": [208, 302, 374, 408, 416, 437, 449, 451, 459, 466, 467, 468, 470, 471, 472, 473, 531, 559, 560, 561, 627, 634, 639, 641, 642, 646, 647, 652, 653, 660, 661, 662, 663, 677, 691, 695, 803, 804, 812, 814, 853, 860, 896, 897, 901, 904, 905, 906, 909, 947, 948, 995, 1011, 1034, 1043], "pseudo_likelihood": 860, "pseudocount": [534, 1037], "psf": 372, "psi": 409, "psi_1": 409, "psi_2": 409, "psi_n": 409, "pspachtholz": [1039, 1040, 1041], "psycholog": [404, 705, 716], "psychometrica": 635, "psychometrika": [690, 694, 996], "pt": [50, 367, 413, 880, 1009], "pt_i": 294, "pt_j": 294, "ptocca": 1039, "ptp": 51, "pts_": 50, "pts_test": 50, "pts_train": 50, "pub": [231, 899], "public": [0, 110, 322, 366, 372, 374, 376, 377, 384, 385, 386, 387, 408, 411, 465, 664, 671, 685, 686, 692, 902, 995, 1003, 1029, 1034, 1035, 1040, 1041, 1042, 1045], "publicli": [372, 1039], "publish": [366, 367, 374, 376, 380, 386, 1011, 1019, 1041], "pubu": [220, 237, 290, 335], "pubu_r": 111, "puerta": 1044, "puggioni": 1033, "puhuk": [1043, 1044], "pujalt": 1043, "pulapakura": [1046, 1047], "pulchritud": 347, "pulido": 1042, "pulkit": [1037, 1038, 1040], "pull": [102, 316, 322, 360, 370, 375, 386, 387, 400, 1022], "puls": 369, "punctuat": [412, 587, 588, 590], "puneet": 1036, "puneeth": [1046, 1047], "puor": 123, "puor_r": 171, "purchas": 0, "pure": [111, 112, 116, 194, 205, 207, 376, 386, 404, 470, 476, 494, 555, 556, 557, 558, 562, 563, 564, 705, 715, 786, 795, 912, 913, 914, 915, 1009], "pure_emp_cov": 112, "pure_loc": 112, "pure_x": 112, "purepremium": 224, "puriti": [136, 916, 918], "purna": 1043, "purpl": [109, 118, 230, 263], "purport": 1036, "purpos": [48, 51, 66, 72, 116, 144, 149, 178, 220, 221, 222, 226, 228, 241, 252, 254, 258, 260, 261, 336, 337, 343, 347, 348, 355, 367, 372, 385, 386, 387, 390, 397, 401, 404, 405, 409, 411, 412, 413, 414, 826, 827, 864, 921, 996, 999, 1000, 1002, 1005, 1018, 1041, 1043, 1047, 1049], "pursu": 183, "pursuit": [1, 87, 121, 123, 129, 180, 189, 409, 471, 524, 529, 535, 540, 546, 664, 665, 685, 686, 1020, 1021, 1025, 1029], "push": [63, 64, 372, 376, 402, 1022], "pushd": 380, "put": [75, 91, 167, 169, 238, 245, 249, 278, 299, 306, 317, 330, 341, 345, 361, 374, 376, 377, 380, 398, 414, 440, 444, 456, 513, 614, 647, 661, 797, 881, 885, 893, 906, 907, 908, 909, 910, 937, 989, 996, 998, 999, 1000, 1006, 1009], "putnam": 1035, "putschblo": 1042, "pvalu": [1, 591, 594, 595, 597, 598, 599, 829], "pvalue_iri": 270, "pvalue_rand": 270, "pvalues_": [159, 591, 594, 595, 597, 598, 599, 1029], "pvnguyen": 1033, "pwalchessen": 1041, "pwd": 380, "px": [140, 265], "pxd": 372, "py": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 351, 352, 353, 354, 360, 372, 373, 376, 378, 380, 386, 390, 412, 528, 646, 647, 652, 653, 660, 661, 662, 663, 681, 684, 879, 883, 943, 999, 1020, 1029, 1031, 1035, 1039, 1043, 1048], "py3": 390, "py312": 390, "pyamg": [80, 376, 390, 397, 404, 449, 459, 691, 695], "pyarrow": [390, 397, 1049], "pybrain": 1029, "pycon": 398, "pyd": 373, "pydata": [43, 372, 380, 390, 397, 398, 400, 1023], "pydata_2013": 1023, "pydebug": 378, "pyflak": 374, "pyfunc": [699, 1002], "pyfuncdist": 699, "pymc": 1018, "pynndesc": 284, "pynndescenttransform": 284, "pyodid": 372, "pyoxid": 1042, "pypi": [360, 370, 374, 376, 378, 390, 1015, 1037, 1041, 1043, 1044, 1046], "pyplot": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 161, 162, 163, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 182, 183, 184, 186, 188, 190, 191, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 233, 234, 236, 237, 238, 239, 241, 242, 243, 244, 246, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 263, 264, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 317, 318, 320, 325, 326, 327, 328, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 351, 352, 353, 354, 366, 368, 372, 379, 435, 500, 631, 632, 697, 698, 700, 701, 702, 806, 823, 1026, 1043], "pyproject": 376, "pypy3": 1037, "pysniak": 1032, "pystruct": 384, "pytabl": 366, "pytb": 380, "pytest": [1, 313, 360, 370, 372, 374, 375, 390, 397, 400, 941, 942, 943, 1039, 1042], "python": [0, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 351, 352, 353, 354, 359, 361, 366, 370, 372, 373, 374, 375, 376, 377, 380, 381, 384, 386, 390, 391, 397, 398, 400, 405, 412, 494, 506, 507, 580, 699, 811, 878, 999, 1009, 1014, 1015, 1019, 1022, 1023, 1025, 1029, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1046, 1048, 1049], "python2": 1037, "python3": [370, 390], "python37": 390, "pythonsoftwarefound": 390, "pythonx": 370, "pytorch": [45, 321, 322, 323, 384, 1018, 1019, 1045, 1046, 1048], "pytorch_enable_mps_fallback": 400, "pyx": [372, 373, 378, 380], "p\u00e9rez": 1037, "p\u00f6lsterl": [1036, 1039, 1042], "q": [51, 103, 115, 146, 207, 316, 401, 404, 409, 947, 995, 1014], "q1": 507, "q327": 369, "q_": 1014, "q_m": 1015, "q_max": [882, 894], "q_min": [882, 894], "qaiser": 1046, "qda": [67, 369, 547, 548, 1021, 1025, 1034], "qdeffens": [1039, 1042], "qemu": 380, "qi": [507, 1041], "qian": [1035, 1040], "qiang": 1033, "qianm": 1041, "qid": [484, 506, 507, 1030, 1035], "qimu": 1035, "qin": [0, 369, 394, 412, 1036, 1037, 1038, 1039, 1040, 1048], "qingi": 1037, "qizhi": 1040, "qmarcou": 1046, "qn": 507, "qodari": [1047, 1048], "qp": 1014, "qr": [80, 209, 400, 532, 539, 542, 947, 948, 996, 1035, 1046], "qt": [308, 881], "qtconsol": 378, "quad": [414, 1002, 1013], "quadcontourset": 631, "quadmesh": 631, "quadrant": 304, "quadrat": [1, 11, 43, 48, 65, 69, 111, 112, 113, 172, 180, 220, 243, 254, 266, 316, 437, 455, 458, 547, 548, 623, 631, 648, 658, 659, 669, 676, 680, 716, 909, 910, 995, 996, 999, 1002, 1005, 1009, 1013, 1014, 1020, 1021, 1025, 1030], "quadraticdiscriminantanalysi": [1, 67, 70, 547, 993, 1000, 1002, 1029, 1034, 1036, 1044, 1048], "quadro": 1042, "quadv": 1043, "qualifi": [323, 377], "qualit": [44, 45, 86, 88, 94, 140, 146, 207, 318, 367, 404, 436, 701, 1044], "qualiti": [0, 12, 27, 45, 58, 61, 72, 80, 82, 91, 123, 142, 149, 183, 213, 257, 262, 271, 272, 273, 340, 372, 380, 384, 386, 399, 404, 406, 409, 449, 459, 466, 471, 555, 556, 557, 558, 562, 563, 743, 814, 896, 897, 912, 913, 914, 915, 948, 994, 996, 1004, 1011, 1015, 1018, 1019, 1023, 1025], "quang": 1040, "quansight": [0, 1022], "quantifi": [12, 27, 43, 72, 82, 109, 172, 224, 258, 271, 321, 374, 386, 399, 571, 867, 994, 1007, 1009, 1025], "quantil": [1, 79, 86, 96, 134, 136, 151, 154, 180, 189, 304, 307, 308, 310, 318, 368, 384, 411, 435, 436, 455, 517, 550, 551, 558, 560, 657, 670, 723, 745, 748, 750, 827, 869, 881, 882, 883, 893, 894, 999, 1009, 1020, 1021, 1025, 1029, 1033, 1036, 1038, 1042, 1043, 1045, 1047, 1049], "quantile_list": 52, "quantile_method": [66, 207, 224, 305, 306, 307, 318, 869, 1049], "quantile_rang": [304, 882, 894, 1035], "quantile_regress": 209, "quantile_transform": [1, 107, 881, 892, 1009, 1036, 1037, 1038, 1047], "quantileregressor": [1, 316, 995, 999, 1042, 1043, 1044], "quantiles_": [881, 1009, 1039], "quantiletransform": [1, 107, 184, 308, 405, 462, 880, 893, 989, 1009, 1036, 1037, 1038, 1039, 1040, 1045, 1047], "quantit": [43, 44, 45, 52, 62, 94, 146, 149, 156, 163, 260, 279, 369], "quantiti": [51, 143, 201, 264, 315, 359, 386, 404, 411, 414, 721, 722, 723, 724, 785, 860, 988, 990, 993, 995, 1034], "quantiz": [71, 123, 180, 367, 440, 444, 446, 869, 1009, 1020], "quantum": 997, "quartil": 882, "quartimax": [530, 1041], "quasi": [374, 861, 862, 995], "quazi": [1036, 1037], "queensland": 369, "quentin": [1036, 1037, 1038, 1045, 1046, 1048], "queqichao": 1033, "queri": [190, 287, 297, 359, 410, 415, 441, 443, 447, 454, 550, 610, 611, 628, 644, 645, 726, 756, 844, 845, 846, 847, 848, 849, 850, 852, 854, 855, 856, 999, 1002, 1015, 1018, 1022, 1031, 1033, 1034, 1037], "query_id": [484, 506, 507], "query_radiu": [844, 845], "question": [0, 182, 258, 264, 343, 371, 372, 377, 380, 398, 408, 411, 833, 906, 909, 995, 998, 999, 1005, 1023], "queue": [47, 1002, 1032], "quick": [43, 125, 246, 372, 374, 378, 390, 605, 830, 999, 1000, 1009, 1023, 1026], "quicker": 998, "quickest": 370, "quickli": [74, 244, 300, 313, 369, 372, 373, 408, 411, 692, 778, 995, 1002, 1003, 1023, 1040], "quinlan": 1015, "quinonez": 1037, "quintana": 999, "quit": [43, 52, 64, 66, 86, 90, 116, 137, 163, 183, 184, 201, 224, 258, 272, 281, 316, 347, 359, 377, 385, 404, 412, 994, 996, 1001, 1022, 1023, 1037], "quiver": 122, "quot": [37, 51, 52, 54, 102, 265, 347, 348, 360, 366, 367, 370, 372, 376, 390, 391, 400, 485, 486, 494, 999, 1011, 1014, 1044, 1048], "quota": [1042, 1043], "quotat": 367, "quotient": 999, "r": [0, 1, 47, 49, 50, 51, 52, 53, 61, 62, 63, 64, 74, 78, 98, 107, 109, 110, 111, 112, 116, 120, 127, 130, 134, 137, 138, 142, 146, 147, 148, 156, 159, 168, 169, 170, 174, 175, 176, 178, 179, 183, 193, 194, 197, 198, 205, 207, 216, 224, 231, 236, 239, 249, 252, 255, 263, 264, 267, 269, 270, 271, 274, 277, 283, 286, 287, 291, 295, 297, 310, 317, 338, 340, 349, 355, 367, 369, 373, 376, 384, 386, 398, 401, 402, 404, 406, 407, 408, 409, 411, 412, 421, 427, 434, 443, 448, 450, 462, 466, 471, 475, 479, 480, 481, 496, 502, 511, 518, 532, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 565, 566, 567, 568, 587, 588, 589, 590, 593, 605, 608, 610, 611, 627, 635, 639, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 685, 686, 692, 696, 716, 721, 722, 723, 724, 728, 730, 781, 785, 788, 799, 800, 814, 817, 822, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 853, 854, 855, 861, 862, 875, 880, 892, 899, 900, 904, 905, 906, 907, 909, 910, 912, 913, 914, 915, 917, 966, 989, 991, 993, 995, 996, 999, 1000, 1001, 1002, 1003, 1006, 1007, 1009, 1013, 1014, 1015, 1018, 1029, 1033, 1036, 1039, 1040, 1041, 1042, 1044, 1046, 1049], "r0": [803, 804], "r1": 568, "r11": [207, 224], "r2": [107, 135, 140, 154, 182, 184, 204, 239, 277, 405, 411, 552, 568, 827, 862, 922, 999, 1007, 1038], "r2007": 411, "r22": 207, "r25": 224, "r26": 207, "r2_score": [1, 107, 182, 194, 204, 205, 374, 400, 411, 427, 462, 479, 480, 481, 552, 554, 556, 558, 560, 563, 566, 568, 611, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 678, 679, 724, 728, 837, 838, 847, 855, 862, 905, 907, 910, 913, 915, 988, 999, 1030, 1032, 1038, 1042, 1043, 1047, 1049], "r2_score_ard": 194, "r2_score_enet": 194, "r2_score_lasso": 194, "r2_score_nnl": 204, "r2_score_ol": 204, "r2_with_abl": 182, "r2_without_": 182, "r3": 568, "r72": 207, "r73": 224, "r82": 207, "r93": 207, "r_": [50, 129, 219, 220, 250, 271, 290, 291, 335, 341, 404, 707, 999, 1015], "r_0": 988, "r_k": 271, "r_multi": 1007, "r_n": [271, 707, 999], "r_regress": [1, 413, 605, 1042, 1043, 1046], "r_squar": 385, "raamana": [1037, 1038], "rabbit": [317, 319, 1009], "rabi": 1049, "raccoon": [86, 123, 409], "raccoon_fac": [86, 123], "race": [183, 320, 367, 494, 1032], "race_hispan": 183, "race_oth": 183, "race_whit": 183, "rachel": [1041, 1044], "rachelcjordan": 1040, "rachez": [1034, 1035], "rachit": [1035, 1041, 1044], "rachit23110261": 1048, "rachum": 1041, "radar": 1023, "radford": 995, "radhakrishnan": 1037, "radial": [1, 44, 125, 167, 172, 174, 336, 340, 364, 449, 622, 691, 997, 1014, 1025], "radian": [297, 699, 764], "radii": [844, 845], "radiu": [1, 163, 291, 336, 369, 404, 439, 447, 688, 764, 781, 844, 845, 846, 847, 848, 852, 854, 855, 856, 858, 1002, 1031, 1033, 1043, 1046], "radius1": 99, "radius2": 99, "radius3": 99, "radius4": 99, "radius_neighbor": [317, 852, 854, 855, 856, 1033, 1038, 1039, 1041, 1042, 1043, 1044], "radius_neighbors_graph": [1, 404, 415, 441, 846, 847, 848, 850, 852, 854, 855, 856, 857, 1002, 1033, 1038, 1041], "radiusneighborsclassifi": [1, 317, 846, 847, 852, 855, 1000, 1002, 1029, 1031, 1035, 1037, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1048], "radiusneighborsregressor": [1, 317, 846, 847, 852, 854, 1000, 1002, 1029, 1031, 1037, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1048], "radiusneighborstransform": [1, 313, 848, 1002, 1039, 1041, 1043, 1044, 1048], "radostin": [1037, 1038], "radovenchyk": 1049, "raduspaimoc": 1040, "raf": 1038, "rafael": [1023, 1030, 1031, 1033, 1036], "rafal": [1044, 1045], "rafei": 1041, "raff": 1032, "raffaello": 1038, "rafiqu": [1037, 1038], "rafteri": 999, "raghav": [0, 394, 1033, 1034, 1035, 1036, 1037, 1041], "raghavan": [409, 589, 839, 843, 997, 999, 1001], "raghu": [404, 439], "raghunathan": [1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047], "raghuv": [1044, 1045], "raghuwanshi": 1043, "rah": 641, "rahiel": 1033, "rahil": [1043, 1044, 1045, 1046, 1047, 1048, 1049], "rahimi": [641, 991], "rahmaan": 1039, "rahman": [1036, 1037, 1041], "rahn": [1036, 1039], "rahul": [1041, 1046], "rai": [0, 394, 999, 1029, 1039, 1041, 1042], "raimundo": 1037, "rain": [43, 52, 184, 403, 995, 999], "rainbow": [61, 228], "rainfal": 995, "rais": [1, 132, 208, 240, 241, 258, 267, 308, 316, 322, 372, 374, 376, 377, 378, 381, 384, 386, 395, 398, 405, 408, 434, 440, 441, 444, 446, 462, 479, 480, 481, 485, 486, 487, 488, 490, 491, 492, 493, 495, 496, 507, 531, 534, 536, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 571, 573, 575, 576, 587, 588, 589, 590, 602, 610, 611, 617, 629, 632, 635, 636, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 690, 696, 698, 702, 709, 711, 712, 713, 714, 727, 729, 730, 738, 778, 782, 783, 784, 787, 788, 789, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 809, 814, 818, 822, 823, 826, 827, 828, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 849, 851, 853, 854, 855, 859, 861, 862, 863, 864, 867, 868, 869, 870, 871, 876, 877, 878, 882, 883, 884, 891, 899, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 919, 928, 930, 931, 933, 934, 941, 942, 952, 957, 961, 963, 982, 983, 984, 985, 987, 988, 999, 1009, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "raisadz": [1047, 1048], "raise_exc": [711, 1048], "raise_except": 984, "raise_unknown": 963, "raise_warn": [712, 984, 999, 1049], "raj": [1046, 1047, 1049], "rajagopalan": [0, 394, 1037, 1041], "rajaona": [1035, 1036], "rajat": [1032, 1039], "rajath": 1048, "rajdeep": 1038, "rajendra": 1037, "raji": [1044, 1045], "rakotoarison": [1036, 1037, 1039], "ralf": [1032, 1035, 1036, 1044, 1045, 1047, 1048], "ralph": 1047, "ram": [55, 86, 361, 398, 411, 896, 897, 1001, 1014, 1035, 1041, 1044, 1045], "ramakrishnan": [404, 439], "ramana": [1035, 1036], "ramanath": 1034, "ramesh": [367, 1023, 1032, 1035, 1039], "rameshwar": [1036, 1037], "ramil": [1037, 1038], "rammig": [1023, 1035], "ramo": 1044, "ramot": 1049, "rampin": 1036, "ramyanp": [1041, 1042], "ramzi": 1041, "ram\u00edrez": 999, "rand": [1, 53, 61, 72, 73, 74, 75, 79, 82, 91, 95, 127, 137, 151, 153, 158, 190, 194, 228, 229, 233, 239, 240, 279, 296, 314, 315, 320, 329, 330, 342, 348, 353, 381, 395, 542, 704, 705, 715, 757, 781, 786, 896, 897, 899, 900, 901, 1011, 1029, 1040, 1041], "rand_index": 705, "rand_scor": [1, 72, 404, 715, 999, 1041], "randal": [884, 1033, 1043], "randi": 1035, "randint": [50, 72, 112, 118, 145, 179, 185, 229, 236, 240, 242, 276, 315, 320, 374, 377, 385, 395, 804, 821, 839, 840, 841, 843, 988, 989], "randn": [53, 69, 70, 74, 87, 98, 99, 111, 112, 123, 127, 150, 158, 167, 171, 182, 185, 198, 203, 204, 206, 219, 220, 223, 250, 253, 254, 259, 271, 273, 274, 279, 290, 291, 311, 314, 315, 320, 335, 340, 341, 345, 374, 377, 643, 670, 672, 678, 687, 821, 907, 910], "randolf": 1047, "random": [1, 13, 37, 43, 44, 45, 46, 50, 51, 52, 53, 58, 59, 61, 62, 63, 64, 67, 69, 70, 72, 74, 75, 79, 83, 85, 87, 88, 90, 91, 93, 94, 95, 97, 98, 99, 103, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 121, 122, 123, 127, 133, 135, 137, 139, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 158, 159, 162, 167, 168, 171, 173, 174, 176, 178, 179, 180, 181, 182, 190, 191, 192, 193, 194, 198, 199, 203, 204, 205, 206, 207, 208, 209, 210, 213, 215, 219, 220, 223, 224, 226, 227, 229, 230, 231, 232, 233, 238, 239, 240, 242, 243, 249, 250, 252, 253, 254, 255, 256, 259, 261, 262, 264, 265, 267, 269, 271, 273, 274, 275, 276, 279, 283, 284, 289, 290, 291, 296, 299, 305, 307, 308, 311, 314, 315, 317, 319, 321, 323, 325, 326, 329, 330, 335, 336, 338, 339, 340, 341, 342, 345, 347, 348, 359, 360, 364, 368, 375, 377, 384, 385, 386, 395, 399, 400, 402, 404, 412, 413, 417, 429, 437, 440, 444, 446, 448, 449, 450, 451, 455, 456, 457, 459, 461, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 485, 486, 487, 488, 490, 493, 494, 495, 500, 501, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 533, 534, 536, 537, 538, 539, 542, 545, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 571, 581, 582, 583, 588, 606, 607, 610, 611, 627, 630, 632, 634, 639, 640, 641, 642, 643, 646, 647, 649, 650, 652, 653, 654, 658, 660, 661, 662, 663, 670, 671, 672, 676, 677, 678, 679, 687, 689, 690, 691, 692, 693, 694, 695, 701, 704, 705, 708, 731, 743, 781, 788, 793, 797, 798, 800, 801, 802, 803, 804, 805, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 829, 830, 835, 837, 838, 839, 840, 841, 843, 844, 845, 849, 853, 860, 861, 862, 864, 867, 869, 878, 881, 885, 893, 896, 897, 898, 899, 900, 901, 904, 905, 906, 907, 909, 910, 912, 913, 914, 915, 933, 945, 947, 948, 968, 969, 972, 989, 991, 994, 996, 998, 999, 1003, 1004, 1005, 1007, 1009, 1014, 1015, 1020, 1021, 1025, 1026, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "random_": 198, "random_02": 198, "random_05": 198, "random_08": 198, "random_11": 198, "random_cat": [185, 1007], "random_choice_csc": 1039, "random_forest": 139, "random_from_data": [252, 797, 798, 998], "random_label": 72, "random_num": [185, 1007], "random_offset_": [641, 642], "random_project": [1, 227, 237, 896, 897, 898, 1011, 1016, 1030, 1035, 1045, 1046], "random_sampl": [194, 844, 845, 849], "random_se": [49, 118, 142], "random_search": [265, 272], "random_st": [43, 44, 45, 46, 49, 51, 52, 54, 57, 58, 59, 61, 62, 63, 64, 66, 67, 73, 77, 78, 79, 80, 82, 83, 86, 88, 89, 90, 91, 92, 93, 94, 95, 102, 103, 104, 107, 113, 116, 118, 120, 122, 125, 134, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 162, 165, 167, 172, 173, 176, 178, 179, 182, 183, 184, 185, 186, 188, 190, 192, 193, 195, 201, 206, 207, 210, 211, 213, 214, 218, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 233, 234, 235, 238, 241, 242, 243, 244, 245, 246, 247, 249, 251, 252, 254, 255, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 281, 283, 284, 287, 288, 292, 293, 294, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 328, 334, 336, 337, 338, 343, 344, 345, 347, 348, 351, 353, 354, 355, 368, 374, 377, 381, 385, 386, 400, 403, 404, 405, 408, 409, 411, 412, 416, 429, 434, 435, 437, 440, 444, 446, 448, 449, 450, 451, 455, 456, 457, 459, 466, 471, 475, 484, 485, 488, 490, 493, 495, 501, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 582, 583, 592, 593, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 627, 632, 633, 634, 635, 638, 639, 640, 641, 642, 646, 647, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 672, 674, 676, 677, 678, 679, 681, 682, 683, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 710, 735, 788, 792, 793, 797, 798, 799, 801, 802, 803, 804, 805, 806, 812, 814, 815, 816, 817, 818, 819, 820, 822, 823, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 849, 853, 860, 861, 862, 864, 869, 881, 885, 893, 896, 897, 904, 905, 906, 909, 911, 912, 913, 914, 915, 917, 918, 920, 922, 923, 945, 947, 948, 968, 969, 972, 988, 989, 991, 994, 999, 1000, 1001, 1002, 1003, 1006, 1007, 1009, 1014, 1015, 1026, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "random_state_": [374, 534, 627, 853, 1043], "random_tre": 564, "random_tree_embed": 139, "random_unlabeled_point": [315, 899, 900, 901], "random_weights_": [641, 642], "randomforest": [49, 142, 359, 411, 912, 913, 1034], "randomforestc": [139, 276], "randomforestclassifi": [1, 63, 64, 67, 89, 138, 139, 140, 141, 142, 185, 186, 245, 246, 261, 276, 313, 315, 320, 347, 355, 372, 374, 385, 386, 402, 411, 413, 555, 556, 557, 559, 564, 565, 567, 803, 804, 822, 834, 914, 988, 989, 1000, 1007, 1023, 1026, 1033, 1034, 1037, 1038, 1039, 1042, 1043, 1044, 1045, 1046], "randomforestclassifierifit": [63, 141, 320], "randomforestclassifierinot": 320, "randomforestclassifierrandomforestclassifi": [63, 276], "randomforestregressor": [1, 49, 140, 153, 154, 156, 178, 179, 315, 320, 385, 411, 555, 556, 558, 560, 564, 566, 568, 632, 633, 914, 989, 1000, 1034, 1035, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046], "randomgeek78": 1043, "randomized_range_find": [1, 381, 1030, 1035, 1049], "randomized_svd": [1, 55, 381, 448, 450, 530, 539, 542, 544, 1029, 1030, 1035, 1042, 1043, 1044, 1049], "randomized_svd_low_rank": 1036, "randomizedlasso": 1036, "randomizedlogisticregress": 1036, "randomizedpca": [1023, 1029, 1031, 1032, 1034, 1035, 1036], "randomizedsearchcv": [1, 45, 103, 167, 265, 272, 315, 355, 385, 395, 400, 574, 988, 999, 1013, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1044, 1046, 1047, 1048], "randomizedsearchcvinot": 103, "randomli": [1, 52, 72, 83, 94, 103, 117, 137, 149, 150, 178, 180, 184, 223, 237, 241, 254, 259, 270, 281, 283, 325, 355, 360, 381, 384, 385, 404, 408, 411, 414, 446, 455, 513, 521, 529, 535, 543, 544, 549, 555, 556, 557, 558, 559, 560, 561, 562, 563, 610, 611, 671, 679, 690, 694, 716, 797, 798, 860, 898, 912, 913, 914, 915, 998, 1000, 1002, 1005, 1007, 1011, 1015, 1020, 1040, 1044, 1046, 1048], "randomst": [1, 44, 53, 58, 59, 61, 67, 70, 72, 79, 83, 94, 95, 112, 113, 116, 120, 122, 127, 135, 145, 146, 149, 150, 151, 153, 155, 159, 167, 168, 171, 173, 174, 176, 178, 179, 182, 185, 190, 191, 192, 193, 194, 198, 203, 208, 209, 220, 229, 233, 239, 240, 249, 252, 259, 267, 270, 271, 273, 274, 275, 276, 296, 299, 305, 307, 308, 311, 314, 315, 317, 319, 320, 325, 326, 330, 339, 345, 353, 374, 377, 381, 386, 395, 409, 416, 417, 437, 440, 444, 446, 448, 449, 450, 451, 455, 456, 457, 459, 466, 467, 471, 472, 473, 475, 476, 477, 478, 485, 488, 490, 493, 495, 501, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 582, 583, 606, 607, 610, 611, 627, 632, 634, 639, 640, 641, 642, 643, 646, 647, 649, 650, 652, 653, 654, 658, 659, 660, 661, 662, 663, 666, 667, 668, 670, 671, 672, 674, 676, 677, 678, 679, 687, 689, 690, 691, 692, 693, 694, 695, 701, 781, 793, 797, 798, 801, 802, 803, 804, 805, 806, 812, 814, 815, 816, 817, 818, 819, 820, 822, 828, 829, 830, 834, 835, 838, 839, 840, 841, 843, 844, 845, 849, 853, 860, 861, 862, 869, 881, 885, 893, 896, 897, 899, 900, 901, 904, 905, 906, 909, 910, 912, 913, 914, 915, 933, 947, 948, 968, 969, 972, 1009, 1025], "randomtreesembed": [1, 139, 152, 227, 411, 914, 989, 1030, 1037, 1038, 1042, 1043, 1044], "randomtreesembedding_": 564, "rang": [1, 43, 44, 45, 46, 47, 49, 51, 55, 57, 58, 62, 63, 64, 68, 69, 72, 73, 75, 77, 80, 81, 83, 84, 88, 93, 94, 96, 97, 109, 110, 112, 113, 134, 136, 137, 138, 141, 146, 149, 153, 158, 161, 162, 168, 183, 184, 188, 194, 198, 199, 201, 202, 203, 205, 207, 208, 211, 212, 214, 222, 224, 227, 229, 236, 237, 242, 243, 249, 251, 254, 255, 258, 259, 263, 264, 265, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 279, 283, 288, 294, 296, 297, 302, 304, 309, 310, 313, 317, 318, 322, 326, 336, 343, 347, 348, 352, 354, 360, 366, 367, 369, 372, 374, 378, 381, 386, 398, 404, 408, 411, 414, 437, 458, 466, 468, 469, 470, 471, 472, 473, 475, 478, 488, 492, 493, 512, 525, 539, 551, 552, 557, 558, 561, 587, 588, 590, 629, 632, 633, 638, 640, 648, 649, 669, 671, 676, 677, 678, 680, 692, 709, 712, 731, 746, 788, 830, 836, 850, 852, 854, 855, 860, 874, 881, 882, 883, 889, 890, 893, 894, 897, 898, 947, 948, 988, 995, 999, 1003, 1013, 1019, 1023, 1034, 1035, 1036, 1037, 1039, 1042, 1045], "range_n_clust": 93, "range_n_outli": 112, "rangeindex": [183, 258, 494], "rangl": [991, 999, 1013, 1014], "ranjanikrishnan": 1042, "rank": [1, 43, 55, 62, 111, 124, 127, 141, 161, 185, 186, 224, 262, 263, 264, 272, 368, 399, 401, 402, 406, 407, 409, 411, 412, 506, 507, 519, 522, 547, 548, 592, 593, 605, 648, 657, 669, 680, 696, 720, 726, 727, 739, 740, 756, 788, 794, 803, 804, 948, 988, 990, 991, 996, 1007, 1009, 1023, 1025, 1030, 1035, 1038, 1039, 1043, 1044, 1047, 1048, 1049], "rank_": 657, "rank_t": 800, "rank_test_": 268, "rank_test_precis": [262, 268], "rank_test_recal": 262, "rank_test_scor": [263, 264, 272, 800, 814, 1035], "rankdata": 1036, "ranked_exposur": [207, 224], "ranked_frequ": 207, "ranked_pure_premium": 224, "ranking_": [161, 592, 593], "rankylau": 1037, "ransac": [1, 180, 189, 213, 223, 522, 649, 657, 671, 678, 679, 1020], "ransacregressor": [1, 210, 213, 223, 395, 649, 678, 679, 995, 1000, 1032, 1034, 1035, 1036, 1037, 1040, 1042, 1043, 1047], "rao": [408, 1041, 1044], "raphael": 1046, "rapha\u00ebl": 1039, "raphson": [648, 669, 680], "rapid": 1023, "rapidli": [211, 266, 1014, 1023], "rare": [64, 184, 310, 355, 376, 384, 386, 389, 402, 404, 408, 588, 648, 658, 659, 669, 680, 904, 935, 995, 1009, 1023, 1036, 1037, 1038, 1042, 1044, 1047], "rarer": [347, 349, 412], "raschka": [1034, 1035, 1036, 1037, 1038, 1041], "rashchedrin": 1036, "rasmu": [188, 1036], "rasmussen": [172, 414, 610, 611, 614, 619, 622], "raspberri": 390, "raster": 102, "rastgoo": 1046, "rastogi": 1037, "rastrojo": [404, 705], "rasul": [1034, 1036, 1037], "rat": [50, 297, 367, 496], "rate": [1, 43, 134, 138, 143, 149, 158, 184, 207, 224, 237, 243, 258, 261, 264, 273, 274, 300, 301, 302, 361, 372, 403, 404, 405, 409, 413, 443, 463, 534, 551, 552, 557, 558, 559, 560, 591, 594, 595, 597, 598, 599, 605, 644, 645, 668, 676, 677, 678, 692, 698, 702, 727, 782, 789, 860, 861, 862, 898, 988, 995, 996, 999, 1002, 1003, 1013, 1015, 1023, 1033, 1037, 1038], "rather": [51, 64, 86, 113, 134, 137, 149, 178, 183, 207, 208, 220, 243, 278, 308, 309, 347, 348, 355, 360, 368, 370, 372, 374, 377, 378, 380, 384, 385, 386, 387, 404, 408, 409, 411, 412, 414, 445, 458, 460, 563, 580, 587, 588, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 629, 646, 647, 652, 653, 660, 661, 662, 663, 781, 814, 816, 818, 819, 820, 835, 837, 838, 867, 904, 905, 916, 921, 948, 993, 995, 996, 999, 1001, 1002, 1006, 1019, 1029, 1030, 1031, 1032, 1036, 1037, 1038, 1039, 1044, 1045, 1047, 1048], "rati": 172, "ratio": [1, 46, 86, 99, 105, 128, 180, 237, 239, 252, 256, 359, 372, 404, 406, 408, 411, 447, 453, 491, 492, 513, 539, 547, 548, 549, 631, 658, 710, 712, 716, 725, 730, 736, 739, 782, 783, 784, 787, 795, 827, 830, 850, 851, 897, 968, 993, 1005, 1015, 1020, 1044, 1046], "ration": [1, 172, 258, 623, 997], "rationalquadr": 172, "rationalquadrat": [1, 172, 176, 414, 616], "raton": 995, "raul": [1031, 1032], "rausch": [1037, 1038, 1041], "rauwuckl": 1041, "ravel": [1, 44, 53, 55, 57, 63, 77, 86, 87, 91, 111, 129, 135, 137, 142, 146, 152, 153, 154, 155, 167, 169, 171, 172, 173, 174, 183, 190, 199, 200, 202, 207, 219, 220, 227, 231, 233, 237, 239, 243, 247, 251, 253, 258, 267, 271, 273, 278, 284, 289, 290, 296, 297, 299, 300, 301, 302, 306, 307, 317, 321, 330, 336, 341, 342, 344, 347, 353, 462, 491, 492, 493, 631, 718, 985, 999, 1045], "ravi": [1041, 1044], "raw": [1, 16, 43, 51, 52, 54, 66, 72, 112, 122, 154, 172, 183, 188, 302, 311, 327, 349, 359, 367, 374, 380, 386, 402, 404, 406, 409, 412, 466, 471, 499, 500, 501, 557, 558, 559, 561, 581, 587, 588, 589, 590, 634, 677, 690, 694, 705, 786, 850, 908, 996, 999, 1003, 1005, 1006, 1009, 1012, 1026, 1030, 1034, 1037, 1040, 1046], "raw_coef_": [904, 905], "raw_covariance_": [406, 466, 471], "raw_data": 349, "raw_docu": [587, 590], "raw_location_": [406, 466, 471], "raw_model": 311, "raw_pixel_classifi": 302, "raw_support_": [466, 471], "raw_target_regr": 405, "raw_valu": [721, 723, 728, 745, 746, 748, 750, 751, 753, 785, 790, 791, 999, 1037, 1040], "raw_x": [412, 581], "raytheon": 51, "raz": 1043, "ra\u00fal": 1038, "rb": [47, 398], "rbf": [1, 44, 45, 46, 49, 50, 66, 67, 125, 155, 167, 168, 169, 171, 172, 173, 174, 175, 176, 180, 188, 220, 232, 233, 239, 246, 262, 264, 266, 269, 275, 290, 315, 330, 331, 333, 342, 364, 392, 405, 409, 449, 459, 500, 502, 533, 539, 610, 611, 612, 613, 616, 618, 619, 620, 621, 623, 624, 631, 639, 640, 641, 642, 643, 676, 691, 765, 774, 776, 800, 811, 814, 820, 864, 884, 899, 900, 904, 906, 907, 908, 909, 910, 988, 991, 992, 996, 999, 1005, 1009, 1012, 1020, 1025, 1035, 1040], "rbf_featur": [641, 991], "rbf_kernel": [1, 400, 765, 997, 1033, 1048], "rbf_svc": [330, 1014], "rbfsampler": [1, 238, 639, 640, 642, 991, 1033, 1043, 1044], "rbm": [1, 302, 860, 861, 862, 1004], "rbm_features_classifi": 302, "rc": [220, 376], "rceil": [401, 1005], "rcond": 129, "rcparam": [47, 66, 233, 238, 274, 311], "rcv1": [1, 365, 495, 1025, 1034], "rcwoolston": 1040, "rd": 412, "rd9e56ef97513": 1, "rda": 369, "rdbu": [67, 70, 120, 155, 222, 299, 336, 341], "rdbu_r": [87, 113, 130, 336], "rdownload": 47, "rdylbu": [142, 352], "re": [1, 43, 47, 53, 63, 64, 89, 102, 103, 134, 143, 170, 179, 182, 183, 224, 240, 250, 254, 267, 269, 273, 314, 347, 349, 360, 372, 373, 374, 380, 385, 387, 395, 402, 408, 412, 466, 467, 468, 469, 470, 471, 472, 473, 489, 559, 560, 609, 646, 652, 660, 662, 802, 817, 820, 912, 913, 914, 915, 995, 1000, 1009, 1014, 1019, 1023, 1029, 1033, 1034, 1036, 1038, 1049], "reach": [94, 140, 144, 163, 173, 207, 209, 222, 224, 258, 266, 317, 336, 354, 377, 387, 390, 404, 409, 413, 447, 454, 506, 507, 592, 593, 627, 644, 645, 646, 647, 652, 653, 654, 655, 656, 660, 661, 662, 663, 666, 667, 668, 676, 677, 678, 679, 681, 682, 683, 684, 727, 729, 730, 783, 797, 798, 861, 862, 901, 988, 995, 999, 1003, 1013, 1015, 1023, 1040, 1044, 1045, 1046, 1049], "reachability_": [98, 404, 447, 452, 453, 454], "reachabl": [1, 88, 98, 443, 447, 452, 453, 454, 850, 954], "react": 296, "reactiv": 378, "read": [47, 52, 55, 120, 226, 271, 313, 314, 315, 317, 319, 359, 366, 373, 374, 375, 376, 377, 379, 380, 384, 385, 386, 392, 398, 404, 415, 416, 417, 418, 421, 427, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 454, 456, 458, 459, 460, 461, 462, 464, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 610, 611, 613, 614, 615, 616, 619, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 701, 703, 704, 705, 707, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 860, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 918, 944, 988, 995, 999, 1000, 1018, 1023, 1030, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1046, 1047], "read_byt": 47, "read_csv": [51, 322, 377, 494, 1044], "read_csv_kwarg": [494, 1045], "read_parquet": [52, 322], "readabl": [113, 265, 316, 377, 378, 380, 532, 1038, 1041, 1042, 1043, 1044], "reader": [45, 77, 316, 361, 372], "readi": [43, 46, 172, 208, 258, 367, 372, 376, 380, 461], "readili": [317, 409, 1015, 1023], "readm": [372, 380, 412], "readonli": [904, 905, 1042, 1044, 1045], "readonly_memmap": 1046, "readthedoc": 386, "real": [52, 67, 70, 88, 90, 102, 106, 109, 111, 112, 134, 149, 170, 183, 205, 211, 230, 233, 243, 257, 258, 270, 279, 288, 291, 305, 306, 335, 340, 349, 353, 359, 365, 366, 369, 376, 378, 381, 384, 385, 386, 401, 402, 404, 406, 408, 409, 411, 412, 466, 486, 487, 491, 492, 493, 494, 495, 498, 499, 502, 508, 549, 550, 553, 554, 555, 556, 557, 558, 562, 563, 591, 593, 594, 595, 596, 597, 598, 599, 631, 699, 704, 724, 728, 752, 755, 757, 785, 795, 829, 861, 862, 906, 907, 908, 909, 910, 913, 915, 989, 990, 991, 999, 1001, 1003, 1004, 1005, 1015, 1020, 1025, 1029, 1042, 1046], "real_cov": [109, 110, 417, 467, 470, 471, 472, 473, 476, 477, 478], "real_data": 288, "realist": [43, 47, 266, 273, 274, 333, 367, 999], "realiti": 368, "realiz": [207, 1023], "realli": [109, 185, 198, 376, 377, 378, 999, 1005, 1023, 1043], "reappli": 411, "rearrang": [58, 59, 401], "reason": [43, 47, 51, 64, 77, 86, 102, 146, 149, 163, 183, 184, 188, 207, 208, 214, 224, 233, 237, 238, 240, 243, 258, 264, 265, 270, 277, 281, 284, 305, 309, 340, 348, 349, 355, 359, 360, 361, 367, 371, 372, 373, 374, 376, 380, 384, 385, 386, 387, 400, 403, 404, 405, 406, 409, 411, 412, 506, 530, 572, 573, 638, 646, 652, 654, 672, 687, 692, 763, 800, 814, 848, 853, 860, 879, 901, 920, 922, 923, 941, 942, 943, 988, 989, 994, 995, 996, 999, 1001, 1002, 1003, 1005, 1009, 1013, 1014, 1015, 1023, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "reassign": [83, 372, 444, 446, 1030, 1034], "reassignment_ratio": 446, "rebalanc": 386, "rebas": [372, 376], "rebecca": 1036, "rebekah": [1037, 1038, 1039], "reboul": 1039, "rebuild": [359, 370, 398, 412, 439], "rebuilt": [68, 370, 844, 845], "rec": [57, 349, 367, 641], "rec_l1": 53, "rec_l2": 53, "rec_macro": 408, "recal": [1, 45, 62, 68, 102, 113, 125, 160, 180, 234, 243, 256, 258, 261, 262, 281, 302, 325, 326, 372, 386, 400, 403, 404, 502, 603, 700, 706, 707, 708, 712, 713, 727, 729, 730, 731, 782, 783, 784, 787, 788, 822, 830, 833, 865, 884, 888, 904, 995, 1015, 1020, 1032, 1033, 1036, 1038, 1039, 1041, 1042, 1043, 1045, 1046], "recalcul": [244, 246, 404, 1026, 1029], "recall_macro": [408, 999], "recall_scor": [1, 62, 258, 271, 400, 408, 708, 784, 999, 1029, 1031, 1032, 1033, 1034, 1039, 1045, 1049], "recant": 387, "receiv": [0, 1, 57, 180, 234, 240, 246, 256, 258, 259, 261, 349, 355, 372, 374, 380, 386, 403, 408, 411, 502, 658, 702, 706, 708, 727, 782, 788, 789, 819, 827, 830, 832, 833, 871, 909, 1000, 1003, 1004, 1013, 1020, 1039, 1040], "recent": [52, 240, 370, 376, 377, 380, 384, 386, 404, 465, 536, 563, 1013, 1022, 1023, 1032, 1041], "recht": [641, 991], "recip": [376, 398, 996, 1023], "reciproc": [368, 999], "reckon": 367, "recogn": [43, 44, 65, 84, 86, 116, 123, 161, 180, 208, 257, 288, 316, 325, 326, 378, 395, 404, 412, 500, 697, 713, 830, 909, 999, 1020, 1046], "recognit": [42, 48, 54, 120, 180, 239, 242, 302, 309, 365, 377, 409, 492, 500, 530, 532, 539, 697, 708, 713, 741, 769, 788, 789, 797, 814, 830, 884, 909, 991, 995, 999, 1000, 1004, 1014, 1016, 1020, 1025, 1029], "recommend": [116, 178, 201, 223, 234, 240, 260, 273, 308, 315, 322, 340, 359, 360, 366, 367, 370, 372, 374, 378, 380, 384, 390, 398, 400, 407, 409, 411, 413, 435, 444, 446, 448, 457, 494, 506, 533, 536, 542, 547, 559, 560, 567, 581, 582, 588, 605, 611, 631, 632, 638, 658, 659, 670, 676, 692, 697, 698, 700, 702, 806, 812, 814, 823, 860, 867, 869, 876, 883, 884, 889, 890, 892, 893, 894, 895, 897, 906, 909, 948, 987, 988, 996, 999, 1001, 1003, 1006, 1009, 1011, 1013, 1014, 1015, 1017, 1023, 1025, 1026, 1031, 1032, 1038, 1039, 1040, 1041, 1043, 1045], "recompil": [373, 378, 390], "recomput": [88, 89, 244, 246, 286, 313, 466, 471, 995, 1011, 1026, 1034, 1045], "reconstruct": [1, 42, 55, 58, 99, 120, 121, 125, 180, 206, 229, 230, 317, 398, 409, 412, 413, 479, 480, 481, 529, 531, 533, 535, 536, 537, 538, 540, 541, 543, 544, 546, 582, 586, 652, 672, 688, 689, 693, 896, 897, 995, 996, 1020, 1043], "reconstruct_from_patches_2d": [1, 123, 412, 582], "reconstruction_err_": [536, 538], "reconstruction_error": 688, "reconstruction_error_": 689, "record": [1, 50, 121, 138, 149, 185, 240, 258, 310, 349, 359, 372, 398, 404, 406, 447, 454, 496, 620, 643, 692, 771, 774, 778, 779, 780, 781, 827, 850, 1022, 1042, 1043], "recov": [75, 98, 113, 121, 122, 127, 143, 167, 182, 194, 206, 207, 211, 226, 277, 349, 406, 410, 413, 416, 457, 531, 557, 995, 996, 998, 1019, 1035], "recoveri": [51, 113, 194, 206, 406, 413, 646, 652], "recreat": 244, "rect": [47, 85, 190], "rect_colorbar": 304, "rect_histi": 304, "rect_histx": 304, "rect_scatt": 304, "rectangl": 47, "rectangular": [367, 386, 948, 1019], "rectifi": [861, 862], "recurs": [1, 17, 52, 150, 157, 160, 163, 180, 259, 262, 263, 288, 351, 404, 408, 437, 438, 439, 442, 460, 500, 513, 561, 592, 593, 596, 601, 632, 633, 658, 819, 864, 874, 999, 1002, 1005, 1006, 1015, 1020, 1021, 1025, 1029, 1039, 1040], "recursionerror": 1047, "red": [48, 49, 50, 63, 69, 70, 93, 111, 118, 120, 121, 122, 137, 154, 155, 156, 176, 188, 190, 191, 199, 205, 231, 244, 259, 270, 297, 300, 305, 309, 310, 327, 336, 353, 370, 386, 404, 409, 1000], "reda": 1035, "redden": 1040, "reddi": [1036, 1037, 1038, 1043, 1046, 1048], "redefin": [58, 146, 183], "redesign": [384, 1029], "redirects_en": 55, "redirects_filenam": 55, "redirects_url": 55, "redistribut": 439, "redo": 348, "reduc": [1, 37, 43, 46, 77, 80, 81, 86, 103, 104, 109, 137, 146, 148, 149, 152, 160, 183, 190, 191, 194, 205, 211, 212, 214, 235, 237, 240, 243, 265, 271, 281, 293, 306, 309, 310, 318, 348, 349, 355, 364, 366, 369, 372, 378, 384, 386, 398, 402, 403, 404, 406, 408, 409, 411, 412, 413, 415, 441, 442, 447, 454, 457, 491, 532, 542, 547, 553, 554, 555, 556, 562, 563, 571, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 606, 607, 610, 627, 643, 652, 672, 673, 674, 675, 687, 692, 695, 702, 781, 789, 800, 803, 804, 806, 814, 823, 825, 826, 827, 828, 831, 873, 874, 881, 893, 896, 897, 904, 905, 912, 913, 914, 915, 988, 991, 993, 994, 995, 996, 999, 1002, 1011, 1012, 1014, 1016, 1029, 1031, 1032, 1033, 1034, 1035, 1038, 1039, 1040, 1041, 1043, 1045, 1047], "reduce_dim": [104, 245, 263, 405], "reduce_dim__k": 104, "reduce_dim__n_compon": [104, 263, 405], "reduce_func": [781, 1040], "reduced_data": 91, "reducer_label": 104, "reduct": [1, 10, 45, 57, 87, 90, 101, 105, 116, 120, 128, 137, 152, 180, 225, 227, 228, 231, 237, 241, 263, 285, 292, 294, 317, 333, 355, 359, 364, 404, 405, 407, 409, 411, 413, 465, 479, 480, 481, 482, 500, 528, 530, 532, 533, 536, 537, 538, 539, 542, 545, 547, 555, 556, 557, 558, 562, 563, 564, 598, 606, 688, 689, 690, 691, 692, 693, 781, 800, 830, 846, 853, 860, 864, 865, 874, 884, 902, 904, 912, 913, 914, 915, 991, 996, 1011, 1015, 1018, 1019, 1020, 1021, 1023, 1025, 1030, 1031, 1032, 1035, 1043, 1044, 1045], "redund": [62, 64, 130, 162, 250, 255, 320, 355, 368, 371, 372, 377, 386, 402, 513, 634, 1041, 1049], "redundantli": 386, "ref": [262, 372, 380, 989, 1035], "ref_lin": 435, "refactor": [317, 424, 1029, 1031, 1032, 1033, 1039, 1042, 1043, 1044], "refer": [43, 44, 72, 73, 93, 96, 103, 111, 126, 134, 147, 149, 154, 163, 165, 172, 176, 185, 196, 224, 240, 243, 258, 264, 269, 270, 271, 278, 287, 294, 304, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 348, 360, 366, 367, 369, 370, 372, 373, 374, 375, 377, 378, 379, 380, 384, 385, 386, 387, 390, 395, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 415, 416, 417, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 454, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 496, 501, 509, 511, 513, 514, 515, 516, 517, 518, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 542, 545, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 589, 592, 593, 594, 601, 606, 607, 610, 611, 614, 619, 622, 623, 627, 628, 631, 632, 634, 635, 636, 637, 638, 639, 642, 643, 644, 645, 647, 649, 651, 653, 655, 656, 658, 661, 663, 665, 666, 667, 668, 671, 673, 675, 676, 678, 679, 682, 683, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 704, 705, 707, 708, 709, 710, 712, 714, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 729, 730, 731, 734, 735, 736, 737, 738, 740, 741, 743, 756, 758, 759, 769, 783, 785, 786, 788, 789, 792, 793, 795, 797, 798, 800, 801, 802, 803, 804, 805, 806, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 834, 835, 839, 840, 841, 843, 846, 849, 850, 851, 853, 860, 861, 862, 864, 869, 870, 871, 873, 874, 876, 877, 878, 880, 881, 882, 884, 885, 892, 897, 898, 899, 900, 901, 902, 904, 906, 907, 909, 910, 912, 913, 914, 915, 935, 941, 942, 943, 948, 966, 988, 989, 991, 992, 993, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1019, 1022, 1029, 1033, 1034, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "referenc": [369, 372, 374, 380, 386, 896, 897, 1002, 1036, 1042], "references_": 881, "refin": [62, 113, 469, 999], "refit": [103, 104, 160, 162, 165, 180, 205, 245, 254, 256, 263, 264, 265, 268, 271, 272, 276, 386, 403, 408, 414, 500, 565, 566, 627, 659, 665, 713, 800, 803, 804, 814, 822, 830, 909, 988, 995, 999, 1020, 1036, 1037, 1038, 1047], "refit_strategi": 262, "refit_time_": [800, 803, 804, 814, 1037], "reflect": [51, 75, 80, 81, 111, 118, 121, 143, 184, 185, 205, 207, 224, 288, 348, 368, 371, 372, 376, 386, 389, 401, 408, 447, 453, 626, 921, 996, 999, 1005, 1007, 1030, 1038, 1047, 1049], "reformul": 371, "refrain": [208, 372], "refurbish": 6, "refus": [258, 384, 894, 895], "reg": [147, 183, 191, 240, 305, 314, 341, 411, 556, 558, 566, 650, 651, 653, 654, 655, 656, 657, 663, 664, 665, 670, 671, 678, 679, 689, 693, 915, 995, 1034], "reg1": [156, 411], "reg2": [156, 411], "reg3": [156, 411], "reg_covar": [249, 254, 797, 798], "reg_nnl": 204, "reg_ol": 204, "reg_param": [548, 1048], "regard": [10, 44, 46, 50, 52, 86, 88, 103, 125, 126, 167, 172, 184, 185, 198, 209, 228, 239, 243, 266, 273, 274, 287, 323, 348, 367, 372, 373, 377, 384, 386, 392, 398, 404, 409, 411, 412, 414, 440, 444, 449, 456, 459, 499, 614, 619, 632, 656, 658, 697, 698, 700, 701, 702, 743, 798, 806, 822, 823, 828, 846, 847, 992, 995, 999, 1001, 1002, 1004, 1006, 1013, 1014, 1015, 1036, 1039], "regardless": [224, 265, 266, 267, 273, 360, 372, 404, 533, 632, 633, 658, 704, 715, 999, 1011, 1037, 1044, 1045], "regedit": 390, "regener": 869, "regex": [264, 349, 461, 463], "regexp": [587, 588, 590], "regim": [43, 386, 904, 905, 998], "region": [51, 55, 59, 62, 66, 71, 81, 82, 86, 89, 99, 123, 155, 174, 180, 183, 207, 224, 233, 237, 238, 255, 296, 307, 336, 343, 369, 379, 386, 404, 411, 414, 445, 447, 453, 459, 586, 996, 999, 1002, 1005, 1009, 1013, 1015, 1020], "region_1": 310, "region_2": 310, "regist": [194, 347, 378], "register_parallel_backend": [1037, 1047], "registri": [370, 390, 1018], "regr": [405, 552, 554, 563, 646, 647, 667, 837, 862, 905, 907, 910, 1014], "regr_1": [135, 353], "regr_2": [135, 353], "regr_3": 353, "regr_multirf": 153, "regr_rf": 153, "regress": [1, 13, 19, 22, 24, 31, 40, 46, 49, 53, 62, 64, 66, 72, 87, 101, 103, 111, 112, 114, 121, 122, 123, 127, 133, 134, 137, 139, 140, 141, 144, 145, 148, 149, 150, 153, 154, 161, 163, 166, 168, 176, 178, 179, 180, 182, 183, 184, 185, 186, 189, 192, 193, 194, 195, 197, 199, 203, 204, 208, 210, 211, 212, 213, 217, 222, 232, 234, 242, 243, 247, 258, 260, 263, 272, 275, 277, 278, 279, 281, 283, 285, 287, 300, 301, 302, 304, 305, 309, 311, 315, 316, 317, 318, 320, 322, 331, 343, 345, 347, 350, 351, 354, 360, 361, 364, 365, 367, 369, 372, 374, 377, 380, 381, 384, 385, 386, 399, 402, 406, 407, 408, 409, 411, 413, 427, 434, 461, 462, 471, 481, 486, 487, 490, 494, 499, 500, 502, 503, 510, 514, 515, 516, 522, 526, 529, 533, 535, 537, 539, 540, 541, 543, 544, 546, 550, 551, 552, 553, 554, 555, 556, 557, 558, 560, 562, 563, 564, 565, 568, 591, 592, 593, 594, 595, 596, 597, 598, 599, 603, 604, 605, 608, 610, 611, 614, 615, 622, 623, 625, 631, 632, 633, 634, 635, 637, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 694, 701, 706, 721, 723, 724, 728, 741, 742, 745, 746, 747, 748, 749, 750, 751, 752, 753, 785, 790, 791, 800, 803, 804, 806, 814, 823, 827, 828, 830, 831, 833, 835, 837, 838, 846, 847, 852, 854, 855, 861, 862, 864, 865, 868, 869, 871, 877, 878, 879, 881, 884, 885, 888, 893, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 916, 918, 922, 924, 930, 933, 935, 952, 988, 989, 991, 994, 996, 1006, 1007, 1009, 1010, 1018, 1019, 1020, 1021, 1022, 1023, 1025, 1026, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "regression_data": 46, "regression_model": 1036, "regression_test": 380, "regressioncriterion": 1037, "regressionregressionrandomizedpcarandom": 392, "regressor": [1, 30, 43, 107, 116, 147, 153, 154, 156, 167, 172, 179, 180, 183, 189, 191, 193, 194, 205, 207, 208, 210, 213, 223, 224, 240, 267, 279, 289, 309, 314, 315, 345, 359, 372, 374, 384, 386, 402, 405, 414, 427, 430, 431, 433, 462, 479, 480, 481, 482, 522, 549, 550, 551, 552, 553, 554, 555, 556, 558, 560, 563, 564, 565, 566, 567, 568, 604, 605, 608, 611, 632, 633, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 669, 670, 672, 673, 678, 679, 701, 832, 833, 836, 837, 838, 847, 855, 860, 861, 862, 865, 871, 879, 884, 885, 905, 907, 910, 912, 913, 914, 915, 918, 922, 923, 924, 939, 941, 988, 989, 995, 999, 1000, 1002, 1007, 1013, 1018, 1020, 1021, 1025, 1029, 1030, 1034, 1035, 1036, 1038, 1039, 1042, 1043, 1044, 1046, 1048], "regressor_": [183, 462, 592, 593, 596], "regressor__sample_weight": 207, "regressor_tag": 923, "regressor_with_": 182, "regressor_without_": 182, "regressorchain": [1, 395, 835, 837, 1037, 1040, 1044, 1049], "regressormixin": [1, 240, 374, 386, 462, 924, 1040, 1048], "regressortag": [1, 923], "regular": [1, 62, 64, 66, 67, 71, 75, 90, 91, 92, 93, 94, 103, 105, 110, 125, 133, 142, 144, 145, 147, 152, 167, 168, 169, 171, 174, 176, 178, 180, 182, 189, 190, 191, 193, 194, 196, 197, 198, 200, 204, 205, 207, 216, 219, 220, 222, 224, 239, 250, 256, 257, 260, 263, 265, 266, 268, 289, 290, 298, 300, 301, 302, 306, 307, 308, 309, 310, 311, 330, 331, 333, 335, 336, 337, 340, 341, 344, 347, 349, 351, 359, 372, 384, 385, 402, 404, 406, 407, 409, 410, 411, 414, 434, 440, 444, 468, 469, 473, 475, 476, 477, 478, 502, 510, 512, 513, 518, 520, 522, 526, 536, 537, 538, 541, 545, 546, 548, 557, 559, 560, 587, 588, 590, 638, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 687, 689, 693, 735, 741, 750, 797, 798, 817, 823, 830, 831, 861, 862, 865, 884, 904, 905, 906, 907, 909, 910, 911, 988, 989, 991, 992, 993, 994, 996, 998, 1004, 1005, 1009, 1012, 1013, 1014, 1020, 1021, 1023, 1025, 1029, 1030, 1031, 1033, 1034, 1038, 1039, 1041, 1042, 1047, 1049], "regularis": [211, 417, 470, 472], "regularli": [142, 281, 384, 1001], "regulatori": 149, "rehan": 1044, "rehberg": 1049, "rehman": 1037, "reiichiro": [1036, 1037], "reilli": 1046, "reimburs": 258, "reimplement": [378, 384, 386, 1035, 1039], "reinforc": 1019, "reinit": 380, "reiniti": 384, "reinstal": 390, "reintroduc": 1045, "reitsam": 1041, "reject": [241, 258, 270, 386, 387, 521, 671, 727, 930, 931, 995, 999, 1037], "rel": [43, 45, 47, 55, 58, 64, 88, 94, 125, 141, 172, 186, 188, 191, 207, 224, 252, 277, 290, 291, 305, 314, 317, 336, 340, 347, 348, 367, 371, 374, 380, 386, 402, 404, 408, 411, 412, 414, 437, 440, 444, 446, 456, 519, 522, 529, 532, 535, 539, 543, 544, 555, 556, 557, 558, 562, 563, 564, 603, 649, 658, 659, 671, 672, 674, 729, 746, 747, 800, 803, 804, 806, 814, 823, 828, 831, 844, 845, 849, 861, 862, 873, 874, 884, 900, 904, 905, 906, 909, 911, 912, 913, 914, 915, 995, 996, 999, 1001, 1002, 1003, 1005], "relabel": [371, 818, 819, 901], "relat": [7, 42, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 351, 352, 353, 354, 366, 367, 368, 371, 372, 374, 376, 377, 379, 380, 381, 384, 386, 387, 389, 395, 398, 400, 403, 404, 405, 406, 407, 408, 409, 411, 414, 447, 461, 466, 494, 547, 548, 560, 561, 639, 673, 677, 692, 701, 723, 743, 821, 827, 851, 862, 863, 865, 868, 869, 874, 877, 879, 880, 883, 892, 908, 957, 988, 991, 993, 999, 1000, 1002, 1003, 1006, 1009, 1014, 1015, 1016, 1019, 1020, 1022, 1025, 1029, 1033, 1034, 1035, 1037, 1038, 1041, 1042, 1045], "relate_point": 294, "relationship": [1, 43, 52, 58, 134, 135, 149, 173, 182, 183, 190, 194, 197, 201, 207, 209, 210, 270, 271, 278, 283, 305, 311, 320, 404, 406, 408, 459, 494, 636, 714, 996, 999, 1001, 1002, 1006, 1007, 1034], "relative_tim": 252, "relatonship": 403, "relax": [46, 404, 412, 450, 1012, 1036], "releas": [0, 54, 88, 103, 132, 138, 139, 141, 151, 163, 165, 178, 179, 184, 185, 188, 196, 207, 209, 235, 240, 244, 246, 247, 258, 259, 260, 276, 278, 283, 286, 310, 328, 360, 370, 372, 373, 375, 380, 384, 386, 412, 440, 443, 444, 461, 464, 487, 488, 494, 499, 500, 502, 510, 513, 519, 522, 536, 539, 555, 559, 560, 562, 563, 565, 598, 601, 609, 628, 630, 632, 634, 640, 646, 648, 652, 658, 669, 676, 680, 688, 697, 701, 702, 717, 718, 732, 742, 748, 778, 788, 795, 799, 800, 801, 803, 804, 806, 814, 822, 823, 826, 827, 830, 846, 848, 864, 865, 869, 874, 877, 878, 879, 883, 884, 885, 901, 902, 904, 909, 912, 913, 923, 931, 941, 943, 987, 1015, 1020, 1022, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "release_highlight": 1020, "relev": [46, 48, 57, 108, 112, 127, 163, 180, 190, 203, 210, 264, 265, 271, 355, 359, 361, 367, 369, 371, 372, 374, 377, 378, 386, 387, 395, 406, 407, 413, 414, 434, 440, 441, 444, 446, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 531, 532, 534, 536, 539, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 589, 610, 611, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 690, 726, 740, 756, 799, 801, 802, 803, 804, 807, 809, 818, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 849, 851, 854, 855, 861, 862, 864, 867, 869, 870, 871, 876, 882, 883, 884, 899, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 999, 1000, 1005, 1016, 1019, 1020, 1032, 1037, 1043], "reli": [125, 140, 143, 163, 186, 196, 198, 281, 284, 314, 318, 347, 359, 360, 374, 377, 380, 381, 384, 386, 400, 401, 404, 409, 411, 412, 547, 592, 596, 606, 607, 778, 828, 831, 869, 953, 966, 988, 991, 993, 995, 999, 1002, 1007, 1009, 1014, 1023, 1037, 1038, 1039, 1043, 1045, 1046, 1049], "reliabl": [1, 62, 64, 322, 402, 408, 435, 436, 646, 999, 1015, 1023], "relianc": [125, 211], "religion": [57, 265, 347, 348, 349, 367, 1000], "reloc": 1038, "relova": 1042, "relu": [244, 861, 862], "remain": [47, 62, 64, 103, 134, 141, 145, 147, 162, 183, 205, 207, 211, 222, 249, 262, 266, 270, 273, 322, 401, 404, 405, 406, 408, 412, 443, 461, 464, 513, 514, 519, 526, 532, 568, 610, 611, 763, 769, 803, 804, 805, 808, 810, 839, 840, 841, 843, 952, 988, 989, 991, 998, 999, 1003, 1009, 1015, 1019, 1031, 1037, 1043, 1046], "remaind": [43, 103, 143, 154, 183, 184, 185, 198, 207, 209, 224, 235, 243, 245, 310, 314, 317, 318, 351, 405, 461, 464, 1029, 1036, 1037, 1038, 1041, 1042, 1045, 1047], "remaining_column": 461, "remark": [88, 116, 163, 258, 361, 372, 1009], "remedi": 223, "rememb": [88, 322, 374, 376, 377, 390, 412, 1002, 1006, 1015], "remi": 1036, "remind": [240, 387], "reminisc": 123, "remot": [188, 326, 372, 375], "remov": [1, 44, 54, 55, 87, 88, 102, 107, 161, 163, 178, 179, 183, 186, 202, 265, 304, 311, 313, 314, 315, 320, 322, 347, 348, 351, 355, 364, 367, 371, 372, 373, 374, 376, 377, 381, 386, 390, 397, 404, 405, 408, 411, 412, 414, 415, 424, 439, 441, 447, 454, 461, 464, 485, 486, 532, 533, 539, 551, 565, 566, 567, 568, 578, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 606, 607, 611, 630, 644, 647, 653, 654, 655, 656, 658, 659, 661, 663, 679, 700, 702, 712, 731, 742, 778, 779, 780, 806, 823, 828, 829, 831, 835, 838, 851, 863, 864, 868, 869, 881, 882, 884, 893, 901, 919, 928, 930, 931, 941, 942, 943, 989, 996, 1002, 1015, 1021, 1025, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "remove_zero_eig": [533, 1031, 1038], "rempfler": 1040, "renaissance0n": [1047, 1048], "renam": [126, 147, 186, 254, 265, 313, 372, 376, 404, 444, 456, 461, 468, 469, 475, 525, 534, 551, 552, 553, 554, 555, 556, 561, 562, 563, 564, 702, 778, 877, 928, 930, 931, 1029, 1030, 1031, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049], "rename_axi": 264, "render": [51, 63, 86, 103, 104, 139, 141, 150, 151, 154, 155, 156, 160, 172, 183, 184, 185, 192, 204, 211, 234, 235, 236, 240, 244, 245, 246, 247, 254, 258, 262, 263, 264, 265, 271, 276, 278, 302, 310, 314, 315, 317, 318, 320, 323, 327, 353, 354, 372, 374, 376, 377, 378, 386, 549, 588, 631, 700, 702, 881, 893, 916, 918, 998, 1015, 1042, 1046, 1048], "rene": 1042, "renni": [1, 839, 841, 1001, 1037], "renorm": 63, "rent": 43, "rental": [43, 52, 184, 1006], "reorder": [58, 386, 697, 718, 1037], "reordered_data": 58, "reordered_row": 58, "reorgan": 1035, "rep": 369, "reparameter": 1014, "reparametr": 343, "repartit": 43, "repeat": [1, 49, 69, 99, 110, 112, 145, 163, 167, 173, 174, 184, 188, 209, 258, 259, 264, 265, 276, 281, 326, 348, 349, 374, 381, 386, 387, 401, 402, 404, 409, 412, 413, 555, 556, 587, 592, 606, 607, 615, 627, 634, 659, 805, 815, 816, 819, 936, 989, 998, 1015, 1025, 1037, 1039, 1048], "repeatedkfold": [1, 183, 408, 805, 816, 1036], "repeatedli": [134, 205, 317, 355, 386, 404, 411, 414, 506, 544, 666, 667, 676, 677, 678, 781, 989, 996, 1003], "repeatedstrat": 264, "repeatedstratifiedkfold": [1, 264, 278, 281, 408, 815, 819, 1036, 1048], "repercuss": 309, "repetit": [264, 278, 281, 377, 408, 815, 816, 1007, 1043], "replac": [1, 43, 62, 66, 111, 124, 134, 149, 167, 172, 174, 178, 184, 195, 208, 247, 267, 284, 306, 311, 315, 322, 338, 345, 370, 372, 376, 378, 381, 386, 398, 405, 408, 411, 412, 438, 442, 461, 501, 513, 553, 554, 561, 581, 587, 588, 589, 590, 606, 607, 627, 630, 634, 639, 641, 712, 728, 785, 806, 812, 814, 823, 863, 864, 867, 887, 900, 901, 907, 920, 922, 968, 969, 972, 988, 989, 991, 995, 999, 1009, 1014, 1015, 1018, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1048], "replace_undefined_bi": [267, 712, 999, 1049], "replai": [803, 804], "repli": [54, 347, 371, 372, 375], "replic": [264, 371, 1025], "repo": [372, 376, 1019, 1022], "report": [0, 1, 43, 47, 52, 68, 102, 107, 160, 175, 196, 258, 262, 272, 278, 281, 313, 322, 325, 355, 367, 371, 373, 374, 375, 378, 380, 384, 386, 390, 398, 404, 408, 611, 649, 658, 664, 685, 686, 700, 713, 729, 730, 738, 783, 784, 787, 833, 842, 861, 862, 899, 917, 995, 1002, 1007, 1018, 1019, 1022, 1030, 1033, 1036, 1037, 1039, 1040, 1042, 1044, 1045, 1048], "reporthook": 47, "repositori": [43, 47, 52, 188, 258, 319, 365, 367, 369, 370, 372, 374, 376, 380, 384, 387, 390, 502, 1018, 1022, 1025], "repr": [576, 1040, 1041, 1043], "repreat": 264, "repres": [43, 47, 49, 51, 52, 54, 58, 63, 66, 68, 70, 72, 79, 82, 83, 86, 120, 122, 128, 129, 141, 150, 183, 190, 201, 209, 211, 212, 215, 228, 230, 238, 243, 252, 257, 258, 261, 264, 267, 271, 273, 289, 306, 340, 347, 349, 354, 361, 364, 367, 369, 374, 384, 385, 386, 387, 398, 402, 404, 408, 409, 410, 411, 412, 413, 435, 439, 443, 449, 460, 467, 468, 469, 470, 471, 472, 473, 485, 487, 488, 490, 492, 494, 496, 498, 499, 500, 502, 503, 508, 525, 532, 534, 536, 538, 539, 545, 548, 553, 561, 580, 587, 590, 593, 629, 631, 632, 634, 640, 676, 678, 697, 699, 701, 711, 727, 730, 743, 789, 800, 802, 813, 814, 817, 820, 822, 827, 829, 830, 833, 834, 840, 846, 847, 848, 850, 851, 852, 854, 855, 856, 861, 862, 871, 877, 878, 901, 904, 905, 930, 931, 952, 989, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1007, 1009, 1010, 1012, 1013, 1015, 1035, 1037, 1040, 1041, 1044, 1047], "represent": [1, 43, 51, 55, 58, 63, 86, 103, 104, 120, 123, 139, 141, 150, 151, 152, 154, 155, 156, 160, 172, 183, 185, 188, 192, 194, 226, 227, 228, 234, 236, 240, 244, 245, 246, 247, 254, 258, 262, 263, 264, 265, 271, 276, 278, 281, 294, 302, 310, 315, 317, 318, 320, 327, 348, 349, 353, 354, 355, 364, 366, 375, 386, 398, 404, 405, 409, 410, 411, 418, 460, 529, 533, 535, 538, 540, 546, 564, 587, 589, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 630, 643, 646, 652, 658, 659, 660, 662, 666, 667, 668, 676, 677, 678, 769, 797, 798, 806, 823, 860, 873, 877, 878, 882, 884, 897, 904, 916, 918, 921, 927, 944, 966, 991, 996, 998, 1000, 1002, 1003, 1004, 1006, 1009, 1014, 1019, 1029, 1030, 1033, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "reproduc": [44, 51, 93, 134, 183, 188, 196, 273, 281, 302, 360, 371, 372, 374, 375, 380, 384, 386, 404, 408, 409, 412, 416, 437, 451, 457, 466, 471, 485, 488, 490, 493, 495, 501, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 549, 551, 552, 553, 554, 557, 558, 559, 560, 561, 606, 607, 610, 611, 634, 639, 640, 641, 642, 646, 647, 650, 652, 653, 654, 660, 661, 662, 663, 666, 667, 668, 671, 676, 678, 679, 689, 690, 692, 693, 694, 793, 797, 798, 801, 802, 803, 804, 805, 806, 812, 814, 815, 816, 817, 818, 819, 820, 828, 829, 830, 834, 835, 838, 849, 853, 860, 861, 862, 869, 881, 885, 893, 896, 897, 904, 905, 906, 909, 947, 948, 969, 972, 991, 1018, 1022, 1029, 1037, 1042, 1043], "reproduct": [384, 995], "request": [1, 47, 55, 80, 207, 224, 240, 316, 322, 360, 366, 370, 371, 375, 386, 387, 395, 398, 400, 409, 412, 413, 434, 440, 441, 444, 446, 462, 479, 480, 481, 531, 534, 536, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 589, 598, 599, 610, 611, 632, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 690, 699, 799, 801, 802, 807, 809, 818, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 849, 851, 854, 855, 861, 862, 864, 867, 869, 870, 871, 876, 883, 884, 899, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 956, 957, 959, 999, 1002, 1022, 1035, 1036, 1037, 1046, 1047, 1048], "request_rout": 240, "requir": [30, 31, 43, 46, 53, 62, 80, 86, 88, 90, 91, 100, 102, 124, 126, 139, 140, 143, 144, 147, 149, 150, 154, 163, 184, 194, 198, 207, 226, 228, 234, 237, 240, 243, 247, 258, 265, 273, 275, 278, 284, 286, 304, 309, 315, 316, 322, 323, 347, 348, 349, 366, 369, 370, 372, 373, 374, 378, 380, 384, 386, 387, 390, 391, 395, 398, 400, 404, 405, 406, 409, 411, 412, 413, 415, 421, 427, 434, 435, 436, 441, 443, 447, 449, 454, 459, 461, 464, 466, 479, 480, 481, 494, 506, 519, 522, 533, 539, 547, 548, 549, 551, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 570, 578, 579, 580, 601, 610, 611, 619, 627, 632, 633, 634, 643, 646, 647, 652, 653, 658, 659, 666, 667, 668, 671, 674, 675, 676, 677, 678, 686, 689, 691, 692, 693, 695, 699, 724, 729, 730, 747, 749, 752, 763, 783, 784, 787, 799, 800, 803, 804, 807, 809, 814, 822, 827, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 854, 855, 856, 861, 862, 864, 865, 866, 868, 878, 879, 880, 884, 892, 896, 897, 899, 900, 904, 905, 906, 909, 912, 913, 914, 915, 921, 923, 924, 930, 931, 941, 943, 957, 960, 966, 984, 987, 988, 993, 994, 995, 996, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1009, 1013, 1014, 1015, 1019, 1026, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "requires_fit": [923, 982, 1048], "requires_i": [421, 427, 987, 1040], "requires_positive_x": [1039, 1044], "requires_vector_input": [612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625], "rerais": 1046, "rerun": [51, 63, 77, 103, 104, 139, 141, 150, 151, 154, 155, 156, 160, 172, 183, 184, 185, 192, 234, 235, 236, 240, 244, 245, 246, 247, 254, 258, 262, 263, 264, 265, 271, 276, 278, 302, 310, 314, 315, 317, 318, 320, 323, 327, 353, 354, 380], "resampl": [1, 85, 146, 183, 224, 288, 381, 384, 386, 553, 554, 972, 1019, 1038, 1042, 1049], "resampled_arrai": 969, "rescal": [43, 80, 81, 88, 125, 192, 196, 229, 243, 304, 345, 406, 411, 416, 466, 467, 468, 469, 470, 471, 472, 473, 531, 536, 646, 649, 652, 709, 876, 882, 906, 907, 908, 909, 910, 999, 1009, 1033, 1034, 1048], "rescaled_coin": [80, 81], "rescu": [398, 412], "research": [0, 163, 182, 258, 264, 270, 281, 367, 369, 384, 404, 499, 511, 635, 645, 692, 735, 829, 834, 988, 996, 1000, 1002, 1014, 1019, 1023], "resembl": [74, 211, 240], "reserv": [258, 310, 372, 559, 560, 1023], "reserva": 310, "reservoir": 968, "reservoir_sampl": 968, "reset": [247, 355, 374, 380, 532, 676, 677, 678, 844, 845, 873, 874, 884, 987, 1031], "reset_n_cal": [844, 845], "reshama": [0, 357, 362, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1047, 1048, 1049], "reshap": [1, 43, 44, 45, 53, 61, 68, 80, 81, 83, 84, 86, 87, 91, 104, 111, 115, 120, 123, 129, 137, 142, 152, 161, 167, 169, 170, 171, 172, 173, 174, 176, 190, 200, 219, 220, 222, 223, 227, 229, 231, 233, 238, 242, 253, 262, 288, 290, 297, 299, 301, 302, 305, 306, 307, 311, 313, 316, 317, 319, 320, 322, 330, 335, 336, 341, 344, 384, 401, 409, 411, 412, 442, 462, 583, 631, 732, 830, 879, 883, 995, 1009, 1015, 1034], "resid": 367, "residence_sinc": 258, "residenti": 154, "residu": [1, 107, 209, 260, 427, 462, 479, 480, 481, 550, 552, 554, 556, 558, 560, 563, 566, 568, 611, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 670, 671, 672, 673, 674, 678, 679, 685, 686, 701, 744, 785, 837, 838, 847, 855, 862, 905, 907, 910, 913, 915, 995, 999, 1041, 1042, 1044, 1049], "residual_metr": 1035, "residual_threshold": [223, 671, 995, 1042], "residual_vs_predict": [43, 52, 107, 260, 318, 701], "residues_": 1034, "resign": 387, "resili": 412, "resist": [111, 112, 372], "resiz": [45, 80, 81, 244, 367, 491, 492], "resolut": [43, 50, 55, 129, 184, 296, 297, 336, 387, 402, 1039], "resolv": [55, 371, 375, 376, 380, 387, 412, 443, 449, 459, 691, 695, 948, 989, 999, 1036, 1038, 1039, 1042, 1047], "resort": [266, 367, 398, 553, 1039], "resourc": [0, 55, 77, 146, 149, 178, 207, 301, 315, 358, 375, 384, 386, 403, 411, 803, 804, 988, 1000, 1019, 1023, 1025, 1037, 1042, 1043, 1048], "resourcewarn": 1032, "resp": [367, 411, 596, 797, 798, 1037], "respect": [64, 88, 100, 125, 126, 134, 138, 140, 142, 151, 165, 175, 188, 190, 194, 198, 209, 220, 223, 226, 228, 234, 237, 239, 243, 254, 258, 273, 290, 291, 302, 309, 317, 322, 333, 340, 354, 359, 360, 367, 368, 372, 402, 404, 407, 409, 411, 412, 414, 443, 461, 464, 467, 468, 469, 470, 471, 472, 473, 532, 538, 539, 545, 551, 559, 560, 596, 610, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 628, 636, 643, 671, 690, 694, 712, 728, 782, 785, 797, 798, 840, 850, 861, 862, 916, 918, 987, 988, 992, 993, 995, 996, 999, 1002, 1003, 1004, 1005, 1009, 1013, 1014, 1018, 1022, 1023, 1032, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048], "respond": [183, 372, 404], "respons": [0, 25, 163, 184, 207, 210, 240, 274, 277, 347, 369, 372, 374, 386, 404, 405, 411, 443, 461, 479, 480, 481, 565, 566, 631, 632, 633, 674, 675, 698, 700, 702, 742, 797, 798, 999, 1000, 1006, 1046], "response_method": [48, 66, 70, 89, 136, 150, 155, 201, 215, 220, 258, 267, 287, 292, 295, 309, 321, 332, 333, 335, 340, 345, 352, 631, 632, 633, 698, 700, 702, 742, 799, 822, 999, 1046, 1048, 1049], "rest": [1, 30, 62, 63, 66, 143, 147, 180, 189, 194, 221, 240, 243, 252, 281, 313, 329, 333, 378, 386, 414, 510, 610, 631, 644, 658, 659, 676, 754, 788, 832, 833, 834, 853, 904, 906, 909, 995, 999, 1000, 1003, 1006, 1014, 1020, 1023, 1033, 1034, 1043, 1044, 1045, 1047, 1049], "restart": [90, 173, 375, 380, 444, 529, 535, 536, 541, 543, 544, 610, 611, 996, 1042], "restor": [465, 1032, 1037, 1038, 1039, 1040, 1044, 1049], "restrict": [1, 64, 66, 99, 100, 105, 178, 180, 199, 201, 221, 223, 298, 374, 378, 402, 404, 411, 412, 462, 491, 500, 530, 580, 610, 653, 654, 655, 656, 658, 682, 683, 713, 774, 778, 782, 788, 789, 830, 852, 854, 855, 856, 858, 860, 861, 862, 864, 890, 999, 1015, 1020, 1024, 1025, 1029, 1031, 1039, 1041, 1046, 1048], "restructuredtext": 372, "result": [0, 1, 27, 37, 43, 44, 45, 48, 52, 53, 57, 61, 62, 63, 66, 68, 70, 72, 75, 77, 78, 79, 80, 86, 87, 88, 93, 95, 99, 103, 105, 107, 112, 116, 120, 123, 125, 130, 137, 138, 139, 141, 143, 144, 146, 147, 150, 152, 153, 155, 162, 163, 167, 169, 171, 173, 175, 178, 183, 184, 185, 186, 191, 195, 197, 198, 199, 201, 204, 208, 209, 211, 214, 220, 221, 224, 226, 227, 230, 233, 236, 238, 244, 249, 254, 255, 257, 258, 259, 262, 264, 265, 267, 270, 271, 272, 273, 274, 275, 276, 278, 281, 284, 286, 290, 299, 300, 301, 304, 305, 306, 309, 313, 315, 317, 318, 319, 320, 321, 322, 325, 328, 330, 336, 340, 341, 343, 347, 349, 354, 359, 360, 361, 366, 367, 369, 372, 376, 377, 378, 380, 384, 385, 386, 387, 398, 400, 401, 402, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 429, 437, 438, 440, 442, 443, 444, 447, 448, 449, 450, 451, 452, 454, 456, 459, 461, 464, 466, 467, 468, 469, 470, 471, 472, 473, 476, 486, 506, 507, 509, 511, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 549, 550, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 567, 578, 579, 580, 581, 583, 587, 588, 590, 606, 607, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 630, 631, 632, 634, 636, 640, 643, 652, 653, 658, 664, 665, 666, 667, 675, 676, 677, 678, 686, 689, 690, 691, 692, 693, 694, 695, 702, 708, 710, 711, 712, 717, 725, 726, 728, 729, 730, 731, 732, 736, 737, 738, 754, 756, 757, 764, 771, 774, 778, 779, 780, 781, 783, 784, 785, 787, 789, 793, 794, 797, 798, 800, 802, 803, 804, 805, 810, 814, 815, 816, 819, 820, 825, 831, 832, 833, 835, 836, 837, 838, 844, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 866, 868, 869, 877, 878, 881, 882, 885, 893, 897, 901, 904, 906, 909, 912, 913, 914, 915, 916, 917, 930, 931, 941, 947, 948, 950, 955, 965, 966, 969, 972, 989, 991, 993, 994, 995, 996, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1011, 1013, 1014, 1015, 1018, 1019, 1022, 1026, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "results_df": [214, 263, 264, 310], "results_for_preval": 267, "results_sc": 343, "retail": 1023, "retain": [1, 190, 386, 404, 407, 408, 412, 434, 440, 441, 444, 446, 462, 479, 480, 481, 492, 531, 534, 536, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 610, 611, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 690, 695, 696, 799, 801, 802, 807, 809, 818, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 849, 851, 854, 855, 861, 862, 864, 867, 869, 870, 871, 876, 877, 883, 884, 899, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 988, 1012, 1029], "retbin": 1009, "retent": [591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602], "retrac": 240, "retract": 372, "retrain": [398, 1019, 1045, 1047], "retri": [185, 322, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 1037, 1043, 1047, 1048], "retriev": [1, 116, 183, 211, 271, 348, 354, 376, 386, 409, 412, 413, 465, 494, 589, 592, 593, 626, 653, 663, 684, 699, 726, 730, 732, 733, 756, 781, 839, 843, 876, 902, 995, 997, 999, 1001, 1018, 1019, 1034, 1039, 1041, 1043, 1046], "return": [1, 30, 43, 45, 46, 47, 49, 50, 52, 53, 55, 57, 61, 62, 64, 69, 70, 72, 75, 86, 89, 94, 102, 107, 118, 126, 127, 129, 132, 134, 137, 139, 145, 146, 149, 150, 154, 163, 165, 170, 173, 175, 178, 179, 184, 186, 190, 191, 196, 198, 201, 207, 208, 214, 215, 216, 224, 240, 243, 246, 247, 252, 254, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 271, 279, 284, 289, 294, 297, 302, 304, 306, 309, 313, 321, 332, 336, 347, 349, 351, 354, 359, 365, 366, 367, 372, 373, 374, 378, 379, 381, 384, 386, 400, 402, 403, 404, 405, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 926, 927, 928, 930, 931, 933, 934, 935, 936, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 966, 967, 968, 969, 970, 971, 972, 973, 979, 982, 983, 984, 985, 986, 987, 989, 996, 999, 1002, 1006, 1007, 1014, 1015, 1026, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "return_a": [584, 585, 966, 1032], "return_cent": [510, 1040], "return_cod": 544, "return_cost": [468, 469, 475], "return_count": [328, 348, 856], "return_cov": [386, 565, 566, 611, 864], "return_dist": [87, 460, 844, 845, 846, 847, 848, 850, 852, 854, 855, 856, 1002, 1033], "return_distribut": [118, 521], "return_estim": [43, 183, 274, 278, 320, 323, 408, 702, 827, 1037], "return_ind": 521, "return_indic": [274, 323, 408, 702, 827, 1045], "return_inner_stat": 1043, "return_intercept": [687, 1038], "return_invers": [148, 374], "return_log": [844, 845], "return_model": [1031, 1033], "return_n_it": [416, 451, 456, 475, 543, 544, 646, 647, 652, 653, 660, 661, 662, 663, 681, 682, 683, 684, 685, 686, 687, 694, 1043], "return_norm": [891, 1036], "return_path": [682, 683, 685, 686], "return_std": [167, 172, 173, 174, 176, 190, 191, 386, 550, 565, 566, 611, 613, 614, 615, 616, 625, 627, 644, 645, 864, 1036, 1037, 1041, 1046], "return_sum_weight": 979, "return_tim": [266, 828, 1039], "return_train_scor": [103, 104, 140, 245, 254, 258, 262, 263, 264, 268, 276, 278, 310, 408, 800, 803, 804, 814, 827, 1035, 1036, 1038], "return_x_i": [44, 46, 54, 91, 102, 103, 104, 105, 120, 140, 143, 156, 159, 178, 179, 185, 186, 188, 196, 197, 198, 200, 205, 221, 222, 234, 242, 243, 246, 247, 260, 263, 266, 271, 272, 281, 283, 286, 293, 300, 301, 302, 309, 313, 315, 317, 318, 319, 320, 328, 339, 349, 351, 365, 377, 378, 385, 398, 404, 405, 408, 411, 413, 416, 424, 443, 485, 486, 487, 488, 490, 492, 493, 494, 495, 498, 499, 500, 502, 503, 508, 513, 530, 531, 532, 533, 556, 559, 560, 565, 566, 591, 594, 595, 597, 598, 599, 600, 601, 610, 619, 620, 622, 623, 638, 639, 658, 659, 668, 673, 674, 675, 688, 689, 690, 691, 693, 695, 701, 711, 788, 803, 804, 806, 832, 837, 848, 853, 856, 913, 914, 915, 989, 994, 999, 1000, 1001, 1002, 1009, 1026, 1035, 1037, 1039, 1042, 1049], "return_x_mean": 416, "reuben": 1029, "reus": [52, 167, 202, 258, 265, 313, 349, 374, 386, 404, 405, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 634, 646, 648, 649, 652, 658, 660, 662, 666, 667, 668, 669, 676, 677, 678, 680, 861, 862, 1002, 1007, 1011, 1023, 1036, 1046], "reuter": [359, 367], "reuters21578": 47, "reuterspars": 47, "rev": [372, 606, 607], "revamp": [322, 374, 1039], "reveal": [43, 52, 183, 185, 347, 378, 400, 401, 996, 1045], "revers": [107, 163, 212, 264, 408, 532, 539, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 611, 789, 864, 999, 1029, 1030, 1039, 1041, 1045], "revert": [121, 400, 630, 632, 633, 1026, 1036, 1041, 1046], "review": [281, 310, 359, 367, 374, 375, 377, 378, 384, 387, 408, 409, 533, 539, 999, 1009], "revillet": 1029, "revis": [387, 670], "revisit": [404, 415, 441], "revolv": 996, "reward": 372, "reweight": [134, 348, 386, 406, 411, 589, 590, 648, 669, 680, 1048], "reweight_covari": [466, 471], "rewrit": [378, 384, 1015, 1029], "rewritten": [372, 649, 1031, 1033], "rey": 1044, "reza": 1039, "rezazadeh": 1042, "rf": [139, 140, 153, 156, 185, 313, 355, 411, 565, 567, 568], "rf_": 139, "rf_123": 355, "rf__n_estim": 411, "rf_appli": 139, "rf_applyfunctiontransform": 139, "rf_cst": 320, "rf_inst": 355, "rf_leaves_yield": 139, "rf_model": 139, "rf_no_cst": 320, "rf_pipelin": 154, "rfc": [64, 246, 313, 1026], "rfc_disp": [246, 313, 1026], "rfe": [1, 161, 162, 395, 413, 593, 596, 601, 1029, 1033, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1048], "rfecv": [1, 162, 395, 413, 592, 596, 601, 1033, 1035, 1037, 1039, 1040, 1041, 1042, 1045, 1046, 1047, 1048, 1049], "rfrandomforestregressor": 156, "rgb": [367, 412, 491, 492, 582, 583, 586], "rgr_lasso": 53, "rgr_ridg": 53, "rhinehart": 1036, "rho": [217, 409, 677, 995, 1013, 1030], "rho_k": 410, "ri": [404, 705, 786], "ribeiro": [589, 730, 1042], "ricardo": [1032, 1042, 1043, 1046], "ricardojnf": 1042, "riccadonna": 743, "riccardo": [1040, 1046], "rice": [50, 297, 367, 496, 1042], "rich": [85, 149, 380, 384, 404, 436, 1023, 1040, 1043], "richard": [367, 413, 658, 1030, 1039, 1041, 1043, 1044, 1047, 1049], "richardscottoz": 1042, "richer": [85, 129, 404], "richi": 1037, "rick": 1040, "ricker": 129, "ricker_funct": 129, "ricker_matrix": 129, "rickiepark": 1036, "rid": [48, 1013], "riddel": [1032, 1034, 1036], "ridg": [1, 24, 44, 49, 53, 87, 107, 121, 137, 154, 163, 166, 172, 173, 174, 178, 180, 182, 183, 184, 189, 190, 194, 199, 202, 204, 207, 208, 223, 232, 242, 277, 305, 342, 343, 347, 359, 384, 400, 409, 411, 414, 499, 522, 533, 537, 541, 611, 615, 622, 625, 643, 644, 645, 647, 649, 652, 657, 661, 673, 674, 675, 678, 687, 701, 750, 785, 800, 806, 814, 830, 837, 910, 999, 1000, 1007, 1009, 1013, 1014, 1020, 1021, 1025, 1029, 1030, 1031, 1032, 1033, 1034, 1036, 1038, 1039, 1042, 1043, 1044, 1045, 1047, 1048], "ridge_alpha": [537, 541, 1036], "ridge_cv": 107, "ridge_cv_with_trans_target": 107, "ridge_glm": 207, "ridge_regress": [1, 1037, 1038, 1044], "ridgeclassifi": [1, 347, 359, 672, 673, 675, 995, 1000, 1034, 1038, 1042, 1043, 1044, 1047], "ridgeclassifiercv": [1, 395, 673, 674, 788, 995, 999, 1000, 1037, 1039, 1040, 1042, 1043, 1047, 1048], "ridgecv": [1, 43, 107, 154, 163, 183, 242, 386, 395, 411, 566, 643, 672, 675, 995, 1000, 1029, 1031, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1047, 1048], "ridgecvridgecv": 183, "ridgeridg": 183, "ridgewai": [145, 411], "riedmann": 1041, "ries": 1043, "rifkin": 995, "right": [45, 46, 50, 51, 53, 54, 67, 70, 74, 77, 78, 79, 84, 86, 93, 95, 97, 110, 111, 113, 118, 122, 123, 125, 126, 127, 129, 134, 136, 137, 138, 146, 147, 148, 149, 159, 167, 170, 179, 186, 197, 199, 208, 209, 210, 211, 213, 216, 217, 223, 233, 236, 237, 249, 251, 252, 254, 255, 258, 259, 260, 261, 264, 267, 271, 274, 275, 277, 278, 289, 297, 299, 302, 304, 306, 309, 319, 320, 326, 336, 338, 340, 343, 345, 347, 352, 354, 355, 372, 374, 380, 384, 385, 387, 401, 403, 404, 407, 409, 410, 411, 414, 461, 479, 480, 481, 482, 532, 539, 542, 555, 556, 557, 558, 559, 560, 562, 563, 564, 586, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 627, 635, 676, 678, 700, 702, 869, 912, 913, 914, 915, 916, 934, 948, 988, 991, 993, 995, 997, 999, 1001, 1002, 1006, 1011, 1013, 1014, 1015, 1023, 1025, 1031, 1037, 1043, 1045, 1046, 1048], "right_impur": [555, 556, 557, 558, 562, 563, 564, 912, 913, 914, 915], "rightarrow": [414, 619, 1003], "rijn": [366, 1037], "rileran": 1043, "rio": [1039, 1041, 1042, 1043], "riou": 1048, "ripe": 310, "rise": 172, "rishab": 1049, "rishabh": 1043, "rishi": 1041, "rishikesh": 1036, "risk": [15, 48, 88, 149, 207, 211, 224, 305, 343, 355, 371, 372, 386, 398, 403, 408, 411, 565, 566, 889, 890, 892, 893, 894, 895, 995, 999, 1023, 1036], "riski": 224, "riskiest": [207, 224], "ritchi": 1040, "rithvik": 1041, "ritter": [1043, 1044], "ritual": 347, "rival": [43, 901, 1012], "rk": 98, "rkf": [408, 815], "rl2007": 995, "rlm": 1039, "rm": [111, 170, 376, 380, 406], "rmse": [43, 52, 112, 149, 310, 999, 1040], "rmse_": 310, "rmse_test_mean": 310, "rmse_test_scor": 310, "rmse_test_std": 310, "rmse_train_mean": 310, "rmse_train_scor": 310, "rmse_train_std": 310, "rmsle": 999, "rmtree": [87, 104, 405], "rna": 384, "rnd": 305, "rngro": 63, "road": 384, "rob": [1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1041, 1044], "robert": [0, 163, 196, 281, 369, 394, 409, 526, 533, 628, 656, 721, 723, 724, 735, 870, 989, 995, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1039, 1044, 1047, 1048], "roberto": [404, 439, 1047, 1048], "robertson": 1042, "robin": [178, 179, 627, 989, 1035, 1038, 1043, 1044], "robinson": 1042, "robl": 1036, "robson": 1039, "robust": [1, 48, 70, 94, 96, 108, 110, 127, 144, 146, 163, 179, 180, 183, 184, 189, 199, 209, 211, 223, 233, 243, 279, 304, 319, 361, 369, 380, 404, 411, 412, 443, 445, 466, 467, 468, 469, 470, 471, 472, 473, 522, 532, 557, 558, 649, 657, 670, 671, 678, 679, 750, 834, 865, 879, 881, 882, 893, 899, 946, 999, 1003, 1005, 1009, 1012, 1013, 1018, 1020, 1021, 1023, 1024, 1025, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1045, 1048, 1049], "robust_contour": 111, "robust_cov": 111, "robust_mah": 111, "robust_scal": [1, 882, 893, 1037], "robustli": [7, 210], "robustscal": [1, 178, 179, 243, 881, 894, 989, 1009, 1034, 1035, 1037, 1039, 1040, 1041, 1045], "roc": [1, 50, 62, 66, 139, 163, 180, 232, 234, 243, 244, 256, 258, 259, 266, 320, 321, 379, 402, 403, 408, 502, 508, 562, 658, 702, 706, 707, 708, 727, 782, 788, 789, 819, 827, 830, 833, 871, 909, 1005, 1020, 1026, 1031, 1032, 1034, 1035, 1039, 1041, 1045, 1049], "roc_auc": [50, 66, 163, 264, 268, 273, 274, 379, 634, 702, 733, 999, 1026], "roc_auc_ovo": [999, 1039], "roc_auc_ovo_weight": [999, 1039], "roc_auc_ovr": [999, 1039], "roc_auc_ovr_weight": [999, 1039], "roc_auc_scor": [1, 62, 66, 163, 264, 273, 313, 320, 702, 706, 707, 708, 789, 999, 1031, 1032, 1037, 1039, 1043, 1044, 1048], "roc_auc_test": 66, "roc_curv": [1, 50, 234, 261, 273, 702, 706, 727, 782, 788, 999, 1029, 1030, 1031, 1034, 1035, 1037, 1042, 1045, 1047], "roc_displai": 234, "rocchio": [347, 851], "rocco": [1042, 1043, 1044], "roccurvedisplai": [1, 139, 243, 246, 258, 261, 273, 274, 313, 323, 379, 788, 789, 1005, 1026, 1039, 1045, 1046, 1047, 1048, 1049], "rocher": 1049, "rock": 112, "rocklin": [371, 377], "roddi": [1038, 1039], "rodent": [50, 297, 367, 496], "roderick": 989, "rodion": 1042, "rodrigo": [1037, 1047], "rodrigu": [1036, 1037, 1042], "rodr\u00edguez": 310, "roeder": 1039, "roehr": [1045, 1046], "roei": 1041, "roeschk": 1038, "roger": [723, 1036, 1037, 1041], "rogerstanimoto": [447, 454, 699, 778, 779, 780, 1002], "rogerstanimotodist": 699, "rohan": [1034, 1035, 1037, 1038, 1042], "rohit": [1032, 1033, 1037, 1038], "roi": [1029, 1043], "roi_siz": 87, "roic": 1044, "rok": 1039, "rokem": [1029, 1035], "rokhlin": [533, 539, 948], "roland": [1031, 1032], "rolando": [1030, 1031], "rolandrmgservic": 1049, "role": [0, 273, 359, 371, 409], "roll": [1, 100, 180, 225, 226, 231, 375, 404, 528, 692, 693, 941, 996, 1020, 1023, 1039, 1044], "rolling_max": 52, "rolling_mean": 52, "rolling_min": 52, "romain": [1036, 1041], "roman": [0, 394, 627, 918, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1046], "roman4oo": 1044, "romaniuk": 1033, "romero": 1047, "romijnd": 1041, "romuald": 1038, "ron": [0, 394, 1029], "ronald": [367, 1003, 1032, 1042], "ronan": [1029, 1032, 1037], "ronchetti": [649, 995], "rong": 1014, "ronrubin": [664, 685, 686, 995], "ronsin": [1037, 1038, 1046], "room": [304, 367, 377, 404, 1022], "roopam": [1037, 1038], "root": [1, 43, 111, 149, 163, 192, 354, 369, 372, 380, 404, 439, 499, 539, 559, 560, 561, 639, 790, 791, 912, 913, 914, 915, 916, 918, 999, 1005, 1015, 1031, 1037, 1038, 1039, 1040, 1043, 1044, 1048], "root_": 439, "root_mean_squared_error": [1, 52, 149, 400, 999, 1046, 1048, 1049], "root_mean_squared_log_error": [1, 400, 999, 1046, 1048, 1049], "rope": 264, "rope_interv": 264, "rope_prob": 264, "rori": 1040, "rosa": 1044, "rosal": 408, "rosati": [1047, 1048], "rose": 367, "rosenberg": [404, 717, 737, 795], "rosenfeld": 1037, "ross": [532, 606, 607, 1015, 1043, 1044], "rosset": [134, 411, 517, 551], "rossi": 1032, "rosslimlinyang_ijcv": 532, "rostamizadeh": 988, "rostomyan": 1037, "rotat": [47, 75, 119, 120, 122, 125, 127, 145, 180, 186, 229, 275, 276, 283, 336, 342, 407, 409, 414, 416, 502, 530, 539, 548, 614, 697, 884, 916, 995, 1020, 1040, 1041], "rotation_mod": 275, "rotations_": 548, "roth": [1034, 1037, 1044], "rough": [25, 392, 1005], "roughli": [134, 146, 198, 255, 274, 284, 309, 359, 386, 409, 412, 517, 996, 1029], "rouli": 1032, "round": [46, 48, 62, 66, 115, 140, 149, 165, 178, 179, 224, 263, 264, 270, 306, 308, 347, 386, 447, 453, 454, 562, 563, 592, 593, 596, 627, 692, 694, 713, 802, 812, 869, 901, 916, 918, 989, 1003, 1015, 1031, 1033, 1035, 1037, 1038, 1040, 1042, 1043, 1045, 1046], "rounded_list": 812, "rouseeuw1984": 471, "rousseeuw": [111, 112, 404, 406, 466, 471, 792, 793, 1005], "rousseuw": [111, 112], "rout": [1, 132, 180, 192, 232, 258, 321, 374, 418, 421, 424, 427, 428, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 461, 462, 465, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 609, 610, 611, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 957, 958, 959, 960, 982, 1020, 1025, 1043, 1045], "route_param": [240, 957], "routed_param": [240, 960], "router": [1, 240, 386, 395, 957, 958, 959, 960], "routerconsumerclassifi": 240, "routerconsumerclassifierifit": 240, "routermappingpair": 957, "routin": [320, 361, 366, 369, 372, 373, 374, 375, 380, 384, 386, 413, 672, 674, 687, 847, 906, 907, 908, 909, 910, 996, 1002, 1009, 1010, 1013, 1023, 1029, 1043, 1044, 1045], "routlei": 1035, "rouvinen": 1034, "roux": [658, 995, 1012], "row": [1, 43, 57, 58, 59, 62, 64, 70, 79, 93, 107, 118, 140, 142, 152, 155, 178, 207, 208, 209, 234, 237, 243, 244, 258, 306, 354, 359, 367, 374, 381, 385, 386, 401, 404, 407, 412, 419, 439, 440, 444, 446, 447, 448, 450, 453, 454, 456, 461, 465, 485, 487, 488, 490, 491, 492, 493, 498, 499, 500, 502, 503, 508, 509, 511, 524, 532, 540, 546, 549, 589, 590, 620, 628, 632, 643, 646, 647, 652, 653, 660, 661, 662, 663, 681, 684, 692, 696, 697, 710, 718, 719, 725, 758, 759, 763, 766, 768, 769, 770, 771, 773, 774, 776, 778, 779, 780, 781, 797, 798, 833, 839, 840, 841, 842, 843, 849, 852, 853, 854, 855, 856, 859, 870, 874, 876, 877, 879, 889, 890, 891, 894, 895, 898, 902, 921, 926, 930, 931, 948, 969, 972, 976, 978, 980, 981, 984, 985, 988, 989, 991, 993, 995, 997, 999, 1000, 1002, 1009, 1010, 1013, 1014, 1019, 1036, 1037, 1038, 1039, 1044], "row_compl": 57, "row_id_attribut": 366, "row_idx": [59, 207], "row_idx_shuffl": 58, "row_ind": [419, 448, 450], "row_indic": 149, "row_labels_": [57, 58, 59, 401, 448, 450], "row_norm": 252, "rowan": 1044, "rowei": [689, 693, 853, 996, 1002], "rows_": [57, 401, 419, 448, 450], "royal": [539, 627, 880, 892, 1013], "rp": 237, "rpath": 370, "rr2007": 991, "rragundez": 1037, "rsalakhu": 644, "rsh": [276, 315], "rskf": 816, "rsnegrin": 1043, "rsplit": [45, 55, 265], "rst": [360, 372, 376, 380, 1029], "rstride": 184, "rt": 139, "rt_model": 139, "rtn": 51, "rtol": [374, 844, 845, 849], "ruben": 1044, "rubi": 1041, "rubia": 1032, "rubial": 1042, "rubin": 989, "rubinstein": [664, 685, 686], "rubric": [372, 996], "ruchitagard": 1039, "rudi": 1035, "rudresh": 1044, "ruff": [372, 390, 397], "ruifeng": [1035, 1036, 1041], "ruin": 372, "ruiter": 1044, "rule": [1, 12, 27, 43, 64, 140, 188, 201, 258, 263, 352, 354, 355, 359, 369, 372, 373, 374, 376, 384, 386, 387, 399, 400, 402, 403, 404, 408, 409, 411, 413, 534, 547, 548, 549, 550, 551, 567, 568, 645, 658, 659, 666, 667, 668, 676, 677, 678, 706, 707, 709, 853, 904, 917, 988, 993, 1001, 1002, 1013, 1015, 1025, 1031, 1034, 1041, 1046], "ruleset": 1015, "rumelhart": 1003, "rumsfeld": [45, 367], "run": [43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 351, 352, 353, 354, 355, 359, 360, 370, 372, 373, 374, 376, 377, 378, 379, 380, 384, 386, 387, 390, 391, 398, 400, 404, 406, 411, 414, 415, 416, 434, 440, 441, 443, 444, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 459, 461, 464, 465, 468, 469, 529, 530, 531, 532, 533, 535, 537, 539, 540, 541, 543, 544, 546, 553, 554, 555, 556, 561, 562, 563, 564, 565, 566, 567, 568, 581, 591, 593, 594, 595, 597, 598, 599, 601, 610, 611, 630, 634, 640, 646, 647, 649, 651, 652, 653, 655, 656, 660, 661, 662, 663, 682, 683, 688, 689, 690, 691, 692, 693, 694, 781, 800, 803, 804, 806, 814, 822, 823, 825, 826, 827, 828, 829, 831, 836, 837, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858, 861, 862, 863, 866, 899, 900, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 921, 941, 943, 969, 972, 988, 998, 1000, 1003, 1012, 1014, 1015, 1018, 1019, 1023, 1029, 1032, 1034, 1036, 1037, 1038, 1039, 1043, 1044, 1045, 1048], "run_histori": 47, "run_id": 94, "run_tim": [221, 222], "runabl": 372, "rung": 1009, "runnabl": [54, 376, 377], "runner": 1048, "runtim": [30, 47, 49, 91, 134, 195, 221, 223, 238, 302, 306, 360, 370, 374, 384, 386, 398, 404, 411, 447, 561, 679, 814, 902, 904, 905, 906, 907, 908, 909, 910, 1013, 1014, 1032, 1036, 1037, 1043, 1044, 1046, 1047, 1048], "runtime_histori": 47, "runxfail": 380, "rupesh": 1032, "rush": [43, 52, 372], "rushabh": 1040, "rushil": [1044, 1045], "russ": [628, 989], "russel": [1035, 1036], "russellrao": [447, 454, 699, 778, 779, 780, 1002], "russellraodist": 699, "russian": 412, "ruth": 1039, "rutter": 1042, "ruusmann": 1035, "rv": [0, 804, 812, 814, 988, 1029, 1030, 1033, 1034, 1035, 1036, 1037], "rv_discrete_frozen": 276, "rvd": [466, 471], "rvdriessen": [466, 471], "rw2006": [414, 610, 611], "rwelsch427": [1047, 1048], "ryad": 1035, "ryan": [1032, 1035, 1037, 1038], "ryb": 352, "ryder": 51, "ryotaro": 1041, "r\u00e9mi": 1049, "r\u00e9my": 1035, "r\u00fcdiger": [1037, 1038, 1040], "s1": [121, 163, 175, 196, 198, 369], "s2": [121, 163, 175, 196, 198, 369, 548], "s22": 496, "s3": [57, 121, 163, 196, 198, 369], "s4": [163, 196, 198, 369], "s5": [163, 196, 198, 369, 1007], "s6": [163, 196, 198, 369], "s_": [121, 268, 995, 1007, 1009], "s__p": 864, "s_color": 226, "s_hessian": 226, "s_i": [404, 995, 1009], "s_ica_": 122, "s_isomap": 226, "s_j": 404, "s_ltsa": 226, "s_mod": 226, "s_pca_": 122, "s_point": 226, "s_scale": 226, "s_spectral": 226, "s_standard": 226, "s_t_sne": 226, "sa": [367, 490], "saaba": 1034, "saad": 1047, "sabharw": 1039, "sabri": 1044, "sach": 51, "sachdev": 1044, "sachdeva": 1036, "sachin": [1036, 1037, 1043], "sackei": 1039, "sacksick": 1049, "saclai": 0, "sacr": 1018, "sad": [818, 819], "sadak": 1041, "sadhana": 1037, "sadli": 146, "sadra": 1045, "sad\u0142ocha": 1042, "saeed": 999, "saeger": [1034, 1035, 1036], "safari": 1009, "safe": [1, 72, 183, 198, 202, 258, 348, 372, 374, 404, 405, 429, 462, 506, 507, 565, 566, 592, 596, 774, 778, 828, 829, 831, 863, 898, 966, 970, 1002, 1035, 1036, 1037, 1042, 1043], "safe_copi": 1036, "safe_index": [381, 1039], "safe_mask": [1, 381], "safe_realloc": 1032, "safe_sparse_dot": [1, 381, 1039], "safe_sqr": [1, 381], "safeguard": 398, "safer": [348, 355, 370, 404, 408, 1029], "safest": [207, 224, 355, 366], "safeti": [102, 384, 405, 966, 1019, 1039], "safikh": 1044, "safiuddin": 1044, "sag": [658, 659, 672, 674, 687, 995, 1013, 1034, 1035, 1036, 1038, 1039], "sag_solv": 1038, "saga": [200, 221, 222, 658, 659, 672, 674, 687, 814, 995, 1036, 1038], "sagar": 1039, "sagnik": 1037, "saha": [1043, 1048, 1049], "sahil": 1045, "sahin": 1039, "sahu": 1041, "sai": [195, 233, 343, 347, 348, 372, 402, 404, 405, 409, 411, 412, 443, 444, 498, 502, 508, 677, 988, 999, 1005, 1012, 1023, 1046, 1047], "said": [149, 183, 233, 265, 367, 372, 792, 997, 1005], "saihttam": 1035, "sailesh": [1036, 1037], "saini": 1049, "saint": 1035, "saito": [409, 536, 538, 545, 1036], "saiw": 1035, "sake": [43, 64, 146, 149, 179, 183, 207, 309, 340, 347, 349, 380, 384, 670], "saket": [1033, 1034, 1041], "sakinaouisrani": 1043, "salahuddin": 1044, "salakhutdinov": [644, 853, 1002], "salamin": 1033, "saldanha": [1048, 1049], "sale": [0, 143, 243, 264, 999, 1023], "saleem": 1039, "salerno": 369, "salim": [1046, 1047], "sallisaw": [405, 463], "salman": [0, 393, 1044, 1045, 1046, 1047, 1048, 1049], "salt": [67, 238, 306, 1043], "salvator": [1029, 1043, 1044, 1046, 1047], "salz": 1036, "salzmann": [207, 224], "sam": [1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044], "sambhav": 1040, "same": [1, 25, 43, 46, 47, 52, 58, 63, 70, 72, 75, 79, 86, 88, 90, 91, 97, 102, 103, 104, 118, 120, 122, 125, 127, 129, 135, 137, 141, 143, 146, 147, 149, 152, 163, 165, 167, 183, 184, 186, 195, 196, 198, 203, 207, 208, 209, 214, 224, 240, 244, 254, 258, 259, 260, 261, 262, 264, 265, 267, 269, 270, 272, 277, 278, 284, 287, 289, 301, 304, 305, 307, 309, 310, 313, 315, 322, 328, 336, 347, 348, 349, 354, 355, 359, 360, 361, 366, 367, 369, 371, 372, 374, 376, 378, 380, 381, 384, 385, 386, 387, 395, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 425, 429, 435, 436, 443, 447, 453, 462, 466, 467, 468, 469, 470, 471, 472, 473, 475, 491, 493, 494, 496, 502, 506, 507, 529, 530, 533, 534, 535, 536, 537, 538, 540, 541, 545, 547, 549, 550, 551, 552, 555, 557, 558, 559, 560, 562, 563, 565, 566, 588, 589, 601, 602, 605, 610, 611, 613, 622, 627, 628, 629, 632, 633, 646, 649, 652, 653, 655, 658, 659, 663, 666, 667, 668, 672, 673, 674, 675, 676, 677, 678, 684, 687, 698, 699, 702, 704, 705, 712, 713, 715, 717, 726, 727, 731, 732, 736, 755, 756, 757, 778, 779, 780, 786, 788, 792, 794, 795, 797, 798, 800, 801, 803, 804, 806, 808, 809, 814, 818, 819, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 846, 847, 848, 852, 854, 855, 856, 867, 868, 869, 873, 874, 876, 878, 879, 880, 881, 882, 883, 884, 886, 893, 904, 905, 912, 914, 925, 932, 936, 948, 966, 969, 972, 973, 983, 988, 989, 991, 993, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1013, 1014, 1015, 1018, 1019, 1026, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "same_kind": 1046, "samesh": [1039, 1040], "samm": [134, 411, 551, 1045, 1046], "samoocha": 1037, "sampl": [1, 27, 30, 37, 43, 44, 47, 50, 53, 61, 62, 63, 64, 68, 69, 70, 72, 74, 76, 77, 78, 80, 82, 86, 89, 90, 91, 92, 93, 98, 111, 112, 113, 116, 118, 120, 124, 125, 128, 129, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 147, 149, 150, 155, 156, 160, 162, 163, 165, 167, 171, 172, 173, 174, 176, 178, 180, 183, 184, 188, 189, 190, 194, 195, 196, 198, 201, 205, 207, 209, 211, 214, 216, 217, 218, 220, 222, 223, 224, 226, 233, 237, 238, 240, 241, 243, 249, 250, 252, 253, 254, 255, 256, 258, 259, 264, 266, 267, 268, 270, 272, 276, 278, 279, 283, 284, 288, 289, 290, 291, 293, 294, 295, 297, 301, 302, 304, 306, 307, 308, 309, 311, 313, 315, 316, 318, 320, 321, 323, 325, 327, 328, 329, 330, 331, 332, 334, 336, 338, 340, 341, 343, 347, 348, 352, 354, 359, 365, 367, 368, 371, 372, 374, 375, 384, 385, 395, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 421, 422, 423, 426, 427, 428, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 451, 453, 454, 455, 458, 459, 460, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 484, 485, 486, 487, 488, 490, 491, 492, 493, 495, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 580, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 610, 611, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 687, 688, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 707, 708, 709, 710, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 734, 735, 736, 737, 738, 739, 740, 741, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 760, 761, 763, 764, 768, 769, 770, 771, 773, 774, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 867, 868, 869, 870, 873, 874, 875, 876, 877, 878, 879, 881, 882, 883, 884, 885, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 921, 926, 930, 931, 935, 936, 948, 952, 968, 969, 972, 973, 976, 979, 987, 988, 989, 991, 992, 993, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1018, 1019, 1020, 1022, 1025, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "sample_i": [176, 414, 611, 1043], "sample_id": [354, 367, 495], "sample_interv": 638, "sample_interval_": 1045, "sample_posterior": [627, 989], "sample_s": [91, 238, 348, 793], "sample_score_mean": 268, "sample_score_std": 268, "sample_silhouette_valu": 93, "sample_step": 638, "sample_weight": [61, 192, 207, 219, 224, 240, 314, 319, 320, 345, 372, 374, 386, 395, 400, 404, 411, 415, 421, 427, 434, 440, 441, 444, 446, 456, 457, 462, 466, 479, 480, 481, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 610, 611, 632, 633, 634, 635, 637, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 687, 697, 698, 700, 702, 703, 707, 708, 709, 712, 713, 716, 718, 720, 721, 722, 723, 724, 726, 727, 728, 729, 730, 734, 735, 738, 739, 740, 741, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 782, 783, 784, 785, 787, 788, 789, 790, 791, 794, 796, 799, 800, 814, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 849, 851, 854, 855, 861, 862, 864, 869, 883, 884, 899, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 918, 935, 960, 969, 986, 995, 999, 1013, 1014, 1015, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1049], "sample_weight1": 240, "sample_weight2": 240, "sample_weight_const": 345, "sample_weight_modifi": 345, "sample_weight_v": [323, 559, 560, 1049], "sample_weight_vect": 936, "sample_without_replac": [1, 381, 1035], "samples_weight": 219, "samplewis": [754, 999], "samson": 1036, "samuel": [696, 1023, 1032, 1033, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1046], "samuela": 1032, "samu\u00ebl": 1036, "san": [163, 369, 412, 1011], "sanchez": [1037, 1038], "sanchitd": 1049, "sandbox": 398, "sandeep": 1041, "sander": [404, 415, 441, 443, 447, 454, 850, 1005, 1038, 1039], "sandi": 1042, "sandip": [1046, 1047], "sandra": [1038, 1044], "sandro": [1037, 1044], "sandrocasagrand": [1037, 1038], "sandrovskii": 1036, "sane": 374, "sangam": 1044, "sangamswadik": 1044, "sangeeth": 1038, "saniti": [155, 375, 868, 999, 1029, 1030], "sanjabi": 1039, "sanjai": 1043, "sanjai_3": [1044, 1045], "sanjoi": [898, 1011], "sano": 1043, "sanofi": 51, "santa": [175, 1044], "santana": [1040, 1043], "santhanam": 1037, "santhosh": 1040, "santhoshbala18": 1040, "santi": [1034, 1036, 1037], "santiago": [1040, 1048, 1049], "sap": 51, "sapiro": [409, 529, 535], "saqib": 1037, "sara": 1042, "sarah": [1036, 1038, 1041], "sarahremu": [1044, 1047], "sarajpoor": 1044, "sarat": 1040, "sarawagi": 783, "sarra": 1039, "sartaj": 1035, "sasank": 1035, "sascha": 1049, "sashka": [1044, 1045], "saskra": 1049, "sass": [372, 390, 397], "sassenhagen": [1041, 1046], "sat": [43, 149, 184, 412], "satellit": 1002, "satisfi": [404, 650, 654, 699, 717, 736, 737, 844, 845, 999], "satish": 1037, "sato": 1032, "satrajit": [0, 394, 1029, 1030], "satur": [72, 183, 304], "saucedo": 1049, "sauerbrei": 1009, "sauerkraut": 412, "saul": [689, 693, 996, 1036, 1037, 1039], "saurabh": [1033, 1034, 1035, 1036, 1037, 1041], "sauvignon": 310, "saval": 1038, "savard": 1029, "save": [86, 102, 104, 243, 302, 371, 372, 376, 378, 379, 380, 386, 398, 408, 416, 465, 489, 532, 533, 627, 844, 845, 902, 995, 999, 1009, 1015, 1023, 1026, 1029, 1032, 1036, 1039, 1047, 1049], "savefig": 66, "savings_statu": 258, "savkomax": 1044, "saw": [121, 208, 211], "sawadwuthikul": 1048, "sawtooth": 121, "say_hello": 961, "sc": [323, 366, 404], "scaja": 1046, "scala": 1019, "scalabl": [77, 79, 95, 180, 187, 238, 256, 318, 348, 372, 404, 411, 412, 445, 488, 500, 588, 640, 806, 817, 828, 830, 842, 865, 874, 876, 904, 906, 909, 910, 991, 994, 996, 999, 1012, 1014, 1020, 1023, 1029, 1032, 1033, 1039, 1040, 1043, 1044], "scalar": [1, 120, 316, 321, 378, 386, 400, 405, 414, 416, 461, 464, 522, 531, 615, 616, 617, 622, 623, 627, 628, 630, 738, 742, 926, 934, 991, 1003, 1005, 1009, 1013, 1018, 1039, 1040, 1043, 1045, 1048, 1049], "scalarmapp": 66, "scale": [0, 1, 36, 43, 44, 51, 62, 64, 72, 75, 78, 80, 81, 89, 91, 94, 103, 104, 110, 113, 116, 122, 125, 144, 151, 155, 163, 167, 168, 169, 172, 173, 174, 178, 179, 180, 184, 188, 191, 192, 196, 200, 207, 209, 211, 220, 221, 222, 224, 225, 228, 233, 237, 239, 243, 245, 246, 254, 261, 264, 265, 266, 267, 271, 287, 289, 300, 301, 302, 303, 304, 308, 314, 317, 319, 320, 330, 331, 333, 336, 340, 355, 358, 359, 364, 365, 366, 369, 372, 377, 381, 384, 385, 386, 404, 405, 409, 411, 412, 413, 414, 443, 444, 447, 448, 454, 461, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 499, 508, 512, 513, 522, 532, 536, 538, 539, 545, 547, 548, 559, 560, 581, 589, 590, 596, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 631, 632, 641, 644, 645, 646, 647, 649, 652, 658, 659, 660, 661, 662, 672, 674, 676, 677, 678, 681, 687, 688, 689, 690, 692, 694, 699, 703, 709, 716, 741, 747, 757, 759, 769, 775, 777, 814, 817, 830, 831, 832, 844, 845, 846, 861, 862, 865, 868, 873, 874, 876, 879, 881, 882, 884, 889, 890, 891, 893, 894, 896, 897, 904, 905, 906, 907, 908, 909, 910, 973, 974, 975, 976, 979, 988, 991, 992, 995, 999, 1000, 1001, 1002, 1003, 1007, 1013, 1014, 1019, 1020, 1023, 1024, 1025, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "scale_": [649, 873, 874, 882, 884, 894, 1009, 1034], "scale_by_half": [709, 999, 1049], "scaled_clf": 309, "scaled_pca": 309, "scaled_x_train": 309, "scaler": [45, 103, 105, 161, 180, 222, 223, 238, 243, 245, 247, 278, 287, 292, 303, 308, 309, 318, 336, 339, 355, 377, 405, 408, 487, 658, 659, 672, 674, 687, 864, 873, 874, 876, 880, 881, 882, 884, 889, 890, 891, 892, 893, 894, 895, 1003, 1009, 1013, 1020, 1029, 1034, 1037, 1042], "scaler2": 247, "scalewai": 380, "scaling_": 548, "scalings_": [547, 548], "scanpi": 1046, "scatter": [43, 48, 50, 51, 61, 66, 67, 70, 73, 74, 77, 78, 79, 82, 85, 89, 90, 91, 92, 93, 95, 100, 111, 116, 118, 122, 124, 125, 126, 128, 135, 136, 140, 142, 150, 152, 153, 155, 158, 167, 168, 169, 171, 173, 174, 175, 176, 182, 183, 188, 191, 199, 201, 205, 208, 209, 210, 215, 218, 219, 220, 223, 226, 227, 228, 229, 230, 231, 233, 238, 239, 241, 249, 250, 251, 252, 253, 254, 255, 259, 263, 265, 267, 279, 284, 287, 290, 291, 292, 293, 294, 295, 296, 299, 304, 306, 307, 309, 317, 327, 330, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 344, 345, 347, 352, 353, 368, 406, 631, 701, 993, 995], "scatter_": 701, "scatter_fig": 140, "scatter_handl": 201, "scatter_kwarg": [43, 52, 66, 107, 154, 183, 701], "scatter_label": 201, "scatter_trac": 140, "scatterplot": [115, 190, 264], "scatterpoint": [124, 128, 229, 251, 327], "scenario": [90, 102, 149, 167, 188, 211, 263, 267, 355, 379, 390, 403, 408, 411, 414, 535, 541, 543, 544, 993, 999, 1009, 1039], "scene": [369, 380, 1002, 1004, 1042], "schapir": [50, 281, 297, 367, 411, 496, 551, 552], "schedul": [149, 300, 360, 376, 676, 677, 678, 861, 862, 1013, 1023, 1036], "scheidegg": 1029, "scheme": [273, 289, 310, 311, 367, 376, 386, 404, 408, 410, 412, 564, 589, 658, 659, 705, 813, 847, 871, 872, 875, 877, 881, 885, 888, 893, 904, 909, 988, 1009, 1013, 1029, 1037, 1040, 1041, 1046, 1047, 1049], "scherer": 1035, "scheubrein": 1041, "schloss": 999, "schl\u00fcter": [1029, 1037], "schmerler": 1044, "schmid": [758, 759, 997], "schmidt": [658, 995, 1032], "schmitt": [1039, 1040], "schmitz": 1046, "schneider": [347, 1042, 1047, 1048], "schoelkopf": 900, "schoentgen": [1037, 1038], "schofield": 1029, "schole": 1041, "scholkopf1997": 409, "scholkopf1998": 1009, "scholz": 1047, "school": [102, 172, 183, 369, 404, 788, 999], "schreiber": [0, 394, 1034, 1035, 1036], "schroeder": [45, 367], "schubert": [404, 415, 441, 447, 1033, 1034, 1037, 1038, 1040, 1041, 1042, 1043, 1047], "schucker": 1035, "schuder": [1037, 1038, 1039], "schuetz": [839, 843], "schuldt": 1033, "schult": [55, 1049], "schulz": 1029, "schumach": [1032, 1033, 1034, 1048, 1049], "schut": 1029, "schwardt": 1029, "schwartz": [1029, 1031, 1043], "schwetlick": [1040, 1041], "sch\u00f6lkopf": [44, 409, 533, 870, 1005, 1009, 1014], "sch\u00f6nberger": [1031, 1032], "sch\u00fctze": [409, 589, 997, 999, 1001], "sci": [57, 102, 347, 348, 349, 367, 384, 485, 689, 693, 875, 996, 1009], "scibol": 1040, "scienc": [0, 73, 111, 163, 175, 183, 281, 366, 369, 384, 404, 437, 451, 536, 538, 545, 688, 689, 693, 851, 989, 991, 995, 996, 999, 1002, 1011, 1019, 1023, 1037], "scientif": [0, 68, 238, 366, 370, 384, 390, 404, 449, 459, 499, 1023, 1025, 1048], "scientist": [989, 1023], "scikera": 1018, "scikit": [1, 14, 30, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 351, 352, 353, 354, 355, 360, 361, 364, 366, 367, 368, 369, 371, 372, 375, 378, 379, 380, 381, 385, 386, 391, 392, 395, 397, 398, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 418, 419, 421, 422, 423, 424, 426, 427, 428, 435, 440, 443, 444, 447, 454, 461, 462, 464, 465, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 510, 513, 519, 522, 536, 539, 555, 559, 560, 562, 563, 565, 575, 580, 581, 582, 588, 598, 601, 609, 611, 626, 628, 630, 632, 634, 638, 640, 646, 648, 652, 658, 669, 676, 680, 688, 697, 698, 700, 701, 702, 717, 718, 732, 742, 748, 778, 779, 780, 788, 795, 799, 800, 801, 802, 803, 804, 805, 806, 814, 817, 818, 819, 820, 821, 822, 823, 826, 827, 830, 832, 833, 846, 848, 864, 865, 867, 869, 871, 874, 876, 877, 878, 879, 883, 884, 885, 888, 901, 902, 904, 909, 912, 913, 920, 922, 923, 931, 941, 943, 953, 966, 967, 987, 988, 989, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1009, 1012, 1013, 1014, 1015, 1020, 1022, 1025, 1026, 1027, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "scikit_learn": 1018, "scikit_learn_data": [52, 367, 483, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497], "scipi": [0, 1, 45, 53, 55, 57, 76, 80, 81, 86, 87, 109, 110, 113, 121, 123, 127, 145, 167, 183, 186, 195, 199, 250, 254, 255, 261, 264, 272, 276, 284, 289, 294, 302, 314, 315, 320, 321, 323, 325, 326, 359, 366, 367, 370, 372, 374, 376, 378, 380, 381, 384, 385, 386, 390, 397, 398, 400, 401, 404, 409, 412, 447, 448, 449, 450, 454, 459, 460, 494, 501, 506, 530, 532, 533, 539, 542, 580, 581, 584, 585, 587, 588, 610, 611, 648, 649, 653, 657, 658, 659, 663, 666, 667, 668, 669, 670, 672, 674, 676, 677, 678, 680, 684, 687, 691, 692, 695, 719, 760, 763, 778, 779, 780, 781, 792, 793, 804, 812, 814, 830, 844, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 857, 858, 859, 861, 867, 876, 877, 882, 883, 884, 887, 891, 894, 895, 904, 906, 907, 909, 910, 945, 949, 950, 955, 969, 970, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 984, 988, 989, 995, 997, 1000, 1002, 1003, 1009, 1013, 1014, 1019, 1031, 1033, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1048, 1049], "scipy_array_api": 400, "scls19fr": 1034, "scognamiglio": 411, "scope": [45, 57, 258, 359, 361, 372, 384, 412, 465, 1018, 1019], "score": [0, 1, 12, 27, 43, 45, 47, 50, 52, 58, 59, 61, 62, 63, 64, 67, 68, 69, 72, 91, 93, 102, 103, 104, 105, 106, 107, 109, 113, 116, 127, 132, 134, 136, 142, 143, 144, 145, 146, 149, 150, 151, 153, 154, 158, 159, 160, 163, 178, 180, 182, 183, 184, 185, 186, 188, 194, 200, 201, 204, 205, 207, 209, 213, 214, 222, 224, 233, 238, 239, 240, 243, 245, 247, 253, 256, 258, 262, 264, 265, 266, 267, 268, 269, 272, 273, 275, 276, 277, 278, 279, 281, 283, 291, 292, 293, 299, 300, 301, 302, 306, 309, 310, 311, 313, 314, 315, 316, 318, 320, 321, 323, 325, 326, 328, 329, 336, 343, 347, 348, 351, 355, 367, 372, 374, 377, 385, 386, 398, 399, 401, 402, 403, 405, 407, 409, 411, 413, 421, 423, 427, 434, 440, 444, 446, 449, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 500, 502, 530, 534, 539, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 591, 592, 593, 594, 595, 597, 598, 599, 601, 602, 603, 605, 608, 610, 611, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 698, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 736, 737, 738, 739, 740, 742, 755, 756, 757, 782, 783, 784, 785, 786, 787, 788, 789, 794, 795, 796, 797, 798, 799, 800, 803, 804, 806, 814, 817, 819, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 849, 850, 851, 853, 854, 855, 860, 861, 862, 864, 884, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 920, 922, 950, 988, 991, 995, 997, 1002, 1005, 1007, 1009, 1013, 1020, 1025, 1026, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "score_clf1": 69, "score_clf2": 69, "score_clf3": 69, "score_df": 62, "score_differ": 269, "score_estim": [207, 224], "score_full_data": 178, "score_func": [72, 103, 104, 160, 247, 317, 413, 591, 594, 595, 597, 598, 599, 742, 1029, 1031, 1046], "score_iri": 270, "score_iterative_imput": 178, "score_label": [224, 270], "score_mean": 339, "score_nam": [62, 72, 239, 266, 319, 348, 806, 823], "score_param": [592, 593, 659, 1046], "score_rand": 270, "score_sampl": [253, 289, 290, 291, 297, 386, 410, 466, 530, 539, 561, 677, 797, 798, 800, 803, 804, 814, 849, 850, 860, 864, 908, 1005, 1032, 1037, 1039, 1041], "score_simple_imput": 178, "score_std": 339, "score_tim": [266, 408, 827, 828], "score_times_nb": 266, "score_times_svm": 266, "score_typ": [239, 266, 277, 319, 806, 823, 1045], "score_valu": 348, "scorer": [1, 149, 154, 224, 240, 258, 268, 320, 386, 395, 403, 408, 411, 413, 559, 560, 593, 601, 634, 659, 673, 675, 711, 730, 732, 733, 742, 800, 803, 804, 806, 814, 822, 823, 826, 827, 828, 829, 831, 958, 988, 995, 1007, 1033, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "scorer1_nam": 408, "scorer2_nam": 408, "scorer_": [800, 803, 804, 814], "scorer_nam": [268, 800, 814], "scores_": [190, 191, 591, 594, 595, 597, 598, 599, 644, 645, 659, 1029, 1039], "scores_df": 52, "scores_glm_pure_premium": 224, "scores_matrix": 275, "scores_max": 55, "scores_product_model": 224, "scoring_cal": 711, "scoring_inner_cv": 320, "scoring_on_bootstrap": 267, "scoring_weight": 395, "scott": [410, 849, 1029, 1030, 1035, 1037, 1038, 1039, 1044, 1045, 1049], "scottlog": [1047, 1048], "scratch": [373, 439, 999, 1031], "screen": [48, 408, 1042], "screenporch": 143, "screenshot": 370, "script": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 283, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 351, 352, 353, 354, 355, 360, 372, 373, 374, 375, 376, 378, 384, 386, 390, 398, 412, 1019, 1022], "scroll": 392, "scrollbar": 377, "scrutin": 273, "scsi": 57, "scullei": 404, "sdenton4": 1032, "sdg_param": 329, "se": [163, 228, 369, 390], "se_level": 172, "seabold": [1032, 1034, 1035], "seaborn": [72, 126, 135, 149, 182, 183, 190, 194, 254, 264, 372, 390, 397, 1018], "seagreen": 203, "seal": 1035, "seamu": 1031, "sean": [1041, 1042, 1044, 1048], "seanpwilliam": 1036, "sear": 1035, "search": [1, 45, 52, 64, 80, 87, 103, 104, 105, 106, 146, 158, 160, 162, 163, 167, 180, 224, 239, 240, 254, 256, 258, 265, 268, 269, 271, 276, 283, 284, 286, 288, 302, 306, 318, 323, 336, 347, 355, 369, 370, 372, 374, 384, 386, 399, 404, 405, 408, 411, 412, 413, 415, 440, 445, 447, 449, 454, 455, 458, 461, 468, 469, 475, 500, 513, 520, 555, 556, 557, 558, 562, 563, 564, 578, 598, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 628, 653, 676, 688, 689, 692, 693, 713, 728, 785, 788, 800, 803, 804, 811, 812, 814, 816, 830, 831, 844, 845, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858, 864, 909, 912, 913, 914, 915, 954, 986, 992, 994, 996, 999, 1002, 1003, 1013, 1015, 1019, 1020, 1025, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1041, 1043, 1044, 1046, 1048], "search_05p": 146, "search_95p": 146, "search_cv": 103, "searchcv": [385, 1044], "searchforpass": 1045, "searchgrid": 1019, "searchsort": 50, "season": [43, 52, 172, 184, 208, 371], "seasonal_kernel": 172, "seasoncountcatu32": 52, "sebastian": [1030, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1046], "sebastien": 1037, "sebastin": [1036, 1037], "sebasti\u00e1n": 1035, "seberg": 1030, "sec": [49, 214, 228, 231, 284], "sec65": 1044, "secant": 642, "second": [43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 283, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 351, 352, 353, 354, 355, 359, 367, 374, 378, 386, 401, 403, 404, 408, 409, 411, 412, 414, 461, 464, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 500, 502, 508, 551, 582, 587, 588, 589, 590, 621, 624, 631, 632, 699, 712, 716, 758, 759, 763, 764, 766, 767, 774, 775, 776, 777, 778, 781, 800, 803, 804, 814, 828, 834, 835, 838, 841, 852, 854, 855, 856, 861, 862, 988, 989, 993, 994, 995, 996, 999, 1000, 1001, 1002, 1003, 1006, 1009, 1010, 1015, 1044], "secondari": [635, 1033], "secondli": [384, 404, 411, 657, 995], "sect": 44, "section": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 72, 120, 125, 137, 144, 149, 154, 172, 176, 182, 183, 184, 186, 190, 194, 196, 198, 209, 230, 234, 240, 243, 245, 258, 262, 264, 267, 273, 309, 310, 311, 315, 323, 347, 348, 349, 355, 365, 367, 370, 372, 373, 374, 376, 377, 378, 379, 380, 387, 395, 402, 403, 405, 407, 408, 409, 411, 412, 413, 414, 436, 440, 456, 532, 614, 619, 622, 637, 645, 788, 798, 906, 909, 988, 993, 995, 999, 1000, 1002, 1003, 1005, 1006, 1013, 1014, 1015, 1016, 1029, 1031, 1032, 1033, 1036], "sector": 183, "sector_construct": 183, "sector_manufactur": 183, "sector_oth": 183, "secur": [376, 386, 1018, 1019, 1023, 1025], "sed": [376, 1029], "sedamaki": 1043, "sedykh": 1044, "see": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 46, 52, 58, 61, 62, 64, 72, 79, 82, 83, 86, 88, 90, 91, 95, 97, 98, 100, 101, 111, 116, 120, 125, 126, 130, 134, 135, 136, 137, 140, 141, 142, 143, 145, 146, 147, 149, 151, 154, 155, 159, 160, 161, 163, 165, 167, 172, 173, 174, 178, 180, 183, 184, 186, 188, 190, 191, 192, 194, 200, 201, 205, 208, 209, 210, 211, 213, 223, 224, 226, 228, 235, 237, 240, 243, 244, 245, 247, 250, 251, 252, 257, 258, 259, 261, 263, 264, 265, 266, 267, 269, 271, 273, 274, 275, 278, 279, 281, 284, 290, 291, 293, 297, 304, 310, 311, 313, 314, 315, 316, 317, 318, 319, 322, 323, 327, 336, 340, 343, 347, 348, 349, 351, 352, 353, 354, 355, 359, 360, 361, 364, 365, 366, 367, 369, 370, 371, 372, 374, 376, 378, 379, 380, 384, 385, 386, 392, 395, 398, 400, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 428, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 484, 485, 488, 490, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 580, 581, 582, 583, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 606, 607, 608, 610, 611, 614, 619, 622, 623, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 705, 706, 708, 711, 713, 730, 743, 763, 774, 778, 779, 780, 781, 788, 792, 793, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 811, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 920, 923, 924, 947, 948, 968, 969, 972, 982, 985, 988, 989, 991, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1019, 1023, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "seed": [1, 46, 50, 63, 64, 70, 74, 75, 79, 85, 87, 90, 92, 93, 97, 98, 103, 109, 110, 111, 118, 121, 137, 142, 158, 185, 199, 204, 205, 210, 213, 215, 219, 223, 229, 250, 252, 253, 254, 255, 267, 270, 279, 289, 290, 291, 340, 341, 348, 355, 360, 374, 381, 384, 386, 404, 408, 409, 440, 444, 445, 447, 449, 454, 456, 457, 458, 459, 468, 469, 470, 534, 542, 551, 552, 553, 554, 557, 558, 627, 646, 647, 652, 653, 660, 661, 662, 663, 677, 689, 691, 693, 695, 797, 798, 804, 835, 838, 853, 907, 933, 947, 948, 965, 968, 988, 989, 994, 996, 1033, 1034, 1038, 1039, 1045], "seeger": [639, 991], "seek": [226, 228, 230, 371, 372, 384, 387, 506, 507, 996], "seel": 1043, "seem": [43, 48, 52, 63, 66, 80, 88, 146, 149, 173, 184, 207, 230, 233, 265, 281, 300, 308, 343, 347, 348, 371, 372, 377, 403, 408, 499, 995, 999], "seemingli": [224, 355, 384], "seen": [55, 62, 75, 88, 99, 113, 123, 129, 141, 146, 149, 183, 184, 230, 236, 240, 263, 300, 304, 322, 336, 347, 367, 374, 376, 385, 386, 402, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 420, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 461, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 519, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 610, 611, 623, 627, 628, 629, 630, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 797, 798, 799, 800, 803, 804, 814, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 973, 979, 988, 994, 999, 1002, 1003, 1009, 1015, 1023, 1041, 1042, 1043, 1044, 1045, 1046, 1048], "segfault": [360, 373, 1029, 1037, 1042], "segment": [51, 53, 55, 59, 71, 81, 86, 123, 180, 229, 236, 367, 380, 404, 412, 449, 459, 506, 507, 691, 860, 999, 1020, 1023, 1037, 1039, 1041, 1049], "seguin": 1034, "sei": 412, "seismic_r": [190, 194], "sejourn": 1038, "sel": [395, 413], "seladu": 1045, "seldom": 904, "sele": [1043, 1044], "selecci\u00f3n": 310, "select": [1, 17, 29, 43, 46, 48, 49, 52, 58, 70, 71, 72, 79, 84, 88, 90, 95, 98, 101, 103, 106, 113, 118, 119, 130, 134, 136, 143, 146, 149, 154, 155, 158, 160, 172, 174, 183, 184, 186, 188, 189, 191, 192, 193, 194, 195, 197, 206, 211, 214, 221, 224, 227, 233, 237, 239, 243, 248, 249, 250, 258, 262, 263, 264, 265, 269, 273, 277, 278, 288, 304, 309, 310, 315, 319, 321, 325, 326, 329, 331, 336, 343, 347, 348, 349, 355, 359, 367, 369, 370, 372, 374, 376, 380, 385, 386, 401, 404, 405, 406, 409, 411, 412, 414, 440, 442, 443, 444, 446, 448, 450, 455, 456, 457, 461, 463, 464, 469, 470, 473, 485, 486, 490, 491, 494, 495, 498, 499, 500, 502, 510, 513, 530, 532, 533, 538, 539, 542, 547, 549, 555, 556, 557, 558, 561, 563, 580, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 627, 632, 645, 646, 647, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 671, 673, 676, 678, 682, 683, 691, 692, 697, 712, 716, 718, 754, 788, 792, 793, 797, 798, 800, 803, 804, 805, 806, 814, 826, 827, 828, 830, 832, 846, 847, 848, 850, 852, 854, 855, 856, 864, 865, 869, 874, 880, 884, 901, 902, 904, 905, 909, 912, 913, 914, 915, 926, 968, 993, 994, 996, 998, 999, 1000, 1002, 1003, 1005, 1009, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1021, 1023, 1025, 1026, 1029, 1030, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1049], "select__k": 988, "select_dtyp": [107, 143, 318, 463], "selected_featur": 186, "selected_features_nam": 186, "selectfdr": [1, 413, 591, 595, 597, 598, 599, 605, 1033, 1035, 1036, 1045], "selectfpr": [1, 372, 413, 591, 594, 597, 598, 599, 605, 1045], "selectfrommodel": [1, 163, 386, 395, 592, 601, 602, 1021, 1025, 1034, 1035, 1036, 1037, 1039, 1041, 1042, 1043, 1045, 1046, 1049], "selectfw": [1, 413, 591, 594, 595, 598, 599, 605, 1045], "selectkbest": [1, 104, 106, 159, 160, 317, 355, 372, 395, 405, 413, 580, 591, 594, 595, 597, 599, 605, 988, 1030, 1035, 1045, 1046], "selector": [1, 52, 103, 159, 160, 243, 343, 380, 412, 413, 463, 580, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 1031, 1039, 1041, 1045], "selectormixin": [1, 1040], "selectpercentil": [1, 87, 103, 247, 339, 413, 591, 594, 595, 597, 598, 602, 605, 1030, 1035, 1045, 1046], "self": [1, 47, 57, 62, 64, 89, 98, 118, 132, 175, 180, 186, 240, 278, 284, 324, 330, 336, 347, 366, 372, 373, 374, 377, 379, 380, 404, 412, 414, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 461, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 498, 506, 507, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 703, 797, 798, 799, 800, 801, 802, 803, 804, 807, 809, 814, 818, 819, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 953, 957, 958, 960, 961, 966, 972, 987, 1002, 1019, 1020, 1021, 1023, 1025, 1031, 1036, 1043], "self_request": 240, "self_training_clf": 328, "self_training_model": [315, 901], "selftrain": 329, "selftrainingclassifi": [1, 315, 328, 329, 330, 395, 1012, 1041, 1046, 1048], "selftrainingclassifierifit": 315, "seljak": 1044, "sell": 107, "selvan": 1041, "semant": [54, 347, 348, 386, 542, 1024, 1025, 1031], "semi": [1, 38, 57, 67, 142, 152, 169, 238, 241, 299, 306, 315, 332, 333, 336, 340, 344, 349, 367, 386, 485, 502, 533, 587, 589, 676, 729, 830, 864, 868, 899, 900, 901, 909, 997, 1002, 1005, 1020, 1021, 1025, 1029, 1041, 1044], "semi_supervis": [1, 180, 315, 317, 324, 325, 326, 327, 328, 329, 330, 395, 899, 900, 901, 1000, 1012, 1020, 1030, 1035, 1036, 1043, 1044], "semiconductor": 1023, "semidefinit": [1009, 1014], "semilogi": [197, 237], "semilogx": [197, 198, 202], "semin": 411, "seminar": 999, "semisupervis": [325, 386], "sen": [1, 150, 180, 189, 210, 213, 304, 649, 657, 671, 678, 679, 1020], "send": [372, 376, 387, 404, 416, 531], "sender": [347, 367], "sendyk": 1038, "seng": 1041, "senger": [0, 362, 1045, 1046, 1047, 1048, 1049], "senior": [1009, 1023], "sens": [42, 43, 52, 55, 62, 88, 99, 173, 180, 183, 188, 237, 304, 310, 326, 336, 347, 355, 359, 372, 373, 386, 404, 406, 408, 413, 459, 466, 467, 468, 469, 470, 471, 472, 473, 609, 652, 655, 656, 672, 801, 811, 901, 993, 995, 999, 1002, 1003, 1005, 1009, 1012, 1020, 1049], "sensibl": [85, 277, 281, 348, 995, 1009], "sensit": [43, 79, 88, 111, 112, 137, 146, 165, 178, 180, 184, 209, 210, 211, 233, 234, 243, 256, 268, 271, 278, 304, 321, 336, 360, 361, 387, 403, 406, 411, 449, 459, 494, 549, 559, 609, 658, 692, 700, 702, 712, 713, 718, 742, 784, 787, 788, 799, 800, 822, 830, 865, 884, 902, 994, 995, 996, 998, 999, 1003, 1005, 1013, 1014, 1020, 1033, 1047], "sensor": 194, "sent": [149, 404, 555, 556, 833, 1015], "sentenc": [102, 347, 349, 367, 387, 412], "sentri": 1049, "seoeun": 1045, "sep": [118, 273], "sepal": [126, 128, 130, 142, 169, 247, 287, 315, 318, 333, 369, 830, 1009], "sepal_col": 318, "separ": [52, 53, 61, 62, 67, 75, 88, 93, 95, 99, 105, 111, 119, 120, 122, 125, 134, 136, 139, 145, 152, 155, 163, 170, 180, 184, 185, 188, 189, 201, 206, 208, 227, 241, 251, 264, 267, 273, 274, 304, 306, 309, 315, 328, 331, 332, 334, 335, 336, 340, 341, 347, 355, 359, 368, 369, 374, 377, 380, 384, 386, 398, 402, 404, 405, 406, 409, 411, 412, 414, 461, 510, 517, 531, 536, 538, 539, 545, 547, 551, 580, 587, 588, 590, 610, 631, 638, 646, 647, 673, 676, 677, 725, 732, 745, 746, 748, 753, 792, 819, 836, 837, 863, 864, 906, 908, 909, 914, 915, 988, 989, 991, 993, 995, 996, 998, 1005, 1006, 1009, 1013, 1014, 1020, 1029, 1032, 1034, 1035, 1039, 1041, 1042, 1045, 1046], "septemb": [734, 999, 1029, 1032, 1035, 1037, 1042, 1045, 1047], "seq": 633, "seq_dataset": [1029, 1039], "seqlearn": 384, "sequenc": [1, 51, 134, 142, 196, 229, 374, 386, 405, 408, 409, 411, 412, 501, 510, 551, 552, 559, 560, 567, 568, 580, 581, 587, 588, 590, 646, 800, 803, 811, 830, 864, 888, 951, 952, 963, 969, 972, 1029, 1032, 1034, 1035], "sequencekernel": 175, "sequenti": [1, 52, 142, 157, 160, 180, 203, 265, 315, 370, 409, 411, 412, 498, 499, 532, 592, 596, 601, 602, 604, 605, 646, 647, 652, 653, 658, 660, 661, 662, 663, 673, 702, 788, 864, 865, 884, 989, 1007, 1013, 1020, 1021, 1025, 1029, 1038, 1041], "sequentialfeatureselector": [1, 163, 395, 413, 592, 596, 602, 1041, 1042, 1043, 1044, 1045, 1048], "sergei": [404, 1031, 1035, 1036, 1037, 1038, 1039], "sergeyf": 1031, "sergio": [1029, 1031, 1032, 1041, 1044], "sergiodsr": 1040, "sergul": [1036, 1037, 1040], "seri": [1, 42, 43, 51, 58, 113, 141, 146, 149, 180, 182, 185, 186, 193, 207, 209, 211, 226, 247, 263, 269, 278, 311, 317, 325, 364, 367, 377, 386, 404, 486, 487, 488, 489, 490, 494, 498, 499, 500, 502, 503, 508, 539, 560, 690, 694, 701, 742, 745, 746, 748, 790, 821, 826, 827, 830, 926, 990, 995, 996, 1000, 1002, 1013, 1018, 1020, 1032, 1035, 1036, 1037, 1041, 1044, 1046, 1047, 1049], "serial": [386, 398, 418, 956, 1018, 1019, 1029, 1037, 1041, 1046], "serializetostr": 398, "serious": 1001, "serum": [163, 369, 999], "serv": [102, 124, 134, 173, 258, 261, 267, 340, 405, 549, 991, 1025, 1043], "server": [0, 163, 359, 369, 370, 372, 494, 1022, 1037], "servic": [0, 43, 234, 243, 372, 376, 398, 1022, 1023, 1037], "sess": 398, "session": [374, 378, 384, 390, 902, 1023], "set": [1, 2, 7, 19, 27, 37, 42, 43, 44, 45, 46, 47, 50, 52, 53, 58, 62, 63, 64, 66, 67, 70, 72, 76, 77, 79, 80, 82, 83, 86, 87, 88, 90, 91, 93, 95, 97, 98, 99, 102, 103, 105, 111, 112, 113, 116, 120, 125, 126, 132, 134, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 155, 159, 160, 163, 167, 173, 174, 175, 180, 182, 183, 184, 185, 186, 190, 194, 196, 197, 198, 200, 201, 202, 204, 205, 206, 207, 208, 209, 212, 214, 219, 220, 224, 226, 227, 228, 233, 234, 235, 236, 238, 239, 240, 243, 247, 249, 251, 253, 254, 257, 259, 262, 264, 265, 266, 267, 268, 269, 272, 273, 274, 275, 277, 279, 281, 283, 286, 290, 291, 292, 293, 294, 297, 300, 301, 302, 304, 306, 308, 309, 310, 311, 313, 315, 316, 320, 322, 325, 326, 329, 330, 333, 335, 338, 340, 343, 347, 348, 349, 353, 354, 355, 359, 360, 361, 364, 365, 367, 369, 370, 372, 374, 376, 377, 379, 380, 385, 386, 387, 390, 395, 398, 400, 401, 402, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 418, 421, 422, 423, 426, 427, 428, 429, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 479, 480, 481, 482, 485, 486, 491, 493, 494, 495, 497, 500, 501, 506, 507, 508, 513, 521, 522, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 578, 579, 580, 581, 582, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 697, 698, 699, 700, 701, 702, 703, 711, 712, 713, 714, 719, 721, 723, 726, 727, 728, 729, 730, 731, 734, 738, 740, 745, 746, 748, 750, 751, 753, 756, 779, 780, 782, 783, 784, 785, 787, 789, 790, 791, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 889, 890, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 922, 930, 931, 941, 943, 948, 952, 956, 957, 968, 969, 972, 973, 979, 982, 987, 988, 989, 990, 991, 992, 993, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "set1": [264, 293, 294], "set_": [240, 395, 1047, 1048], "set_alpha": [70, 249, 250, 251, 254, 255], "set_arrai": [51, 229, 236], "set_aspect": [43, 122, 170, 217, 251, 344], "set_autoscaley_on": 77, "set_axis_bgcolor": 113, "set_axis_off": 68, "set_axisbelow": 49, "set_box_aspect": 70, "set_clim": 288, "set_clip_box": [70, 249, 250, 251, 254, 255], "set_color": [46, 217], "set_config": [1, 240, 245, 247, 258, 311, 314, 320, 323, 359, 360, 395, 400, 405, 434, 440, 441, 444, 446, 461, 462, 465, 469, 479, 480, 481, 531, 534, 536, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 589, 592, 593, 596, 601, 610, 611, 626, 627, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 690, 799, 801, 802, 807, 809, 818, 822, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 849, 851, 854, 855, 861, 862, 864, 865, 867, 869, 870, 871, 876, 883, 884, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 1038, 1040, 1043, 1045], "set_constrained_layout_pad": 120, "set_edgecolor": 120, "set_facecolor": [113, 249], "set_fit_request": [240, 320, 322, 323, 395, 434, 440, 441, 444, 446, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 635, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 690, 836, 837, 839, 840, 841, 842, 843, 849, 861, 862, 869, 883, 884, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915], "set_fmt_str_length": 52, "set_i": 90, "set_index": [62, 134, 146, 198, 224, 264, 310, 348], "set_inverse_transform_request": [531, 871, 884], "set_label": [75, 170, 237], "set_label_posit": 46, "set_linewidth": [51, 229, 236], "set_major_formatt": [226, 228, 231, 284, 289], "set_major_loc": [226, 289], "set_output": [180, 184, 232, 245, 309, 310, 375, 384, 428, 439, 440, 442, 444, 446, 461, 465, 479, 480, 481, 482, 494, 502, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 564, 565, 566, 567, 568, 580, 581, 582, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 658, 688, 689, 692, 830, 848, 853, 856, 860, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 902, 1020, 1044, 1045, 1046, 1048], "set_param": [123, 130, 138, 143, 146, 184, 185, 191, 196, 198, 202, 211, 214, 238, 243, 247, 258, 277, 287, 313, 339, 348, 375, 386, 404, 405, 411, 414, 418, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 461, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 797, 798, 799, 800, 803, 804, 814, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 989, 1005, 1029, 1035, 1036, 1037, 1042, 1043], "set_partial_fit_request": [446, 536, 666, 667, 668, 676, 677, 678, 832, 833, 836, 837, 839, 840, 841, 842, 843, 861, 862, 884], "set_path_effect": 75, "set_posit": [100, 217, 304], "set_predict_request": [240, 479, 480, 481, 550, 611, 644, 645], "set_printopt": 257, "set_prop_cycl": 208, "set_score_request": [240, 258, 320, 395, 434, 440, 444, 446, 462, 479, 480, 481, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 565, 566, 567, 568, 610, 611, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 678, 679, 680, 799, 822, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 846, 847, 851, 854, 855, 861, 862, 864, 899, 900, 904, 905, 906, 907, 909, 910, 912, 913, 914, 915, 999], "set_siz": 291, "set_size_inch": [93, 244], "set_split_request": [801, 802, 807, 809, 818], "set_start_method": 384, "set_stat": 988, "set_tick_param": 249, "set_ticklabel": [126, 347], "set_titl": [47, 49, 54, 62, 64, 66, 67, 68, 70, 77, 78, 86, 88, 90, 93, 97, 98, 104, 107, 111, 118, 125, 130, 134, 139, 141, 144, 150, 152, 154, 155, 176, 178, 179, 182, 183, 184, 185, 186, 190, 191, 198, 200, 201, 205, 207, 208, 209, 214, 226, 227, 230, 231, 236, 238, 239, 243, 244, 249, 257, 258, 259, 260, 261, 264, 266, 267, 271, 275, 276, 278, 281, 283, 284, 287, 288, 289, 294, 299, 300, 304, 305, 306, 307, 308, 309, 313, 317, 325, 326, 333, 340, 343, 344, 345, 347, 351, 368], "set_transform_request": [240, 479, 480, 481, 531, 534, 589, 867, 870, 876, 884], "set_vis": [54, 70, 288, 294, 304], "set_xlabel": [46, 49, 86, 93, 104, 105, 107, 118, 125, 144, 176, 178, 179, 182, 184, 185, 186, 188, 198, 204, 205, 207, 209, 221, 222, 238, 258, 264, 266, 270, 275, 276, 278, 281, 289, 304, 305, 309, 328, 348, 349, 351], "set_xlim": [67, 77, 93, 107, 111, 118, 139, 152, 179, 184, 205, 207, 212, 238, 249, 268, 270, 281, 289, 299, 304, 306, 307, 308, 309, 314, 320, 344], "set_xscal": [198, 212], "set_xtick": [43, 47, 49, 67, 78, 93, 97, 130, 152, 184, 186, 200, 222, 238, 249, 275, 276, 283, 299, 301, 306, 307, 333], "set_xticklabel": [47, 49, 111, 130, 170, 184, 186, 275, 276, 283], "set_ylabel": [46, 47, 49, 66, 70, 86, 93, 98, 104, 105, 107, 111, 118, 125, 130, 134, 141, 144, 176, 184, 188, 198, 200, 204, 205, 207, 209, 211, 221, 238, 249, 258, 264, 266, 270, 275, 276, 278, 283, 289, 304, 305, 309, 313, 328, 343, 348, 351], "set_ylim": [47, 49, 67, 77, 93, 104, 118, 139, 151, 152, 176, 184, 191, 205, 207, 208, 238, 249, 268, 283, 289, 299, 304, 306, 307, 309, 314, 320, 328, 344], "set_yscal": [144, 207], "set_ytick": [43, 67, 78, 93, 97, 130, 152, 178, 179, 186, 200, 222, 249, 275, 299, 301, 306, 307, 333, 349], "set_yticklabel": [130, 170, 178, 179, 186, 275, 349], "set_zord": 122, "setdefault": [55, 919], "setdiff1d": 342, "seth": 1035, "sethdandridg": 1033, "setminu": 1015, "setosa": [126, 128, 273, 274, 369, 502], "setp": [47, 49, 275, 279], "settabl": [999, 1049], "settingwithcopywarn": 184, "settl": 999, "setup": [271, 273, 359, 370, 374, 378, 380, 1002], "setuptool": 1047, "seuclidean": [447, 454, 699, 778, 779, 780, 1002, 1037, 1040, 1041], "seuclideandist": 699, "seung": 409, "seven": [367, 992], "seventh": [509, 1011], "sever": [0, 43, 48, 51, 52, 62, 64, 66, 67, 70, 72, 88, 89, 90, 94, 106, 137, 149, 152, 154, 156, 160, 163, 167, 172, 173, 180, 183, 188, 194, 198, 207, 211, 225, 226, 229, 230, 231, 237, 251, 259, 264, 269, 278, 284, 286, 300, 304, 316, 323, 343, 347, 348, 359, 366, 367, 369, 372, 374, 377, 380, 384, 386, 401, 404, 405, 408, 410, 411, 412, 414, 444, 446, 461, 484, 497, 506, 507, 536, 553, 554, 557, 558, 561, 562, 563, 568, 587, 588, 590, 610, 645, 646, 652, 688, 689, 690, 691, 692, 693, 797, 798, 800, 803, 804, 814, 832, 833, 839, 840, 841, 842, 843, 863, 864, 871, 888, 912, 913, 914, 915, 933, 969, 988, 991, 996, 999, 1000, 1002, 1007, 1009, 1013, 1015, 1016, 1017, 1018, 1020, 1022, 1023, 1029, 1030, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1042, 1045, 1046], "sevin": 1037, "sewook": 1039, "sex": [103, 163, 183, 185, 196, 198, 247, 318, 320, 369, 494, 1007], "sex_mal": 183, "seyedsaman": 1043, "sf": [163, 264, 315, 367, 413, 490, 601], "sfm": 163, "sfs_backward": 163, "sfs_forward": 163, "sfu": [404, 439], "sgd": [1, 46, 47, 50, 124, 126, 129, 136, 145, 146, 170, 171, 180, 189, 192, 200, 206, 220, 233, 240, 253, 272, 274, 297, 300, 301, 316, 337, 338, 341, 345, 347, 352, 355, 361, 502, 510, 631, 649, 666, 667, 668, 671, 676, 677, 678, 679, 861, 862, 988, 1003, 1020, 1021, 1025, 1029, 1032, 1033, 1034, 1036, 1040, 1042], "sgdclassifi": [1, 25, 46, 47, 214, 215, 216, 217, 218, 219, 238, 272, 322, 329, 338, 347, 355, 359, 361, 374, 378, 386, 402, 412, 638, 640, 641, 642, 646, 658, 666, 668, 904, 909, 991, 995, 1000, 1013, 1014, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1049], "sgdoneclasssvm": [1, 220, 233, 316, 908, 1005, 1013, 1042, 1044, 1045, 1046, 1047, 1048], "sgdregressor": [1, 25, 49, 217, 359, 361, 384, 646, 649, 667, 671, 676, 679, 862, 905, 910, 995, 1013, 1031, 1033, 1035, 1036, 1037, 1040, 1042, 1043, 1044, 1045, 1047, 1049], "sgi": 347, "sgkf": [408, 818], "sgm": 47, "sgml": [47, 359], "sh": [275, 380, 988], "sh_color": 230, "sh_err": 230, "sh_lle": 230, "sh_point": 230, "sh_tsne": 230, "sha256": [47, 52, 322, 489, 1044, 1048], "shack": [1039, 1040, 1041], "shade": [58, 86, 161, 287, 292, 332, 409], "shader": 400, "shadi": [1044, 1045], "shadow": [124, 128, 129, 229, 327, 342, 349, 412], "shafer": 102, "shagun": 1035, "shah": [1033, 1034, 1035, 1041, 1047, 1049], "shaharyar": 1047, "shahebaz": 1037, "shahriar": 1031, "shaikh": [0, 357, 362, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1047, 1048, 1049], "shail": 1041, "shakerimoff": 1043, "shalev": [666, 667, 995, 1013], "shalil": 1037, "shall": 172, "shallow": [378, 411, 559, 560, 919], "shamsi": 1037, "shandeng123": 1043, "shane": [1038, 1041, 1044], "shanghai": [689, 693, 996], "shangwu": [1037, 1038], "shankar": 1039, "shanmuga": 1035, "shanno": 995, "shannon": [555, 562, 912, 914, 996, 1015], "shantanu": 783, "shao": [1041, 1042, 1043], "shape": [1, 43, 44, 45, 47, 48, 49, 50, 52, 53, 55, 58, 59, 61, 62, 63, 64, 67, 68, 69, 76, 80, 81, 84, 85, 86, 87, 88, 91, 93, 94, 99, 102, 106, 107, 111, 115, 120, 121, 123, 135, 140, 141, 142, 143, 146, 147, 148, 149, 152, 153, 159, 161, 168, 169, 171, 172, 173, 174, 178, 179, 180, 184, 185, 192, 196, 198, 201, 202, 207, 209, 212, 215, 218, 219, 220, 221, 222, 225, 227, 228, 233, 236, 237, 238, 239, 240, 242, 243, 249, 251, 253, 254, 255, 262, 263, 264, 266, 267, 270, 271, 273, 274, 284, 289, 290, 294, 297, 299, 301, 306, 307, 313, 315, 318, 319, 320, 327, 328, 330, 333, 336, 339, 340, 341, 344, 345, 347, 348, 354, 359, 365, 366, 367, 372, 374, 386, 401, 402, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 490, 491, 492, 493, 495, 496, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 927, 932, 935, 936, 941, 946, 947, 948, 950, 954, 955, 962, 964, 968, 969, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 984, 987, 989, 994, 995, 999, 1000, 1001, 1002, 1003, 1005, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1020, 1029, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1043, 1045, 1046, 1048], "shape_fit_": [906, 907, 908, 909, 910], "shape_img": 584, "sharad": 1037, "sharan": [1036, 1037], "share": [70, 115, 152, 183, 254, 347, 354, 355, 359, 360, 374, 380, 398, 404, 409, 412, 547, 668, 704, 708, 797, 798, 803, 804, 993, 1006, 1022, 1029, 1031, 1037, 1039, 1041, 1044], "shared_yax": 140, "sharedmem": 1037, "sharei": [43, 52, 70, 107, 118, 125, 130, 155, 176, 184, 201, 205, 207, 209, 214, 266, 275, 277, 278, 289, 305, 310, 342, 343, 348, 368], "sharex": [43, 46, 54, 70, 105, 118, 125, 155, 176, 184, 201, 205, 209, 266, 277, 278, 289, 328, 368], "sharma": [1033, 1035, 1037, 1038, 1040, 1041, 1043, 1046, 1047, 1048], "sharmadharmp": 1043, "sharon": [45, 367], "sharova": 1036, "sharp": [43, 66, 184, 1006, 1009, 1049], "sharper": 726, "shashank": [1035, 1041], "shaun": 1030, "shaurya": 1049, "shawpan": 1035, "shaymernaturalint": 1043, "she": [372, 894, 895, 1039], "shea": [1037, 1038], "shebanov": [1037, 1038], "sheep": 1023, "sheer": [372, 1023], "sheerman": 1029, "sheet": 1031, "sheetscikit": 392, "shekhar": 1035, "shell": [373, 380, 384], "shellyfung": 1044, "shen": [1042, 1048], "sheng": 1039, "shengxiduan": 1035, "shenhanc78": 1037, "sheni": 1041, "shenk": 1037, "shenoi": 1036, "sherlock": [628, 989], "sheth": 1037, "shetti": 1042, "shevchenko": [1048, 1049], "shi": [404, 449, 459, 691], "shibata": 1039, "shiebler": 1035, "shield": 386, "shift": [1, 52, 71, 73, 79, 82, 97, 180, 190, 254, 289, 302, 304, 340, 406, 410, 437, 445, 455, 458, 466, 510, 513, 689, 693, 850, 873, 1009, 1020, 1024, 1025, 1029, 1033, 1037], "shifted_gaussian": 253, "shifted_opposite_lof_scor": 850, "shih": [841, 1001], "shiki": 1040, "shilt": 1032, "shimoni": 1049, "shinehid": 1042, "shinitski": 1046, "shinnar": 1042, "shinsuk": 1044, "ship": [57, 154, 179, 352, 360, 370, 390, 412, 995, 1029, 1038], "shiqiao": [0, 394, 1029, 1030], "shirsat": 1044, "shiva": [1044, 1045], "shivam": [1037, 1038, 1039, 1049], "shivamgargsya": [1036, 1040, 1042], "shivan": 1034, "shivram": 1037, "shiyu": 1038, "shleifer": [1035, 1036], "shmelkov": 1034, "shoaib": 1044, "shoemak": 1040, "shogo": [1044, 1045], "shooter23": [1041, 1042], "shop": 1023, "short": [44, 126, 143, 150, 200, 209, 262, 301, 322, 347, 372, 380, 408, 412, 416, 995, 996, 1002, 1022, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "short_nam": 55, "shortcom": 995, "shortcut": [380, 398, 414], "shorten": [372, 1014, 1042], "shorten_param": 265, "shorter": [43, 173, 252, 384, 404, 409, 447, 454, 561, 697, 1001, 1005, 1040], "shortest": [1, 74, 377, 381, 688, 954, 996, 1042], "shortest_path": 1042, "shorthand": [91, 386, 405, 464, 559, 560, 865, 866, 1032], "shortli": 374, "shortlog": 376, "shortname_slic": 55, "shota": 1035, "should": [43, 44, 45, 47, 48, 52, 54, 55, 62, 63, 64, 67, 72, 86, 132, 134, 137, 140, 143, 146, 149, 163, 178, 183, 188, 190, 191, 194, 201, 207, 224, 233, 238, 239, 240, 243, 258, 264, 267, 271, 273, 278, 281, 284, 305, 306, 311, 322, 327, 336, 343, 348, 355, 359, 360, 361, 367, 370, 371, 372, 374, 376, 377, 379, 380, 381, 385, 386, 390, 395, 398, 399, 400, 402, 403, 404, 406, 408, 409, 411, 412, 413, 414, 415, 416, 418, 421, 427, 434, 437, 439, 440, 441, 442, 444, 446, 447, 449, 451, 454, 455, 456, 459, 460, 461, 462, 464, 471, 479, 480, 481, 482, 484, 491, 494, 501, 506, 507, 514, 519, 521, 522, 525, 530, 531, 534, 536, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 580, 581, 587, 588, 589, 590, 592, 593, 596, 606, 607, 610, 611, 620, 627, 628, 629, 631, 632, 633, 635, 638, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 684, 687, 689, 690, 691, 692, 693, 695, 696, 701, 702, 707, 709, 720, 727, 728, 739, 740, 742, 766, 771, 774, 778, 779, 780, 781, 782, 785, 788, 789, 792, 799, 801, 802, 807, 808, 809, 810, 817, 818, 819, 820, 822, 826, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 861, 862, 864, 867, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 883, 884, 885, 887, 891, 894, 895, 896, 897, 898, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 930, 934, 936, 939, 942, 948, 953, 957, 961, 966, 968, 969, 972, 973, 974, 975, 976, 977, 978, 979, 987, 988, 989, 993, 994, 995, 996, 1000, 1002, 1004, 1005, 1006, 1009, 1012, 1013, 1014, 1015, 1019, 1022, 1023, 1025, 1029, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "shouldn": [250, 255, 372, 1048], "show": [1, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 168, 169, 170, 171, 172, 173, 175, 178, 179, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 275, 276, 277, 278, 279, 281, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 320, 323, 325, 326, 327, 328, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 351, 352, 353, 354, 360, 361, 368, 372, 378, 384, 385, 390, 391, 395, 401, 402, 403, 406, 408, 409, 410, 411, 413, 414, 435, 500, 557, 592, 593, 631, 632, 697, 698, 700, 701, 702, 713, 806, 823, 846, 864, 916, 917, 918, 988, 991, 993, 994, 996, 998, 999, 1001, 1002, 1003, 1005, 1006, 1007, 1009, 1013, 1014, 1031, 1033, 1034, 1036, 1038, 1039, 1040, 1041, 1043, 1045, 1046, 1047, 1048, 1049], "show_top10": 367, "show_vers": [1, 359, 370, 372, 380, 390, 391, 1037], "show_weight": 917, "show_with_diff": 123, "showcas": [132, 135, 140, 143, 146, 147, 149, 165, 180, 374, 644, 646, 1017], "shown": [62, 90, 132, 136, 140, 146, 176, 182, 184, 194, 199, 224, 231, 233, 238, 243, 251, 264, 267, 270, 273, 281, 289, 300, 301, 304, 305, 306, 322, 325, 343, 347, 348, 372, 377, 387, 402, 404, 405, 408, 409, 410, 412, 414, 435, 457, 632, 698, 700, 701, 702, 713, 800, 814, 916, 918, 995, 996, 999, 1002, 1009, 1013, 1014, 1015, 1033, 1038, 1039, 1040, 1043], "shown_imag": 227, "shrankhla": 1044, "shreekant": 1048, "shreesha": [1045, 1046], "shreya": 1039, "shrink": [63, 113, 120, 147, 184, 194, 204, 205, 211, 226, 245, 246, 253, 262, 264, 277, 304, 315, 343, 408, 409, 557, 558, 676, 678, 851, 861, 862, 906, 907, 908, 909, 910, 1002, 1014], "shrink_threshold": [295, 851, 1002, 1029, 1041], "shrinkag": [1, 69, 108, 110, 113, 127, 148, 180, 295, 417, 466, 467, 469, 470, 471, 472, 473, 474, 476, 477, 478, 537, 541, 547, 559, 560, 800, 851, 995, 1009, 1020, 1021, 1025, 1029, 1033, 1034, 1036], "shrinkage_": [109, 110, 470, 472], "shrinkage_coeffici": 477, "shrinking_threshold": 1048, "shroff": [1047, 1048], "shrunk": [1, 109, 127, 304, 311, 319, 417, 470, 472, 473, 476, 477, 478, 547, 885, 993, 1013, 1024, 1025], "shrunk_cov": [417, 476, 478], "shrunk_cov_scor": 127, "shrunk_covari": [1, 406, 1046], "shrunkcovari": [1, 109, 127, 406, 466, 467, 470, 471, 472], "shrunken": [851, 1029], "shruti": [1048, 1049], "shu": [1030, 1033, 1037, 1049], "shuangchi": [1043, 1044], "shubernetskii": 1031, "shubh": 1040, "shubhal": 1046, "shubham": [1036, 1039, 1047], "shubhanshu": 1041, "shubhraneel": 1043, "shuckle16": 1035, "shuffl": [1, 49, 52, 54, 58, 59, 61, 64, 68, 93, 94, 120, 140, 141, 142, 149, 154, 179, 194, 205, 214, 215, 220, 233, 244, 265, 269, 270, 277, 284, 310, 311, 325, 326, 327, 328, 338, 347, 348, 355, 367, 381, 386, 399, 466, 471, 485, 486, 488, 490, 493, 495, 501, 509, 510, 511, 512, 513, 517, 520, 522, 529, 535, 537, 538, 544, 545, 551, 552, 553, 554, 562, 563, 565, 566, 601, 604, 606, 658, 659, 666, 667, 668, 672, 674, 676, 677, 678, 687, 800, 801, 802, 803, 804, 805, 806, 814, 817, 818, 819, 820, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 834, 861, 862, 885, 904, 905, 906, 909, 947, 948, 968, 969, 994, 995, 1000, 1007, 1013, 1014, 1025, 1029, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1048, 1049], "shuffle_param": 343, "shuffled_arrai": 972, "shufflesplit": [1, 259, 263, 266, 343, 408, 802, 808, 810, 820, 830, 1029, 1030, 1032, 1034, 1035], "shuhei": 1042, "shuhua": 1041, "shumwai": 1049, "shutil": [87, 104, 405], "shuttl": 348, "shuzh": 1039, "shwartz": [666, 667, 995, 1013], "shwed": 1037, "shyam": 1042, "si": 102, "siam": [404, 408, 449, 457, 459, 533, 539], "siang": 1032, "siavash": 1042, "siavrez": 1043, "sibsp": [185, 318], "sid": 1036, "siddharth": [1036, 1040, 1049], "siddiqui": 1047, "side": [43, 64, 92, 146, 202, 211, 224, 228, 236, 258, 304, 340, 347, 355, 367, 384, 402, 405, 408, 409, 412, 421, 427, 513, 800, 814, 995, 996, 999, 1001, 1014, 1038], "sidhpura": 1044, "sidhu": 1049, "siebert": 1037, "sievert": 1039, "siftikha": 1037, "sig": 121, "sigh": 347, "sigkdd": [366, 367, 509, 676, 885, 1009, 1011], "sigma": [53, 80, 81, 87, 111, 127, 146, 262, 264, 401, 406, 409, 411, 614, 649, 993, 995, 997, 1001, 1004], "sigma2": [532, 539], "sigma_": [406, 644, 645, 1042, 1046, 1049], "sigma_0": [170, 171, 176, 414, 614], "sigma_0_bound": [176, 614], "sigma_i": [1001, 1009], "sigma_k": [409, 993], "sigmod": [404, 447, 454, 850, 1005], "sigmoid": [1, 61, 62, 63, 64, 364, 411, 434, 449, 533, 559, 620, 639, 643, 765, 774, 777, 861, 862, 906, 907, 908, 909, 910, 1004, 1014, 1025, 1042, 1046, 1049], "sigmoid_kernel": [1, 400, 765, 997, 1048], "sign": [75, 110, 116, 121, 124, 136, 194, 229, 254, 299, 343, 372, 404, 409, 412, 542, 581, 588, 605, 635, 636, 658, 659, 666, 668, 674, 675, 676, 677, 735, 742, 904, 908, 946, 948, 965, 995, 999, 1004, 1009, 1013, 1014, 1029, 1033, 1038, 1042, 1044, 1047], "signal": [1, 10, 53, 112, 120, 121, 122, 129, 144, 146, 167, 172, 173, 180, 189, 190, 195, 197, 198, 203, 206, 208, 255, 277, 316, 404, 406, 413, 414, 417, 472, 501, 519, 524, 529, 532, 535, 539, 543, 544, 625, 644, 645, 646, 647, 652, 653, 663, 664, 672, 684, 685, 686, 785, 821, 830, 878, 995, 999, 1016, 1020, 1023, 1024, 1025], "signatur": [240, 347, 348, 367, 485, 486, 555, 556, 559, 560, 562, 563, 593, 601, 610, 611, 634, 659, 673, 675, 711, 742, 803, 804, 806, 822, 823, 826, 828, 829, 831, 877, 941, 960, 988, 1036, 1042, 1046], "signif": 45, "signifi": [404, 580, 811, 1004], "signific": [1, 43, 50, 88, 140, 146, 158, 159, 161, 180, 211, 224, 256, 264, 283, 284, 347, 355, 366, 367, 384, 404, 407, 408, 411, 502, 530, 532, 547, 627, 658, 659, 666, 667, 668, 676, 677, 678, 819, 829, 904, 906, 907, 908, 909, 910, 988, 991, 998, 999, 1002, 1020, 1029, 1031, 1032, 1033, 1037], "significantli": [43, 61, 62, 64, 72, 109, 110, 134, 140, 144, 146, 149, 163, 183, 184, 185, 207, 211, 214, 222, 224, 258, 264, 284, 314, 315, 348, 349, 355, 360, 376, 404, 409, 411, 412, 417, 466, 471, 476, 477, 536, 538, 545, 556, 563, 646, 647, 652, 653, 660, 661, 662, 663, 684, 692, 844, 845, 991, 995, 996, 1002, 1007, 1014, 1029, 1031, 1032, 1036, 1037, 1042, 1043, 1044], "sijaranamu": 1035, "sikai": 1049, "silenc": [240, 1048], "silent": [240, 412, 580, 860, 1009, 1034, 1035, 1037, 1038, 1042, 1043], "silhouett": [1, 58, 71, 72, 73, 82, 90, 91, 98, 180, 348, 444, 510, 792, 793, 1020, 1029, 1033], "silhouette_avg": 93, "silhouette_sampl": [1, 93, 793, 1033, 1035, 1037, 1045], "silhouette_scor": [1, 73, 82, 91, 93, 348, 372, 404, 1029, 1033, 1035, 1037, 1039, 1043], "silicon": 370, "silk": 1043, "sillanp\u00e4\u00e4": 1029, "silva": [402, 688, 996, 1040, 1042, 1047], "silverman": [410, 849, 1044], "silverthorn": 1029, "silvestrin": 1046, "sim": 409, "sim4n6": 1044, "simarjot": 1049, "simd": [386, 1044], "similar": [1, 43, 44, 46, 51, 55, 58, 62, 63, 66, 70, 72, 82, 84, 90, 93, 107, 116, 120, 124, 134, 146, 162, 167, 174, 178, 182, 183, 184, 185, 194, 201, 207, 209, 220, 226, 228, 230, 233, 239, 240, 255, 258, 261, 264, 267, 270, 271, 272, 281, 283, 284, 304, 316, 335, 340, 343, 348, 349, 355, 359, 364, 366, 368, 371, 372, 374, 377, 378, 380, 381, 384, 386, 398, 401, 402, 404, 407, 408, 409, 411, 412, 413, 414, 415, 437, 440, 441, 447, 449, 451, 452, 501, 506, 507, 534, 581, 588, 589, 590, 609, 610, 677, 692, 695, 703, 705, 715, 719, 725, 728, 729, 731, 734, 738, 740, 755, 760, 761, 786, 792, 793, 796, 797, 798, 826, 831, 876, 897, 900, 904, 905, 906, 907, 921, 931, 988, 991, 992, 994, 995, 996, 998, 1000, 1002, 1003, 1005, 1006, 1009, 1011, 1012, 1013, 1014, 1015, 1018, 1019, 1025, 1029, 1033, 1034, 1035, 1037, 1041, 1042], "similarli": [43, 51, 72, 88, 118, 150, 184, 186, 194, 198, 207, 234, 243, 258, 261, 264, 299, 304, 319, 321, 336, 355, 360, 368, 370, 374, 377, 384, 386, 398, 401, 407, 408, 412, 729, 730, 738, 783, 784, 787, 822, 994, 996, 997, 999, 1006, 1009, 1013, 1014, 1016, 1037, 1043, 1045, 1048], "simmon": 1023, "simon": [995, 1023, 1032, 1033, 1042, 1043, 1044, 1045, 1048], "simona": [1040, 1041, 1042], "simonamaggio": [1040, 1041, 1042], "simoncw": 1039, "simonpl": 1034, "simpl": [1, 12, 37, 43, 64, 88, 103, 107, 109, 115, 116, 120, 140, 144, 174, 180, 184, 194, 208, 223, 246, 265, 281, 285, 288, 297, 317, 332, 347, 349, 352, 355, 370, 372, 374, 375, 376, 377, 379, 384, 385, 386, 387, 395, 401, 404, 405, 406, 408, 409, 410, 411, 412, 413, 418, 425, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 459, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 512, 520, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 786, 788, 797, 798, 799, 800, 803, 804, 814, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 956, 991, 993, 994, 995, 996, 998, 999, 1002, 1009, 1011, 1013, 1015, 1019, 1020, 1023, 1026, 1029], "simplefilt": 398, "simpleimput": [1, 103, 154, 178, 179, 185, 235, 245, 247, 314, 317, 355, 386, 627, 628, 629, 989, 1009, 1037, 1038, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048], "simplepipelin": 240, "simpler": [147, 186, 201, 224, 263, 313, 336, 359, 371, 404, 409, 995, 1000, 1034], "simplest": [86, 263, 408, 996], "simplex": [63, 670, 797, 879], "simpli": [74, 116, 152, 155, 167, 175, 230, 241, 243, 273, 297, 315, 316, 359, 367, 372, 374, 377, 384, 386, 406, 407, 408, 409, 411, 412, 482, 695, 762, 765, 871, 950, 991, 996, 999, 1000, 1001, 1002, 1013, 1036, 1037, 1038], "simplic": [43, 53, 67, 194, 205, 340, 347, 349, 386, 410, 1002, 1003, 1004, 1014], "simplif": [368, 371, 377, 1029, 1035], "simplifi": [43, 103, 196, 240, 336, 371, 373, 377, 404, 407, 513, 560, 862, 863, 864, 999, 1001, 1009, 1049], "simplist": [207, 412], "simul": [110, 122, 149, 183, 203, 241, 264, 400, 1023], "simultan": [58, 63, 88, 121, 201, 268, 272, 319, 343, 353, 364, 401, 404, 988, 999, 1000, 1015, 1023, 1036], "sin": [43, 53, 57, 74, 121, 135, 145, 146, 151, 153, 158, 167, 173, 174, 176, 190, 191, 194, 203, 208, 213, 228, 239, 255, 296, 305, 314, 320, 342, 353, 414, 514, 615, 699, 764], "sin_transform": 43, "sina": 1042, "sinayev": 1031, "sinc": [0, 43, 44, 50, 52, 62, 70, 72, 82, 86, 88, 99, 102, 103, 104, 121, 143, 160, 163, 165, 167, 172, 183, 184, 186, 188, 193, 201, 202, 207, 209, 211, 223, 234, 238, 239, 240, 251, 254, 258, 260, 264, 266, 267, 273, 274, 277, 278, 281, 283, 284, 286, 287, 310, 316, 317, 322, 323, 330, 333, 336, 343, 347, 348, 349, 355, 360, 367, 370, 372, 373, 374, 376, 377, 380, 384, 385, 386, 390, 395, 398, 402, 404, 405, 406, 407, 408, 409, 411, 412, 414, 421, 424, 434, 439, 443, 447, 450, 453, 461, 464, 466, 494, 534, 536, 538, 545, 547, 548, 549, 550, 551, 553, 555, 557, 559, 560, 561, 562, 565, 567, 587, 588, 590, 610, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 632, 633, 638, 647, 651, 653, 655, 658, 659, 661, 663, 666, 668, 674, 675, 676, 679, 702, 707, 712, 731, 735, 742, 778, 789, 799, 803, 804, 822, 828, 829, 831, 832, 833, 834, 835, 838, 839, 840, 841, 842, 843, 846, 851, 854, 861, 862, 869, 894, 895, 899, 900, 901, 904, 906, 909, 912, 914, 928, 930, 931, 941, 948, 957, 988, 991, 992, 993, 995, 996, 1000, 1001, 1002, 1003, 1005, 1007, 1009, 1013, 1014, 1015, 1023, 1029, 1030, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "sinclert": 1037, "sind": 412, "sine": [1, 43, 167, 172, 173, 180, 203, 213, 248, 249, 250, 251, 253, 254, 353, 368, 615, 797, 798, 998, 1015, 1020], "singer": [281, 666, 667, 735, 995, 999, 1013, 1014], "singh": [1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1049], "singl": [1, 30, 31, 66, 70, 74, 85, 86, 88, 91, 94, 95, 104, 122, 133, 134, 135, 142, 143, 153, 163, 167, 173, 178, 180, 184, 186, 188, 194, 205, 207, 209, 211, 244, 246, 254, 258, 260, 261, 263, 273, 281, 301, 317, 319, 336, 347, 348, 349, 352, 353, 355, 359, 360, 366, 367, 372, 377, 379, 380, 381, 384, 385, 386, 395, 402, 403, 405, 407, 408, 409, 411, 412, 413, 429, 434, 437, 438, 442, 443, 444, 446, 451, 461, 463, 464, 491, 492, 494, 504, 507, 532, 551, 554, 555, 556, 557, 558, 562, 563, 564, 581, 591, 598, 599, 601, 605, 627, 631, 632, 634, 643, 666, 667, 673, 676, 677, 678, 690, 692, 694, 702, 710, 711, 721, 722, 723, 724, 725, 736, 737, 738, 741, 774, 785, 797, 798, 800, 814, 821, 822, 826, 827, 829, 830, 833, 841, 844, 845, 849, 861, 862, 863, 873, 874, 877, 878, 879, 884, 885, 899, 900, 912, 913, 914, 915, 924, 926, 964, 985, 988, 994, 995, 996, 999, 1000, 1002, 1004, 1006, 1007, 1009, 1013, 1014, 1015, 1018, 1020, 1023, 1029, 1030, 1031, 1033, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "single_output": [374, 924], "single_prior": 176, "single_source_shortest_path_length": [1, 381], "singleton": [360, 808, 933, 1042, 1045], "singular": [1, 120, 381, 401, 404, 407, 448, 450, 479, 480, 481, 482, 519, 522, 532, 536, 538, 539, 542, 545, 547, 548, 657, 672, 673, 674, 687, 948, 995, 996, 998, 1024, 1025, 1035, 1036, 1047], "singular_": 657, "singular_values_": [532, 539, 542, 1036], "sinha": [1037, 1046, 1047], "sinhrk": [1033, 1034], "sink": [641, 991], "sinoisoid": 146, "sinusoid": [121, 135, 146, 194, 239, 645, 992], "sio": 398, "siola": [1044, 1045], "sip\u0151cz": [1039, 1040, 1041, 1045, 1047, 1048], "siqi": 1043, "siqueira": 1039, "sir": 369, "sisird864": 1049, "sister": 1018, "site": [370, 372, 380, 390, 411, 485, 486, 487, 488, 490, 491, 492, 493, 495, 496, 1023, 1037], "situat": [62, 79, 90, 104, 182, 183, 213, 233, 267, 372, 380, 398, 406, 408, 409, 411, 465, 526, 532, 581, 877, 880, 892, 902, 993, 995, 1001, 1002, 1012, 1015, 1037], "situp": 369, "sivamani": 1039, "sivaprasad": [1032, 1033], "six": [163, 208, 227, 308, 369, 1038], "sixteenth": 1011, "sixth": 367, "siyujin": 1049, "size": [37, 42, 43, 44, 45, 47, 50, 51, 52, 53, 61, 64, 67, 69, 72, 74, 75, 77, 79, 80, 81, 85, 87, 88, 90, 91, 93, 94, 95, 99, 100, 105, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 127, 129, 137, 145, 146, 149, 150, 151, 155, 159, 167, 169, 170, 173, 174, 180, 182, 184, 185, 190, 191, 192, 193, 195, 199, 204, 205, 208, 209, 210, 213, 219, 220, 226, 231, 233, 236, 237, 238, 239, 240, 242, 243, 251, 257, 260, 262, 264, 266, 267, 269, 270, 271, 281, 290, 291, 292, 299, 302, 305, 306, 307, 308, 311, 314, 317, 319, 320, 322, 326, 330, 332, 334, 335, 336, 343, 345, 347, 348, 349, 351, 359, 360, 361, 367, 368, 372, 377, 381, 384, 385, 386, 390, 395, 401, 402, 404, 406, 408, 409, 412, 414, 415, 417, 441, 442, 443, 445, 446, 447, 454, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 491, 492, 493, 513, 525, 532, 534, 536, 538, 545, 555, 556, 557, 558, 559, 560, 562, 563, 582, 586, 587, 593, 632, 633, 643, 657, 666, 667, 679, 683, 692, 695, 705, 719, 738, 740, 743, 781, 793, 802, 805, 806, 810, 817, 820, 821, 822, 825, 828, 830, 839, 840, 841, 843, 846, 847, 848, 849, 850, 852, 854, 855, 856, 861, 862, 879, 881, 893, 898, 902, 906, 907, 908, 909, 910, 912, 913, 914, 915, 918, 947, 951, 952, 963, 964, 966, 968, 973, 989, 991, 992, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1006, 1009, 1011, 1013, 1014, 1015, 1022, 1023, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1044, 1045, 1047, 1048], "size_cluster_i": 93, "size_mb": 347, "sizeabl": [802, 817, 820], "sk": [548, 944], "skaft": 1043, "skeleton": 1032, "sketch": [1, 23, 188, 361, 364, 381, 639, 640, 641, 965, 1025, 1041], "skew": [1, 48, 146, 210, 237, 243, 304, 319, 364, 402, 408, 639, 640, 641, 642, 880, 892, 995, 1009, 1025, 1032, 1036, 1045], "skewed": [642, 1036], "skewedchi2sampl": [1, 638, 639, 640, 641, 991, 1036, 1043, 1044], "skf": [251, 408, 819], "skfold": 328, "skforecast": 1018, "skill": 999, "skimag": [80, 81, 366], "skip": [322, 360, 372, 381, 400, 412, 465, 646, 647, 652, 660, 661, 662, 671, 681, 902, 923, 941, 942, 1033, 1036, 1039, 1041, 1043, 1045, 1048], "skip_check_arrai": 987, "skip_complet": 627, "skip_comput": 1039, "skip_parameter_valid": [465, 902, 1045], "skipper": [1032, 1034, 1035], "skiptest": 942, "skiptestwarn": 941, "skl2onnx": 398, "sklearn": [1, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 359, 360, 361, 365, 366, 367, 368, 370, 371, 372, 373, 374, 376, 377, 378, 380, 381, 384, 385, 386, 389, 390, 391, 395, 398, 400, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 991, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1018, 1026, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "sklearn2pmml": 1018, "sklearn_api": 0, "sklearn_assume_finit": 359, "sklearn_cache_": 313, "sklearn_enable_debug_cython_direct": 373, "sklearn_fail_no_openmp": 370, "sklearn_graph_cache_": 286, "sklearn_is_fit": [132, 1020], "sklearn_run_float32_test": 372, "sklearn_site_joblib": 1037, "sklearn_warning_as_error": 360, "sklearnex": 390, "skop": [1018, 1025], "skorch": 1018, "skrub": 1018, "sktime": [52, 1018], "sl": 207, "slack": 1013, "slai": 347, "slama": [1039, 1041], "slep": [372, 386], "slep000": 387, "slep007": [316, 317, 374], "slep009": [1040, 1042, 1043], "slep010": [374, 1040], "slep018": [247, 374, 1044], "slep020": 387, "slice": [1, 43, 52, 55, 142, 149, 215, 228, 238, 292, 295, 316, 317, 332, 367, 373, 381, 405, 461, 464, 491, 492, 506, 544, 639, 774, 778, 781, 921, 926, 951, 952, 969, 1041, 1043, 1047], "slice_": [491, 492, 1044], "sliceabl": 955, "slide": [265, 644, 995], "slight": [143, 212, 315, 398, 411, 446, 1039], "slightli": [43, 62, 64, 66, 97, 113, 137, 140, 143, 146, 150, 154, 163, 167, 168, 169, 184, 185, 190, 207, 224, 231, 240, 243, 272, 278, 284, 313, 333, 349, 371, 372, 402, 404, 411, 412, 414, 416, 443, 587, 588, 590, 638, 658, 803, 804, 904, 906, 909, 947, 948, 988, 995, 1009, 1013, 1014, 1015, 1038, 1042, 1043, 1045, 1047, 1048], "slishak": 1043, "sloan": 0, "slogdet": 946, "slope": [184, 209, 223, 404, 488, 723, 748, 997, 999], "sloppili": 412, "sloth": [50, 297, 367, 496], "slow": [286, 304, 347, 359, 366, 370, 372, 409, 412, 444, 699, 878, 879, 883, 906, 909, 948, 996, 1002, 1036], "slower": [104, 123, 140, 143, 178, 239, 273, 349, 386, 411, 412, 413, 443, 448, 450, 536, 538, 545, 556, 563, 587, 588, 590, 631, 632, 633, 643, 659, 672, 674, 687, 692, 704, 832, 836, 837, 992, 996, 997, 998, 1000, 1002, 1015, 1033, 1040], "slowest": [143, 947, 948], "slowli": [384, 386, 542, 948], "slug": 102, "smacof": [1, 690, 996, 1044], "small": [37, 38, 41, 44, 50, 52, 59, 64, 74, 82, 86, 88, 102, 109, 113, 116, 125, 135, 137, 143, 145, 146, 172, 174, 183, 184, 191, 195, 199, 200, 205, 208, 211, 212, 213, 221, 223, 224, 229, 251, 258, 264, 271, 276, 278, 286, 297, 300, 302, 304, 306, 308, 315, 322, 325, 330, 336, 341, 343, 347, 348, 361, 365, 367, 369, 372, 375, 381, 384, 386, 387, 398, 401, 402, 404, 406, 407, 408, 409, 410, 411, 412, 413, 417, 438, 440, 442, 443, 444, 446, 455, 456, 460, 472, 494, 496, 536, 538, 539, 545, 553, 554, 555, 559, 560, 561, 562, 581, 588, 589, 601, 606, 607, 650, 654, 655, 656, 658, 659, 679, 682, 683, 803, 804, 818, 829, 832, 861, 862, 869, 897, 906, 909, 948, 988, 993, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1009, 1011, 1012, 1015, 1018, 1019, 1023, 1029, 1030, 1032, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "smaller": [1, 37, 47, 61, 75, 80, 88, 113, 134, 149, 163, 172, 173, 178, 197, 198, 200, 211, 237, 281, 290, 291, 299, 304, 321, 336, 343, 348, 372, 387, 401, 404, 406, 408, 409, 411, 413, 436, 437, 443, 447, 451, 453, 512, 532, 533, 555, 556, 557, 558, 559, 560, 562, 563, 592, 610, 619, 633, 646, 647, 649, 650, 652, 653, 654, 656, 658, 659, 660, 661, 662, 663, 672, 674, 682, 683, 692, 709, 797, 803, 804, 850, 853, 877, 878, 896, 897, 904, 912, 913, 914, 915, 948, 993, 995, 996, 998, 999, 1000, 1002, 1003, 1005, 1009, 1011, 1013, 1014, 1015, 1019, 1037, 1042, 1046], "smallest": [111, 112, 207, 276, 284, 321, 351, 367, 404, 406, 413, 525, 539, 630, 654, 655, 656, 682, 683, 690, 694, 695, 800, 803, 804, 814, 819, 874, 927, 1015, 1042], "smallest_ab": 321, "smallest_coef": [113, 525], "smari": [1038, 1039, 1040], "smart": [240, 440, 456, 457, 589], "smartphon": 1023, "smedbergm": 1035, "smedemark": 1039, "smile": [107, 367, 1043], "sminchisescu": [642, 991], "smirnov": 1041, "smith": [1035, 1036, 1037, 1038, 1039, 1041], "sml": [860, 1004], "smo": [904, 905], "smola": [409, 412, 533, 870, 1009, 1014], "smolskii": 1044, "smooth": [43, 80, 81, 87, 163, 172, 202, 208, 222, 310, 336, 369, 387, 404, 410, 411, 414, 445, 446, 535, 536, 537, 544, 555, 556, 557, 558, 562, 563, 564, 589, 590, 619, 622, 676, 839, 840, 841, 843, 881, 885, 893, 912, 913, 914, 915, 995, 1001, 1009, 1013, 1014, 1015], "smooth_idf": [265, 412, 589, 590], "smoothened_coin": [80, 81], "smoother": [43, 44, 66, 146, 184, 301, 410], "smoothli": 366, "smt": 1045, "smtp": [367, 490], "smujjiga": 1039, "sn": [72, 126, 135, 149, 182, 183, 190, 194, 254, 264], "snake": [317, 319, 581, 885, 1009], "snapshot": [398, 557, 558, 1019], "sne": [51, 180, 225, 226, 227, 228, 230, 284, 512, 523, 692, 1020, 1024, 1025], "snippet": [132, 355, 372, 377, 380, 384, 400, 411, 412, 413, 989, 1009, 1022, 1042], "snowhit": 1040, "snr": 87, "snuderl": 1033, "sny": 51, "snyder": [692, 996], "so": [30, 37, 43, 48, 51, 52, 55, 64, 77, 88, 89, 94, 98, 112, 140, 142, 143, 144, 145, 149, 153, 167, 172, 179, 183, 184, 185, 188, 191, 207, 208, 233, 240, 243, 258, 264, 277, 281, 284, 290, 291, 294, 300, 301, 305, 310, 311, 314, 328, 336, 347, 349, 354, 355, 359, 360, 361, 366, 367, 370, 371, 372, 374, 376, 377, 378, 380, 381, 386, 395, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 417, 418, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 453, 461, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 494, 506, 507, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 606, 607, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 695, 705, 708, 716, 726, 730, 756, 778, 788, 797, 798, 799, 800, 803, 804, 806, 807, 814, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 894, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 948, 966, 973, 988, 989, 991, 993, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1005, 1009, 1011, 1012, 1013, 1014, 1018, 1019, 1023, 1029, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1045, 1046], "soar": 1044, "sobkevich": 1041, "sobolev": 1033, "soc": [57, 367], "socastro": [1039, 1045], "socg2006": 444, "social": [0, 183, 376, 387, 404, 1023], "societi": [163, 369, 404, 406, 466, 471, 539, 627, 880, 892, 995, 1013], "sodhani": 1035, "soft": [1, 129, 155, 372, 386, 567, 568, 900, 908, 1013, 1023, 1034], "softmax": [411, 559, 658, 659, 995, 1002, 1003], "softw": 995, "softwar": [0, 163, 348, 359, 369, 372, 380, 384, 386, 398, 412, 627, 635, 658, 989, 996, 1023], "soil_typ": 243, "sokalmichen": [447, 454, 699, 778, 779, 780, 1002], "sokalmichenerdist": 699, "sokalsneath": [447, 454, 699, 778, 779, 780, 1002], "sokalsneathdist": 699, "sok\u00f3\u0142": [1046, 1047], "sole": [100, 372, 384, 404], "soledad": 1041, "soler": [0, 394], "solid": [50, 67, 69, 145, 170, 218, 219, 233, 243, 297, 306, 1023], "solntz": 347, "solosil": 1042, "solut": [80, 190, 194, 198, 200, 212, 220, 229, 233, 239, 277, 316, 336, 370, 386, 398, 401, 403, 404, 406, 408, 409, 412, 413, 446, 448, 450, 529, 535, 536, 537, 538, 540, 541, 543, 544, 545, 546, 547, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 610, 646, 648, 650, 652, 654, 655, 656, 657, 658, 660, 662, 664, 665, 666, 667, 668, 669, 672, 674, 676, 677, 678, 679, 680, 682, 683, 685, 686, 687, 797, 798, 814, 853, 861, 862, 992, 993, 995, 996, 998, 1003, 1005, 1013, 1014, 1023, 1029, 1032, 1042, 1043, 1044, 1049], "solutu": 1037, "solutusimmensu": 1037, "solv": [1, 44, 45, 99, 167, 198, 238, 264, 283, 371, 372, 373, 374, 377, 384, 392, 404, 406, 408, 409, 414, 444, 450, 459, 475, 529, 535, 536, 537, 541, 543, 544, 545, 546, 635, 637, 646, 652, 654, 655, 664, 665, 670, 672, 674, 677, 685, 686, 687, 719, 816, 818, 819, 820, 834, 904, 905, 908, 948, 990, 993, 995, 996, 999, 1000, 1013, 1014, 1015, 1018, 1023, 1035, 1039, 1042], "solvabl": 404, "solver": [54, 69, 70, 80, 99, 103, 139, 155, 183, 198, 200, 202, 207, 221, 222, 224, 234, 235, 244, 245, 247, 258, 263, 278, 299, 300, 301, 302, 311, 314, 317, 320, 321, 323, 347, 378, 384, 386, 390, 400, 404, 416, 449, 459, 468, 469, 475, 531, 533, 538, 539, 542, 545, 547, 646, 647, 648, 652, 653, 657, 658, 659, 660, 661, 662, 663, 669, 670, 672, 674, 680, 681, 684, 687, 688, 689, 691, 693, 695, 788, 814, 835, 838, 861, 862, 906, 907, 908, 909, 910, 993, 996, 1000, 1003, 1013, 1014, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "solver_": [672, 674], "solver_opt": 670, "somani": 1041, "somdutta": 1049, "some": [42, 43, 44, 47, 48, 52, 57, 61, 62, 63, 64, 66, 72, 79, 83, 86, 88, 89, 91, 95, 100, 103, 106, 109, 111, 112, 116, 120, 135, 136, 140, 143, 146, 147, 149, 150, 151, 154, 159, 165, 167, 169, 172, 173, 174, 175, 176, 178, 179, 180, 183, 184, 185, 186, 188, 190, 192, 194, 196, 197, 198, 199, 201, 203, 204, 207, 208, 211, 214, 215, 220, 223, 224, 226, 228, 233, 237, 240, 243, 250, 251, 252, 257, 258, 259, 264, 265, 266, 267, 270, 272, 278, 281, 283, 287, 290, 295, 300, 301, 304, 309, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 332, 333, 335, 336, 343, 347, 348, 349, 354, 355, 359, 360, 361, 365, 366, 367, 369, 370, 372, 373, 374, 376, 377, 378, 379, 380, 381, 384, 385, 386, 390, 395, 398, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 427, 434, 440, 441, 444, 446, 448, 450, 456, 460, 462, 465, 479, 480, 481, 494, 497, 506, 507, 513, 521, 522, 531, 532, 534, 536, 539, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 572, 587, 589, 603, 605, 608, 610, 611, 632, 633, 635, 639, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 689, 690, 692, 693, 697, 698, 700, 701, 702, 707, 708, 715, 720, 726, 727, 738, 739, 740, 746, 754, 756, 757, 763, 782, 784, 787, 788, 789, 794, 797, 799, 801, 802, 807, 809, 818, 819, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 849, 851, 854, 855, 861, 862, 864, 865, 867, 869, 870, 871, 876, 883, 884, 899, 900, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 930, 931, 957, 988, 989, 991, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1009, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1022, 1023, 1029, 1030, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "some_funct": [372, 937], "some_integ": 408, "some_iter": 372, "some_param": 372, "somebodi": 387, "someestim": 371, "somehow": 184, "someon": [372, 376, 386, 1029], "someth": [183, 227, 281, 347, 372, 375, 376, 380, 412, 920, 922, 999, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "sometim": [104, 154, 182, 258, 264, 301, 348, 355, 360, 361, 372, 374, 378, 385, 386, 404, 406, 409, 411, 412, 446, 532, 533, 536, 538, 539, 869, 870, 871, 919, 994, 995, 996, 999, 1004, 1009, 1010, 1014, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1045], "somewhat": [343, 355, 361, 372, 409, 411, 906, 909, 995, 1014, 1015], "somewher": [378, 999], "sommer": 1047, "somya": 1037, "son": [369, 989], "song": 996, "soni": [51, 1039, 1041], "sonni": 1034, "sonniv": [1044, 1045], "sonoiya": 1039, "sonoma": 310, "soon": [112, 386, 1048], "sooner": 1046, "sophist": [989, 1001], "sorbaro": 1034, "sorensen": 409, "soriano": 1038, "sornarajah": 1034, "sorri": 1037, "sorro": 1038, "sorski": [1043, 1044], "sort": [1, 43, 47, 49, 51, 58, 61, 93, 102, 105, 132, 137, 143, 146, 153, 163, 172, 190, 194, 207, 208, 224, 242, 263, 264, 265, 268, 279, 296, 342, 347, 353, 372, 376, 380, 381, 386, 408, 411, 412, 414, 532, 539, 553, 564, 580, 593, 610, 617, 697, 712, 718, 729, 730, 738, 754, 783, 784, 787, 789, 800, 827, 839, 840, 841, 842, 843, 844, 845, 852, 854, 855, 856, 859, 869, 875, 877, 878, 881, 883, 885, 893, 906, 909, 948, 954, 995, 1002, 1005, 1009, 1023, 1029, 1033, 1039, 1040, 1041, 1043, 1044, 1047], "sort_graph_by_row_valu": [1, 381, 1044], "sort_index": 281, "sort_result": [844, 845, 852, 854, 855, 856, 1041], "sort_valu": [103, 185, 186, 247, 254, 264, 275, 310, 311], "sorted_idx": [147, 313], "sorted_importances_idx": 185, "sortofamudkip": [1044, 1045, 1049], "sotagg": 1049, "sought": 781, "soumirai": 1039, "sound": [163, 355], "sounder": 1035, "sourabh": 1049, "sourav": [1036, 1039], "sourc": [0, 1, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 351, 352, 353, 354, 355, 366, 369, 371, 372, 373, 375, 376, 378, 380, 381, 384, 385, 390, 398, 401, 405, 409, 411, 412, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 966, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 982, 983, 984, 985, 986, 987, 996, 1009, 1015, 1018, 1020, 1022, 1023, 1039, 1043, 1047, 1048, 1049], "south": [50, 149, 183, 297, 367, 410], "south_y": 183, "sp": [43, 183, 320, 989], "sp_version": 670, "space": [1, 37, 43, 47, 49, 57, 66, 67, 80, 86, 90, 91, 93, 94, 96, 98, 102, 103, 106, 116, 120, 122, 126, 128, 130, 139, 142, 146, 152, 160, 163, 167, 173, 188, 194, 208, 226, 227, 228, 229, 230, 237, 238, 239, 243, 244, 250, 255, 272, 275, 276, 284, 293, 294, 306, 315, 340, 347, 348, 349, 354, 355, 359, 364, 367, 368, 369, 372, 379, 384, 385, 386, 401, 404, 407, 409, 410, 411, 412, 414, 440, 444, 445, 446, 449, 459, 461, 462, 463, 464, 479, 480, 481, 485, 496, 529, 530, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 547, 571, 581, 587, 588, 590, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 632, 633, 638, 640, 641, 642, 643, 688, 689, 690, 692, 693, 694, 696, 699, 702, 789, 800, 803, 804, 806, 814, 821, 823, 834, 844, 845, 852, 853, 854, 855, 864, 869, 870, 876, 881, 896, 897, 898, 917, 952, 991, 992, 993, 994, 995, 997, 999, 1000, 1002, 1003, 1004, 1005, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1018, 1019, 1024, 1025, 1029, 1030, 1032, 1037, 1038, 1039, 1043, 1044, 1045], "spacek": 1034, "spain": 310, "spam": [580, 709, 741, 839, 999, 1001, 1023], "span": [52, 88, 109, 146, 238, 258, 261, 367, 404, 412, 547, 636, 800, 803, 999], "spanish": 1018, "spannbauer": 1041, "sparciti": 348, "spare": [366, 674, 675], "spark": [367, 1019], "sparrai": [1046, 1049], "spars": [1, 25, 45, 46, 47, 51, 53, 55, 57, 74, 75, 87, 88, 90, 102, 108, 109, 110, 119, 139, 152, 180, 189, 190, 197, 198, 201, 203, 204, 205, 206, 222, 237, 239, 265, 271, 277, 284, 300, 302, 314, 318, 321, 329, 346, 349, 354, 359, 364, 366, 367, 368, 372, 374, 375, 376, 377, 384, 385, 386, 398, 404, 405, 411, 412, 414, 415, 419, 426, 435, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 454, 456, 457, 459, 460, 461, 462, 464, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 484, 485, 486, 494, 495, 501, 506, 521, 522, 524, 525, 526, 527, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 551, 552, 553, 554, 555, 556, 557, 558, 561, 562, 563, 564, 565, 566, 567, 568, 580, 581, 584, 585, 587, 588, 589, 590, 592, 593, 602, 603, 604, 605, 606, 607, 608, 629, 630, 631, 633, 638, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 695, 696, 697, 698, 700, 701, 702, 703, 712, 713, 714, 729, 730, 731, 734, 738, 739, 740, 754, 755, 760, 761, 763, 764, 766, 767, 768, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 785, 787, 792, 793, 796, 799, 800, 803, 804, 814, 821, 822, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 846, 847, 848, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 868, 869, 871, 873, 874, 875, 876, 877, 879, 881, 882, 883, 884, 886, 887, 888, 889, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 921, 926, 928, 929, 930, 931, 936, 945, 947, 948, 949, 952, 954, 955, 963, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 984, 987, 989, 992, 995, 996, 997, 999, 1000, 1002, 1012, 1014, 1015, 1020, 1021, 1024, 1025, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049], "sparse_cg": [347, 672, 674, 687, 995, 1030, 1036, 1038, 1039, 1043, 1045], "sparse_coef_": [646, 652, 660, 662, 1029], "sparse_encod": [1, 540, 650, 651, 652, 653, 654, 655, 656, 663, 664, 665, 682, 683, 684, 685, 686, 1029, 1036, 1037, 1039, 1043], "sparse_encode_parallel": 1029, "sparse_format": [525, 1046], "sparse_func": [1035, 1041], "sparse_input_": 871, "sparse_lasso": 195, "sparse_output": [43, 103, 139, 143, 154, 155, 183, 184, 235, 245, 247, 310, 314, 317, 320, 564, 871, 875, 877, 883, 888, 1009, 1044, 1045], "sparse_output_": [461, 549], "sparse_symmetric_arrai": 984, "sparse_threshold": [103, 154, 183, 184, 185, 235, 245, 310, 314, 317, 461, 464, 1037], "sparsearrai": 1040, "sparsecod": [1, 129, 409, 529, 535, 538, 546, 1036, 1037, 1039, 1041, 1043, 1049], "sparsecodingmixin": 1029, "sparsefunc": [1, 381, 973, 974, 975, 976, 977, 978, 979, 1042], "sparsefuncs_fast": [1, 381, 980, 981], "sparsepca": [1, 120, 529, 531, 532, 533, 535, 537, 538, 539, 540, 543, 544, 1029, 1036, 1037, 1039, 1040, 1042, 1043, 1044, 1047], "sparser": [88, 190, 200, 277, 409, 468, 475, 537, 541, 995, 1002, 1013], "sparserandomproject": [1, 227, 237, 896, 1011, 1030, 1035, 1043, 1045, 1046], "sparsetool": 1036, "sparsifi": [46, 194, 359, 658, 659, 666, 667, 668, 676, 677, 678, 904, 982, 1031], "sparsiti": [1, 53, 113, 180, 189, 194, 197, 202, 217, 221, 222, 239, 343, 348, 359, 386, 406, 409, 411, 413, 500, 525, 529, 535, 536, 537, 538, 541, 543, 544, 545, 646, 652, 658, 676, 678, 721, 723, 724, 873, 879, 884, 889, 992, 995, 1002, 1009, 1020, 1031], "sparsity_en_lr": 200, "sparsity_l1_lr": 200, "sparsity_l2_lr": 200, "sparsity_ratio": 359, "spatial": [81, 82, 88, 186, 194, 223, 301, 367, 386, 404, 415, 441, 443, 447, 449, 454, 679, 692, 760, 763, 778, 779, 780, 781, 792, 793, 844, 845, 846, 847, 848, 849, 850, 852, 854, 855, 856, 857, 858, 995, 1002, 1009, 1031, 1035, 1042, 1045], "spawn": [359, 384, 800, 814, 825, 826, 827, 1040], "spdx": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 313, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 351, 352, 353, 354], "speak": [348, 359, 372, 1013], "spearman": [186, 635, 636, 990], "spearmanr": 186, "spec": [1044, 1045], "speci": [1, 42, 126, 180, 243, 270, 285, 347, 365, 410, 496, 706, 789, 849, 908, 919, 999, 1005, 1020, 1025, 1029], "special": [145, 183, 199, 224, 281, 294, 310, 336, 366, 368, 374, 378, 384, 386, 404, 407, 409, 461, 464, 551, 553, 557, 825, 916, 988, 993, 995, 997, 998, 999, 1000, 1002, 1015, 1036, 1039, 1041, 1043, 1048], "special_charact": [916, 1015], "species_nam": [50, 297], "specif": [1, 43, 50, 51, 58, 64, 70, 79, 88, 95, 98, 102, 104, 140, 149, 154, 172, 175, 180, 183, 184, 188, 211, 224, 258, 259, 263, 264, 281, 304, 313, 314, 318, 321, 322, 340, 347, 348, 349, 355, 359, 360, 367, 372, 374, 375, 377, 378, 380, 384, 386, 390, 398, 400, 404, 405, 408, 409, 411, 412, 413, 414, 428, 494, 501, 532, 549, 555, 562, 565, 566, 567, 568, 572, 587, 590, 592, 612, 613, 614, 615, 617, 618, 619, 620, 622, 623, 625, 640, 643, 646, 647, 658, 672, 687, 697, 699, 712, 713, 800, 801, 802, 807, 808, 809, 814, 827, 840, 921, 939, 941, 942, 943, 963, 974, 975, 976, 993, 995, 996, 998, 999, 1001, 1002, 1004, 1006, 1007, 1009, 1013, 1015, 1016, 1017, 1019, 1022, 1029, 1033, 1037, 1038, 1039, 1040, 1043, 1044, 1046], "specifi": [1, 43, 58, 64, 88, 120, 143, 144, 149, 168, 171, 173, 174, 175, 184, 198, 208, 209, 214, 249, 258, 272, 322, 359, 360, 366, 372, 380, 381, 385, 386, 395, 398, 402, 404, 405, 408, 409, 411, 413, 414, 416, 418, 434, 438, 442, 447, 449, 460, 461, 464, 466, 467, 469, 470, 471, 472, 473, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 501, 513, 525, 529, 531, 535, 536, 538, 539, 544, 545, 550, 555, 557, 558, 559, 560, 562, 565, 566, 582, 583, 592, 593, 596, 601, 610, 611, 620, 631, 632, 633, 638, 643, 646, 647, 648, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 668, 669, 672, 673, 674, 675, 676, 677, 680, 681, 682, 683, 684, 687, 691, 698, 700, 702, 709, 711, 729, 730, 738, 742, 754, 771, 779, 780, 783, 784, 787, 800, 803, 804, 806, 807, 809, 813, 814, 817, 822, 823, 824, 825, 826, 827, 828, 829, 831, 835, 838, 839, 840, 842, 843, 844, 845, 849, 854, 877, 878, 879, 882, 883, 885, 900, 904, 905, 906, 907, 908, 909, 910, 911, 912, 914, 943, 950, 982, 989, 995, 996, 998, 999, 1002, 1006, 1007, 1009, 1012, 1013, 1014, 1029, 1035, 1036, 1037, 1038, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "spector": 408, "spectral": [1, 53, 56, 71, 79, 80, 82, 88, 102, 180, 227, 228, 327, 329, 347, 348, 349, 372, 412, 446, 448, 449, 450, 459, 466, 467, 468, 469, 470, 471, 472, 473, 485, 509, 511, 590, 688, 689, 690, 691, 692, 695, 719, 795, 1002, 1012, 1020, 1024, 1025, 1029, 1030], "spectral_clust": [1, 80, 99, 1037, 1039, 1041, 1042, 1043, 1044, 1046], "spectral_embed": [1, 386, 996, 1030, 1033, 1035, 1037, 1039, 1042, 1043, 1044, 1046], "spectralbiclust": [1, 401, 450, 1031, 1035, 1036, 1040], "spectralclust": [1, 79, 317, 404, 437, 1002, 1029, 1030, 1039, 1041, 1042, 1043, 1044, 1045, 1046], "spectralcoclust": [1, 57, 59, 401, 448, 1031, 1036, 1040], "spectralembed": [1, 85, 226, 227, 228, 688, 689, 690, 692, 996, 1030, 1035, 1039, 1043, 1044, 1046], "spectrum": [105, 522, 542, 695, 948, 1023, 1037], "speech": [412, 999], "speed": [80, 81, 90, 102, 123, 132, 140, 179, 184, 195, 198, 202, 243, 284, 315, 326, 347, 349, 361, 372, 375, 381, 384, 386, 400, 402, 404, 408, 409, 411, 412, 415, 440, 441, 444, 445, 446, 447, 449, 454, 456, 457, 458, 459, 529, 530, 610, 627, 632, 633, 634, 639, 646, 647, 650, 651, 652, 653, 654, 655, 656, 660, 661, 662, 663, 664, 681, 684, 692, 797, 798, 806, 828, 844, 845, 846, 847, 848, 850, 852, 854, 855, 856, 879, 948, 988, 991, 996, 998, 1000, 1013, 1023, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049], "speedi": 359, "speedup": [320, 359, 409, 411, 650, 654, 657, 1029, 1030, 1031, 1032, 1044, 1048], "speer": 1031, "spell": 412, "spend": 412, "spent": [284, 310, 373, 378, 828, 1044], "sperret6": 1047, "sphere": [134, 180, 225, 226, 229, 230, 231, 284, 348, 410, 517, 588, 688, 689, 690, 691, 692, 764, 933, 993, 996, 997, 1002, 1020], "sphere_data": 228, "spheric": [70, 90, 115, 150, 228, 251, 253, 254, 297, 368, 764, 797, 798, 995, 996, 998, 1002, 1049], "sphinx": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 351, 352, 353, 354, 360, 376, 386, 390, 397, 1029, 1036], "sphinxcontrib": [372, 390, 397], "sphinxext": [372, 390, 397], "sphx_glr_auto_examples_mlcomp_sparse_document_classif": 1029, "spidlen": [692, 996], "spie": [163, 369], "spielman": 1039, "spike": 184, "spikebh": 1043, "spikhalskii": 1034, "spiki": 43, "spin": 380, "spine": [46, 54, 70, 217, 304, 700, 702, 1048], "spirit": 409, "spite": 1001, "spline": [1, 66, 155, 180, 189, 190, 279, 514, 515, 516, 672, 865, 879, 883, 1020, 1042], "spline_": 43, "splines_df": 43, "splinetransform": [1, 43, 66, 155, 208, 243, 316, 879, 1009, 1042, 1044, 1045], "split": [1, 43, 44, 45, 50, 52, 54, 55, 61, 63, 64, 67, 68, 102, 125, 134, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 159, 162, 182, 183, 186, 194, 204, 205, 207, 210, 214, 224, 234, 243, 250, 251, 257, 258, 259, 262, 263, 264, 269, 271, 274, 278, 281, 287, 293, 299, 301, 305, 306, 311, 317, 319, 328, 336, 347, 349, 354, 367, 379, 385, 386, 390, 395, 402, 403, 404, 409, 411, 412, 413, 434, 439, 440, 469, 470, 476, 477, 495, 529, 535, 537, 540, 544, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 587, 588, 590, 593, 601, 647, 651, 653, 655, 661, 663, 665, 673, 675, 695, 704, 705, 717, 731, 737, 757, 795, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 838, 844, 845, 861, 862, 885, 889, 890, 892, 893, 894, 895, 912, 913, 914, 915, 969, 988, 991, 995, 996, 1002, 1005, 1006, 1007, 1009, 1013, 1015, 1019, 1025, 1029, 1032, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "split0_test_precis": [800, 814], "split0_test_scor": [800, 814, 1035], "split0_train_scor": [800, 814, 1035], "split1_test_scor": [800, 814], "split1_train_scor": [800, 814], "split2_test_scor": 800, "split_cod": 409, "split_sign": [529, 535, 540], "splitter": [43, 240, 315, 319, 320, 353, 354, 386, 395, 408, 434, 469, 562, 563, 565, 566, 593, 601, 647, 651, 653, 655, 659, 661, 663, 665, 673, 675, 800, 802, 803, 804, 805, 806, 814, 815, 816, 819, 820, 823, 824, 825, 826, 827, 828, 829, 831, 835, 838, 912, 913, 914, 915, 1015, 1035, 1036, 1037, 1038, 1045, 1046, 1047, 1048], "splot": [250, 255], "splt": 208, "sply88": 1043, "spmatrix": [1046, 1049], "spolski": 412, "sport": [57, 367], "spot": [86, 235, 404], "spottabl": 378, "spread": [43, 75, 228, 229, 265, 304, 325, 326, 327, 330, 343, 359, 372, 404, 408, 449, 459, 513, 881, 893, 901, 999], "spring": [43, 52, 184], "springboard": 1018, "springer": [137, 138, 148, 172, 263, 402, 404, 408, 409, 411, 518, 533, 557, 558, 690, 694, 696, 705, 720, 726, 740, 741, 756, 797, 851, 912, 913, 996, 999, 1000, 1006, 1015], "sprint": [371, 372, 1029], "spuriou": [336, 380, 1009, 1042, 1043, 1044, 1049], "spy": 203, "sq": 769, "sqeuclidean": [73, 447, 454, 778, 779, 780], "sqft": 243, "sql": 366, "sqr": 75, "sqrt": [51, 63, 111, 112, 113, 123, 129, 138, 141, 185, 186, 190, 192, 229, 231, 245, 249, 250, 251, 254, 255, 264, 320, 341, 343, 404, 411, 412, 414, 460, 466, 467, 468, 469, 470, 471, 472, 473, 536, 538, 545, 555, 556, 557, 558, 562, 563, 619, 646, 647, 652, 653, 660, 661, 662, 663, 681, 684, 699, 731, 763, 764, 769, 884, 897, 912, 913, 914, 915, 991, 995, 996, 999, 1001, 1011, 1043], "squar": [1, 43, 44, 52, 94, 103, 110, 111, 112, 114, 115, 121, 122, 130, 137, 147, 149, 150, 163, 167, 172, 180, 182, 183, 189, 190, 192, 193, 194, 198, 199, 207, 209, 212, 216, 223, 224, 236, 237, 239, 252, 279, 308, 311, 315, 316, 318, 333, 347, 364, 369, 372, 378, 381, 386, 404, 406, 407, 409, 410, 411, 415, 416, 427, 437, 439, 440, 441, 443, 444, 446, 447, 451, 454, 456, 457, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 499, 529, 535, 537, 539, 541, 543, 544, 545, 547, 550, 552, 554, 556, 557, 558, 560, 563, 566, 568, 589, 590, 591, 594, 595, 597, 598, 599, 603, 604, 605, 608, 611, 615, 622, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 682, 683, 685, 686, 687, 688, 690, 692, 694, 696, 709, 721, 722, 723, 724, 750, 751, 758, 759, 763, 769, 770, 785, 790, 791, 830, 837, 838, 846, 847, 850, 851, 852, 854, 855, 862, 865, 884, 904, 905, 907, 909, 910, 911, 913, 915, 946, 971, 984, 990, 992, 993, 1002, 1003, 1007, 1013, 1015, 1020, 1021, 1025, 1029, 1032, 1034, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1048], "square_dist": 1041, "squared_epsilon_insensit": [667, 676, 678, 905, 995, 1035], "squared_error": [46, 52, 129, 146, 147, 151, 154, 156, 244, 310, 316, 318, 323, 353, 411, 556, 557, 558, 560, 563, 671, 676, 678, 693, 862, 913, 915, 1013, 1015, 1042, 1045, 1046, 1049], "squared_hing": [104, 160, 271, 343, 666, 676, 904, 911, 995, 1014], "squared_loss": [384, 1042], "squareform": 186, "squash": [243, 376, 414, 529, 535, 540, 546], "squeez": [107, 173, 174, 243, 284, 304, 1048], "sr": 1023, "sr_color": 230, "sr_err": 230, "sr_lle": 230, "sr_point": 230, "sr_tsne": 230, "srajan": 1037, "sre": 1044, "srebro": 1013, "sreeja": 1049, "srep30750": 404, "sri": [671, 995, 1036, 1037], "sridharan": 1034, "sriharsha": [1037, 1038], "srikantan": 995, "srimukh": 1041, "srinath": [1043, 1044], "srinivasan": [1037, 1040], "sripada": 1041, "srir": 1049, "srivastava": [1032, 1044, 1047], "srivatsan": [1035, 1036, 1039], "srvanrel": 1035, "sr\u0161e\u0148": [1047, 1048], "ss": 408, "sse": 440, "sseg": 1034, "ssrn": [207, 224], "sss": 820, "ssvm": 384, "st": [81, 100, 264, 318, 1032, 1035, 1037], "st30": 330, "st50": 330, "st_pipelin": 329, "sta4273": 644, "stabil": [72, 138, 144, 183, 205, 227, 269, 304, 343, 348, 386, 401, 443, 650, 654, 670, 842, 861, 862, 880, 892, 947, 989, 995, 998, 1009, 1019, 1029, 1033, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1049], "stabilis": 190, "stabl": [43, 64, 162, 183, 203, 205, 209, 240, 284, 314, 343, 348, 370, 372, 374, 376, 381, 386, 390, 395, 408, 412, 416, 468, 469, 475, 531, 539, 655, 672, 674, 687, 692, 724, 752, 947, 948, 995, 999, 1001, 1002, 1009, 1019, 1029, 1030, 1035, 1040, 1042, 1046], "stack": [1, 13, 107, 133, 135, 143, 156, 178, 179, 180, 235, 289, 354, 371, 380, 384, 386, 410, 461, 463, 464, 494, 513, 560, 563, 565, 566, 612, 627, 628, 630, 653, 673, 701, 825, 827, 865, 869, 877, 878, 884, 972, 989, 1020, 1021, 1022, 1025, 1029, 1032, 1036, 1037, 1038, 1039, 1040], "stack_method": [411, 565], "stack_method_": [411, 565, 566], "stacking_regressor": 154, "stackingclassifi": [1, 313, 355, 386, 395, 411, 566, 989, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1048], "stackingregressor": [1, 154, 313, 386, 395, 411, 565, 989, 1039, 1040, 1041, 1042, 1043, 1046, 1048], "stackingregressorinot": 154, "stackoverflow": [377, 380, 384], "stade": 1033, "stage": [0, 46, 63, 104, 134, 139, 144, 147, 258, 376, 386, 400, 404, 411, 445, 551, 552, 557, 558, 559, 560, 587, 588, 590, 601, 996, 1009, 1037, 1041], "staged_decision_funct": [551, 557, 559], "staged_predict": [134, 144, 147, 411, 551, 552, 557, 558, 559, 560, 1029, 1041], "staged_predict_proba": [145, 148, 551, 557, 559, 1029], "staged_scor": [551, 552], "stagewis": 134, "stagg": 1042, "stai": [43, 52, 63, 72, 129, 165, 183, 348, 371, 372, 376, 386, 387, 1004, 1022, 1035], "stairstep": 271, "stalei": [1038, 1039], "stall": [371, 375], "stallei": 1041, "stan": [842, 1046], "stand": [267, 349, 376, 384, 409, 529, 535, 543, 544, 595, 608, 678, 705, 717, 736, 737, 757, 786, 788, 795, 998, 999, 1005], "standalon": [378, 658, 904], "standard": [1, 50, 51, 52, 58, 63, 68, 70, 88, 94, 102, 103, 105, 111, 112, 116, 121, 134, 137, 139, 140, 141, 142, 150, 154, 163, 167, 172, 174, 176, 183, 190, 197, 198, 207, 215, 226, 227, 228, 238, 243, 254, 258, 259, 262, 263, 264, 265, 267, 304, 309, 334, 347, 359, 360, 364, 365, 366, 368, 369, 370, 372, 374, 375, 377, 378, 381, 384, 386, 390, 398, 400, 404, 406, 407, 408, 412, 414, 443, 461, 465, 469, 485, 494, 499, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 520, 522, 523, 528, 530, 533, 539, 550, 589, 593, 611, 634, 644, 645, 672, 673, 674, 675, 676, 678, 687, 689, 693, 788, 806, 821, 823, 841, 844, 845, 846, 847, 848, 850, 851, 852, 853, 854, 855, 856, 857, 858, 868, 873, 874, 877, 880, 881, 882, 884, 892, 893, 894, 895, 902, 904, 905, 930, 988, 991, 995, 996, 999, 1001, 1002, 1003, 1005, 1013, 1014, 1019, 1023, 1025, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1047, 1049], "standard_coef_": 1040, "standard_intercept_": 1040, "standard_norm": [355, 687], "standard_scal": 245, "standard_t": 122, "standardscal": [1, 45, 49, 67, 79, 82, 88, 91, 95, 103, 105, 116, 130, 154, 155, 163, 183, 190, 196, 198, 200, 202, 207, 222, 224, 234, 235, 243, 244, 245, 247, 258, 261, 271, 278, 287, 292, 293, 299, 306, 309, 313, 314, 316, 317, 318, 320, 321, 322, 323, 336, 339, 355, 361, 372, 374, 377, 381, 385, 405, 408, 425, 463, 464, 565, 676, 678, 864, 865, 868, 881, 895, 904, 905, 906, 907, 909, 910, 989, 996, 1003, 1009, 1013, 1014, 1016, 1031, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1045], "standardscalerifit": 247, "standpoint": 83, "stanford": [163, 369, 682, 683, 839, 842, 843, 897, 997], "stanislav": [1044, 1045], "stanlei": [1043, 1044, 1045], "stap": 1037, "stapl": 1033, "star": [70, 118, 156, 372], "stareh": 1040, "start": [0, 43, 46, 49, 51, 52, 58, 63, 86, 91, 97, 100, 106, 116, 123, 139, 144, 146, 160, 163, 172, 174, 184, 188, 191, 192, 198, 207, 208, 209, 214, 224, 226, 229, 230, 238, 240, 252, 258, 264, 272, 284, 317, 319, 322, 326, 347, 354, 355, 359, 360, 361, 372, 373, 374, 376, 377, 378, 386, 390, 400, 401, 404, 408, 409, 413, 414, 437, 439, 447, 451, 453, 536, 610, 617, 632, 645, 653, 659, 666, 667, 668, 676, 677, 678, 690, 694, 781, 782, 797, 798, 800, 803, 804, 814, 846, 847, 848, 850, 852, 860, 954, 982, 988, 995, 998, 999, 1003, 1004, 1013, 1023, 1032, 1034, 1037, 1039, 1041, 1042, 1043, 1044, 1045, 1049], "start_": 47, "start_bodi": 47, "start_d": 47, "start_idx": [51, 229], "start_reut": 47, "start_tim": [46, 49, 57, 141, 144, 154, 167, 198, 227], "start_titl": 47, "start_top": 47, "startstart": 392, "startswith": [52, 102, 227, 263, 297], "startup": 1023, "stat": [1, 45, 47, 49, 102, 111, 163, 167, 186, 261, 264, 272, 276, 289, 315, 325, 326, 369, 381, 385, 406, 471, 591, 594, 595, 597, 598, 599, 603, 604, 605, 608, 682, 683, 804, 812, 814, 912, 913, 950, 988, 995, 1009, 1036, 1038, 1042, 1049], "state": [37, 86, 90, 102, 104, 111, 149, 209, 237, 245, 250, 258, 270, 315, 355, 360, 361, 372, 374, 378, 380, 384, 386, 387, 403, 411, 412, 417, 437, 440, 444, 446, 451, 456, 472, 542, 588, 679, 803, 804, 812, 814, 816, 844, 845, 851, 899, 900, 933, 988, 995, 1001, 1004, 1011, 1023, 1031, 1033, 1035, 1037, 1039, 1042, 1045], "state_to_print": 373, "stateless": [102, 348, 361, 386, 412, 581, 582, 588, 638, 867, 868, 876, 923, 982, 1009, 1045, 1048], "statement": [183, 374, 377, 380, 384, 386, 409, 465], "static": [372, 374, 378, 380, 646, 647, 652, 653, 660, 661, 662, 663], "station": 172, "stationari": [171, 414, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625], "statist": [1, 47, 52, 112, 134, 137, 138, 148, 158, 162, 163, 180, 182, 183, 184, 185, 194, 196, 211, 256, 258, 261, 263, 266, 281, 283, 304, 310, 315, 355, 365, 367, 369, 378, 386, 402, 403, 404, 405, 406, 408, 409, 411, 413, 429, 466, 471, 491, 492, 514, 515, 516, 518, 520, 539, 551, 557, 558, 560, 603, 604, 605, 608, 627, 630, 634, 635, 644, 649, 656, 690, 694, 696, 710, 716, 721, 723, 724, 731, 743, 788, 800, 816, 818, 819, 820, 834, 851, 861, 862, 880, 881, 882, 884, 889, 892, 893, 895, 909, 912, 913, 973, 988, 989, 993, 995, 996, 998, 999, 1000, 1001, 1006, 1007, 1009, 1013, 1014, 1015, 1016, 1020, 1034, 1037, 1040, 1041, 1043, 1044, 1047, 1049], "statistician": [386, 884], "statisticmonthhourtempfeel_temphumiditywindspeedcountstrf64f64f64f64f64f64f64": 52, "statistics_": 630, "statlearnspars": [721, 723, 724], "statlib": 367, "statnikov": 999, "statsmodel": [995, 1018], "statu": [52, 132, 320, 366, 390, 494, 573, 844, 845, 941, 1025, 1047], "statweb": [682, 683], "staub": 1035, "staubda": 1032, "std": [43, 50, 51, 52, 72, 80, 83, 87, 94, 99, 110, 112, 113, 121, 122, 123, 141, 142, 143, 149, 154, 173, 176, 178, 179, 183, 191, 197, 215, 237, 262, 263, 264, 266, 267, 269, 272, 274, 278, 279, 310, 328, 339, 348, 355, 386, 404, 408, 411, 513, 605, 608, 829, 884, 895, 1009, 1037, 1041], "std_": [268, 1034], "std_auc": 274, "std_display_styl": [239, 266, 806, 823], "std_fit_tim": [140, 286, 800, 814], "std_i": 183, "std_precis": 262, "std_predict": 174, "std_predictions_gpr": 167, "std_recal": 262, "std_scaler": 321, "std_score": [348, 1042], "std_score_tim": [140, 265, 800, 814], "std_test_precis": 262, "std_test_recal": 262, "std_test_scor": [103, 105, 140, 162, 263, 264, 265, 272, 286, 469, 593, 800, 814, 1035, 1042], "std_time": 1035, "std_tpr": 274, "std_train_scor": [263, 800, 814, 1035], "std_y_pr": 172, "stderr": [51, 833], "stdin": 380, "stdout": [47, 120, 214, 833, 853, 861, 862], "stds_california": 179, "stds_diabet": 179, "steadi": [899, 900], "steelblu": [121, 122], "steep": [1, 168, 184, 273, 274, 404, 408, 414, 447, 453], "stef": [627, 989], "stefan": [1032, 1033, 1037, 1039, 1049], "stefani": [0, 362, 1042, 1044, 1045, 1046, 1047, 1048, 1049], "stefanini": 1043, "stefano": [1031, 1048, 1049], "steffen": [1047, 1048, 1049], "stehl": [1043, 1044], "stein": 1035, "steinbach": [404, 1044, 1046], "steinfurt": [1039, 1041], "steingold": [1036, 1037], "steinlei": [404, 705], "steinley2004": 705, "stella": [404, 449, 459], "stellalin7": 1044, "stem": [137, 144, 185, 201, 206, 255, 277, 408, 412, 991, 1001], "step": [52, 58, 63, 69, 77, 87, 88, 91, 100, 102, 103, 104, 105, 106, 112, 116, 123, 127, 134, 139, 142, 143, 144, 154, 155, 160, 161, 162, 169, 172, 183, 185, 207, 214, 224, 234, 235, 238, 244, 247, 255, 258, 262, 263, 265, 271, 273, 278, 284, 286, 287, 292, 299, 302, 306, 309, 310, 314, 317, 322, 323, 330, 332, 336, 348, 349, 351, 355, 359, 367, 370, 371, 372, 374, 375, 377, 380, 384, 386, 398, 400, 401, 402, 404, 406, 407, 409, 411, 412, 413, 439, 444, 446, 534, 535, 536, 537, 544, 561, 587, 588, 590, 592, 593, 596, 605, 609, 627, 644, 648, 666, 667, 669, 676, 678, 679, 680, 694, 700, 797, 798, 800, 803, 804, 814, 835, 836, 837, 838, 860, 861, 862, 864, 865, 867, 904, 905, 906, 907, 909, 910, 947, 948, 969, 973, 989, 995, 996, 998, 999, 1003, 1004, 1009, 1013, 1015, 1016, 1018, 1022, 1029, 1033, 1034, 1036, 1037, 1038, 1040, 1041, 1042, 1045, 1047, 1048, 1049], "stephan": [708, 1032, 1038, 1039, 1041], "stephani": 1040, "stephen": [528, 1023, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1042, 1049], "stepwis": [149, 635, 654, 655, 656, 682, 683, 995], "stern": [788, 999], "steve": [1031, 1033, 1037, 1042, 1044], "steven": [1031, 1032, 1034, 1036, 1037, 1042, 1044, 1045, 1047, 1048], "steward": 1036, "stewart": [1034, 1039, 1042, 1044, 1047, 1048], "stick": [48, 797, 998], "stijn": 1036, "stikhin": 1039, "still": [43, 52, 64, 68, 79, 86, 88, 90, 95, 113, 124, 126, 146, 149, 154, 167, 173, 182, 183, 185, 186, 190, 194, 197, 207, 209, 224, 238, 263, 267, 273, 277, 304, 315, 316, 319, 322, 347, 348, 355, 361, 366, 371, 372, 376, 377, 378, 380, 386, 404, 408, 411, 412, 415, 437, 441, 451, 471, 494, 627, 632, 635, 637, 658, 659, 702, 717, 756, 778, 781, 792, 793, 802, 803, 804, 817, 820, 882, 884, 904, 928, 953, 988, 989, 993, 995, 998, 999, 1002, 1005, 1007, 1014, 1015, 1017, 1019, 1022, 1023, 1029, 1031, 1034, 1035, 1037, 1038, 1039, 1042, 1043, 1044, 1045, 1047, 1048], "stimat": 63, "stine": [1037, 1038], "stochast": [1, 46, 91, 144, 145, 148, 180, 188, 189, 196, 228, 230, 233, 238, 290, 292, 293, 298, 301, 316, 335, 404, 409, 411, 459, 485, 494, 500, 501, 502, 512, 520, 534, 542, 557, 558, 603, 627, 631, 639, 658, 659, 668, 672, 674, 676, 677, 678, 679, 687, 688, 689, 690, 692, 830, 853, 860, 861, 862, 865, 874, 908, 947, 948, 972, 988, 1002, 1003, 1005, 1020, 1021, 1024, 1025, 1029, 1030, 1033, 1034, 1036, 1038, 1040], "stochastic_gradi": [1031, 1032, 1038], "stock": [42, 80, 85, 180, 226, 227, 404, 406, 451, 468, 469, 689, 996, 1020], "stogbauer": [606, 607], "stojanov": [1043, 1044], "stolbunov": 1034, "stone": [372, 912, 913, 1015], "stop": [43, 46, 51, 55, 79, 95, 133, 134, 140, 172, 174, 180, 184, 189, 196, 209, 308, 314, 323, 372, 374, 380, 381, 386, 404, 409, 411, 413, 437, 438, 440, 442, 444, 446, 449, 451, 459, 460, 468, 469, 475, 479, 480, 481, 487, 494, 506, 507, 530, 534, 535, 536, 537, 538, 541, 543, 544, 545, 551, 552, 555, 556, 557, 558, 559, 560, 562, 563, 587, 588, 590, 601, 617, 627, 644, 645, 646, 648, 649, 652, 656, 658, 659, 666, 667, 668, 669, 671, 676, 677, 678, 680, 691, 692, 695, 714, 750, 797, 798, 830, 861, 862, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 954, 972, 988, 995, 1003, 1004, 1014, 1015, 1019, 1020, 1021, 1023, 1025, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1043, 1044, 1045, 1046, 1049], "stop_n_inli": [671, 995], "stop_prob": 671, "stop_scor": [671, 995], "stop_word": [54, 57, 265, 347, 348, 412, 587, 588, 590], "stop_words_": 1047, "stopiter": 1041, "stopword": 486, "storag": [0, 349, 386, 658, 659, 666, 667, 668, 676, 677, 678, 904, 1002, 1014, 1032, 1037], "storch": 1038, "store": [0, 1, 68, 86, 87, 102, 104, 112, 160, 175, 188, 195, 198, 211, 227, 234, 244, 254, 258, 269, 273, 325, 349, 354, 359, 366, 367, 372, 374, 379, 380, 381, 384, 386, 398, 400, 405, 407, 409, 411, 412, 414, 415, 435, 437, 441, 443, 447, 454, 461, 466, 467, 470, 471, 472, 473, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 501, 506, 513, 532, 533, 539, 547, 548, 567, 568, 584, 588, 610, 611, 627, 631, 632, 635, 649, 650, 654, 660, 661, 662, 663, 666, 667, 673, 675, 676, 677, 678, 688, 689, 690, 692, 697, 698, 700, 701, 702, 781, 789, 797, 798, 800, 806, 814, 822, 823, 844, 845, 846, 847, 848, 850, 852, 853, 854, 855, 856, 859, 875, 882, 884, 885, 899, 900, 901, 930, 931, 957, 958, 969, 972, 984, 989, 991, 995, 1000, 1002, 1011, 1014, 1015, 1018, 1026, 1029, 1030, 1031, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "store_cent": [443, 1046], "store_covari": [70, 547, 548, 1034, 1036], "store_cv_result": [154, 183, 258, 673, 675, 822, 1047], "store_cv_valu": [673, 675, 1037, 1040, 1047], "store_precis": [69, 110, 466, 467, 470, 471, 472, 473], "stori": [182, 264, 281, 367, 998], "stork": 993, "stott": 1037, "stoyanov": [1037, 1038], "str": [47, 49, 52, 91, 93, 128, 130, 142, 161, 224, 243, 263, 264, 276, 284, 294, 334, 347, 366, 367, 381, 412, 415, 416, 420, 425, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 454, 461, 462, 463, 464, 465, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 513, 525, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 573, 575, 580, 581, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 610, 611, 617, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 692, 696, 697, 698, 699, 700, 702, 707, 709, 711, 713, 727, 729, 730, 732, 733, 738, 742, 771, 774, 778, 779, 780, 781, 782, 783, 784, 787, 789, 792, 793, 799, 800, 801, 802, 803, 804, 806, 807, 809, 811, 812, 814, 818, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 923, 925, 926, 929, 930, 931, 934, 937, 939, 941, 942, 944, 956, 957, 958, 960, 963, 982, 983, 986, 1044], "str_": [51, 273, 491, 498, 502, 508, 872, 1010], "strai": 1004, "straight": [125, 199, 261, 340], "straightforward": [305, 359, 371, 403, 409, 1023], "straka": 1041, "strateg": 387, "strategi": [1, 30, 43, 52, 63, 85, 87, 91, 94, 103, 143, 148, 149, 154, 160, 162, 178, 179, 180, 185, 194, 198, 201, 207, 214, 224, 235, 243, 245, 256, 258, 261, 263, 265, 267, 268, 269, 271, 272, 273, 274, 276, 278, 283, 298, 301, 303, 305, 306, 310, 311, 313, 314, 317, 344, 349, 358, 374, 378, 385, 386, 398, 403, 408, 411, 412, 413, 416, 434, 435, 436, 442, 444, 449, 459, 469, 500, 502, 510, 512, 520, 531, 536, 549, 550, 562, 563, 565, 566, 587, 588, 590, 591, 593, 601, 627, 628, 630, 645, 647, 651, 653, 655, 661, 663, 665, 673, 675, 691, 695, 704, 713, 732, 755, 757, 795, 800, 802, 803, 804, 806, 814, 817, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 837, 861, 862, 869, 874, 885, 899, 904, 906, 909, 912, 913, 914, 915, 969, 988, 989, 998, 999, 1000, 1001, 1002, 1003, 1005, 1007, 1009, 1013, 1014, 1015, 1020, 1025, 1032, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1047, 1048, 1049], "stratif": [801, 802, 808, 809, 816, 818, 819, 820, 969, 1038], "stratifi": [1, 44, 125, 141, 150, 159, 185, 221, 234, 243, 247, 258, 259, 263, 264, 267, 273, 287, 292, 293, 313, 386, 403, 549, 557, 565, 566, 601, 659, 666, 668, 676, 799, 800, 803, 804, 806, 814, 815, 816, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 838, 853, 861, 969, 999, 1002, 1034, 1035, 1036, 1038, 1039, 1042], "stratifiedgroupkfold": [1, 259, 1042], "stratifiedkfold": [1, 162, 251, 259, 270, 274, 328, 408, 434, 565, 566, 593, 601, 659, 673, 800, 801, 803, 804, 805, 806, 808, 810, 814, 818, 820, 823, 824, 825, 826, 827, 828, 829, 831, 885, 1030, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1042], "stratifiedshufflesplit": [1, 259, 336, 408, 1029, 1030, 1035, 1036, 1042], "stream": [47, 404, 409, 412, 459, 588, 873, 874, 884, 991, 1037, 1040], "stream_reuters_docu": 47, "streamhandl": 1040, "streamlin": [0, 995], "street": [154, 163, 369], "strehl": 404, "strength": [51, 154, 174, 197, 207, 211, 212, 265, 277, 313, 359, 407, 411, 443, 565, 566, 643, 648, 649, 652, 658, 659, 669, 672, 673, 674, 675, 676, 678, 680, 687, 783, 861, 862, 904, 905, 909, 910, 988, 995, 1002, 1005, 1013, 1014], "strengthen": [384, 1017], "stress": [690, 694, 996, 1044, 1049], "stress_": 690, "stretch": [230, 253], "stretched_gaussian": 253, "strickland": 1035, "strict": [265, 355, 370, 386, 400, 409, 501, 533, 587, 588, 590, 995, 1029, 1038, 1041, 1047], "stricter": 178, "strictli": [64, 207, 224, 240, 304, 319, 348, 377, 386, 402, 407, 409, 411, 412, 506, 507, 533, 539, 542, 559, 560, 587, 590, 601, 642, 670, 671, 673, 675, 695, 700, 709, 739, 766, 800, 803, 804, 810, 814, 827, 853, 880, 892, 896, 897, 899, 900, 904, 905, 909, 910, 946, 988, 990, 995, 999, 1009, 1013, 1030, 1040, 1045], "striebel": [1035, 1036], "strife": 996, "strike": [144, 184, 211], "string": [1, 47, 103, 142, 175, 224, 235, 258, 268, 316, 321, 349, 359, 366, 367, 372, 373, 374, 378, 386, 400, 405, 408, 411, 412, 413, 415, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 454, 461, 462, 464, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 484, 486, 487, 494, 503, 525, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 580, 581, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 610, 611, 617, 620, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 699, 702, 709, 711, 719, 732, 762, 765, 771, 774, 778, 779, 780, 781, 792, 793, 797, 798, 800, 803, 804, 806, 814, 822, 823, 826, 827, 828, 829, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 921, 928, 930, 931, 938, 939, 940, 964, 982, 983, 988, 989, 1012, 1014, 1018, 1029, 1030, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048], "strip": [54, 224, 348, 359, 366, 367, 494], "strip_acc": [265, 587, 588, 590], "strip_accents_unicod": 1039, "stripe": 307, "stripplot": 183, "strive": [371, 387, 1023], "strong": [32, 43, 52, 87, 167, 180, 182, 183, 189, 202, 205, 211, 212, 213, 239, 270, 283, 311, 343, 402, 409, 411, 522, 649, 672, 992, 993, 995, 996, 998, 1006, 1014, 1020], "stronger": [265, 643, 652, 658, 659, 672, 673, 674, 675, 676, 678, 687], "strongest": [55, 202], "strongli": [62, 64, 66, 113, 116, 123, 143, 147, 183, 193, 221, 240, 347, 372, 389, 390, 402, 411, 658, 736, 795, 995, 996, 1025, 1038, 1045], "stroudsburg": [901, 1012], "strubel": 1042, "struct": [386, 1032], "structur": [0, 1, 42, 48, 52, 53, 54, 55, 58, 59, 71, 75, 76, 78, 79, 80, 85, 86, 87, 88, 89, 95, 99, 113, 130, 150, 166, 180, 226, 227, 230, 235, 240, 255, 259, 270, 289, 309, 314, 317, 324, 336, 340, 350, 351, 352, 359, 367, 369, 372, 374, 377, 384, 386, 387, 390, 400, 401, 404, 406, 407, 408, 409, 411, 412, 413, 414, 438, 439, 442, 443, 447, 448, 449, 450, 451, 454, 459, 460, 468, 469, 494, 501, 502, 506, 509, 511, 512, 519, 528, 533, 539, 542, 561, 610, 611, 612, 616, 617, 618, 689, 696, 713, 830, 852, 857, 884, 896, 897, 900, 912, 913, 914, 915, 918, 947, 948, 957, 969, 972, 996, 998, 999, 1002, 1004, 1005, 1009, 1012, 1015, 1018, 1019, 1020, 1029, 1030, 1032, 1033, 1035, 1039], "struggl": [371, 387, 404], "stuck": [94, 692, 996], "student": [0, 122, 264, 996, 1019, 1023], "studi": [43, 64, 93, 146, 207, 224, 267, 270, 271, 278, 347, 367, 369, 408, 413, 696, 708, 758, 759, 829, 997, 999, 1013], "studio": [370, 1023], "study_135": 366, "study_14": 366, "study_34": 366, "study_98": 366, "study_99": 366, "stuff": 1023, "stump": [136, 411, 557, 1040], "stupp": [1035, 1036], "stupperich": 1041, "sturla": 1031, "style": [112, 146, 198, 214, 224, 268, 372, 379, 404, 412, 440, 444, 456, 700, 806, 823, 930, 931, 944, 1029, 1032, 1043, 1048], "st\u00e9fan": 373, "st\u00e9phan": 1039, "st\u00e9phane": [1038, 1039, 1043, 1044], "su": [721, 723, 724], "sub": [47, 72, 86, 88, 90, 93, 102, 129, 240, 242, 249, 315, 325, 326, 333, 336, 344, 367, 372, 374, 378, 386, 403, 405, 411, 412, 434, 440, 441, 444, 446, 462, 479, 480, 481, 531, 534, 536, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 589, 596, 610, 611, 627, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 690, 799, 801, 802, 807, 809, 818, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 849, 851, 854, 855, 861, 862, 863, 864, 867, 869, 870, 871, 876, 883, 884, 899, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 921, 958, 995, 999, 1013, 1039, 1043, 1045, 1046], "sub_sampl": 534, "subclass": [132, 374, 414, 572, 966, 1034, 1037, 1042, 1046], "subclust": [404, 439], "subcluster_centers_": [77, 439], "subcluster_labels_": 439, "subcompon": [120, 409], "subdirectori": 372, "subdivid": [367, 414], "subestim": 374, "subestimator__c": 374, "subestimator__class_weight": 374, "subestimator__du": 374, "subestimator__fit_intercept": 374, "subestimator__intercept_sc": 374, "subestimator__l1_ratio": 374, "subestimator__max_it": 374, "subestimator__multi_class": 374, "subestimator__n_job": 374, "subestimator__penalti": 374, "subestimator__random_st": 374, "subestimator__solv": 374, "subestimator__tol": 374, "subestimator__verbos": 374, "subestimator__warm_start": 374, "subexpress": 52, "subfold": [1, 370, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 501, 1042], "subgraph": 401, "subhash": 1043, "subhodeep": [1029, 1030, 1031], "subi": [1038, 1039, 1044], "subject": [15, 102, 151, 255, 267, 347, 367, 372, 374, 376, 384, 386, 387, 402, 406, 408, 409, 493, 658, 659, 685, 822, 867, 990, 995, 1014, 1017, 1038, 1039, 1042, 1044], "subject_body_extractor": 102, "subject_body_transform": 102, "subjectbodi": 102, "subjectbodyextractor": 102, "sublinear": [409, 589, 590], "sublinear_tf": [265, 347, 409, 412, 589, 590], "submatric": 401, "submatrix": [401, 419, 448, 450], "submiss": 372, "submit": [369, 370, 371, 374, 375, 376, 377, 380, 386, 387, 390], "submitt": 371, "submodel": 408, "submodul": [376, 991, 997, 1029], "subobject": [418, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 461, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 797, 798, 799, 800, 803, 804, 814, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915], "suboptim": [408, 700, 702, 782, 1002, 1037, 1045], "subpackag": [372, 376, 1033, 1038], "subplot": [43, 44, 45, 47, 48, 49, 50, 52, 53, 54, 66, 67, 68, 70, 74, 78, 79, 83, 84, 86, 87, 88, 89, 90, 93, 95, 98, 99, 105, 107, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 125, 129, 130, 134, 136, 137, 139, 140, 141, 142, 143, 144, 147, 149, 151, 152, 154, 155, 158, 169, 171, 176, 178, 179, 183, 184, 186, 188, 191, 200, 201, 203, 204, 205, 206, 207, 208, 209, 211, 214, 219, 220, 222, 224, 226, 227, 230, 231, 233, 234, 236, 238, 239, 241, 242, 243, 244, 249, 250, 251, 252, 254, 255, 258, 259, 260, 261, 263, 264, 266, 267, 269, 270, 271, 273, 274, 275, 277, 278, 279, 283, 284, 286, 287, 288, 289, 292, 293, 295, 296, 297, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 313, 317, 318, 328, 330, 333, 334, 335, 336, 340, 342, 343, 344, 345, 347, 348, 349, 351, 352, 368, 379], "subplot_kw": [226, 288], "subplot_spec": 379, "subplot_titl": 140, "subplots_adjust": [45, 46, 53, 54, 74, 77, 79, 83, 84, 87, 95, 97, 111, 113, 118, 122, 123, 129, 136, 137, 154, 183, 206, 207, 221, 224, 233, 241, 249, 251, 252, 255, 259, 275, 289, 297, 299, 302, 306, 315, 326, 333, 336], "subpopul": [223, 679, 995], "subproblem": 1034, "subrahmanyam": [1029, 1032], "subramaniam": [1044, 1045, 1046], "subramaniyan": 1041, "subramanyam": 1036, "subrat": 1041, "subrat93": 1041, "subsampl": [129, 145, 148, 156, 184, 223, 260, 311, 315, 455, 557, 558, 559, 560, 561, 632, 679, 701, 803, 804, 830, 869, 881, 893, 926, 936, 991, 995, 1019, 1029, 1039, 1043, 1045, 1046, 1047, 1049], "subscrib": 1027, "subscript": [360, 1042], "subsect": [25, 360, 372], "subsequ": [46, 68, 91, 107, 123, 134, 160, 196, 209, 266, 269, 284, 286, 336, 355, 372, 374, 376, 378, 386, 400, 404, 405, 411, 414, 434, 494, 506, 551, 552, 557, 559, 560, 666, 668, 676, 698, 727, 803, 804, 832, 833, 836, 839, 840, 841, 842, 843, 861, 879, 883, 989, 998, 1000, 1038, 1039, 1043, 1045, 1047, 1048, 1049], "subset": [1, 46, 57, 58, 63, 64, 68, 102, 103, 111, 112, 141, 142, 143, 144, 160, 163, 184, 186, 198, 205, 208, 221, 222, 223, 224, 236, 238, 242, 243, 258, 262, 265, 267, 273, 274, 276, 281, 309, 310, 315, 325, 329, 347, 348, 349, 355, 367, 372, 380, 384, 386, 401, 402, 404, 405, 408, 411, 412, 414, 421, 434, 446, 461, 463, 464, 466, 485, 486, 490, 491, 495, 506, 547, 548, 549, 551, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 567, 601, 610, 629, 639, 640, 641, 642, 651, 655, 658, 666, 667, 668, 671, 674, 675, 676, 677, 678, 679, 697, 703, 704, 711, 713, 716, 718, 731, 734, 755, 757, 793, 796, 799, 802, 822, 828, 830, 832, 833, 834, 835, 839, 840, 841, 842, 843, 846, 851, 854, 861, 870, 899, 900, 904, 906, 909, 912, 914, 926, 968, 988, 995, 999, 1000, 1010, 1012, 1014, 1015, 1032, 1037, 1038, 1040, 1042, 1047, 1048], "subset_featur": 103, "subset_label": 224, "subsidi": 183, "subspac": [127, 407, 411, 449, 513, 553, 554, 691, 695, 948, 993, 1002, 1005, 1011, 1023], "substanti": [286, 290, 291, 305, 372, 850, 1005, 1033, 1036], "substitut": [395, 982, 1035], "subtl": [345, 355, 998, 1019], "subtleti": 1025, "subtract": [172, 183, 243, 407, 409, 440, 444, 456, 532, 644, 645, 1036, 1046], "subtre": [555, 556, 557, 558, 562, 563, 912, 913, 914, 915, 1015], "subwindow": 1015, "succe": [127, 149, 194, 278], "succeed": 372, "success": [1, 83, 158, 180, 256, 268, 271, 272, 355, 399, 404, 408, 409, 411, 513, 562, 578, 800, 803, 804, 821, 909, 1002, 1020, 1023, 1025, 1041, 1049], "successfulli": [43, 53, 308, 371, 376, 398, 404, 412, 1013], "successor": [447, 453, 1015, 1018], "suchak": 1042, "sudo": [370, 390], "suen": 1003, "suffer": [116, 185, 284, 304, 348, 359, 404, 411, 542, 763, 994, 995, 999, 1002, 1038], "suffic": [90, 91, 374], "suffici": [1, 64, 88, 154, 214, 279, 336, 359, 386, 404, 413, 530, 657, 682, 683, 816, 819, 820, 1000, 1002, 1019, 1038, 1044, 1045], "suffix": [390, 827, 999, 1039], "suganthan": 369, "sugar": [163, 369], "suggest": [111, 123, 137, 141, 183, 186, 264, 336, 359, 371, 372, 379, 386, 408, 409, 411, 466, 471, 563, 645, 829, 993, 995, 996, 1004, 1007, 1014, 1033, 1040, 1043, 1046, 1049], "suh": 1037, "suha": 1047, "suit": [58, 120, 152, 183, 207, 208, 233, 254, 316, 317, 319, 322, 347, 360, 372, 374, 377, 378, 380, 390, 392, 398, 407, 409, 411, 447, 449, 501, 677, 841, 885, 941, 988, 991, 996, 999, 1001, 1002, 1013, 1018, 1019, 1023, 1036, 1043], "suitabl": [138, 146, 194, 195, 201, 211, 300, 349, 366, 367, 378, 381, 398, 404, 409, 412, 449, 459, 465, 484, 503, 506, 627, 635, 839, 840, 843, 878, 879, 902, 965, 968, 993, 995, 998, 1009, 1011, 1013, 1018, 1043, 1044], "sullivan": [1032, 1033, 1034], "sultan": 1043, "sum": [1, 30, 47, 55, 57, 63, 94, 112, 118, 123, 129, 145, 146, 155, 159, 163, 175, 183, 192, 207, 211, 221, 224, 227, 229, 243, 258, 263, 273, 284, 291, 294, 317, 321, 329, 340, 341, 343, 347, 348, 349, 354, 369, 378, 386, 401, 402, 404, 406, 407, 409, 410, 411, 412, 414, 427, 439, 440, 444, 446, 456, 461, 462, 479, 480, 481, 513, 518, 521, 529, 532, 534, 535, 539, 542, 543, 544, 547, 548, 550, 552, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 566, 567, 568, 589, 590, 611, 613, 623, 625, 635, 641, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 672, 673, 676, 677, 678, 679, 681, 684, 690, 694, 696, 699, 710, 712, 719, 726, 741, 756, 758, 759, 763, 788, 832, 833, 837, 838, 847, 851, 855, 862, 863, 883, 884, 904, 905, 907, 910, 912, 913, 914, 915, 950, 969, 973, 979, 984, 995, 999, 1000, 1001, 1002, 1014, 1015, 1032, 1033, 1035, 1037, 1038, 1040, 1045, 1046, 1049], "sum_": [264, 273, 343, 401, 402, 404, 409, 410, 411, 536, 538, 545, 696, 709, 755, 993, 995, 996, 999, 1001, 1003, 1004, 1006, 1007, 1009, 1013, 1014, 1015], "sum_gradi": 411, "sum_h": 1004, "sum_hessian": 411, "sum_i": [316, 411, 646, 647, 652, 653, 660, 661, 662, 663, 681, 684, 990, 991, 995, 997, 999, 1004], "sum_j": [646, 647, 652, 653, 660, 661, 662, 663, 681, 684, 995, 999, 1004], "sum_k": [411, 547, 1015], "sum_m": 411, "sum_n": [271, 707, 999], "sum_n_compon": [461, 863], "sum_over_featur": [1029, 1044], "sum_weight": 979, "sumit": 1043, "summar": [207, 255, 271, 273, 349, 372, 374, 389, 411, 519, 658, 694, 706, 707, 995, 996, 999, 1005, 1025], "summari": [52, 163, 263, 317, 354, 355, 369, 384, 559, 560, 692, 713, 788, 917, 997, 1000, 1018, 1048], "summaris": [235, 314], "summary_df": 263, "summat": [1001, 1003], "summer": [0, 43, 52, 172, 1029], "sun": [43, 149, 184, 1037, 1042, 1043], "sundai": 43, "sundaramahalingam": 1046, "sung": 1040, "sunglok": 995, "sunita": 783, "sunitha": 1041, "sunmi": 1040, "super": [57, 62, 64, 374, 412, 1037], "superflu": 409, "superimpos": 409, "superior": 411, "superposit": 194, "supersed": [371, 1034], "superset": [408, 821, 999], "supervis": [1, 27, 32, 34, 38, 57, 62, 64, 67, 72, 82, 87, 91, 116, 128, 139, 142, 149, 152, 169, 227, 238, 241, 251, 264, 293, 299, 306, 315, 328, 332, 333, 336, 340, 344, 348, 349, 359, 367, 374, 385, 386, 402, 404, 407, 408, 409, 411, 412, 414, 434, 436, 461, 485, 501, 502, 551, 587, 589, 592, 593, 634, 676, 729, 801, 802, 805, 807, 808, 809, 810, 815, 816, 817, 818, 819, 820, 824, 825, 826, 827, 829, 830, 853, 863, 864, 868, 878, 885, 899, 900, 901, 909, 993, 996, 999, 1001, 1002, 1005, 1009, 1010, 1014, 1015, 1016, 1018, 1020, 1022, 1025, 1029, 1035, 1041], "supp": 380, "suppli": [149, 384, 404, 646, 930, 931, 1002, 1023, 1033, 1035, 1037, 1042], "support": [0, 1, 39, 43, 45, 46, 47, 48, 49, 61, 68, 80, 102, 103, 104, 133, 138, 153, 154, 159, 160, 172, 184, 208, 216, 217, 218, 224, 238, 239, 240, 246, 257, 262, 269, 271, 281, 284, 302, 304, 308, 317, 321, 325, 326, 329, 330, 332, 333, 336, 337, 338, 339, 340, 341, 343, 359, 360, 361, 366, 370, 372, 374, 376, 377, 378, 379, 381, 382, 385, 386, 387, 398, 404, 408, 409, 412, 413, 414, 434, 437, 447, 449, 450, 461, 463, 464, 466, 471, 484, 494, 510, 536, 538, 539, 542, 545, 547, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 567, 568, 580, 581, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 610, 611, 613, 614, 615, 617, 619, 620, 622, 623, 625, 627, 631, 632, 633, 643, 645, 657, 658, 659, 670, 671, 672, 674, 675, 676, 677, 678, 687, 690, 694, 697, 699, 707, 713, 729, 730, 738, 743, 778, 779, 780, 783, 784, 787, 788, 800, 803, 804, 806, 814, 822, 827, 828, 836, 837, 842, 844, 845, 848, 850, 856, 864, 865, 869, 875, 877, 878, 880, 884, 892, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 920, 921, 923, 924, 926, 936, 943, 986, 988, 989, 991, 992, 993, 995, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1009, 1010, 1013, 1018, 1019, 1020, 1021, 1023, 1025, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "support_": [239, 342, 466, 471, 592, 593, 601, 906, 907, 908, 909, 910, 1014], "support_fract": [48, 466, 471], "support_reweight": [466, 471], "support_vector": [334, 340], "support_vector_indic": 334, "support_vectors_": [46, 49, 337, 340, 341, 906, 907, 908, 909, 910, 1014], "suppos": [240, 267, 325, 359, 360, 372, 376, 378, 406, 411, 412, 413, 555, 559, 562, 658, 659, 666, 668, 674, 675, 676, 850, 904, 906, 909, 912, 914, 936, 1003, 1038, 1040, 1046], "suppress": [183, 359, 380, 692, 1002, 1036], "suptitl": [43, 44, 52, 54, 68, 69, 70, 74, 75, 83, 86, 90, 93, 100, 107, 120, 123, 130, 134, 142, 143, 151, 154, 176, 183, 184, 186, 203, 205, 206, 221, 222, 226, 227, 228, 242, 252, 258, 260, 277, 278, 302, 304, 306, 313, 315, 325, 326, 330, 342, 343, 352], "surac": 1039, "sure": [1, 63, 89, 202, 213, 229, 240, 241, 258, 263, 353, 355, 359, 360, 366, 370, 371, 372, 373, 374, 376, 377, 380, 384, 390, 402, 405, 412, 521, 649, 930, 931, 941, 953, 984, 989, 996, 1013, 1018, 1019, 1036, 1037, 1039, 1044, 1048, 1049], "suresh": 1043, "surf": 184, "surfac": [124, 126, 128, 133, 134, 135, 136, 138, 169, 180, 215, 270, 332, 333, 350, 351, 353, 354, 411, 502, 551, 555, 562, 631, 764, 912, 918, 993, 998, 1013, 1014, 1015, 1020], "surface_": [66, 155, 631], "surgan12": 1038, "surpass": [134, 340, 861, 862], "surplu": 408, "surpris": [86, 184, 370, 995, 1018, 1031], "surprisingli": [224, 367, 412], "surrend": 57, "surrog": 1023, "surround": [241, 372, 850, 1005], "survei": [183, 407], "surviv": [103, 185, 988, 1018], "surya": [1042, 1043], "suscept": 398, "susik": 1033, "suspect": 43, "suspici": 367, "sustain": 0, "sutherland": [1031, 1033, 1034, 1036, 1037, 1038, 1039], "sutiono": 1040, "suzuki": [1040, 1041], "sv": 1014, "sv_ind": 239, "sv_ratio": 239, "svc": [1, 45, 62, 64, 67, 68, 102, 106, 144, 168, 180, 188, 200, 222, 238, 241, 245, 257, 262, 264, 266, 269, 270, 271, 274, 275, 306, 308, 309, 313, 315, 328, 330, 331, 332, 333, 334, 336, 337, 338, 339, 341, 344, 345, 347, 359, 378, 386, 402, 405, 408, 430, 431, 433, 434, 465, 513, 553, 697, 698, 700, 702, 800, 817, 831, 833, 864, 901, 902, 904, 906, 907, 910, 986, 988, 994, 997, 999, 1000, 1009, 1020, 1029, 1030, 1031, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1047, 1048], "svc__c": [306, 864], "svc_disp": [246, 313], "svc_isoton": 62, "svc_sigmoid": 62, "svcifit": 246, "svcsvc": [262, 264, 315], "svd": [1, 70, 127, 152, 227, 348, 381, 400, 407, 416, 448, 450, 479, 480, 482, 519, 530, 531, 532, 533, 537, 538, 539, 542, 544, 547, 548, 664, 672, 673, 674, 685, 686, 687, 863, 948, 993, 1031, 1035, 1036, 1042, 1044, 1047, 1049], "svd__n_compon": 863, "svd_lapack_driv": 948, "svd_method": [57, 448, 450, 530, 1032], "svd_solver": [45, 102, 104, 120, 127, 245, 263, 320, 321, 400, 409, 533, 539, 1035, 1047], "sven": [1043, 1044], "svg": [0, 392], "svm": [1, 42, 46, 48, 49, 50, 54, 62, 64, 67, 68, 102, 104, 106, 120, 132, 142, 152, 157, 162, 163, 169, 171, 175, 180, 189, 190, 192, 202, 215, 216, 217, 218, 219, 233, 239, 240, 241, 242, 245, 246, 257, 261, 262, 264, 266, 267, 269, 270, 271, 272, 274, 275, 279, 289, 290, 295, 296, 299, 301, 306, 307, 313, 315, 324, 328, 329, 331, 334, 342, 343, 347, 359, 367, 378, 386, 405, 408, 409, 413, 430, 431, 433, 434, 492, 502, 510, 513, 539, 553, 554, 561, 565, 566, 576, 592, 593, 598, 599, 604, 631, 639, 643, 668, 676, 677, 678, 689, 697, 698, 700, 702, 713, 730, 735, 742, 761, 800, 814, 820, 826, 827, 830, 832, 833, 850, 864, 865, 877, 879, 884, 900, 901, 904, 905, 906, 907, 908, 909, 910, 911, 986, 988, 991, 994, 996, 997, 999, 1000, 1004, 1012, 1014, 1016, 1020, 1021, 1025, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1048], "svm1": 405, "svm2": 405, "svm__c": 106, "svm_weight": 159, "svm_weights_select": 159, "svmlight": [1, 365, 484, 506, 507, 1025, 1029, 1030, 1036, 1038], "svmlight_file_test": 507, "svmlight_file_train": 507, "svmsgd": 1013, "svr": [1, 46, 49, 180, 232, 313, 331, 359, 392, 430, 431, 433, 554, 565, 566, 592, 593, 643, 678, 800, 806, 905, 907, 909, 992, 1020, 1029, 1031, 1033, 1034, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1047], "svr_fit": 239, "svr_lin": 342, "svr_poli": 342, "svr_predict": 239, "svr_rbf": 342, "sw": 284, "sw_test": [61, 314], "sw_train": [61, 314], "swap": [1, 404, 409, 716, 736, 977, 978, 1029], "swapnil": 1043, "swart": 55, "sweep": 860, "swier": [1040, 1041], "swiss": [1, 100, 180, 225, 226, 231, 404, 528, 692, 693, 996, 1020, 1043], "switch": [358, 400, 678, 704, 717, 737, 755, 757, 795, 844, 845, 947, 948, 999, 1002, 1025, 1029, 1049], "swpeas": 1042, "swu": 1033, "sy": [47, 51, 57, 214, 237, 284, 329, 349, 367, 384, 617], "syd": 1044, "sydnei": 0, "syhw": [1030, 1031], "sylvain": [0, 362, 1033, 1038, 1039, 1040, 1041, 1042, 1043, 1048, 1049], "sylvainlan": [1037, 1038, 1039, 1040, 1041], "symbol": [51, 349, 360, 374, 378, 406, 412, 497, 581, 587, 588, 590, 916, 918, 1018], "symbol_dict": 51, "symlink": 376, "symlognorm": [190, 194], "symmetr": [1, 63, 79, 146, 186, 209, 229, 386, 402, 404, 449, 459, 460, 471, 517, 525, 527, 690, 694, 695, 704, 705, 715, 716, 717, 722, 724, 728, 736, 737, 755, 757, 763, 785, 795, 797, 798, 984, 988, 995, 999, 1002, 1045], "symmetri": [163, 369, 699, 877, 880, 892, 997], "symmetric_arrai": 984, "symposium": [163, 369, 404, 457], "symptomat": 258, "sync": 374, "synchron": [372, 376, 412], "syndrom": 366, "synonym": [386, 846, 847, 848, 854, 855, 856], "synonymi": 409, "syntax": [360, 372, 377, 380, 405, 465, 863, 864, 902, 988, 1040, 1042], "synthet": [43, 53, 62, 64, 67, 70, 72, 77, 82, 141, 146, 152, 167, 172, 174, 184, 199, 201, 205, 209, 223, 299, 306, 343, 345, 355, 359, 365, 375, 385, 387, 404, 405, 406, 413, 658, 659, 904, 905, 911, 993, 1035], "synthetic_feature_weight": [658, 659], "syonekura": 1037, "system": [44, 125, 194, 264, 271, 321, 355, 359, 360, 361, 367, 369, 372, 373, 374, 375, 376, 380, 384, 390, 398, 404, 409, 411, 415, 441, 468, 469, 475, 533, 537, 541, 548, 639, 645, 650, 651, 654, 655, 656, 682, 683, 726, 756, 769, 797, 853, 899, 900, 995, 999, 1002, 1011, 1018, 1019, 1023, 1029, 1037, 1038], "systemat": [43, 149, 264, 408, 712, 728, 920, 922, 999, 1044], "sysuresh": 1043, "szabo": [1031, 1032], "szepieniec": 1035, "szlam": [409, 947, 948], "szpak": [1036, 1039], "szyma\u0144ski": [1037, 1038], "s\u00e1nchez": 1041, "s\u00e3o": 1047, "s\u00e4ger": [1032, 1035], "s\u00e9bastien": [1023, 1035, 1037], "s\u00e9rgio": 1048, "s\u00f6nke": 1039, "s\u00f8ren": [1046, 1048], "s\u0142apek": 1040, "t": [1, 15, 47, 50, 51, 55, 63, 64, 70, 74, 75, 77, 78, 79, 85, 87, 91, 102, 104, 109, 110, 111, 113, 115, 118, 121, 122, 127, 129, 130, 134, 137, 138, 145, 146, 147, 148, 149, 153, 154, 163, 168, 170, 171, 172, 175, 176, 180, 183, 184, 185, 186, 190, 192, 194, 202, 203, 205, 206, 207, 208, 224, 225, 227, 228, 229, 230, 240, 241, 250, 253, 255, 258, 263, 264, 277, 278, 283, 284, 297, 301, 313, 316, 317, 319, 325, 326, 328, 332, 333, 336, 337, 341, 347, 348, 349, 353, 354, 355, 359, 360, 366, 367, 369, 372, 374, 376, 378, 380, 385, 386, 390, 395, 398, 402, 403, 404, 405, 407, 408, 409, 411, 412, 413, 417, 421, 424, 427, 429, 434, 444, 445, 447, 453, 460, 462, 465, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 493, 494, 511, 512, 513, 517, 518, 523, 528, 530, 532, 539, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 565, 566, 567, 568, 589, 590, 593, 606, 607, 610, 611, 627, 628, 630, 631, 632, 633, 635, 639, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 692, 695, 696, 704, 710, 716, 717, 726, 736, 737, 755, 756, 757, 767, 788, 789, 794, 795, 799, 800, 803, 804, 814, 822, 828, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 850, 851, 854, 855, 860, 861, 862, 870, 873, 874, 875, 877, 878, 884, 885, 897, 899, 900, 904, 905, 906, 907, 909, 910, 912, 913, 914, 915, 923, 948, 949, 964, 988, 991, 993, 995, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1009, 1013, 1014, 1015, 1020, 1024, 1025, 1030, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "t0": [45, 47, 50, 54, 55, 74, 77, 79, 80, 83, 85, 91, 95, 97, 123, 194, 195, 221, 222, 223, 228, 231, 233, 237, 239, 265, 320, 347, 348, 349, 676, 677, 678], "t1": [79, 80, 95, 221, 228, 231, 233], "t15h": 1036, "t64": 258, "t_": [666, 667, 668, 676, 677, 678, 861, 862, 1013], "t_0": 1013, "t_batch": 97, "t_i": 1001, "t_k": [411, 999, 1015], "t_m": 1015, "t_mini_batch": [77, 97], "t_p": 271, "t_post": 264, "t_sne": [226, 1037], "t_stat": 264, "t_stat_uncorrect": 264, "t_t": 1015, "taa": 175, "taac": 175, "tab": [46, 48, 70, 86, 111, 134, 146, 149, 151, 154, 155, 167, 172, 174, 196, 198, 205, 258, 314, 320, 405, 1036], "tab10": [238, 254, 631], "tab20b": 43, "taba": 1048, "tabea": [1044, 1045], "tabibian": 1035, "tabl": [91, 224, 263, 264, 372, 373, 381, 404, 412, 581, 658, 680, 800, 814, 841, 965, 995, 999, 1000, 1005, 1018, 1030, 1049], "tabular": [43, 52, 184, 374, 411, 1007, 1018], "tacit": 386, "tacitli": 1031, "tackl": [147, 264, 360, 372, 404, 841, 1001, 1023], "tadej": [1030, 1031], "tae": 1041, "taehoon": [1036, 1037], "taemin": 995, "tag": [1, 47, 82, 103, 233, 322, 327, 366, 371, 375, 376, 380, 384, 386, 400, 412, 421, 422, 423, 426, 427, 494, 832, 920, 921, 922, 924, 925, 953, 982, 987, 1019, 1022, 1034, 1038, 1039, 1040, 1043, 1044, 1045, 1046, 1048, 1049], "tags_orig": 374, "tahar": [1036, 1049], "tahiri": 1041, "taifi": 1035, "tail": [52, 146, 179, 183, 207, 209, 264, 304, 519, 522, 995], "tail_strength": [321, 519, 522], "takanori": 1037, "take": [1, 44, 47, 52, 58, 66, 80, 86, 88, 90, 99, 107, 111, 118, 120, 134, 142, 167, 169, 172, 176, 183, 188, 211, 214, 215, 230, 240, 251, 252, 258, 259, 265, 269, 273, 274, 283, 284, 287, 290, 291, 292, 294, 295, 304, 317, 321, 322, 328, 332, 333, 336, 348, 349, 352, 359, 360, 361, 366, 367, 370, 372, 374, 376, 377, 378, 379, 380, 384, 386, 387, 395, 400, 402, 403, 404, 405, 407, 408, 409, 411, 412, 413, 414, 416, 434, 440, 443, 444, 446, 447, 449, 454, 455, 456, 458, 460, 465, 466, 517, 531, 536, 537, 538, 544, 545, 580, 591, 594, 595, 597, 598, 599, 609, 610, 611, 616, 620, 621, 624, 632, 643, 649, 671, 673, 674, 675, 676, 679, 691, 692, 699, 705, 707, 712, 719, 729, 730, 738, 743, 756, 771, 774, 778, 779, 780, 781, 783, 784, 787, 788, 800, 801, 805, 806, 814, 818, 828, 846, 847, 848, 850, 852, 853, 854, 855, 856, 868, 878, 899, 900, 902, 904, 905, 906, 907, 908, 909, 910, 921, 934, 943, 988, 991, 995, 996, 998, 999, 1000, 1002, 1004, 1005, 1006, 1009, 1014, 1015, 1023, 1026, 1029, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049], "takeawai": [263, 283], "taken": [37, 43, 46, 67, 77, 86, 88, 148, 163, 172, 183, 237, 238, 252, 270, 281, 306, 367, 369, 371, 372, 376, 386, 404, 408, 412, 416, 437, 531, 559, 560, 582, 583, 631, 646, 647, 650, 652, 653, 654, 658, 659, 660, 661, 662, 663, 677, 679, 681, 684, 695, 877, 878, 898, 901, 907, 908, 959, 999, 1001, 1009, 1011, 1035, 1038, 1041, 1042], "takeshi": [1037, 1042, 1043, 1044], "takeuchi": 367, "takingitcasu": [1037, 1038], "talbot": 269, "talgatomarov": 1040, "talk": [57, 102, 265, 347, 348, 349, 367, 384, 386, 398, 1023, 1025], "talli": 410, "tallott": 1037, "talwalkar": 988, "tamara": [367, 1046, 1048], "tamer": 1044, "tami": 91, "tamir": [1040, 1043], "tamirlan1": 1040, "tamper": 47, "tampermonkei": 380, "tan": [861, 862, 1003, 1036], "tandfonlin": 404, "tang": [369, 1039, 1040, 1041], "tangent": [226, 340, 689, 693, 997, 1024, 1025], "tangibl": 999, "tanh": [340, 777, 861, 862, 997, 1014], "tanjina": 1046, "tann": [1037, 1042], "tao": [1045, 1046], "tar": [47, 376], "taranjeet": 1035, "tarashanski": 1046, "tarbal": [376, 1044], "tarcusx": 1037, "tarfil": 47, "target": [1, 43, 45, 52, 55, 57, 63, 66, 68, 69, 85, 101, 103, 105, 106, 116, 124, 126, 128, 135, 142, 143, 144, 146, 147, 149, 151, 153, 154, 156, 158, 161, 163, 167, 169, 172, 173, 178, 179, 180, 182, 183, 184, 185, 190, 194, 202, 205, 207, 209, 211, 212, 214, 215, 227, 234, 236, 237, 238, 239, 242, 243, 244, 245, 251, 257, 258, 260, 262, 265, 267, 269, 270, 273, 274, 278, 281, 283, 284, 287, 292, 295, 296, 300, 303, 304, 314, 315, 317, 319, 325, 326, 329, 330, 332, 333, 336, 340, 342, 347, 348, 352, 354, 355, 359, 361, 364, 365, 366, 367, 368, 369, 372, 374, 376, 377, 380, 381, 385, 389, 398, 400, 404, 407, 408, 411, 414, 428, 434, 435, 436, 439, 442, 461, 462, 479, 480, 481, 482, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 498, 499, 500, 501, 502, 503, 506, 508, 518, 522, 529, 530, 532, 534, 535, 537, 540, 541, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 565, 566, 567, 568, 571, 581, 582, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 627, 628, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 684, 685, 686, 687, 697, 698, 700, 701, 702, 707, 708, 709, 712, 713, 718, 720, 721, 723, 724, 726, 727, 728, 729, 730, 735, 738, 739, 740, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 782, 783, 784, 785, 787, 788, 789, 790, 791, 794, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 851, 853, 854, 855, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 881, 882, 883, 884, 885, 888, 893, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 923, 924, 930, 962, 963, 964, 987, 990, 991, 992, 995, 996, 999, 1003, 1006, 1007, 1013, 1014, 1015, 1019, 1020, 1022, 1023, 1025, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "target_class": 309, "target_column": [486, 487, 494], "target_encod": 311, "target_filenam": [499, 503], "target_gener": 173, "target_idx": 632, "target_mean_": [885, 1009], "target_nam": [45, 57, 66, 85, 124, 126, 128, 182, 215, 227, 251, 257, 265, 273, 274, 287, 310, 329, 347, 352, 365, 367, 485, 486, 488, 490, 491, 492, 494, 495, 498, 500, 501, 502, 503, 508, 713, 999, 1015, 1039], "target_opset": 398, "target_tag": [374, 923], "target_test": [258, 507], "target_train": [258, 507], "target_typ": [310, 885, 934, 963, 1046], "target_type_": 885, "target_xor": 155, "targetencod": [1, 310, 311, 386, 400, 877, 878, 989, 1009, 1018, 1045, 1046], "targets_test": 238, "targets_train": 238, "targettag": [1, 923], "tari": 91, "tasfaout": 1049, "tashai": [1037, 1038], "task": [1, 38, 43, 46, 123, 141, 147, 149, 155, 162, 175, 180, 189, 194, 195, 198, 206, 207, 222, 226, 243, 258, 261, 278, 283, 340, 349, 359, 361, 367, 369, 371, 372, 377, 378, 381, 384, 385, 386, 408, 409, 411, 412, 413, 414, 445, 458, 491, 503, 513, 591, 594, 595, 597, 598, 599, 603, 604, 605, 608, 632, 633, 646, 647, 652, 653, 660, 661, 662, 663, 674, 681, 684, 709, 727, 729, 730, 754, 782, 784, 787, 789, 801, 805, 818, 824, 966, 967, 996, 999, 1000, 1001, 1002, 1010, 1012, 1014, 1015, 1019, 1020, 1021, 1022, 1023, 1025, 1029, 1034, 1038, 1044], "tast": 1029, "tata": 1046, "tau": 1009, "tau_0": 534, "tavenard": 1041, "tax": 0, "taxonom": 369, "taylor": [411, 1037, 1039, 1040, 1043], "tb": 380, "tc": [163, 369, 387], "tcg": 175, "tch": [163, 369], "tcompl": 91, "tcpdump": 367, "tda": 1018, "teach": 372, "teacher": 102, "teal": [208, 216, 271], "team": [367, 375, 384, 386, 387, 1018, 1023, 1029], "teas": 183, "tech": [51, 369, 842], "technic": [175, 183, 208, 227, 317, 367, 369, 372, 374, 386, 411, 652, 664, 685, 686, 899, 988, 995, 996, 1002], "technion": [664, 685, 686, 995], "techniqu": [10, 26, 51, 56, 102, 104, 122, 126, 130, 135, 144, 162, 163, 179, 180, 182, 205, 214, 228, 230, 269, 281, 288, 316, 326, 340, 351, 361, 369, 384, 386, 398, 402, 404, 408, 409, 410, 411, 412, 413, 444, 445, 446, 447, 532, 552, 677, 689, 690, 693, 694, 726, 756, 991, 995, 996, 998, 999, 1002, 1005, 1007, 1011, 1013, 1015, 1019, 1023, 1042], "technolog": 369, "technologi": [163, 369, 404, 1018, 1023], "technometr": [369, 406, 466, 471, 1005], "tediou": [154, 258], "teen": 1009, "teevan": [841, 1001], "teh": [860, 1004], "tejesh95": 1033, "telecom": 1023, "telenczuk": [1038, 1041, 1042, 1044], "tell": [167, 183, 184, 240, 264, 322, 336, 341, 360, 367, 404, 412, 561, 578, 988, 993, 999, 1006], "temp": [43, 184], "temp_fold": 966, "temperatur": [184, 412, 1006], "tempfil": [87, 286, 313, 405, 1002], "templat": [372, 376, 377, 386, 387, 555, 556, 561, 562, 563, 564, 1018], "templateclassifi": 374, "tempor": [52, 149, 194, 1018, 1019], "temporari": [87, 102, 104, 359, 400, 465, 687, 781, 902, 1002, 1032, 1033, 1036, 1042, 1043], "temporarili": [1, 404, 465, 1034], "temporarydirectori": [286, 313], "tempt": 183, "temptat": [355, 372], "ten": [54, 57, 134, 140, 149, 163, 227, 255, 367, 369, 411, 518, 909, 1038], "tenavi": 1043, "tend": [43, 51, 64, 72, 74, 78, 85, 88, 90, 161, 163, 183, 184, 198, 207, 212, 224, 243, 249, 252, 261, 265, 277, 283, 302, 340, 349, 359, 361, 372, 374, 386, 402, 404, 406, 409, 411, 413, 434, 445, 653, 850, 881, 893, 948, 995, 996, 1002, 1015], "tendenc": [149, 231, 353, 995, 996, 998, 1001, 1004], "tenenbaum": [688, 996], "tenenhau": 369, "tensor": [1, 188, 364, 400, 409, 536, 538, 545, 639, 640, 641, 1025, 1041, 1047, 1048], "tensorflow": [45, 384], "tensorsketch": 991, "tent": 378, "tenur": 1023, "teon": 1041, "terenc": [1041, 1042], "term": [1, 43, 53, 54, 62, 68, 91, 125, 137, 140, 143, 146, 155, 172, 182, 194, 196, 197, 198, 205, 207, 209, 211, 220, 223, 224, 243, 258, 262, 266, 284, 299, 316, 340, 343, 347, 349, 361, 372, 374, 376, 384, 402, 404, 406, 408, 409, 411, 440, 444, 446, 449, 456, 459, 522, 533, 536, 538, 542, 545, 547, 587, 588, 589, 590, 603, 606, 607, 632, 633, 640, 642, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 669, 670, 672, 673, 674, 675, 676, 678, 680, 687, 695, 730, 738, 783, 784, 787, 861, 862, 879, 883, 886, 904, 905, 906, 907, 908, 909, 910, 988, 990, 991, 993, 994, 995, 996, 999, 1000, 1001, 1003, 1004, 1009, 1013, 1014, 1022, 1037, 1043, 1044, 1045, 1049], "term1": 412, "term2": 412, "term3": 412, "termin": [360, 377, 378, 380, 390, 404, 418, 445, 458, 551, 552, 556, 557, 558, 561, 563, 666, 667, 668, 676, 678, 861, 862, 913, 915, 1005, 1015], "terminalipythonapp": 378, "terminalpdb": 380, "termination_condition_": 901, "terminologi": [386, 1037], "terraza": 1041, "terri": 1033, "terrycojon": 1033, "tesson": 404, "test": [1, 43, 45, 47, 49, 50, 52, 61, 62, 63, 64, 66, 67, 68, 69, 102, 103, 115, 125, 134, 137, 139, 140, 141, 145, 146, 147, 148, 149, 157, 159, 162, 167, 168, 180, 182, 183, 184, 185, 186, 188, 194, 198, 202, 204, 205, 207, 208, 209, 211, 212, 214, 221, 222, 224, 230, 234, 239, 240, 242, 251, 256, 257, 258, 259, 262, 263, 264, 265, 266, 268, 269, 271, 272, 275, 276, 278, 283, 287, 292, 293, 299, 301, 306, 309, 310, 311, 320, 322, 329, 336, 343, 349, 353, 355, 359, 360, 366, 367, 369, 370, 375, 376, 377, 378, 384, 385, 386, 389, 390, 397, 399, 400, 402, 403, 405, 406, 409, 411, 412, 413, 414, 421, 423, 424, 427, 430, 431, 432, 433, 434, 462, 465, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 485, 486, 491, 495, 496, 500, 502, 522, 529, 535, 537, 541, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 565, 566, 567, 568, 573, 591, 593, 594, 595, 597, 598, 599, 601, 603, 604, 605, 607, 608, 610, 611, 627, 628, 630, 635, 636, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 712, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 851, 854, 855, 861, 862, 864, 889, 890, 892, 893, 894, 895, 899, 900, 902, 904, 905, 906, 907, 909, 910, 912, 913, 914, 915, 920, 921, 922, 923, 929, 939, 941, 942, 943, 994, 995, 998, 999, 1002, 1003, 1007, 1009, 1013, 1014, 1015, 1018, 1019, 1020, 1022, 1023, 1025, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1048, 1049], "test_": [52, 154, 408], "test_0": 43, "test_4": 43, "test_accuraci": [251, 265, 278], "test_auc": 827, "test_ax": 125, "test_balanced_accuraci": 278, "test_best_it": 145, "test_check_estim": 943, "test_color": 145, "test_common": [372, 380], "test_dataset": 366, "test_devi": 148, "test_enable_hist_gradient_boost": 376, "test_fn": 999, "test_fold": [408, 813], "test_fract": 1029, "test_idx": [52, 386], "test_import": 185, "test_index": [251, 328, 408, 801, 802, 805, 807, 808, 809, 810, 813, 815, 816, 817, 818, 819, 820, 821], "test_indx": 408, "test_lin": 145, "test_logist": [372, 380], "test_ms": 320, "test_neg_mean_absolute_error": [43, 209], "test_neg_mean_squared_error": [209, 827], "test_neg_root_mean_squared_error": 43, "test_negative_likelihood_ratio": 267, "test_positive_likelihood_ratio": 267, "test_prec_macro": 408, "test_precision_macro": 408, "test_r2": 827, "test_rec_macro": 408, "test_recall_macro": 408, "test_requiring_mpl_fixtur": 372, "test_result": [185, 941], "test_sampl": 155, "test_scor": [143, 145, 147, 149, 214, 263, 266, 277, 281, 310, 343, 351, 385, 408, 806, 823, 827, 828, 831], "test_scores_mean": 277, "test_scores_nb": 266, "test_scores_svm": 266, "test_set": 402, "test_siz": [43, 44, 45, 49, 52, 61, 62, 64, 66, 67, 68, 103, 139, 144, 145, 147, 148, 149, 153, 182, 188, 194, 204, 205, 207, 214, 221, 222, 258, 261, 262, 263, 266, 271, 273, 277, 283, 292, 293, 299, 301, 302, 306, 308, 309, 315, 323, 336, 343, 355, 377, 408, 698, 802, 817, 820, 821, 830, 832, 853, 989, 1001, 1002, 1026, 1029, 1030, 1035, 1036, 1041], "test_sklearn_compatible_estim": [313, 943], "test_sparsifi": 380, "test_stat": 47, "test_std": 263, "test_tim": [239, 347], "test_tp": 999, "test_val": 373, "test_your_test_nam": 360, "tested_neg": 278, "tested_posit": 278, "testpypi": 376, "teunp": 1043, "texa": [0, 51, 102], "text": [1, 42, 45, 46, 49, 50, 51, 54, 55, 57, 67, 68, 72, 75, 79, 86, 90, 91, 93, 94, 95, 97, 102, 111, 112, 140, 144, 161, 186, 191, 203, 204, 233, 237, 244, 245, 249, 251, 256, 261, 270, 271, 275, 289, 292, 294, 299, 306, 316, 324, 326, 342, 351, 359, 361, 364, 365, 366, 372, 377, 384, 386, 392, 402, 404, 405, 407, 408, 409, 411, 414, 444, 446, 461, 465, 484, 485, 486, 497, 501, 506, 519, 534, 542, 562, 587, 588, 589, 590, 615, 625, 652, 658, 666, 668, 674, 676, 697, 703, 705, 707, 713, 717, 729, 730, 737, 793, 795, 800, 814, 830, 839, 841, 843, 846, 851, 864, 865, 867, 868, 876, 900, 901, 902, 904, 916, 917, 918, 945, 988, 991, 995, 997, 999, 1000, 1001, 1003, 1006, 1009, 1011, 1013, 1014, 1019, 1020, 1023, 1025, 1029, 1030, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "text1": 412, "text2": 412, "text2d": 230, "text3": 412, "text_": 697, "text_kw": [697, 1044], "text_preprocess": 461, "text_stat": 102, "text_stats_transform": 102, "textbook": [412, 589], "textcoord": [48, 188], "textrm": 1014, "texttt": 999, "textual": [409, 418, 1015, 1038], "textur": [163, 369, 758, 759, 997], "tf": [1, 54, 57, 237, 347, 348, 349, 367, 409, 519, 542, 587, 588, 589, 590, 843, 851, 876, 988, 997, 1001, 1009, 1018], "tf_feature_nam": 54, "tf_vector": 54, "tfid": 589, "tfidf": [54, 102, 329, 412, 590], "tfidf_feature_nam": 54, "tfidf_vector": 54, "tfidftransform": [1, 329, 348, 349, 412, 486, 590, 1036, 1037, 1043, 1045, 1046, 1047], "tfidfvector": [1, 54, 57, 102, 265, 347, 367, 409, 412, 486, 587, 588, 589, 1029, 1031, 1037, 1038, 1039, 1042, 1043, 1047, 1048], "tfifi": 1042, "tfrac": 414, "tgct": 175, "th": [134, 316, 354, 385, 404, 408, 411, 419, 438, 442, 443, 448, 450, 456, 460, 469, 548, 555, 556, 557, 558, 559, 560, 562, 563, 564, 592, 593, 632, 648, 649, 669, 671, 680, 696, 718, 780, 821, 885, 935, 989, 995, 999, 1003, 1006, 1013, 1014, 1044], "th0rwa": [1039, 1040], "thakur": [1032, 1033, 1049], "thaler": 1035, "than": [1, 25, 43, 44, 46, 50, 51, 53, 57, 63, 64, 66, 67, 72, 75, 79, 81, 86, 88, 104, 107, 111, 113, 116, 118, 120, 123, 125, 127, 134, 136, 137, 139, 140, 141, 142, 143, 146, 149, 161, 163, 167, 173, 178, 183, 184, 185, 188, 190, 194, 195, 198, 201, 207, 209, 213, 222, 223, 224, 230, 233, 239, 240, 241, 243, 250, 258, 261, 262, 264, 265, 266, 267, 270, 273, 278, 281, 283, 284, 290, 291, 302, 304, 308, 309, 310, 311, 315, 317, 319, 321, 326, 340, 347, 348, 349, 355, 359, 360, 361, 366, 367, 368, 370, 371, 372, 374, 376, 377, 378, 380, 386, 387, 398, 400, 401, 402, 403, 404, 406, 407, 408, 409, 411, 412, 413, 414, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 449, 451, 454, 457, 460, 461, 464, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 491, 492, 494, 507, 512, 513, 521, 529, 532, 533, 534, 535, 536, 538, 539, 540, 542, 545, 546, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 571, 580, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 610, 611, 627, 628, 630, 631, 634, 640, 642, 643, 644, 646, 647, 652, 653, 655, 658, 659, 660, 661, 662, 663, 666, 667, 668, 671, 672, 674, 676, 677, 678, 679, 682, 687, 692, 694, 696, 704, 705, 707, 712, 720, 721, 722, 723, 724, 727, 735, 736, 739, 740, 764, 779, 780, 781, 782, 783, 785, 789, 795, 797, 798, 800, 803, 804, 810, 814, 816, 818, 819, 820, 822, 825, 826, 827, 828, 829, 832, 834, 835, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 850, 852, 853, 854, 855, 856, 858, 861, 862, 864, 865, 867, 877, 878, 879, 881, 882, 884, 887, 893, 894, 898, 901, 904, 905, 906, 909, 910, 912, 913, 914, 915, 916, 921, 936, 948, 950, 951, 957, 963, 968, 969, 972, 988, 989, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1009, 1013, 1014, 1015, 1018, 1019, 1022, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "thanh": 1047, "thank": [0, 43, 55, 62, 88, 116, 185, 188, 205, 207, 273, 347, 348, 371, 380, 1018, 1023, 1029, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "tharak": 1046, "thebabush": [1046, 1047], "thedevpanda": 1044, "thei": [7, 25, 30, 31, 43, 52, 63, 72, 83, 90, 113, 122, 132, 135, 141, 143, 145, 147, 149, 150, 159, 162, 163, 167, 168, 172, 183, 184, 194, 195, 198, 204, 207, 208, 224, 227, 230, 233, 239, 240, 243, 257, 261, 264, 265, 267, 273, 278, 281, 284, 286, 300, 304, 309, 315, 317, 340, 347, 348, 353, 355, 359, 360, 361, 365, 367, 368, 369, 370, 371, 372, 373, 374, 376, 380, 381, 384, 385, 386, 387, 395, 398, 400, 401, 403, 404, 405, 406, 407, 409, 411, 413, 414, 416, 437, 439, 443, 450, 451, 464, 494, 506, 507, 531, 533, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 596, 610, 619, 629, 643, 646, 647, 652, 658, 659, 660, 661, 662, 670, 672, 676, 678, 681, 687, 762, 763, 765, 768, 774, 789, 800, 814, 821, 833, 839, 840, 841, 842, 843, 851, 861, 864, 866, 872, 883, 884, 906, 909, 912, 913, 914, 915, 919, 988, 989, 991, 993, 995, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1013, 1014, 1015, 1023, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1048], "theil": [1, 150, 180, 189, 210, 213, 304, 649, 657, 671, 678, 679, 1020], "theilsen": 213, "theilsenregressor": [1, 213, 223, 649, 671, 678, 995, 1033, 1041, 1043, 1048], "theirs": [347, 372], "them": [15, 43, 44, 47, 68, 74, 75, 82, 86, 88, 89, 93, 98, 99, 102, 103, 116, 120, 122, 125, 135, 150, 158, 163, 167, 178, 179, 183, 184, 185, 188, 190, 194, 197, 204, 205, 208, 209, 211, 224, 237, 240, 243, 244, 258, 262, 264, 265, 267, 273, 277, 281, 286, 304, 309, 311, 316, 322, 329, 336, 349, 354, 359, 361, 367, 372, 373, 374, 375, 376, 378, 380, 384, 386, 387, 389, 395, 398, 400, 402, 403, 404, 405, 408, 409, 411, 412, 414, 441, 444, 446, 447, 454, 461, 464, 491, 492, 506, 565, 566, 567, 568, 603, 606, 607, 616, 620, 621, 624, 639, 664, 692, 768, 771, 774, 778, 779, 780, 781, 789, 800, 814, 821, 829, 864, 865, 868, 873, 874, 878, 882, 884, 885, 894, 895, 901, 912, 913, 941, 942, 943, 957, 966, 988, 989, 995, 998, 999, 1000, 1002, 1003, 1004, 1009, 1014, 1015, 1018, 1022, 1023, 1029, 1030, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "themat": 386, "theme": [367, 372, 390, 397, 1029], "themrmax": [1035, 1036], "themselv": [64, 183, 304, 368, 374, 380, 386, 395, 401, 404, 411, 412, 414, 443, 615, 792, 1015, 1039], "theodor": 1034, "theofilo": 1036, "theoptip": [1039, 1040], "theorem": [32, 167, 343, 1001], "theoret": [37, 72, 90, 167, 258, 404, 411, 551, 552, 639, 704, 726, 756, 904, 988, 995, 996, 998, 999, 1001, 1011, 1013, 1014, 1023], "theori": [7, 143, 239, 254, 343, 369, 404, 408, 411, 690, 694, 726, 756, 896, 897, 948, 988, 995, 996, 998, 999, 1000, 1014, 1015], "theotheo": 1039, "thereaft": [183, 190], "therebi": [43, 183, 317, 408, 411, 991, 999, 1039, 1049], "therefor": [43, 48, 53, 58, 61, 64, 70, 72, 85, 86, 103, 104, 107, 111, 116, 125, 129, 134, 137, 139, 146, 149, 152, 154, 162, 182, 185, 201, 207, 211, 222, 223, 249, 254, 255, 258, 265, 267, 277, 278, 281, 283, 287, 301, 304, 309, 325, 336, 343, 344, 347, 348, 354, 359, 366, 374, 377, 384, 395, 398, 400, 404, 405, 406, 408, 409, 411, 412, 434, 533, 539, 547, 549, 551, 552, 557, 558, 562, 563, 603, 605, 658, 659, 665, 668, 671, 676, 678, 679, 701, 712, 735, 757, 797, 864, 865, 877, 881, 885, 893, 920, 989, 993, 995, 996, 999, 1001, 1002, 1003, 1004, 1007, 1009, 1014, 1015, 1019, 1038, 1039, 1042, 1043, 1044, 1045, 1046], "therein": 668, "thereof": 386, "theriley106": 1037, "thesi": [0, 369, 404, 411], "theta": [168, 169, 171, 173, 175, 176, 241, 409, 414, 521, 534, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 692, 1001, 1015], "theta0": 168, "theta1": 168, "theta_": [842, 1001], "theta_c": [241, 521], "theta_d": 409, "theta_i": 1001, "theta_l": 414, "theta_opt": [610, 611], "thi": [0, 1, 6, 10, 30, 31, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 351, 352, 353, 354, 355, 359, 360, 361, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 384, 385, 386, 387, 389, 390, 392, 395, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 479, 480, 481, 482, 484, 486, 487, 492, 494, 495, 496, 497, 499, 500, 501, 503, 506, 507, 513, 514, 515, 516, 517, 518, 519, 521, 522, 524, 525, 526, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 574, 576, 578, 579, 580, 581, 582, 583, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 699, 700, 701, 702, 703, 704, 706, 707, 711, 712, 713, 714, 716, 717, 718, 720, 721, 722, 723, 724, 726, 727, 728, 729, 730, 732, 736, 737, 738, 739, 740, 741, 743, 748, 754, 755, 756, 757, 758, 759, 761, 762, 763, 765, 768, 769, 774, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 919, 920, 921, 923, 924, 925, 926, 930, 931, 936, 937, 939, 941, 942, 943, 948, 950, 953, 956, 957, 958, 959, 960, 961, 963, 966, 967, 969, 972, 973, 982, 987, 988, 989, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1022, 1023, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "thibault": 1038, "thibaut": 1043, "thibsej": 1038, "thick": [93, 294, 1002], "thierno": 1039, "thierri": [0, 1023, 1035, 1036, 1043], "thij": [1041, 1044, 1045], "thin": [228, 620], "thing": [48, 70, 227, 259, 347, 360, 361, 367, 371, 372, 374, 384, 387, 404, 406, 412, 557, 558, 995, 1009, 1023, 1026, 1035], "think": [44, 72, 183, 184, 347, 348, 372, 374, 380, 410, 998, 1019, 1023], "thinner": 100, "third": [70, 142, 147, 155, 158, 163, 175, 202, 224, 233, 255, 281, 289, 306, 319, 360, 367, 371, 374, 384, 387, 398, 412, 532, 587, 588, 589, 590, 802, 803, 804, 809, 846, 847, 848, 850, 852, 882, 894, 988, 1010, 1029, 1040, 1045, 1046, 1048], "thirion": [0, 394, 1029, 1035, 1036, 1042], "thirteen": 369, "thiruvenkadam": 1043, "this_centroid": 77, "this_cov": 113, "this_cv": 259, "this_di": 51, "this_dx": 51, "this_i": [61, 213], "this_max_it": 221, "this_p": 63, "this_prec": 113, "this_scor": 339, "this_sw": 61, "this_x": [61, 205, 213], "thoma": [0, 127, 360, 362, 387, 393, 400, 900, 995, 1009, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "thomas9292": 1041, "thomaz": 1040, "thomo": 91, "thompson": [1032, 1044, 1045], "thorben": 1041, "thorbenmaa": [1048, 1049], "thorough": 1023, "thoroughli": 1004, "thorsten": 1023, "those": [43, 46, 51, 55, 57, 88, 93, 103, 135, 146, 149, 161, 163, 182, 183, 184, 185, 186, 207, 209, 211, 224, 231, 237, 240, 242, 243, 255, 257, 258, 264, 267, 270, 281, 300, 304, 309, 321, 333, 336, 347, 348, 349, 359, 360, 366, 372, 374, 376, 377, 378, 379, 384, 386, 387, 390, 400, 401, 402, 403, 404, 408, 409, 411, 412, 414, 445, 447, 458, 461, 465, 492, 493, 494, 501, 555, 556, 562, 563, 567, 568, 580, 692, 697, 712, 718, 736, 800, 803, 804, 812, 814, 821, 846, 847, 848, 850, 852, 853, 854, 855, 856, 904, 905, 906, 909, 912, 913, 914, 915, 957, 960, 988, 991, 995, 998, 999, 1001, 1002, 1003, 1006, 1009, 1015, 1017, 1018, 1023, 1029, 1032, 1035, 1036, 1037, 1042, 1043, 1044, 1045, 1046, 1047], "though": [88, 140, 163, 188, 190, 243, 270, 289, 306, 308, 348, 349, 355, 359, 366, 369, 372, 376, 385, 386, 404, 409, 410, 411, 412, 413, 699, 716, 807, 809, 904, 988, 989, 991, 996, 999, 1002, 1007, 1009, 1013, 1037], "thought": [226, 289, 386, 404, 443, 996, 1000], "thoui": [0, 394, 1029], "thousand": [77, 140, 149, 237, 239, 308, 348, 367, 404, 411, 861, 862, 909, 996, 1038, 1040], "thread": [284, 314, 317, 370, 372, 384, 386, 404, 411, 561, 836, 837, 966, 967, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1042, 1044, 1045, 1046], "threadpoolctl": [41, 360, 370, 376, 390, 397], "threadsaf": 1042, "three": [43, 46, 63, 66, 70, 75, 76, 80, 88, 91, 109, 126, 134, 139, 141, 143, 144, 145, 155, 156, 160, 163, 165, 175, 183, 194, 201, 207, 209, 215, 217, 239, 240, 249, 252, 283, 310, 311, 314, 360, 365, 368, 369, 376, 390, 398, 400, 401, 404, 408, 409, 410, 411, 412, 448, 459, 496, 950, 992, 994, 995, 996, 999, 1002, 1009, 1013, 1014, 1029], "three_d_arrai": 921, "thresh": 1033, "threshold": [1, 50, 62, 77, 98, 118, 123, 129, 155, 163, 180, 184, 186, 204, 234, 236, 256, 261, 262, 263, 268, 271, 283, 315, 319, 320, 322, 324, 352, 354, 386, 399, 404, 409, 411, 413, 438, 439, 442, 443, 466, 494, 498, 506, 507, 529, 535, 540, 546, 547, 548, 549, 555, 556, 559, 561, 587, 590, 592, 596, 601, 602, 609, 644, 658, 667, 671, 676, 678, 692, 698, 700, 702, 703, 706, 707, 718, 720, 726, 727, 739, 740, 742, 756, 782, 784, 787, 788, 789, 794, 797, 798, 799, 800, 819, 822, 830, 839, 850, 851, 865, 867, 869, 871, 884, 887, 899, 900, 901, 902, 909, 916, 918, 972, 995, 999, 1002, 1003, 1005, 1009, 1012, 1014, 1015, 1020, 1025, 1029, 1033, 1034, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049], "threshold_": [596, 1036], "threshold_classifi": [165, 322], "threshold_lambda": 644, "threshold_sign": 354, "thriller": [412, 875], "thrive": [0, 372], "throat": [50, 297, 367, 496], "through": [0, 1, 46, 52, 70, 139, 163, 175, 183, 211, 226, 238, 259, 264, 267, 289, 308, 309, 322, 334, 341, 349, 354, 369, 372, 374, 379, 381, 384, 386, 387, 390, 395, 400, 403, 404, 407, 409, 411, 413, 414, 421, 422, 423, 426, 427, 443, 447, 461, 464, 469, 533, 539, 555, 556, 559, 562, 563, 564, 580, 592, 593, 596, 647, 651, 653, 655, 658, 659, 661, 663, 665, 668, 676, 677, 688, 691, 720, 806, 823, 864, 865, 880, 892, 896, 897, 912, 913, 914, 915, 955, 957, 958, 988, 989, 999, 1001, 1002, 1003, 1005, 1007, 1009, 1013, 1014, 1015, 1023, 1029, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049], "throughout": [319, 355, 386, 627, 801, 861, 862, 1032, 1037], "throughput": [358, 1018, 1025, 1032], "throw": [1, 301, 381, 929, 1033, 1036, 1037, 1038, 1039, 1043], "thrown": [711, 1038, 1039], "thu": [43, 44, 61, 62, 63, 64, 75, 86, 88, 93, 109, 113, 123, 125, 137, 139, 140, 143, 149, 159, 167, 172, 173, 184, 194, 196, 198, 201, 207, 209, 224, 233, 239, 244, 251, 258, 261, 262, 264, 269, 270, 271, 277, 278, 287, 311, 313, 316, 351, 355, 359, 360, 367, 374, 378, 384, 386, 395, 400, 402, 403, 404, 408, 409, 411, 412, 414, 415, 434, 436, 460, 513, 525, 551, 552, 555, 556, 562, 563, 602, 605, 610, 622, 627, 632, 633, 643, 645, 658, 677, 698, 705, 718, 725, 727, 746, 774, 778, 788, 795, 800, 802, 807, 809, 814, 835, 838, 873, 904, 990, 991, 992, 993, 994, 995, 996, 999, 1000, 1005, 1006, 1009, 1011, 1012, 1013, 1014, 1019, 1023, 1029, 1031, 1035, 1037, 1038, 1039, 1041, 1045, 1049], "thuan": 1040, "thukarama": 1044, "thumb": [12, 140, 188, 263, 359, 372, 373, 384, 404, 658, 659, 666, 667, 668, 676, 677, 678, 904, 999], "thumbnail": 1029, "th\u00e9ophil": 1045, "ti": [102, 207, 251, 254, 262, 344, 359, 380, 402, 404, 598, 599, 635, 720, 726, 756, 797, 798, 906, 909, 912, 998, 999, 1014, 1030, 1032, 1033, 1037, 1039, 1043, 1044, 1045], "tiago": [1030, 1034], "tialo": [1046, 1047, 1048], "tian": [404, 439, 1034, 1035, 1036], "tianqi": 411, "tiao": [1034, 1035], "tib": [682, 683], "tibshirani": [137, 138, 148, 163, 196, 263, 369, 408, 411, 518, 557, 558, 628, 656, 721, 723, 724, 834, 851, 912, 913, 989, 993, 995, 1000, 1006, 1015], "tic": [163, 184, 243, 275, 1001], "tic_bwd": 163, "tic_fwd": 163, "ticconi": 1035, "tick": [47, 78, 93, 170, 244, 275, 828], "tick_bottom": 304, "tick_label": [147, 186, 313], "tick_labels_dict": [147, 186, 313], "tick_labels_parameter_nam": [147, 186, 313], "tick_left": 304, "tick_param": [46, 54, 156, 249, 264, 308, 328], "tick_right": 46, "ticker": [226, 228, 231, 284], "ticket": [318, 372], "tidelift": 0, "tie": [180, 331, 384, 411, 510, 832, 906, 909, 1000, 1014, 1015, 1020, 1030, 1045], "tieleman": [860, 1004], "tien": 1034, "tiernei": [1037, 1038, 1039], "tight": [66, 75, 129, 136, 142, 159, 197, 202, 203, 212, 215, 218, 223, 228, 231, 253, 284, 290, 291, 295, 296, 332, 336, 339, 341, 352, 581, 692, 1041], "tight_layout": [45, 47, 62, 64, 67, 75, 85, 88, 98, 105, 107, 112, 116, 120, 121, 122, 130, 134, 136, 141, 142, 144, 147, 152, 154, 169, 171, 176, 178, 182, 183, 185, 186, 190, 191, 194, 199, 205, 207, 214, 217, 221, 224, 226, 238, 243, 259, 260, 263, 276, 283, 284, 286, 290, 296, 305, 306, 307, 308, 309, 313, 317, 334, 348, 351, 352, 368], "tijanajovanov": 1041, "tikhonov": [174, 414, 672], "tild": [870, 1007, 1009], "tilen": 1039, "till": [404, 439, 788, 999], "tim": [0, 393, 1029, 1034, 1035, 1038, 1039, 1040, 1042, 1044, 1045, 1046, 1047, 1048, 1049], "time": [0, 1, 37, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 348, 349, 351, 352, 353, 354, 355, 359, 360, 361, 366, 367, 369, 370, 371, 372, 373, 374, 376, 377, 378, 380, 384, 386, 387, 395, 398, 400, 401, 402, 404, 406, 407, 409, 411, 412, 415, 434, 438, 440, 441, 442, 443, 444, 447, 449, 452, 454, 455, 456, 458, 459, 460, 461, 462, 464, 465, 469, 489, 494, 497, 499, 517, 521, 532, 534, 536, 538, 539, 545, 560, 565, 566, 567, 568, 589, 610, 619, 627, 628, 629, 630, 634, 639, 640, 643, 646, 650, 652, 654, 660, 662, 664, 666, 667, 672, 673, 674, 676, 677, 678, 685, 686, 690, 692, 694, 701, 742, 745, 746, 748, 790, 794, 797, 798, 800, 802, 803, 804, 805, 807, 809, 814, 815, 816, 819, 821, 825, 826, 827, 828, 829, 830, 832, 834, 839, 840, 841, 842, 843, 844, 845, 852, 854, 855, 856, 860, 861, 862, 863, 864, 865, 866, 868, 869, 871, 874, 877, 879, 883, 888, 896, 897, 901, 902, 906, 909, 910, 918, 941, 942, 943, 950, 966, 969, 988, 989, 991, 992, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1009, 1011, 1012, 1013, 1014, 1015, 1018, 1023, 1029, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "time_dens": 320, "time_spars": 320, "time_step": [194, 862], "timeit": [221, 252, 378], "timeout": [494, 966, 1043], "timer": [252, 378], "times_init": 252, "timescal": 238, "timeseri": 43, "timeseriessplit": [1, 43, 52, 149, 194, 259, 408, 1035, 1036, 1041], "timo": 1041, "timofei": 1044, "timotheemathieu": 1042, "timothi": [1034, 1042], "timsaur": 1039, "tinertia": 91, "ting": [561, 1005, 1037, 1038], "tingshan": 1042, "tingwei": 1049, "tini": [205, 995, 1031, 1044, 1047], "tinoco": 1046, "tinta": 310, "tip": [355, 358, 372, 375, 378, 399, 412, 532, 539, 645, 692, 995, 1021, 1022, 1024, 1025, 1032], "tiphain": 1040, "tirth": [1039, 1040], "titan": [103, 185, 247, 313, 317, 318, 1007], "titl": [0, 43, 44, 45, 46, 47, 48, 50, 52, 53, 54, 58, 59, 61, 62, 63, 64, 66, 68, 72, 73, 74, 76, 79, 80, 82, 84, 85, 87, 88, 89, 90, 91, 92, 94, 95, 96, 109, 110, 112, 113, 115, 116, 120, 121, 122, 123, 124, 126, 127, 128, 129, 135, 136, 137, 140, 142, 143, 146, 147, 149, 150, 153, 155, 156, 158, 159, 161, 162, 163, 167, 168, 169, 171, 172, 173, 174, 175, 183, 190, 191, 193, 194, 196, 197, 198, 201, 202, 205, 206, 207, 209, 211, 212, 213, 214, 215, 220, 223, 224, 226, 227, 228, 233, 237, 238, 239, 241, 242, 243, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 263, 264, 265, 267, 268, 269, 273, 274, 277, 279, 286, 287, 290, 291, 292, 293, 295, 296, 297, 304, 308, 309, 310, 311, 327, 330, 332, 333, 334, 335, 336, 339, 340, 344, 345, 347, 352, 353, 368, 371, 372, 376, 380, 405, 999, 1022], "title_bow": 405, "titles_opt": 257, "titov": [1037, 1039, 1042, 1043], "titu": 1040, "tiwari": 1041, "tiziano": 1029, "tj": 1049, "tjoa": 1033, "tkammi": 1035, "tkdd": 561, "tliu68": 1042, "tm": [51, 1002], "tmp": 376, "tmpdir": [286, 313], "tn": [258, 261, 321, 712, 718, 999], "tn_c": 273, "tnr": 258, "tnwei": 1041, "to_british": 412, "to_fram": 107, "to_list": 186, "to_numpi": [172, 258], "to_onnx": 398, "to_replac": [43, 184], "toarrai": [46, 320, 329, 354, 405, 412, 564, 581, 587, 589, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858, 877, 894, 895, 949, 969, 970, 972, 980, 981, 989, 1002, 1009, 1046], "toastedcornflak": [1035, 1036], "toastedyeast": [1043, 1044], "tobia": [1037, 1042, 1044], "tobychees": [1036, 1037], "toc": [163, 243], "toc_bwd": 163, "toc_fwd": 163, "toccac": 1039, "tocsc": 195, "tocsr": 55, "toctre": [372, 390, 397], "tod": [404, 415, 441], "todai": 172, "todens": [973, 974, 975, 976, 977, 978, 979], "todo": [80, 237, 376, 380, 404], "toeplitz": 110, "togeth": [43, 51, 84, 93, 103, 142, 154, 167, 173, 183, 192, 227, 230, 243, 260, 310, 317, 339, 352, 355, 374, 384, 385, 386, 404, 411, 412, 413, 448, 450, 565, 566, 593, 689, 715, 800, 814, 864, 865, 878, 941, 995, 996, 999, 1000, 1006, 1009, 1015, 1016, 1023, 1035, 1046], "toi": [48, 58, 71, 74, 75, 76, 77, 81, 82, 85, 86, 88, 89, 90, 100, 111, 116, 124, 137, 150, 155, 180, 193, 199, 211, 220, 232, 243, 249, 290, 291, 300, 333, 342, 365, 378, 384, 404, 411, 412, 437, 438, 439, 441, 443, 445, 446, 447, 449, 455, 466, 510, 512, 520, 561, 639, 677, 726, 756, 798, 850, 857, 865, 884, 908, 996, 998, 999, 1005, 1009, 1020, 1025], "tok": [349, 412], "token": [1, 57, 265, 349, 359, 367, 376, 412, 534, 587, 588, 589, 590, 1029, 1037, 1041, 1047], "token_featur": 412, "token_freq": 349, "token_pattern": [265, 349, 412, 587, 588, 590], "tokoroten": 1034, "tokyo": [872, 1010], "tol": [46, 49, 51, 55, 103, 104, 105, 120, 139, 144, 149, 151, 154, 155, 156, 160, 163, 178, 183, 191, 192, 200, 202, 214, 220, 222, 233, 234, 235, 236, 244, 245, 246, 247, 250, 252, 254, 258, 262, 263, 264, 271, 278, 302, 310, 314, 315, 316, 317, 318, 323, 327, 343, 347, 374, 378, 411, 416, 440, 444, 446, 449, 456, 459, 468, 469, 475, 479, 480, 481, 529, 530, 531, 533, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 547, 548, 557, 558, 559, 560, 601, 627, 638, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 672, 674, 676, 677, 678, 679, 680, 682, 683, 685, 686, 687, 688, 689, 691, 693, 695, 797, 798, 814, 853, 861, 862, 899, 900, 904, 905, 906, 907, 908, 909, 910, 984, 995, 1013, 1014, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1046, 1047, 1049], "tola": 1039, "told": 412, "toledano": 1037, "toler": [80, 105, 149, 178, 200, 202, 222, 223, 340, 349, 367, 374, 381, 404, 416, 440, 444, 449, 456, 459, 468, 469, 475, 479, 480, 481, 529, 530, 531, 533, 534, 538, 539, 540, 541, 542, 543, 545, 546, 557, 558, 559, 560, 627, 646, 647, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 676, 678, 679, 681, 682, 683, 684, 688, 689, 690, 691, 693, 694, 695, 844, 845, 849, 853, 861, 862, 899, 900, 904, 905, 906, 907, 908, 909, 910, 984, 995, 999, 1013, 1014, 1038, 1041, 1042, 1043, 1044], "tolist": [43, 126, 145, 178, 315, 367, 443, 718, 999], "tom": [0, 394, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "tom1092": 1042, "toma": 1033, "tomasz": 1042, "tomato": 208, "tomatti": 1044, "tomdlt": 1035, "tomiock": [1044, 1045], "toml": 376, "tommaso": 1042, "tommi": [1036, 1037, 1038], "tomographi": [42, 55, 99, 180, 413, 652, 672, 995, 1020], "tomohiro": 1042, "tomorrow": 403, "tom\u00e1": [1042, 1043], "tongyu": 1046, "toni": [45, 367, 561, 884, 1005, 1042, 1043], "tonk": 1036, "too": [43, 46, 51, 52, 55, 64, 79, 83, 88, 90, 95, 102, 106, 113, 124, 146, 149, 178, 183, 185, 194, 208, 211, 227, 237, 243, 250, 257, 258, 262, 271, 277, 301, 310, 336, 347, 353, 359, 369, 372, 376, 378, 380, 384, 386, 402, 404, 406, 408, 411, 412, 413, 416, 434, 446, 536, 679, 692, 707, 839, 840, 841, 842, 843, 869, 882, 884, 994, 996, 998, 999, 1001, 1002, 1006, 1030, 1033, 1036, 1037, 1038, 1039, 1041, 1047, 1049], "took": [0, 43, 77, 272, 322], "tool": [21, 29, 41, 48, 50, 52, 144, 183, 240, 258, 262, 267, 355, 365, 366, 367, 370, 372, 374, 375, 376, 377, 378, 379, 380, 385, 386, 387, 389, 390, 395, 398, 404, 405, 406, 484, 632, 692, 697, 698, 700, 701, 702, 730, 988, 994, 995, 999, 1005, 1009, 1014, 1016, 1018, 1019, 1023, 1036, 1039, 1042, 1043, 1044, 1049], "toolbox": [384, 1018, 1023], "toolchain": 370, "toolkit": [359, 1018, 1023], "toolset": 1023, "tooth": 121, "tootoonian": 1042, "top": [1, 45, 51, 53, 54, 55, 70, 72, 74, 76, 77, 78, 79, 84, 95, 97, 103, 122, 132, 139, 140, 142, 149, 154, 156, 183, 207, 209, 217, 221, 233, 243, 244, 249, 251, 252, 255, 261, 265, 273, 274, 289, 304, 306, 310, 314, 320, 325, 326, 336, 340, 347, 355, 372, 374, 378, 384, 401, 402, 404, 409, 410, 411, 484, 586, 587, 590, 598, 700, 702, 726, 756, 794, 916, 918, 988, 991, 995, 997, 1007, 1018, 1023, 1043, 1048], "top10": 367, "top5": 347, "top_featur": 54, "top_features_ind": 54, "top_indic": 347, "top_k_accuraci": 999, "top_k_accuracy_scor": [1, 999, 1041, 1043], "tophat": [289, 410, 844, 845, 849], "topic": [42, 45, 46, 47, 102, 180, 347, 348, 349, 367, 368, 408, 409, 412, 485, 495, 534, 536, 538, 545, 587, 590, 995, 1000, 1017, 1018, 1019, 1020, 1034, 1036, 1048], "topic_d": 47, "topic_idx": 54, "topic_word_prior": [409, 534], "topic_word_prior_": 534, "topisan": 1039, "toplak": 1045, "topolog": [460, 1018], "topologi": [230, 231], "torch": [400, 1047], "torgo": 366, "toro": 310, "toronto": [532, 644, 860], "torr": [1038, 1047, 1048], "torrella": [1038, 1039, 1045], "tortois": 995, "tosequ": 1047, "toshihiro": [1035, 1036, 1042], "toshniw": 1041, "tot": 51, "total": [1, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 283, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 352, 353, 354, 360, 366, 367, 369, 378, 386, 401, 404, 410, 412, 415, 427, 441, 462, 479, 480, 481, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 498, 499, 500, 502, 503, 508, 510, 512, 513, 517, 520, 521, 534, 542, 550, 552, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 566, 568, 582, 583, 589, 593, 595, 611, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 666, 667, 670, 671, 672, 673, 676, 677, 678, 679, 697, 704, 705, 713, 729, 730, 731, 734, 738, 739, 757, 769, 783, 784, 787, 794, 795, 796, 800, 814, 825, 826, 827, 837, 838, 839, 840, 847, 849, 855, 862, 879, 883, 905, 907, 910, 912, 913, 914, 915, 948, 988, 995, 996, 999, 1000, 1001, 1002, 1009, 1013, 1014, 1015, 1020, 1030, 1035, 1037, 1045, 1046], "total_cel": 149, "total_fit_tim": 47, "total_sampl": [328, 534], "total_sz_mb": 47, "total_vect_tim": 47, "totalbsmtsf": 154, "totrmsabvgrd": 143, "tottim": 378, "tour": [0, 394, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "tournament": 988, "toward": [63, 64, 96, 113, 141, 146, 153, 167, 185, 190, 211, 212, 231, 243, 277, 343, 372, 386, 404, 445, 449, 459, 676, 678, 695, 878, 998, 1013, 1015, 1017, 1019, 1049], "towncrier": [376, 390, 397], "toyota": 51, "tp": [261, 321, 404, 698, 712, 718, 727, 729, 730, 731, 782, 783, 784, 787, 916, 999, 1049], "tp_c": 273, "tpng": 916, "tpot": 1018, "tpr": [50, 234, 243, 258, 261, 273, 274, 379, 702, 706, 789, 999, 1026, 1029, 1045], "tpr_a": 273, "tpr_b": 273, "tpr_score": 258, "tprs_lower": 274, "tprs_upper": 274, "tr": [259, 369, 376, 404, 406, 466, 467, 468, 469, 470, 471, 472, 473], "trace": [380, 404, 417, 470, 472, 473, 476, 477, 478, 689, 693, 996, 1040], "traceback": [372, 377, 380, 384, 465, 711, 1022, 1046], "traceord": 140, "tracer0tong": 1035, "trach": 1029, "track": [132, 138, 145, 322, 326, 372, 375, 376, 400, 532, 968, 1000, 1018, 1019, 1022, 1036, 1039, 1048], "tracker": [371, 375, 380, 384, 387, 390, 398, 1019], "tracking_select": 968, "tractabl": [43, 408, 539, 634, 1018, 1042], "trade": [37, 94, 109, 140, 149, 185, 201, 211, 263, 265, 266, 277, 336, 347, 386, 403, 404, 406, 551, 552, 557, 558, 634, 656, 692, 800, 803, 804, 814, 827, 996, 1003, 1011, 1013, 1014, 1019], "tradeoff": [1, 88, 137, 180, 238, 246, 256, 271, 272, 273, 274, 347, 359, 372, 380, 410, 513, 549, 562, 698, 702, 727, 789, 830, 865, 884, 904, 996, 1020, 1038, 1041], "tradit": [55, 88, 207, 221, 348, 361, 402, 411, 412, 632, 694, 995, 998, 1009, 1018, 1023], "tradition": 1015, "traffic": 1023, "trail": [374, 982], "train": [1, 43, 44, 45, 46, 47, 49, 50, 52, 61, 63, 64, 66, 67, 68, 69, 89, 91, 97, 98, 102, 103, 107, 115, 116, 118, 120, 123, 124, 125, 126, 128, 132, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 149, 151, 154, 160, 167, 168, 169, 172, 173, 174, 175, 176, 178, 180, 182, 183, 184, 185, 186, 188, 194, 195, 196, 198, 200, 202, 204, 205, 207, 208, 209, 212, 214, 215, 218, 220, 221, 224, 233, 236, 238, 242, 251, 253, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 283, 284, 287, 290, 291, 292, 293, 295, 296, 297, 299, 300, 301, 304, 306, 308, 309, 313, 316, 320, 324, 325, 326, 329, 330, 332, 335, 342, 343, 349, 350, 353, 355, 359, 360, 361, 364, 367, 369, 374, 377, 384, 385, 386, 400, 402, 403, 404, 405, 406, 407, 409, 411, 412, 413, 414, 416, 434, 437, 438, 440, 441, 444, 446, 448, 449, 450, 451, 456, 462, 466, 467, 469, 470, 471, 472, 473, 479, 480, 481, 482, 484, 485, 486, 491, 494, 495, 496, 498, 502, 522, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 609, 610, 611, 627, 628, 630, 631, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 684, 687, 688, 689, 691, 692, 696, 703, 741, 788, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 864, 869, 870, 873, 874, 877, 878, 882, 883, 884, 885, 889, 890, 892, 893, 894, 895, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 918, 972, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1009, 1013, 1014, 1015, 1018, 1019, 1020, 1021, 1023, 1025, 1026, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "train_0": 43, "train_4": 43, "train_accuraci": [251, 278], "train_auc": 827, "train_ax": 125, "train_balanced_accuraci": 278, "train_cover_std": 50, "train_dataset": [183, 366], "train_errors_with": 144, "train_errors_without": 144, "train_fract": 1029, "train_idx": [52, 183, 386], "train_import": 185, "train_index": [251, 328, 408, 801, 802, 805, 807, 808, 809, 810, 813, 815, 816, 817, 818, 819, 820, 821], "train_indx": 408, "train_pr": 144, "train_prec_macro": 408, "train_r2": 827, "train_rec_macro": 408, "train_result": 185, "train_sampl": [64, 221, 222], "train_scor": [214, 263, 310, 343, 351, 806, 823, 827, 828, 831, 994], "train_score_": [147, 411, 557, 558, 559, 560], "train_set": 402, "train_siz": [44, 46, 49, 134, 153, 168, 188, 222, 239, 243, 263, 266, 277, 315, 318, 343, 802, 806, 817, 820, 828, 830, 994, 1029, 1030, 1035, 1036], "train_size_ab": 828, "train_size_idx": 343, "train_sizes_ab": 828, "train_std": 263, "train_test_s": 239, "train_test_split": [1, 44, 45, 46, 49, 52, 61, 62, 64, 66, 67, 68, 103, 107, 116, 125, 134, 139, 141, 144, 145, 146, 147, 148, 149, 150, 153, 159, 160, 165, 182, 183, 185, 186, 188, 194, 204, 205, 207, 214, 221, 222, 224, 234, 243, 246, 247, 257, 258, 261, 262, 267, 271, 273, 277, 283, 287, 292, 293, 299, 301, 302, 306, 308, 309, 311, 313, 314, 315, 320, 321, 323, 329, 351, 354, 355, 377, 385, 400, 405, 408, 411, 434, 435, 556, 558, 565, 566, 697, 698, 700, 702, 799, 800, 822, 832, 835, 853, 861, 862, 864, 914, 915, 988, 989, 999, 1001, 1002, 1007, 1009, 1014, 1026, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1038, 1042, 1046, 1047], "train_tim": [221, 239, 347, 348], "trainabl": 374, "traine": 1023, "training_data": 167, "training_data_": 1039, "training_idx": 175, "training_indic": 174, "training_noisy_target": 167, "training_sample_indic": 167, "training_tim": [144, 347], "training_time_early_stop": 144, "training_time_ful": 144, "trajectori": 138, "tran": 110, "trans_data": 228, "transact": [96, 258, 321, 369, 404, 406, 415, 417, 441, 445, 472, 532, 536, 538, 545, 561, 644, 664, 685, 686, 725, 726, 756, 769, 995, 999], "transax": [79, 95, 230, 233, 251, 292, 306], "transcript": 372, "transcriptom": 692, "transduc": 326, "transduct": [386, 404, 899, 900, 1019], "transduction_": [325, 326, 327, 899, 900, 901], "transfer": [149, 395, 400, 995, 1019], "transform": [1, 6, 20, 23, 35, 37, 43, 44, 45, 47, 49, 53, 62, 79, 80, 81, 84, 87, 90, 95, 101, 105, 106, 116, 122, 123, 125, 126, 128, 129, 133, 138, 140, 143, 153, 154, 160, 173, 180, 183, 184, 185, 188, 201, 207, 208, 214, 220, 222, 224, 227, 230, 233, 235, 236, 238, 240, 241, 243, 247, 251, 260, 261, 262, 265, 273, 283, 284, 286, 292, 293, 294, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 318, 320, 321, 323, 336, 339, 340, 347, 349, 353, 355, 366, 367, 368, 369, 372, 374, 377, 381, 386, 395, 398, 400, 402, 404, 406, 407, 408, 409, 411, 412, 413, 414, 420, 425, 428, 434, 438, 439, 440, 442, 444, 446, 449, 461, 462, 463, 464, 465, 479, 480, 481, 482, 485, 486, 494, 501, 506, 507, 512, 513, 522, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 547, 548, 555, 557, 559, 560, 562, 564, 565, 566, 567, 568, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 609, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 635, 636, 638, 639, 640, 641, 642, 653, 658, 663, 673, 676, 684, 688, 689, 690, 691, 692, 694, 701, 702, 713, 753, 754, 785, 800, 803, 804, 814, 830, 833, 839, 848, 853, 856, 860, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 902, 904, 906, 909, 910, 923, 925, 939, 941, 988, 989, 991, 993, 995, 996, 999, 1000, 1003, 1013, 1014, 1016, 1018, 1020, 1021, 1025, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "transform_algorithm": [123, 129, 529, 535, 540, 1045], "transform_alpha": [123, 129, 529, 535, 540, 1042], "transform_dur": 284, "transform_func": 265, "transform_input": [103, 139, 154, 160, 183, 185, 234, 235, 244, 245, 247, 265, 271, 278, 310, 314, 317, 322, 323, 559, 560, 864, 865, 1048], "transform_list": 863, "transform_max_it": [529, 535, 536, 540, 1039], "transform_method": 409, "transform_n_nonzero_coef": [123, 129, 529, 535, 540], "transform_n_nozero_coef": 129, "transform_output": [247, 258, 311, 465, 902, 1044, 1045], "transformed_grid": 152, "transformedtargetregressor": [1, 107, 183, 207, 384, 395, 405, 592, 593, 596, 1000, 1037, 1039, 1042, 1047, 1048], "transformer_": [240, 462], "transformer_list": [106, 405, 863, 866, 989, 1040, 1041], "transformer_nam": [284, 461], "transformer_tag": 923, "transformer_weight": [102, 103, 154, 183, 184, 185, 235, 245, 310, 314, 317, 461, 464, 863, 1034, 1041], "transformermixin": [1, 240, 284, 374, 386, 462, 1037, 1044, 1045, 1046, 1048], "transformers_": [461, 464, 1046, 1047], "transformertag": [1, 923], "transfus": 234, "transit": [55, 155, 343, 376, 398, 1040], "transitive_target": 55, "translat": [107, 414, 525, 614, 873, 874, 890, 996, 999, 1023], "transpar": [67, 306, 983, 1023], "transpos": [62, 264, 416, 536, 538, 545, 660, 661, 662, 663, 788, 948, 984, 991, 999, 1011, 1029, 1043], "transposit": 948, "trapezoid": [1, 271, 706, 707, 999], "travel": 0, "travers": [354, 1002, 1006, 1047, 1048], "travi": [1029, 1037], "treat": [43, 45, 103, 143, 154, 178, 183, 207, 273, 310, 315, 320, 328, 355, 372, 384, 386, 401, 411, 412, 439, 559, 560, 587, 588, 590, 606, 607, 632, 638, 645, 671, 674, 729, 730, 738, 754, 783, 784, 787, 788, 873, 874, 880, 881, 884, 885, 889, 892, 893, 895, 904, 905, 957, 989, 991, 995, 999, 1000, 1006, 1009, 1013, 1015, 1033, 1041, 1045, 1046], "treatment": [112, 182, 366, 403, 409, 466, 471, 1015], "tree": [1, 43, 46, 52, 63, 64, 67, 76, 79, 88, 95, 124, 126, 128, 133, 136, 137, 138, 140, 143, 144, 145, 146, 147, 150, 151, 153, 154, 155, 156, 163, 169, 175, 178, 184, 186, 214, 215, 227, 240, 242, 243, 244, 268, 270, 281, 283, 284, 289, 297, 304, 305, 309, 314, 315, 317, 355, 359, 367, 369, 374, 378, 385, 386, 389, 402, 403, 404, 410, 415, 434, 438, 439, 440, 441, 442, 443, 445, 447, 454, 460, 494, 498, 502, 512, 513, 517, 542, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 631, 632, 633, 634, 658, 688, 692, 702, 703, 711, 742, 748, 788, 790, 806, 821, 827, 828, 830, 839, 844, 845, 846, 847, 848, 849, 850, 852, 854, 855, 856, 865, 868, 877, 912, 913, 914, 915, 916, 917, 918, 943, 989, 996, 999, 1000, 1005, 1006, 1018, 1019, 1020, 1021, 1025, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "tree_": [313, 351, 354, 849, 912, 913, 914, 915, 1046], "tree_copi": [844, 845], "tree_disp": 244, "tree_importance_sorted_idx": 186, "tree_optim": 281, "tree_preprocessor": [154, 207], "tree_stat": [844, 845], "treelit": 1018, "trein": 1032, "tremend": [310, 411], "trend": [151, 172, 184, 236, 300, 1023, 1036], "trent": [1023, 1035], "trevor": [163, 196, 318, 369, 628, 656, 721, 723, 724, 989, 995, 1011, 1033, 1034, 1037, 1038, 1039, 1041], "trevorstephen": [1033, 1035], "tri": [99, 128, 226, 277, 293, 340, 360, 374, 377, 384, 387, 402, 446, 448, 450, 553, 631, 632, 633, 670, 692, 698, 700, 702, 814, 1004, 1031, 1037, 1041, 1047, 1049], "triag": [0, 372, 375, 387], "trial": [43, 269, 444, 446, 457, 671, 797, 798, 995, 1035], "triangl": [386, 409, 440, 444, 456, 699, 997, 1002], "triangular": [404, 460, 611], "tribe": 367, "trick": [1, 167, 239, 294, 340, 349, 358, 361, 375, 384, 405, 581, 588, 643, 672, 991, 992, 1003, 1013, 1014, 1025, 1030, 1038, 1046], "tricki": [402, 996], "trickiest": 372, "trigg": 564, "trigger": [103, 104, 376, 386, 398, 400, 405, 861, 862, 864, 865, 930, 931, 948, 995, 1037, 1043, 1044], "triglycerid": [163, 369], "trim": [221, 404, 844, 845], "trimeta": 1040, "trinh": 1044, "tripl": 377, "triplet": 507, "tripramudya": 1045, "trishnendu": 1037, "tristan": 995, "triu": 51, "trivial": [48, 209, 258, 351, 372, 404, 818, 906, 909, 996, 1029], "troillard": [1045, 1046, 1048, 1049], "tropp": [533, 539], "troubl": 412, "troubleshoot": 412, "troyanskaya": [628, 989], "true": [1, 43, 44, 45, 46, 47, 49, 50, 52, 54, 55, 63, 64, 66, 68, 70, 72, 79, 82, 83, 86, 87, 88, 90, 91, 93, 96, 102, 103, 104, 105, 107, 109, 110, 111, 112, 113, 115, 118, 120, 121, 122, 123, 125, 126, 130, 132, 134, 138, 139, 140, 141, 143, 145, 146, 148, 149, 150, 151, 154, 155, 156, 159, 160, 162, 167, 171, 172, 173, 174, 175, 176, 178, 179, 182, 183, 184, 185, 186, 188, 192, 194, 196, 197, 198, 200, 201, 202, 204, 205, 207, 209, 210, 211, 214, 220, 221, 222, 224, 226, 229, 230, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 252, 254, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 283, 284, 286, 287, 289, 290, 293, 297, 299, 300, 301, 302, 305, 309, 310, 311, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 326, 328, 329, 330, 339, 340, 342, 343, 344, 345, 347, 348, 349, 351, 352, 354, 355, 359, 360, 365, 367, 368, 370, 372, 373, 374, 377, 378, 379, 381, 385, 386, 389, 395, 398, 400, 401, 402, 404, 405, 406, 408, 409, 411, 412, 413, 414, 416, 417, 418, 419, 421, 423, 424, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 456, 458, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 506, 507, 508, 509, 510, 511, 512, 513, 517, 520, 521, 522, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 580, 581, 582, 584, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 705, 707, 708, 709, 711, 712, 713, 714, 715, 718, 719, 720, 724, 726, 727, 728, 729, 730, 731, 733, 734, 735, 738, 739, 740, 741, 742, 743, 752, 754, 756, 761, 767, 769, 778, 782, 783, 784, 785, 786, 787, 788, 789, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 811, 812, 814, 818, 819, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 920, 921, 923, 924, 928, 929, 930, 931, 941, 942, 943, 948, 949, 961, 962, 963, 965, 966, 969, 970, 971, 979, 984, 986, 987, 988, 989, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1009, 1011, 1012, 1013, 1014, 1015, 1018, 1026, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "true_": [196, 411, 535, 636], "true_coef": [182, 194, 204, 277, 646, 647, 652, 660, 661, 662, 681, 682, 683], "true_cov": [466, 468, 469, 475], "true_den": 289, "true_fac": 242, "true_fun": 279, "true_h": 317, "true_k": 348, "true_label": [319, 325, 326], "true_nam": 45, "true_relev": [726, 756], "true_w": 317, "true_weight": 190, "trujillo": [1043, 1044], "truli": [267, 361, 712, 999], "truncat": [1, 105, 152, 227, 381, 532, 533, 537, 538, 539, 542, 676, 678, 726, 756, 797, 853, 917, 948, 988, 998, 999, 1013, 1024, 1025, 1035, 1037], "truncate_mod": 76, "truncatedsvd": [1, 152, 227, 348, 409, 532, 533, 537, 538, 539, 692, 863, 866, 1031, 1036, 1040, 1041, 1043, 1047], "truong": 1035, "trust": [0, 51, 63, 103, 104, 112, 134, 139, 141, 150, 151, 154, 155, 156, 160, 172, 183, 184, 185, 186, 192, 234, 235, 236, 240, 244, 245, 246, 247, 254, 258, 262, 263, 264, 265, 271, 276, 278, 302, 310, 314, 315, 317, 318, 320, 323, 327, 353, 354, 387, 398, 402, 1043], "trustworthi": [1, 317, 1037, 1038, 1043, 1044, 1045, 1046], "truth": [1, 27, 58, 68, 75, 82, 90, 91, 94, 109, 113, 116, 123, 127, 150, 175, 194, 203, 207, 208, 243, 255, 267, 348, 386, 404, 703, 704, 705, 708, 712, 713, 714, 715, 717, 718, 721, 723, 724, 726, 728, 729, 730, 734, 736, 737, 738, 739, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 783, 784, 785, 786, 787, 790, 791, 795, 796, 999, 1037, 1043], "truthi": [1, 961], "try": [43, 45, 50, 51, 52, 54, 62, 63, 74, 86, 103, 104, 123, 134, 139, 140, 141, 142, 149, 150, 151, 154, 155, 156, 160, 167, 172, 173, 179, 182, 183, 184, 185, 188, 190, 192, 198, 234, 235, 236, 240, 244, 245, 246, 247, 250, 251, 254, 258, 262, 263, 264, 265, 271, 276, 278, 281, 284, 297, 302, 310, 314, 315, 317, 318, 320, 322, 323, 327, 338, 343, 347, 348, 353, 354, 367, 370, 371, 372, 377, 378, 380, 384, 386, 390, 392, 395, 398, 404, 407, 408, 411, 412, 485, 486, 487, 488, 490, 491, 492, 493, 495, 496, 501, 565, 576, 588, 658, 673, 675, 689, 693, 799, 800, 803, 804, 812, 814, 822, 825, 826, 827, 829, 882, 884, 887, 889, 890, 891, 892, 893, 894, 895, 904, 929, 982, 988, 995, 996, 1005, 1014, 1015, 1019, 1022, 1023, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1048], "trynexttri": 392, "tr\u00e9segni": [0, 1031], "ts_cv": [43, 52, 149], "tscv": [408, 821], "tseng": 404, "tsetogl": 1044, "tsilhouett": 91, "tslearn": 1018, "tsne": [1, 180, 226, 227, 228, 230, 231, 285, 286, 317, 386, 418, 428, 494, 688, 689, 690, 848, 852, 865, 972, 996, 1002, 1020, 1032, 1034, 1035, 1036, 1037, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "tsne_param": 284, "tsoumaka": [720, 734, 740, 999], "tspeng": [1044, 1045], "tsuga": 1042, "tsujii": 1013, "tsukada": 1041, "tsuruoka": 1013, "tsutomu": 1040, "tt": [259, 462], "ttang131": 1039, "ttime": 91, "tttthomasssss": 1033, "tuai": 1048, "tube": [910, 1014], "tue": [43, 149, 184, 1035], "tuft": 446, "tuhin": [1047, 1048], "tuk": [1047, 1048], "tulio": [1037, 1038], "tulken": 1039, "tulloch": [1032, 1033], "tumor": [163, 369, 403], "tune": [1, 43, 64, 79, 88, 103, 125, 134, 140, 149, 162, 163, 165, 167, 178, 180, 184, 198, 205, 211, 212, 223, 230, 234, 243, 256, 257, 263, 267, 268, 269, 271, 281, 286, 305, 322, 328, 336, 340, 343, 347, 355, 359, 360, 361, 385, 386, 399, 402, 404, 408, 411, 413, 414, 449, 459, 494, 549, 557, 558, 559, 593, 609, 613, 614, 615, 617, 619, 620, 622, 623, 625, 643, 658, 659, 700, 702, 718, 742, 784, 787, 799, 800, 816, 822, 827, 830, 860, 865, 884, 902, 909, 993, 994, 995, 996, 998, 999, 1002, 1003, 1005, 1013, 1014, 1018, 1020, 1025, 1029, 1043, 1045, 1047, 1048], "tuned_classifi": 321, "tuned_model": [258, 278], "tuned_model_coef": 278, "tuned_param": 46, "tuned_paramet": [109, 262], "tunedthresholdclassifiercv": [1, 258, 278, 403, 799, 1047], "tunedthresholdclassifiercvifit": 258, "tupl": [47, 82, 88, 129, 184, 224, 365, 366, 367, 386, 408, 416, 429, 448, 450, 461, 464, 479, 480, 481, 482, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 498, 499, 500, 502, 503, 506, 508, 509, 510, 511, 512, 513, 520, 531, 559, 560, 565, 566, 567, 568, 581, 582, 583, 586, 587, 588, 590, 609, 627, 632, 633, 634, 711, 712, 719, 742, 781, 783, 797, 800, 814, 827, 844, 845, 863, 864, 874, 875, 879, 882, 890, 894, 906, 907, 908, 909, 910, 919, 931, 932, 934, 938, 939, 940, 941, 942, 966, 967, 982, 987, 1006, 1035, 1036, 1040, 1041, 1042, 1047, 1049], "tur": 1047, "turn": [1, 30, 43, 68, 109, 178, 179, 183, 194, 221, 222, 238, 264, 288, 321, 349, 359, 360, 361, 367, 384, 386, 387, 404, 405, 407, 409, 412, 413, 414, 580, 581, 588, 606, 607, 833, 837, 906, 909, 933, 989, 993, 999, 1001, 1004, 1009, 1023, 1034, 1036, 1037, 1042], "turquois": [124, 128, 129, 148, 213, 223, 229, 251, 252, 271], "tushar": [1047, 1048], "tutori": [112, 180, 198, 209, 224, 264, 372, 373, 378, 380, 398, 404, 449, 459, 691, 1014, 1025, 1032], "tuveri": 1044, "tuzova": 1037, "tv": 91, "tw": [188, 366, 484, 506, 507, 658, 1014], "tweak": [1, 113, 240, 408, 966, 998, 1040], "tweedi": [1, 180, 189, 207, 461, 494, 550, 648, 669, 680, 706, 724, 745, 747, 749, 750, 752, 830, 865, 868, 869, 877, 884, 995, 1020, 1039, 1040, 1042], "tweedie_pow": 224, "tweedieregressor": [1, 43, 314, 317, 322, 648, 669, 995, 1040, 1043, 1044, 1048], "tweet": 1023, "twelfth": 696, "twenti": [57, 237, 369, 401, 404], "twice": [64, 155, 258, 276, 278, 347, 349, 374, 414, 619, 730, 732, 950, 1038, 1046], "twine": 376, "twinx": 328, "twister": 1040, "two": [1, 37, 43, 46, 48, 50, 54, 58, 61, 63, 66, 70, 72, 74, 75, 78, 88, 93, 97, 102, 103, 107, 111, 115, 116, 118, 120, 122, 123, 125, 126, 128, 133, 134, 135, 142, 143, 144, 146, 149, 150, 151, 152, 155, 160, 163, 167, 168, 169, 170, 173, 174, 178, 179, 180, 183, 184, 185, 190, 194, 196, 198, 199, 200, 201, 205, 207, 208, 209, 214, 215, 218, 223, 224, 228, 230, 231, 233, 238, 240, 241, 243, 249, 250, 251, 253, 254, 255, 258, 259, 261, 263, 265, 271, 281, 287, 289, 292, 293, 295, 297, 304, 306, 309, 313, 314, 316, 317, 321, 327, 332, 333, 336, 337, 338, 340, 344, 347, 348, 349, 352, 353, 355, 365, 366, 367, 368, 369, 370, 372, 374, 376, 378, 379, 380, 384, 386, 387, 398, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 438, 439, 440, 441, 442, 444, 447, 448, 449, 450, 454, 456, 461, 466, 467, 468, 469, 470, 471, 472, 473, 485, 487, 488, 490, 491, 492, 494, 496, 498, 499, 500, 501, 502, 503, 505, 508, 512, 517, 520, 534, 536, 538, 542, 545, 547, 548, 551, 558, 568, 580, 583, 589, 590, 591, 594, 595, 597, 598, 599, 600, 601, 602, 605, 606, 607, 610, 611, 620, 621, 624, 628, 631, 632, 639, 643, 645, 670, 671, 673, 692, 699, 703, 704, 705, 709, 712, 715, 716, 719, 721, 722, 723, 724, 731, 732, 735, 736, 738, 741, 743, 754, 755, 757, 763, 764, 771, 774, 777, 778, 779, 780, 781, 785, 786, 794, 795, 796, 797, 833, 844, 845, 846, 847, 848, 850, 851, 852, 854, 855, 856, 861, 862, 868, 869, 876, 877, 878, 879, 898, 899, 900, 904, 905, 912, 914, 915, 963, 977, 978, 984, 988, 989, 991, 993, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1020, 1026, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049], "two_d_arrai": 921, "two_d_label": 924, "two_mean": 79, "two_point_correl": [844, 845], "twoclass_output": 136, "twosigmajab": 1037, "twx": 51, "tx": 407, "tx_k": [407, 993], "txn": 51, "txt": [347, 366, 372, 501], "ty": 407, "ty_k": 407, "tyagi": 1043, "tygert": [533, 539, 948], "tyler": [1036, 1042, 1043, 1044], "type": [1, 46, 52, 86, 101, 102, 112, 118, 126, 129, 142, 143, 145, 172, 179, 180, 182, 183, 184, 188, 194, 207, 209, 235, 240, 245, 247, 248, 250, 251, 254, 255, 258, 259, 265, 271, 273, 274, 277, 278, 281, 294, 310, 320, 340, 347, 349, 354, 355, 360, 365, 366, 367, 369, 372, 375, 376, 377, 378, 382, 385, 390, 392, 398, 401, 405, 412, 421, 422, 423, 426, 427, 428, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 494, 506, 507, 513, 565, 570, 580, 581, 587, 588, 590, 599, 603, 617, 627, 629, 630, 638, 656, 658, 672, 674, 679, 687, 689, 692, 693, 699, 701, 707, 714, 716, 729, 730, 733, 738, 783, 784, 787, 788, 797, 798, 800, 806, 814, 823, 828, 830, 831, 846, 847, 848, 850, 851, 852, 854, 855, 856, 857, 858, 864, 865, 866, 869, 871, 877, 878, 884, 885, 902, 906, 907, 908, 909, 910, 923, 925, 926, 928, 930, 931, 934, 938, 939, 963, 964, 985, 989, 991, 996, 998, 999, 1000, 1001, 1002, 1003, 1009, 1011, 1015, 1020, 1022, 1023, 1025, 1029, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "type_check": 376, "type_filt": 939, "type_of_target": [1, 386, 871, 885, 1000, 1043, 1044, 1046, 1047, 1049], "type_of_target_": 885, "typed_ndarrai": 372, "typeerror": [240, 316, 377, 711, 934, 957, 982, 1036, 1037, 1040, 1042, 1046], "typic": [25, 62, 64, 124, 132, 144, 188, 194, 207, 211, 224, 239, 266, 267, 271, 273, 274, 290, 291, 315, 336, 348, 359, 365, 366, 367, 370, 374, 375, 381, 385, 386, 398, 400, 402, 404, 405, 408, 409, 411, 412, 414, 440, 444, 446, 494, 539, 549, 553, 554, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 629, 638, 640, 643, 654, 655, 656, 671, 682, 683, 712, 846, 854, 871, 878, 882, 885, 947, 948, 953, 957, 960, 983, 988, 992, 995, 996, 998, 999, 1000, 1001, 1005, 1007, 1023, 1038, 1042, 1045, 1046], "typo": [372, 387, 395, 1029], "tzu": 1033, "t\u00e9l\u00e9com": 0, "u": [43, 49, 50, 51, 52, 55, 66, 70, 83, 85, 89, 120, 126, 127, 143, 144, 149, 167, 176, 182, 183, 184, 185, 208, 211, 214, 224, 227, 230, 237, 240, 246, 247, 250, 251, 255, 258, 259, 263, 264, 265, 267, 270, 271, 277, 278, 310, 340, 347, 354, 360, 367, 370, 372, 376, 378, 380, 384, 390, 395, 401, 404, 407, 409, 411, 412, 427, 460, 462, 479, 480, 481, 529, 535, 543, 544, 548, 550, 552, 554, 556, 558, 560, 563, 566, 568, 587, 588, 590, 611, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 678, 679, 681, 684, 689, 693, 704, 720, 740, 755, 837, 838, 847, 855, 862, 884, 898, 905, 907, 910, 913, 915, 948, 991, 993, 998, 999, 1006, 1009, 1023, 1026, 1039], "u2uwz2": [163, 369], "u_": [401, 479, 480, 481], "u_1": [401, 991], "u_2": [401, 991], "u_i": [404, 479, 480, 481, 755], "u_init": 541, "u_k": [407, 409], "uai": 1011, "ubuntu": [359, 370, 378, 380], "uchida": 1039, "uci": [47, 163, 258, 309, 366, 369, 498, 500, 502, 508], "ucl": 1012, "udi": 1029, "udit": 1043, "ufmay": 1041, "ufunc": [183, 1046], "ugli": [215, 292, 295, 332], "ugo": 1043, "ugurcaliskan": 1033, "ugurthemast": [1032, 1033], "uhmann": 1042, "uieda": 1042, "uint": 1040, "uint32": [367, 495], "uint8": [86, 123, 366, 495, 504, 505, 1041], "uk": [671, 1012], "ulloa": 1035, "ulrik": [404, 449, 459, 691], "ulterior": 52, "ultim": [88, 230, 373, 999], "umar": [1037, 1038], "umass": 57, "umberto": [1041, 1048, 1049], "umbrella": [403, 999], "umpi": 412, "un": [51, 372, 402, 412, 416, 531, 588, 795, 867, 876, 887, 891, 1038], "unabl": [51, 63, 103, 104, 139, 141, 150, 151, 154, 155, 156, 160, 172, 182, 183, 184, 185, 192, 194, 207, 234, 235, 236, 240, 244, 245, 246, 247, 254, 258, 262, 263, 264, 265, 271, 276, 278, 302, 310, 314, 315, 317, 318, 320, 323, 327, 353, 354, 361, 884, 1009, 1038], "unadjust": [404, 999, 1041], "unaffect": 1002, "unalt": 999, "unambigu": [273, 1000, 1035], "unanim": 387, "unavail": [386, 658, 659, 961, 1036, 1042], "unbalanc": [1, 180, 267, 331, 334, 337, 408, 510, 631, 909, 935, 936, 988, 1013, 1020], "unbias": [109, 402, 406, 409, 434, 548, 656, 672, 674, 687, 995], "unbound": [72, 998, 1043, 1047], "uncalibr": [61, 62, 63, 434], "uncent": 192, "uncertain": [63, 264, 326, 371], "uncertainti": [62, 66, 149, 167, 174, 190, 266, 402, 404, 408, 565, 566, 643, 864, 989, 1011], "uncertainty_index": [325, 326], "unchang": [173, 183, 224, 271, 322, 411, 428, 434, 439, 440, 441, 442, 443, 444, 446, 461, 462, 465, 479, 480, 481, 482, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 580, 581, 582, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 610, 611, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 692, 763, 799, 801, 802, 807, 809, 818, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 851, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 987, 1002, 1037, 1043, 1045], "unclaim": 375, "unclear": [371, 372, 499], "unclust": 443, "uncommon": [406, 658, 904, 1014], "uncompress": [47, 506, 507], "unconstrain": [149, 151, 184, 314, 320, 367, 1013], "uncorrect": [264, 594, 597], "uncorrel": [1, 270, 368, 526, 532, 539, 999], "uncorrupt": 44, "uncov": [130, 695], "undefin": [52, 267, 386, 408, 712, 729, 738, 783, 968, 999, 1037, 1041, 1045, 1049], "undefinedmetricwarn": [1, 267, 302, 712, 729, 730, 783, 784, 787, 999, 1038, 1049], "under": [1, 43, 46, 50, 61, 62, 64, 66, 76, 100, 109, 110, 127, 143, 146, 184, 197, 207, 233, 243, 264, 271, 273, 274, 305, 319, 366, 372, 374, 376, 378, 380, 386, 390, 398, 402, 404, 406, 408, 409, 412, 413, 443, 448, 450, 467, 468, 469, 470, 471, 472, 473, 489, 530, 537, 539, 541, 654, 655, 656, 702, 706, 707, 708, 715, 754, 788, 789, 797, 798, 849, 956, 995, 996, 997, 999, 1002, 1009, 1013, 1014, 1015, 1018, 1019, 1029, 1031, 1032, 1034, 1037, 1041], "underdetermin": 194, "underestim": [52, 146, 184, 207, 224, 264, 372], "underfit": [43, 70, 146, 167, 180, 185, 208, 211, 256, 277, 299, 310, 343, 408, 411, 657, 800, 803, 804, 814, 826, 827, 864, 879, 994, 995, 1020], "underflow": [1037, 1042], "undergo": 270, "undergrad": 1023, "underli": [64, 89, 111, 153, 163, 165, 183, 186, 208, 210, 211, 240, 258, 269, 288, 289, 340, 353, 360, 372, 384, 386, 389, 395, 400, 402, 404, 406, 408, 409, 410, 411, 413, 414, 434, 448, 449, 450, 459, 461, 462, 468, 469, 475, 522, 553, 554, 562, 563, 565, 566, 567, 568, 592, 593, 596, 601, 658, 659, 665, 668, 673, 675, 680, 691, 695, 799, 800, 803, 804, 814, 822, 825, 826, 827, 832, 833, 834, 835, 836, 837, 838, 847, 849, 901, 904, 912, 913, 914, 915, 965, 987, 995, 996, 1000, 1005, 1012, 1014, 1031, 1033, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1045, 1046, 1047, 1048, 1049], "underrepres": 372, "underscor": [349, 374, 386, 982, 1029, 1039, 1042], "underset": [409, 995, 1002, 1015], "understand": [43, 48, 52, 76, 134, 172, 180, 184, 240, 258, 259, 261, 262, 278, 315, 316, 333, 340, 347, 350, 351, 355, 371, 372, 373, 378, 384, 389, 404, 411, 412, 502, 830, 861, 862, 912, 913, 914, 915, 918, 942, 988, 989, 996, 998, 1015, 1017, 1018, 1020, 1023, 1029, 1043], "understood": [265, 372, 404, 957], "undertak": 384, "undesir": [90, 168, 414, 822], "undistinguish": 408, "undistort": 123, "undo": [265, 874, 1033], "undocu": 1036, "unequ": [90, 1037], "uneth": 182, "uneven": [85, 259, 404, 408], "unevenli": [90, 207, 259], "unexpect": [90, 240, 355, 372, 377, 380, 390, 398, 533, 696, 999, 1014, 1031, 1037, 1038, 1041, 1043, 1045, 1047], "unexpectedli": [386, 1037], "unfair": 355, "unfinish": [371, 372], "unfit": [1, 89, 374, 405, 429, 461, 567, 568, 601, 611, 1037, 1039, 1046, 1048], "unfold": [125, 375, 996], "unfortun": [146, 182, 183, 224, 380, 384, 411, 506, 507], "unhandl": 1038, "unhelp": 372, "unicod": [349, 412, 484, 501, 581, 587, 588, 590, 965, 1029, 1037, 1041], "unicodedata": [587, 588, 590], "unicodedecodeerror": [412, 587, 588, 590], "unifi": [281, 373, 381, 384, 385, 411, 637, 1018, 1019, 1029], "unifom": 287, "uniform": [1, 58, 67, 72, 86, 145, 146, 150, 155, 159, 168, 173, 176, 184, 190, 191, 220, 231, 233, 236, 272, 287, 290, 291, 296, 299, 305, 307, 308, 311, 317, 319, 335, 377, 398, 404, 435, 436, 549, 567, 568, 610, 611, 628, 639, 649, 650, 654, 668, 676, 677, 678, 699, 721, 723, 728, 745, 746, 748, 750, 751, 753, 785, 790, 791, 804, 812, 814, 839, 840, 843, 846, 847, 851, 854, 855, 869, 881, 883, 893, 935, 950, 969, 988, 989, 998, 999, 1002, 1035, 1037, 1039, 1043, 1045, 1048, 1049], "uniform_averag": [427, 462, 479, 480, 481, 552, 554, 556, 558, 560, 563, 566, 568, 611, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 678, 679, 721, 723, 728, 745, 746, 748, 750, 751, 753, 785, 790, 791, 837, 838, 847, 855, 862, 905, 907, 910, 913, 915, 999, 1038, 1048], "uniform_labelings_scor": 72, "uniformli": [72, 140, 146, 158, 229, 233, 249, 313, 374, 514, 515, 516, 549, 642, 804, 812, 814, 883, 988, 989, 999, 1002, 1009, 1033, 1038], "unigram": [265, 367, 412, 587, 588, 590, 1036], "unilev": 51, "unimod": [233, 471], "unimport": [413, 1007], "uninform": [62, 64, 311, 368, 377, 412, 988, 995, 1037], "uniniti": 380, "uninstal": 370, "unintention": 1009, "unintuit": 90, "union": [102, 183, 405, 738, 754, 863, 1036], "union_not_memb": 183, "uniqu": [1, 43, 61, 66, 72, 77, 81, 90, 91, 96, 100, 105, 141, 147, 148, 149, 183, 185, 194, 221, 224, 251, 273, 293, 310, 311, 319, 328, 347, 348, 349, 366, 374, 381, 386, 404, 405, 408, 411, 412, 437, 443, 447, 451, 453, 461, 464, 494, 547, 548, 549, 559, 560, 610, 633, 634, 635, 666, 668, 676, 697, 709, 711, 754, 782, 800, 802, 814, 827, 832, 833, 836, 842, 851, 854, 856, 861, 863, 875, 877, 878, 885, 888, 904, 906, 935, 948, 963, 964, 995, 1000, 1009, 1023, 1037, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1049], "unique_label": [1, 82, 88, 348, 374, 381], "unit": [1, 63, 102, 111, 183, 188, 207, 224, 289, 301, 304, 321, 348, 367, 372, 374, 378, 380, 381, 409, 412, 416, 461, 486, 487, 517, 522, 530, 531, 532, 539, 540, 588, 589, 590, 606, 607, 611, 658, 659, 676, 685, 699, 770, 851, 860, 861, 862, 868, 874, 876, 880, 882, 884, 890, 891, 892, 894, 895, 904, 905, 995, 997, 998, 999, 1004, 1009, 1015, 1033, 1037, 1043, 1044], "unit_eig_vec": 249, "unit_vari": [882, 894, 1041], "unitari": 948, "uniti": 30, "univ": [689, 693, 996], "univ_select": 106, "univari": [1, 17, 48, 49, 71, 84, 104, 106, 157, 158, 160, 180, 188, 193, 206, 221, 331, 364, 404, 405, 412, 442, 502, 523, 528, 591, 594, 595, 597, 598, 599, 601, 604, 605, 606, 607, 608, 627, 628, 629, 630, 645, 800, 805, 826, 830, 864, 865, 874, 879, 883, 884, 904, 909, 995, 1014, 1016, 1020, 1021, 1025, 1029, 1035], "univers": [0, 175, 183, 347, 367, 369, 375, 404, 409, 412, 589, 788, 839, 843, 899, 995, 997, 999, 1001], "unix": 412, "unknown": [52, 89, 183, 240, 264, 325, 327, 361, 367, 386, 398, 401, 412, 871, 877, 878, 963, 998, 1009, 1033, 1037, 1041, 1042], "unknown_typ": 398, "unknown_v": 154, "unknown_valu": [143, 154, 184, 185, 243, 310, 878, 1009, 1041, 1043, 1044], "unlabel": [38, 45, 241, 315, 325, 326, 327, 329, 330, 386, 404, 899, 900, 901, 998, 1041], "unlabeled_indic": 326, "unlabeled_set": 325, "unless": [182, 240, 250, 255, 372, 375, 384, 386, 398, 402, 404, 407, 415, 434, 441, 443, 445, 447, 449, 454, 455, 458, 461, 464, 469, 486, 494, 506, 507, 529, 533, 534, 535, 537, 540, 541, 543, 544, 545, 546, 553, 554, 555, 556, 561, 562, 563, 564, 565, 566, 567, 568, 593, 601, 606, 607, 610, 611, 632, 634, 639, 646, 647, 651, 652, 653, 655, 657, 658, 659, 661, 663, 665, 666, 668, 676, 679, 688, 689, 690, 691, 692, 693, 694, 714, 727, 774, 778, 781, 800, 803, 804, 806, 814, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 836, 837, 846, 847, 850, 852, 854, 855, 857, 858, 861, 862, 863, 866, 885, 889, 890, 892, 893, 894, 895, 899, 900, 912, 913, 914, 915, 923, 926, 930, 931, 948, 995, 998, 1000, 1029, 1031, 1035, 1037, 1040, 1041, 1046, 1047], "unlik": [88, 89, 140, 183, 184, 226, 228, 254, 304, 334, 372, 374, 378, 384, 386, 395, 398, 406, 408, 409, 412, 443, 447, 533, 650, 651, 654, 655, 656, 682, 683, 785, 821, 844, 845, 884, 895, 907, 995, 998, 999, 1006, 1014, 1029, 1035], "unlimit": [555, 556, 557, 558, 562, 563, 564, 912, 913, 914, 915], "unlucki": 355, "unmaintain": 1029, "unmarri": 183, "unmix": [121, 416, 531], "unmixing_matrix": 531, "unmodifi": [374, 386], "unnecessari": [140, 249, 377, 424, 440, 646, 647, 652, 653, 660, 661, 662, 663, 681, 684, 705, 1002, 1009, 1023, 1032, 1034, 1039, 1040, 1042, 1045, 1049], "unnecessarili": [230, 1036, 1039], "unnorm": [386, 534, 996, 1035, 1036], "unobserv": [149, 182, 183, 409], "unord": [404, 411, 1009], "unpack": 374, "unpen": [402, 648, 669, 680, 995], "unpickl": [1, 386, 575, 844, 845, 1035, 1041, 1045], "unpleas": 1031, "unpract": 998, "unprefix": 1035, "unprocess": [447, 587, 588, 590], "unprotect": 966, "unprun": [555, 556, 562, 563, 912, 913, 914, 915], "unquot": 224, "unrealist": 367, "unreason": [224, 408], "unreg": 341, "unregular": [877, 900, 1038], "unrel": [310, 360, 372, 377, 380, 412, 513], "unreli": [258, 405], "unrepresent": 919, "unrol": 230, "unrot": 130, "unsaf": 532, "unsampl": 991, "unscal": [304, 309, 995, 999, 1037, 1043], "unscaled_clf": 309, "unseen": [66, 109, 144, 160, 198, 211, 214, 290, 340, 361, 364, 374, 385, 386, 404, 408, 850, 881, 893, 990, 999, 1005, 1007, 1009, 1015, 1032, 1037, 1041], "unseen_featur": [412, 580], "unset": [360, 386, 1037], "unsetmetadatapassederror": [395, 1048], "unshad": 409, "unshifft": 677, "unshift": 908, "unsign": [86, 124, 367, 581, 965], "unsmooth": 410, "unsort": [1002, 1030, 1033, 1037], "unspecifi": [598, 599, 996], "unstabl": [74, 99, 183, 400, 404, 406, 407, 689, 693, 947, 948, 1015, 1033, 1034, 1036, 1041, 1043, 1045, 1048], "unstack": [224, 267], "unstructur": [53, 71, 74, 75, 76, 81, 180, 230, 301, 404, 438, 442, 460, 501, 528, 857, 1011, 1020, 1023, 1033], "unsuccess": 50, "unsupervis": [1, 5, 27, 34, 45, 51, 72, 82, 104, 105, 116, 120, 139, 152, 233, 241, 290, 291, 335, 347, 348, 355, 364, 367, 374, 385, 386, 404, 407, 409, 410, 411, 412, 413, 428, 439, 442, 530, 532, 534, 535, 537, 540, 541, 547, 561, 564, 565, 567, 568, 581, 582, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 628, 630, 634, 635, 638, 639, 640, 641, 642, 677, 800, 803, 804, 806, 814, 823, 828, 831, 846, 847, 850, 852, 853, 854, 855, 860, 867, 868, 869, 870, 873, 874, 876, 877, 878, 879, 881, 882, 883, 884, 885, 896, 897, 901, 908, 996, 999, 1005, 1012, 1021, 1025, 1029, 1032, 1042, 1046], "unsupport": [395, 398, 1037, 1042], "unsur": 905, "untangl": 125, "untar": 47, "unterthin": [1032, 1033, 1034], "until": [88, 163, 214, 276, 315, 317, 377, 386, 387, 401, 404, 408, 413, 506, 507, 555, 556, 557, 558, 562, 563, 564, 592, 646, 647, 652, 653, 658, 659, 660, 661, 662, 663, 666, 667, 668, 671, 676, 677, 678, 694, 797, 798, 803, 804, 861, 862, 901, 904, 912, 913, 914, 915, 973, 988, 995, 996, 1004, 1012, 1015, 1032, 1036, 1037, 1043, 1048], "untransform": [340, 461, 464, 1010], "untru": 999, "untrust": 398, "untun": [146, 321], "unus": [126, 184, 226, 228, 460, 578, 763, 771, 988, 996, 1029, 1037, 1039, 1040, 1042, 1044], "unusu": [64, 401, 1005, 1009, 1037], "unveil": 1035, "unvendor": 1037, "unwant": [208, 347], "unweight": [179, 219, 460, 647, 653, 678, 707, 713, 729, 730, 738, 783, 784, 787, 788, 839, 840, 841, 842, 843, 989, 1025], "unwieldi": 875, "uoa": 897, "up": [1, 47, 50, 72, 79, 80, 81, 85, 88, 90, 95, 102, 111, 112, 118, 132, 139, 149, 179, 183, 184, 190, 194, 202, 208, 222, 223, 251, 258, 266, 269, 284, 297, 302, 305, 310, 317, 321, 322, 326, 333, 340, 343, 347, 349, 361, 366, 367, 372, 376, 378, 379, 380, 381, 384, 386, 387, 402, 404, 408, 409, 411, 412, 440, 444, 445, 446, 447, 449, 453, 456, 457, 458, 506, 507, 534, 547, 548, 555, 556, 557, 558, 559, 560, 562, 563, 564, 610, 627, 632, 633, 639, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 660, 661, 662, 663, 664, 681, 682, 683, 684, 692, 705, 769, 797, 798, 802, 803, 804, 806, 828, 864, 865, 878, 879, 882, 894, 912, 913, 914, 915, 918, 948, 951, 952, 988, 991, 995, 996, 999, 1002, 1009, 1013, 1014, 1019, 1022, 1023, 1029, 1030, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048], "upadhyai": [1035, 1036, 1037, 1038], "upcast": [1039, 1043], "upcom": [172, 370], "upcoming_chang": 380, "updat": [47, 79, 95, 134, 140, 148, 238, 313, 322, 323, 349, 371, 372, 375, 380, 386, 398, 404, 409, 411, 418, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 460, 462, 466, 467, 468, 469, 470, 471, 472, 473, 475, 479, 480, 481, 482, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 797, 798, 799, 800, 801, 802, 803, 804, 807, 809, 814, 818, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 919, 973, 995, 1002, 1003, 1004, 1013, 1022, 1023, 1030, 1036, 1037, 1038, 1040, 1042, 1044, 1045, 1047, 1048, 1049], "update_environments_and_lock_fil": 372, "update_from": 291, "update_func": 291, "update_h": 545, "update_layout": [140, 265], "update_legend_marker_s": 291, "update_terminal_region": 1038, "upgrad": [313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 370, 390, 1019, 1029, 1034, 1037], "upload": [366, 370, 376, 384, 671], "upload_d": 366, "upon": [224, 231, 240, 297, 367, 372, 384, 386, 398, 559, 560, 626, 627, 630, 671, 789, 797, 798, 844, 845, 988, 995, 1015, 1043], "upper": [43, 46, 48, 61, 104, 107, 110, 111, 112, 122, 126, 136, 137, 138, 145, 146, 147, 148, 154, 159, 171, 173, 176, 183, 203, 207, 213, 216, 220, 223, 224, 237, 241, 242, 261, 263, 264, 265, 278, 289, 300, 309, 328, 335, 338, 340, 342, 376, 404, 410, 460, 587, 588, 590, 594, 613, 614, 615, 617, 619, 620, 622, 623, 625, 632, 633, 635, 637, 650, 654, 677, 735, 788, 877, 878, 906, 907, 908, 934, 998, 999, 1002, 1009, 1013, 1014, 1015, 1037], "upperbound": 734, "uppercas": [386, 1042], "uppercase_initi": 412, "upperlimit": 704, "upright": 367, "upstream": [359, 372, 376, 380, 384, 1009, 1038], "upward": [447, 453], "ur": 1040, "urbanowicz": 999, "urbanowicz2015": 999, "urcrnrlat": [50, 297], "urcrnrlon": [50, 297], "uri": 55, "url": [51, 52, 55, 163, 322, 366, 369, 374, 376, 489], "urllib": [47, 55], "urlopen": 55, "urlretriev": 47, "urlu": 1047, "urvang": [1037, 1039], "us": [0, 1, 14, 15, 19, 25, 27, 30, 37, 42, 43, 46, 47, 48, 50, 52, 53, 54, 57, 58, 59, 61, 62, 63, 64, 66, 68, 70, 72, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 99, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 116, 118, 119, 122, 124, 125, 126, 127, 128, 129, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 155, 156, 159, 160, 161, 162, 164, 166, 167, 168, 173, 174, 175, 176, 178, 179, 180, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 218, 221, 223, 224, 226, 227, 228, 231, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 281, 282, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 300, 301, 302, 303, 304, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 325, 326, 329, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 343, 346, 349, 351, 353, 358, 359, 360, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 379, 381, 385, 386, 387, 389, 390, 391, 392, 395, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 410, 411, 414, 415, 416, 417, 418, 420, 422, 423, 424, 425, 426, 427, 428, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 491, 492, 494, 497, 501, 506, 507, 509, 512, 513, 514, 517, 518, 520, 521, 522, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 572, 574, 576, 577, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 613, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 711, 712, 713, 714, 715, 716, 717, 718, 719, 721, 723, 724, 726, 727, 728, 729, 730, 732, 735, 736, 737, 738, 739, 741, 742, 743, 745, 746, 748, 750, 751, 753, 755, 756, 757, 758, 759, 763, 764, 766, 767, 768, 769, 771, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 921, 923, 926, 929, 930, 931, 933, 935, 936, 937, 941, 942, 943, 945, 947, 948, 952, 953, 956, 957, 958, 960, 963, 967, 968, 969, 970, 972, 974, 975, 976, 982, 987, 988, 989, 991, 992, 994, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1024, 1025, 1026, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "usa": [0, 263, 367, 901, 989, 996, 1011, 1012], "usabl": [149, 366, 372, 386, 398, 412, 800, 1029, 1036, 1043, 1044], "usag": [41, 77, 86, 103, 106, 115, 124, 132, 160, 183, 184, 234, 238, 240, 257, 258, 293, 295, 301, 332, 349, 359, 367, 371, 372, 375, 379, 380, 382, 386, 387, 390, 398, 404, 408, 409, 414, 415, 437, 441, 443, 447, 451, 458, 461, 468, 486, 492, 494, 521, 532, 533, 539, 547, 559, 560, 590, 608, 640, 648, 658, 659, 660, 666, 667, 668, 669, 676, 677, 678, 679, 680, 690, 778, 781, 792, 793, 860, 861, 863, 902, 904, 906, 909, 912, 913, 914, 915, 948, 988, 989, 991, 998, 999, 1000, 1002, 1014, 1021, 1022, 1025, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047], "usd": 243, "use_encoded_valu": [143, 154, 185, 243, 310, 878, 1009, 1041], "use_group": 259, "use_idf": [265, 409, 412, 589, 590], "usecas": [314, 317, 319, 404, 560], "useless": [54, 142, 267, 378, 413, 513, 526, 658, 712, 995, 1009, 1038], "user": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 52, 62, 64, 88, 101, 120, 140, 147, 176, 180, 183, 184, 186, 196, 209, 226, 240, 254, 261, 271, 273, 281, 284, 290, 291, 294, 310, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 355, 359, 360, 366, 370, 371, 372, 374, 376, 378, 379, 380, 384, 385, 386, 390, 392, 395, 398, 402, 404, 405, 406, 408, 409, 411, 412, 413, 415, 416, 417, 418, 421, 427, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 454, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 572, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 619, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 699, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 918, 944, 948, 985, 988, 989, 995, 996, 998, 999, 1000, 1002, 1009, 1013, 1018, 1019, 1023, 1026, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "user_guid": 43, "user_r": 405, "userguid": 1036, "usernam": 390, "userscript": 380, "userwarn": [72, 79, 95, 377, 1009, 1035, 1037, 1042, 1047, 1049], "ushtanit": [1041, 1042], "usp": 44, "usr": 370, "usual": [43, 52, 75, 109, 110, 112, 145, 146, 148, 154, 182, 184, 195, 207, 208, 257, 258, 261, 264, 273, 274, 278, 305, 316, 336, 355, 359, 360, 370, 372, 374, 376, 380, 384, 385, 386, 390, 395, 401, 404, 405, 408, 409, 411, 412, 413, 447, 453, 536, 538, 540, 545, 557, 558, 606, 607, 630, 640, 658, 659, 666, 667, 668, 676, 677, 678, 692, 709, 712, 726, 758, 806, 828, 832, 904, 921, 948, 988, 989, 991, 994, 995, 996, 998, 999, 1000, 1003, 1004, 1005, 1006, 1009, 1013, 1014, 1015, 1044], "utc": 999, "utf": [265, 347, 349, 412, 484, 501, 581, 587, 588, 590], "util": [1, 3, 9, 16, 35, 38, 47, 49, 50, 88, 89, 94, 132, 134, 147, 154, 165, 186, 201, 207, 214, 222, 228, 236, 240, 242, 252, 267, 270, 272, 284, 306, 313, 322, 328, 336, 340, 347, 360, 366, 367, 372, 373, 374, 375, 384, 385, 386, 400, 403, 404, 405, 408, 409, 412, 434, 440, 441, 444, 446, 450, 462, 465, 479, 480, 481, 531, 534, 536, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 576, 589, 610, 611, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 690, 799, 800, 801, 802, 807, 809, 818, 822, 824, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 849, 851, 854, 855, 861, 862, 864, 867, 869, 870, 871, 876, 883, 884, 899, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 994, 997, 999, 1000, 1009, 1010, 1018, 1023, 1025, 1029, 1030, 1032, 1033, 1035, 1036], "utilis": 1035, "utkarsh": [1035, 1036, 1037, 1038], "utl": 413, "utstat": 644, "uttam": 1042, "uv": [120, 409, 1048, 1049], "uw": [163, 369, 1041], "uwha": [1042, 1043], "v": [0, 1, 30, 43, 48, 52, 53, 55, 57, 63, 64, 66, 69, 70, 71, 72, 73, 74, 75, 76, 81, 82, 84, 88, 91, 102, 104, 107, 108, 111, 113, 114, 115, 120, 122, 123, 127, 138, 140, 141, 146, 147, 148, 159, 167, 180, 181, 186, 189, 198, 205, 206, 207, 208, 211, 212, 221, 230, 237, 250, 251, 254, 255, 256, 260, 281, 295, 311, 313, 333, 348, 355, 360, 364, 369, 372, 378, 380, 386, 400, 401, 402, 406, 407, 409, 412, 413, 427, 438, 442, 449, 459, 460, 461, 462, 467, 470, 471, 472, 473, 474, 479, 480, 481, 494, 510, 522, 528, 529, 535, 539, 543, 544, 548, 550, 552, 554, 556, 558, 560, 562, 563, 566, 568, 580, 588, 592, 593, 599, 605, 611, 630, 631, 634, 635, 639, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 676, 678, 679, 688, 695, 699, 701, 704, 717, 736, 737, 739, 754, 755, 757, 788, 795, 800, 805, 812, 814, 826, 830, 832, 833, 834, 837, 838, 839, 847, 855, 857, 860, 862, 864, 865, 868, 871, 877, 878, 879, 884, 885, 888, 898, 904, 905, 906, 907, 909, 910, 913, 915, 919, 993, 994, 995, 996, 999, 1000, 1001, 1004, 1007, 1009, 1013, 1014, 1016, 1020, 1025, 1029, 1032, 1033, 1034, 1037, 1039, 1040, 1043, 1044, 1047], "v0": [468, 469, 475, 510, 587, 588, 590, 800, 814, 863, 866, 1030, 1037, 1038, 1039], "v1": [258, 318, 366, 390, 797, 798, 1041, 1044, 1045, 1046, 1047], "v10": 258, "v11": 258, "v12": 258, "v13": 258, "v14": 258, "v15": 258, "v16": 258, "v17": 258, "v18": 258, "v19": 258, "v2": [258, 367, 495, 664, 685, 686, 995], "v20": 258, "v21": 258, "v22": 258, "v23": 258, "v24": 258, "v25": 258, "v26": 258, "v27": 258, "v28": 258, "v3": 258, "v4": 258, "v5": [258, 1037], "v6": 258, "v7": 258, "v8": 258, "v9": 258, "v_": [401, 412], "v_1": 401, "v_2": 401, "v_i": 1004, "v_ih_j": 1004, "v_init": 541, "v_j": [404, 755, 1004], "v_k": [407, 409, 529, 535, 543, 544], "v_measur": [736, 795], "v_measure_scor": [1, 57, 72, 73, 82, 91, 319, 348, 404, 717, 736, 737, 757, 999, 1038], "v_new": 860, "va": [47, 144, 161, 275, 292, 294, 342], "vac": 281, "vacaliuc": [1037, 1038], "vacat": 367, "vachan": 1040, "vadim": [1037, 1041, 1042], "vaerenbergh": [1044, 1045], "vaggi": [1031, 1032], "vaillant": 1041, "val": [105, 218, 264, 950], "val_errors_with": 144, "val_errors_without": 144, "val_pr": 144, "val_scor": 145, "vale": 1039, "valencia": [1043, 1045], "valentin": [1032, 1034, 1044, 1045], "valero": 51, "valgrind": 375, "valid": [1, 47, 52, 53, 63, 64, 87, 88, 89, 90, 103, 105, 106, 107, 109, 113, 127, 132, 138, 139, 140, 142, 143, 144, 145, 146, 149, 157, 160, 161, 163, 175, 180, 183, 185, 189, 194, 195, 196, 197, 203, 207, 209, 214, 224, 240, 242, 246, 251, 254, 256, 261, 264, 265, 266, 268, 270, 271, 272, 273, 276, 277, 278, 279, 281, 288, 302, 305, 310, 313, 315, 320, 322, 328, 336, 343, 351, 353, 360, 367, 372, 375, 384, 385, 386, 398, 399, 402, 404, 405, 406, 409, 410, 411, 412, 413, 418, 420, 434, 438, 439, 440, 442, 443, 444, 446, 447, 454, 460, 461, 465, 468, 469, 470, 471, 472, 473, 475, 479, 480, 481, 482, 491, 499, 500, 502, 513, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 547, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 570, 574, 576, 581, 582, 588, 592, 593, 596, 601, 609, 632, 634, 638, 639, 640, 641, 642, 643, 646, 647, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 688, 689, 692, 699, 701, 702, 706, 713, 728, 730, 762, 765, 774, 778, 779, 780, 785, 792, 793, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 838, 844, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 867, 868, 870, 876, 884, 896, 897, 899, 900, 902, 906, 909, 911, 912, 913, 914, 915, 921, 923, 930, 931, 932, 933, 934, 941, 955, 957, 960, 982, 983, 984, 985, 986, 987, 989, 998, 999, 1000, 1002, 1003, 1007, 1009, 1011, 1013, 1014, 1015, 1019, 1020, 1023, 1025, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "valid_metr": [844, 845, 1002, 1045], "valid_scor": 994, "validate_data": [1, 322, 374, 1048], "validate_metadata": [240, 957], "validate_separ": 987, "validation_curv": [1, 319, 343, 395, 823, 994, 999, 1036, 1037, 1038, 1041, 1045, 1048], "validation_fract": [144, 149, 151, 154, 156, 214, 244, 258, 310, 316, 318, 323, 411, 557, 558, 559, 560, 666, 667, 668, 676, 678, 861, 862, 1013, 1037, 1043], "validation_score_": [149, 559, 560], "validation_scores_": [861, 862, 1044], "validationcurvedisplai": [1, 277, 831, 994, 1045], "validationerror": 1043, "vallei": 310, "vall\u00e9": 1036, "valu": [1, 20, 27, 43, 44, 46, 50, 51, 52, 53, 55, 58, 59, 63, 64, 66, 68, 72, 75, 77, 79, 80, 86, 88, 93, 94, 95, 99, 103, 105, 107, 109, 111, 113, 120, 123, 126, 130, 132, 134, 136, 138, 139, 140, 141, 143, 146, 147, 150, 151, 153, 154, 158, 159, 161, 162, 165, 167, 170, 171, 173, 175, 182, 183, 184, 185, 186, 188, 190, 191, 193, 194, 195, 196, 198, 199, 200, 202, 207, 208, 209, 211, 213, 221, 224, 225, 228, 233, 234, 235, 236, 237, 238, 239, 243, 246, 247, 249, 255, 257, 258, 260, 262, 264, 265, 267, 269, 270, 271, 273, 275, 276, 277, 278, 284, 287, 296, 297, 299, 300, 302, 304, 305, 306, 307, 308, 309, 310, 311, 315, 321, 323, 328, 336, 340, 341, 343, 347, 348, 349, 351, 353, 355, 359, 360, 361, 364, 365, 366, 367, 369, 373, 374, 375, 377, 378, 379, 381, 384, 385, 386, 389, 390, 395, 400, 401, 402, 404, 405, 406, 407, 408, 412, 413, 414, 415, 416, 417, 418, 427, 428, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 479, 480, 481, 482, 484, 487, 488, 491, 494, 495, 496, 499, 506, 507, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 525, 526, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 580, 581, 582, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 697, 698, 699, 700, 701, 702, 704, 705, 707, 708, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 769, 771, 774, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 809, 811, 812, 814, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 922, 925, 927, 928, 929, 930, 931, 934, 935, 936, 937, 939, 948, 950, 957, 960, 961, 962, 963, 964, 969, 974, 975, 976, 988, 991, 992, 993, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1010, 1012, 1013, 1014, 1020, 1021, 1023, 1024, 1025, 1026, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "valuabl": [144, 258, 372, 989, 1023], "valuat": 411, "value_1": 712, "value_2": 712, "value_count": [43, 52, 184, 258, 278, 281], "value_kei": [384, 919], "value_typ": [414, 617], "valueerror": [1, 240, 241, 374, 378, 395, 465, 576, 602, 617, 635, 671, 714, 836, 854, 863, 869, 883, 929, 931, 933, 934, 983, 984, 985, 1009, 1031, 1032, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1046, 1047, 1048, 1049], "values_format": [697, 1039], "vamsi": 1044, "van": [0, 366, 394, 406, 466, 471, 532, 627, 692, 696, 989, 996, 999, 1005, 1023, 1030, 1031, 1032, 1033, 1036, 1037, 1038, 1040, 1041, 1042, 1044, 1045], "vandana": 1040, "vander": 191, "vandermond": [208, 1009], "vanderpla": [0, 394, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "vang": 1042, "vanilla": [207, 400, 403, 404, 444, 446, 457, 629], "vanilla_model": 258, "vanilla_model_coef": 278, "vanrel": 1035, "vanschoren": [366, 1041], "vapnik": [592, 593], "var": [115, 116, 137, 163, 191, 264, 369, 373, 413, 414, 641, 645, 906, 907, 908, 909, 910, 999, 1037], "var_": [532, 842, 884, 1042], "var_smooth": [842, 1037], "varanasi": [1029, 1032], "vardhan": 1033, "varepsilon": [404, 1013, 1014], "vari": [46, 52, 64, 66, 67, 70, 79, 80, 88, 95, 98, 107, 118, 140, 141, 142, 152, 162, 169, 171, 180, 183, 184, 186, 197, 198, 200, 201, 203, 205, 216, 219, 231, 238, 243, 254, 260, 264, 267, 278, 298, 304, 306, 307, 309, 319, 324, 330, 336, 339, 341, 344, 355, 359, 361, 367, 386, 398, 438, 442, 443, 498, 506, 512, 513, 520, 557, 558, 562, 563, 646, 647, 650, 651, 652, 653, 654, 655, 660, 661, 662, 663, 681, 684, 703, 763, 819, 823, 828, 830, 831, 861, 865, 869, 884, 901, 909, 912, 913, 972, 991, 994, 995, 999, 1002, 1003, 1012, 1015, 1020, 1023, 1036, 1037, 1045], "variabl": [1, 43, 48, 50, 51, 52, 72, 102, 137, 141, 143, 146, 147, 149, 158, 163, 174, 175, 178, 179, 184, 185, 188, 194, 198, 207, 211, 212, 224, 228, 240, 243, 255, 258, 264, 267, 274, 281, 283, 309, 310, 311, 355, 359, 361, 367, 369, 370, 372, 374, 376, 377, 380, 386, 395, 400, 404, 405, 406, 407, 408, 409, 411, 412, 413, 447, 479, 480, 481, 484, 497, 499, 506, 513, 530, 532, 534, 539, 542, 551, 557, 558, 603, 605, 606, 607, 640, 650, 651, 654, 655, 661, 682, 683, 695, 747, 801, 802, 805, 807, 808, 809, 810, 815, 816, 817, 818, 819, 820, 824, 825, 826, 827, 829, 832, 836, 837, 867, 878, 881, 885, 893, 905, 920, 988, 989, 991, 995, 998, 999, 1000, 1001, 1002, 1004, 1006, 1007, 1009, 1013, 1015, 1018, 1019, 1029, 1034, 1037, 1039, 1042, 1044, 1048], "varianc": [1, 37, 43, 44, 52, 64, 79, 88, 90, 95, 105, 109, 111, 115, 116, 120, 121, 122, 125, 126, 127, 128, 130, 133, 148, 149, 174, 180, 183, 191, 194, 198, 207, 209, 212, 224, 254, 258, 261, 264, 267, 273, 274, 278, 293, 299, 304, 309, 321, 348, 355, 364, 368, 381, 401, 402, 404, 406, 407, 408, 409, 410, 411, 414, 416, 438, 442, 446, 460, 519, 522, 530, 531, 532, 539, 542, 547, 548, 553, 554, 556, 557, 558, 563, 602, 606, 607, 610, 611, 625, 643, 644, 645, 652, 656, 660, 662, 672, 673, 674, 675, 676, 687, 710, 728, 785, 797, 798, 842, 853, 868, 874, 880, 882, 884, 890, 892, 894, 895, 913, 915, 973, 974, 975, 979, 993, 994, 995, 997, 1002, 1003, 1004, 1007, 1011, 1013, 1014, 1015, 1016, 1020, 1021, 1025, 1029, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1049], "variance_weight": [728, 785, 999], "variances_": 602, "variancethreshold": [1, 413, 869, 989, 1032, 1039, 1042, 1045], "variant": [1, 64, 78, 120, 177, 179, 180, 264, 316, 317, 348, 349, 378, 404, 407, 409, 412, 414, 446, 457, 487, 491, 492, 510, 513, 541, 557, 558, 563, 615, 619, 622, 623, 627, 630, 638, 639, 641, 645, 672, 704, 801, 805, 807, 808, 809, 818, 826, 847, 865, 882, 901, 989, 995, 996, 997, 998, 999, 1001, 1002, 1013, 1020, 1029, 1037], "variat": [1, 43, 46, 51, 72, 118, 151, 163, 172, 173, 179, 180, 183, 212, 248, 250, 255, 261, 283, 294, 314, 336, 369, 398, 408, 409, 440, 444, 456, 534, 643, 672, 674, 675, 797, 798, 818, 819, 821, 988, 999, 1009, 1012, 1015, 1018, 1020, 1024, 1025, 1032, 1034, 1035], "variegatu": [50, 297, 367, 496], "variet": 310, "varieti": [25, 62, 178, 251, 310, 336, 380, 404, 406, 412, 643, 1002, 1015, 1018, 1023, 1031, 1044, 1045], "varimax": [130, 409, 530, 1041], "variou": [3, 41, 43, 51, 66, 71, 72, 74, 88, 89, 91, 93, 94, 95, 112, 115, 123, 180, 183, 216, 225, 226, 227, 228, 237, 281, 284, 308, 314, 325, 326, 347, 349, 354, 355, 359, 366, 367, 368, 369, 372, 374, 377, 385, 387, 402, 404, 406, 434, 438, 469, 500, 512, 513, 523, 555, 556, 557, 558, 559, 560, 562, 563, 565, 566, 567, 568, 593, 601, 647, 651, 653, 655, 661, 663, 665, 673, 675, 691, 692, 699, 800, 803, 804, 806, 814, 822, 823, 824, 825, 826, 827, 828, 829, 831, 864, 904, 905, 988, 989, 995, 996, 999, 1002, 1006, 1009, 1015, 1018, 1020, 1022, 1023, 1029, 1032, 1033, 1046], "varma": [1038, 1048], "varona": 1049, "varoquaux": [0, 387, 393, 394, 1023, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "varun": [1035, 1036, 1037, 1043, 1044, 1049], "varunchaduvula": 1047, "vasani": 1040, "vasco": 1049, "vasilei": [1023, 1036], "vasileva": 1043, "vasiloudi": 1034, "vassard": 1043, "vassili": 1049, "vassilvitskii": [404, 444, 457], "vast": [258, 372], "vastli": [179, 309], "vathsala": [1036, 1037, 1038, 1039], "vatsan": 1035, "vavrova": 1036, "vazelh": [1037, 1038, 1039], "vazirgianni": 404, "vb": 534, "vbgmm": [1029, 1033, 1035], "vd": 1047, "ve": [263, 322, 372, 412, 1023, 1036], "veal": 57, "vealei": 1048, "veb2009": 404, "veb2010": 404, "vec": [120, 412, 536, 538, 545], "veclib": [359, 384], "vect": [47, 102, 265, 329, 412], "vect__": 265, "vect__max_df": 265, "vect__min_df": 265, "vect__ngram_rang": 265, "vect__norm": 265, "vector": [1, 16, 39, 46, 47, 48, 49, 51, 54, 57, 58, 63, 68, 71, 75, 104, 120, 122, 123, 159, 167, 175, 192, 211, 212, 218, 222, 238, 239, 246, 262, 264, 265, 269, 290, 302, 304, 321, 330, 332, 333, 336, 337, 338, 339, 340, 341, 343, 348, 359, 361, 367, 377, 378, 381, 384, 386, 401, 402, 404, 406, 407, 408, 409, 411, 414, 415, 416, 434, 440, 441, 442, 444, 446, 447, 448, 450, 461, 462, 464, 465, 479, 480, 481, 482, 484, 486, 495, 507, 510, 519, 522, 529, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 547, 548, 549, 550, 565, 566, 567, 568, 580, 581, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 613, 614, 615, 617, 618, 619, 620, 622, 623, 625, 631, 638, 640, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 691, 692, 693, 695, 697, 699, 719, 735, 763, 768, 769, 770, 771, 773, 774, 775, 777, 778, 799, 800, 803, 804, 814, 822, 828, 831, 832, 833, 839, 840, 841, 842, 843, 846, 847, 848, 850, 851, 852, 854, 855, 856, 861, 862, 869, 871, 876, 884, 888, 891, 902, 904, 905, 906, 907, 908, 909, 910, 911, 930, 945, 947, 948, 963, 968, 988, 991, 992, 993, 995, 996, 997, 999, 1000, 1001, 1003, 1004, 1005, 1009, 1013, 1015, 1020, 1021, 1025, 1029, 1030, 1031, 1032, 1033, 1035, 1037, 1038, 1040, 1042, 1047], "vectori": [386, 1039], "vectorizer2": 587, "vectorizer_param": 329, "vectorizermixin": 1039, "vectorizing_tim": 47, "vectors_test": 367, "ved": 1046, "vedaldi": [638, 991], "vedpawar2254": 1048, "veenhui": [1044, 1045, 1046, 1047, 1048, 1049], "veerkhar": 1044, "veerlosar": 1039, "veghit": 1045, "vehag": [207, 224], "vehbrand": [207, 224], "vehga": [207, 224], "vehicl": [207, 224], "vehpow": [207, 224], "vel": 369, "velislav": [1048, 1049], "velkov": 1031, "veloc": 372, "vembu": 402, "vempati": 991, "vendor": [240, 400, 1034, 1037, 1038, 1049], "venezuela": [50, 297, 367, 496], "venkat": [0, 394], "venkatachalam": [1039, 1040, 1041, 1042, 1043, 1046, 1047], "venkatesh": 1039, "venna": 696, "venthur": 1037, "venu": [0, 386], "venv": [370, 390], "vera": [1043, 1044], "verbos": [49, 51, 63, 77, 83, 87, 97, 102, 103, 104, 106, 139, 141, 150, 151, 154, 155, 156, 160, 183, 184, 185, 234, 235, 244, 245, 246, 247, 254, 258, 262, 263, 264, 265, 271, 276, 278, 301, 302, 304, 310, 314, 315, 316, 317, 318, 320, 323, 329, 347, 370, 376, 386, 437, 440, 444, 446, 449, 451, 456, 459, 461, 464, 468, 469, 475, 529, 534, 535, 536, 537, 538, 541, 543, 544, 545, 546, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 592, 593, 627, 632, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 676, 677, 678, 679, 680, 681, 682, 683, 684, 687, 690, 692, 694, 765, 778, 797, 798, 800, 803, 804, 806, 814, 823, 825, 826, 827, 828, 829, 831, 833, 835, 838, 853, 860, 861, 862, 863, 864, 865, 866, 901, 904, 905, 906, 907, 908, 909, 910, 966, 1019, 1031, 1032, 1034, 1036, 1037, 1038, 1040, 1041, 1043, 1044, 1047, 1048], "verbose_feature_names_out": [103, 143, 154, 183, 184, 185, 235, 245, 247, 310, 314, 316, 317, 318, 320, 405, 461, 464, 863, 866, 1042, 1046, 1047, 1048, 1049], "verbose_interv": [254, 797, 798], "veri": [43, 52, 62, 64, 74, 75, 77, 79, 83, 85, 93, 95, 111, 112, 113, 115, 118, 123, 146, 152, 172, 178, 183, 184, 185, 198, 205, 207, 208, 209, 212, 214, 224, 230, 233, 239, 240, 243, 249, 258, 266, 267, 270, 271, 273, 274, 284, 301, 304, 316, 325, 328, 336, 340, 347, 349, 355, 359, 367, 371, 372, 374, 377, 378, 380, 384, 385, 386, 398, 400, 402, 403, 404, 406, 408, 409, 410, 411, 412, 413, 414, 439, 444, 449, 459, 468, 469, 475, 498, 502, 508, 539, 555, 556, 559, 560, 562, 563, 565, 566, 588, 589, 622, 650, 651, 654, 655, 656, 664, 682, 683, 685, 691, 692, 695, 705, 743, 746, 792, 797, 800, 802, 808, 810, 814, 817, 820, 844, 845, 869, 873, 874, 875, 884, 896, 897, 906, 909, 912, 913, 914, 915, 923, 948, 969, 988, 991, 992, 994, 995, 996, 997, 998, 999, 1002, 1003, 1005, 1006, 1007, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1023, 1029, 1034, 1035, 1037, 1040, 1042, 1044, 1045, 1046], "verif": [367, 999, 1023], "verifi": [86, 93, 132, 149, 155, 183, 207, 372, 377, 398, 400, 489, 982, 1002], "verlag": 696, "vermeil": 1037, "veronda": 1030, "verrier": 1044, "versa": [183, 261, 347, 404, 414, 439, 606, 607, 833, 1033], "versatil": [414, 1014, 1023], "versicolor": [126, 273, 274, 502], "versicolour": [128, 369], "version": [1, 6, 43, 80, 86, 88, 103, 120, 125, 134, 149, 169, 179, 184, 185, 188, 194, 208, 214, 220, 222, 240, 243, 247, 283, 301, 309, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 336, 347, 359, 367, 371, 373, 374, 375, 378, 380, 381, 384, 386, 387, 390, 391, 395, 397, 398, 404, 405, 407, 409, 411, 412, 414, 415, 416, 422, 424, 426, 427, 428, 429, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 502, 503, 506, 507, 508, 510, 512, 513, 520, 521, 525, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 577, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 700, 701, 702, 704, 707, 708, 709, 711, 712, 713, 714, 718, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 734, 738, 739, 740, 741, 742, 743, 746, 753, 754, 757, 758, 759, 761, 766, 767, 769, 778, 782, 783, 784, 785, 787, 789, 790, 791, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 813, 814, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 890, 892, 893, 894, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 928, 930, 931, 941, 942, 943, 947, 948, 953, 956, 957, 958, 959, 960, 963, 966, 967, 969, 973, 979, 984, 985, 987, 988, 991, 993, 996, 999, 1001, 1003, 1005, 1007, 1012, 1013, 1015, 1018, 1019, 1022, 1027], "versionchang": 372, "versionwarn": 376, "versu": [67, 122, 133, 142, 152, 154, 169, 180, 183, 189, 215, 221, 233, 238, 239, 241, 252, 256, 259, 281, 290, 292, 299, 306, 324, 329, 332, 333, 335, 336, 340, 344, 404, 408, 411, 414, 502, 532, 554, 610, 631, 639, 658, 659, 666, 668, 674, 675, 676, 677, 783, 800, 805, 826, 836, 865, 900, 901, 908, 909, 913, 988, 995, 999, 1000, 1005, 1012, 1013, 1014, 1020, 1037, 1049], "vert": [147, 185, 186, 313, 1013], "vertex": [55, 63, 404, 450, 1042], "vertic": [45, 55, 93, 145, 186, 198, 229, 237, 238, 268, 283, 304, 307, 341, 342, 386, 401, 404, 409, 513, 697, 781], "verticalalign": [51, 63, 74, 75], "vese": 1041, "vesteghem": 1039, "veto": 387, "vettigli": 1038, "vga": 57, "vh": 948, "vi": [47, 699, 1037, 1040], "via": [0, 1, 43, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 351, 352, 353, 354, 355, 359, 360, 364, 369, 370, 373, 374, 376, 380, 384, 385, 386, 387, 390, 395, 400, 401, 402, 404, 405, 407, 408, 409, 413, 414, 434, 499, 533, 537, 539, 541, 544, 553, 554, 557, 558, 565, 566, 596, 611, 616, 621, 624, 626, 627, 631, 638, 639, 640, 641, 656, 666, 668, 671, 673, 676, 687, 689, 692, 693, 800, 814, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 836, 842, 850, 861, 863, 864, 865, 884, 885, 942, 988, 993, 995, 996, 998, 1000, 1006, 1007, 1013, 1014, 1019, 1020, 1023, 1025, 1026, 1029, 1033, 1034, 1037, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "viacheslav": 1035, "viard": 1040, "vibrantabhi19": 1036, "vicdemand": 149, "vice": [183, 261, 347, 404, 414, 439, 606, 607, 833, 1033], "vicent": [1042, 1043, 1044], "vicpric": 149, "victoireloui": 1043, "victor": [404, 449, 459, 1036, 1039], "victoria": [149, 1048, 1049], "video": [318, 366, 375, 384, 400, 501, 1000, 1023, 1025], "vie": 1035, "viega": 999, "view": [43, 77, 80, 109, 122, 149, 184, 245, 359, 361, 372, 404, 412, 534, 645, 657, 844, 845, 919, 995, 996], "view_init": [184, 226, 228, 230], "viewabl": 372, "vighnesh": [1034, 1035, 1037], "vignesh": 1045, "vigni": 1046, "vijai": [1023, 1032], "vijalapuram": 1037, "vijeth": [1045, 1046], "vijitbenjaronk": [1036, 1037], "vika": [1041, 1043], "vikram": [1035, 1044, 1045], "vikrant": 1043, "viktor765": [1048, 1049], "vila": [1039, 1041], "vilenski": 1049, "vilhelm": [1036, 1037], "villalba": [1034, 1037, 1041], "villanova": [1041, 1042], "villaz\u00f3n": 1041, "villu": 1035, "vil\u00e9m": 1042, "vinayak": [1033, 1034, 1035, 1037, 1038, 1044, 1045], "vinc": 1048, "vincent": [0, 394, 1023, 1029, 1031, 1033, 1034, 1036, 1039, 1044, 1045, 1046], "vineet": 1047, "vineyard": 310, "vinh": [404, 704], "vinh10a": 404, "viniciu": [1041, 1042], "vinit": 1037, "vink": [1040, 1042], "vinod": 1037, "vin\u00edciu": 1037, "viola": [367, 1037], "violat": [62, 336, 384, 386, 635, 934, 1006, 1013, 1015], "violet": [127, 1045], "violeta": 1041, "vipin": 404, "vipsa": 1049, "viraj": 1037, "virchan": 1047, "virenpassi": 1049, "virgil": [0, 362, 394, 1029, 1030, 1032, 1048, 1049], "virgilefritsch": 1029, "virginica": [126, 128, 273, 274, 369, 502, 999], "viridi": [73, 284, 631, 697], "viridis_r": 265, "virshup": 1046, "virtanen": 1034, "virtual": [373, 390, 408, 1023], "virtualenv": [370, 372], "visag": 1023, "visconti": 1033, "vishaal": [1037, 1038], "vishal": 1044, "vishwakarma": 1043, "visibl": [52, 183, 184, 209, 345, 366, 372, 404, 860, 1004, 1034, 1044], "vision": [532, 758, 759, 991, 995, 997, 1015, 1018, 1023, 1030], "visit": [354, 372, 1006, 1022], "visual": [1, 27, 42, 43, 48, 52, 58, 62, 63, 66, 68, 78, 80, 82, 85, 90, 93, 94, 111, 119, 120, 122, 124, 127, 129, 133, 140, 147, 149, 150, 152, 156, 161, 175, 179, 180, 184, 186, 194, 200, 205, 207, 208, 209, 224, 226, 227, 229, 231, 232, 235, 238, 244, 245, 254, 256, 257, 260, 261, 265, 266, 269, 271, 273, 274, 289, 293, 294, 296, 298, 300, 304, 308, 309, 313, 315, 326, 340, 364, 368, 370, 378, 379, 386, 401, 406, 408, 409, 410, 411, 435, 438, 442, 443, 451, 468, 469, 494, 500, 502, 505, 508, 512, 520, 530, 532, 539, 562, 564, 567, 631, 632, 633, 639, 645, 658, 689, 692, 697, 698, 700, 701, 702, 718, 727, 782, 789, 799, 801, 802, 805, 806, 817, 818, 819, 820, 821, 823, 825, 830, 861, 865, 869, 873, 874, 876, 879, 880, 881, 882, 883, 884, 904, 906, 907, 909, 910, 918, 944, 994, 996, 997, 1002, 1003, 1005, 1006, 1009, 1015, 1018, 1020, 1025, 1032, 1039, 1040, 1041, 1043, 1049], "visualis": [120, 123, 130, 241, 542, 676, 678, 801, 802, 805, 817, 818, 819, 820, 821, 1002, 1019], "visualize_group": 259, "vitor": 1044, "vitthal": 1048, "vivek": [1036, 1037, 1038, 1046], "viz": [274, 379], "vjacheslav": 1033, "vlad": [0, 394, 1029, 1030, 1031, 1032, 1033, 1034, 1036, 1037, 1038], "vladimir": [533, 948, 995, 1039, 1043, 1046], "vlahava": [720, 740, 999], "vlajic": [1040, 1041, 1047, 1049], "vlasio": [1023, 1036], "vlasovet": 1042, "vlb": 57, "vliet": 1041, "vline": [109, 122, 196, 198, 208, 264, 277, 305], "vlines_": 632, "vlo": 51, "vmax": [66, 84, 113, 120, 123, 130, 170, 173, 190, 194, 200, 222, 238, 253, 259, 301, 336], "vmin": [66, 75, 113, 120, 123, 130, 170, 173, 190, 194, 200, 222, 238, 253, 259, 301, 336], "vnherdeiro": 1039, "vo": [1035, 1043], "voc": 999, "vocabulari": [118, 221, 265, 347, 348, 374, 384, 412, 587, 588, 589, 590, 1001, 1029, 1031, 1034, 1037, 1040, 1042], "vocabulary_": [349, 412, 580, 587, 590, 1029], "void": 373, "vol": [64, 175, 194, 258, 270, 369, 404, 471, 557, 558, 628, 635, 645, 664, 685, 686, 797, 829, 841, 989, 1001, 1002], "volgen": [401, 719], "voltag": 57, "volum": [0, 99, 110, 163, 172, 367, 369, 404, 406, 470, 532, 769, 995, 1014, 1023], "volume11": 404, "volume2": 676, "volume7": [666, 667], "volunt": 380, "voluntari": 347, "von": [404, 449, 459, 691, 1036, 1037], "voronoi": [80, 99, 404], "voss": 1037, "vote": [1, 13, 133, 135, 140, 153, 154, 155, 180, 283, 340, 386, 387, 499, 553, 554, 555, 558, 562, 563, 567, 568, 657, 832, 846, 847, 852, 854, 1000, 1002, 1020, 1021, 1025, 1029, 1032, 1034, 1039], "votingclassifi": [1, 63, 66, 133, 180, 208, 395, 411, 568, 631, 639, 658, 799, 865, 879, 883, 884, 988, 989, 1020, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1046, 1047, 1049], "votingclassifierifit": 155, "votingregressor": [1, 156, 395, 411, 567, 989, 1038, 1039, 1040, 1043, 1046, 1047, 1049], "votingregressorifit": 156, "voxel": [80, 99, 584], "vp": 1023, "vpz": 1049, "vq": 91, "vqean3": [1037, 1038], "vredevoogd": [1031, 1032], "vrigazov": 1044, "vrishank": [1036, 1037], "vs_buildtool": 370, "vstack": [51, 63, 90, 98, 170, 171, 193, 249, 253, 284, 297, 341, 631, 1000, 1037], "vstolbunov": 1034, "vt": 548, "vufg": 1037, "vukolov": [1037, 1038], "vulner": 398, "vuw": 528, "vvz2010": 991, "vx": 72, "vya": [1037, 1038, 1039], "vyom": [1044, 1045], "vz2010": 991, "v\u00e1zquez": 1032, "v\u00edquez": 1049, "v\u0103n": 1044, "w": [1, 45, 51, 53, 66, 70, 75, 77, 91, 97, 129, 163, 178, 201, 206, 211, 223, 240, 241, 249, 250, 251, 254, 255, 265, 275, 302, 316, 317, 340, 341, 343, 349, 355, 360, 367, 369, 378, 398, 404, 405, 409, 411, 412, 416, 421, 427, 434, 462, 466, 469, 471, 479, 480, 481, 521, 536, 538, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 565, 566, 567, 568, 587, 588, 590, 593, 610, 611, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 693, 699, 725, 726, 756, 799, 800, 814, 822, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 846, 847, 850, 851, 854, 855, 861, 862, 897, 899, 900, 904, 905, 906, 907, 909, 910, 912, 913, 914, 915, 945, 950, 995, 999, 1003, 1004, 1009, 1011, 1013, 1014, 1039, 1043, 1044, 1045, 1046], "w0": 118, "w1": [118, 411, 657], "w1992": 411, "w2": 411, "w3": 411, "w_": [409, 646, 647, 652, 653, 660, 661, 662, 663, 681, 684, 995, 999, 1001, 1004], "w_0": 995, "w_1": [411, 995, 1003], "w_1x_1": 1003, "w_2": [411, 995, 1003], "w_2x_2": 1003, "w_3": 995, "w_4": 995, "w_5": 995, "w_i": [411, 990, 999], "w_ij": 660, "w_init": [416, 531], "w_intercept": [904, 905], "w_j": [646, 652, 999, 1013], "w_k": [404, 411, 995], "w_l": 995, "w_mx_m": 1003, "w_n": 411, "w_new": 409, "w_p": 995, "w_pad": [120, 142, 352], "w_x_1": [904, 905], "w_x_n": [904, 905], "wa": [0, 43, 47, 53, 64, 66, 75, 102, 103, 111, 116, 118, 151, 154, 163, 176, 183, 188, 205, 211, 230, 240, 243, 255, 257, 258, 260, 262, 264, 270, 271, 278, 281, 301, 309, 313, 314, 318, 322, 327, 328, 347, 349, 354, 355, 359, 367, 369, 370, 372, 374, 376, 377, 386, 390, 395, 398, 400, 401, 403, 404, 407, 408, 412, 416, 428, 437, 438, 439, 440, 442, 443, 444, 446, 447, 451, 454, 457, 461, 465, 466, 471, 479, 480, 481, 482, 513, 521, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 551, 552, 553, 554, 555, 556, 561, 562, 563, 564, 565, 566, 567, 568, 573, 580, 581, 582, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 647, 653, 658, 659, 661, 663, 664, 672, 674, 679, 685, 686, 688, 689, 692, 712, 713, 729, 730, 778, 783, 784, 787, 797, 798, 800, 803, 804, 814, 827, 829, 841, 848, 851, 853, 856, 860, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 893, 896, 897, 901, 902, 928, 930, 931, 943, 967, 986, 987, 988, 989, 998, 999, 1002, 1005, 1009, 1012, 1015, 1018, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "wadawson": 1033, "wadsworth": [912, 913, 1015], "waelbenamara": 1040, "wagner": 1043, "wai": [0, 1, 37, 43, 55, 64, 83, 93, 103, 106, 139, 145, 150, 152, 163, 174, 183, 185, 186, 205, 208, 211, 212, 221, 224, 235, 236, 239, 240, 243, 244, 259, 264, 271, 273, 304, 305, 316, 318, 319, 355, 359, 360, 361, 366, 368, 370, 371, 374, 375, 376, 380, 381, 386, 387, 390, 395, 398, 401, 402, 403, 404, 405, 407, 408, 409, 411, 412, 413, 414, 415, 440, 441, 448, 449, 450, 456, 457, 459, 460, 466, 494, 553, 554, 559, 560, 561, 570, 588, 598, 599, 611, 632, 666, 667, 676, 677, 678, 699, 704, 706, 717, 736, 737, 754, 755, 757, 763, 774, 778, 788, 795, 825, 833, 850, 871, 877, 882, 888, 914, 915, 969, 972, 988, 989, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1004, 1005, 1006, 1007, 1009, 1011, 1013, 1014, 1015, 1018, 1019, 1022, 1023, 1029, 1031, 1037, 1042, 1043, 1047, 1048], "waijean": 1042, "wainwright": [721, 723, 724], "waist": 369, "wait": [55, 370, 372, 376, 386, 666, 667, 668, 676, 678, 1041], "waithera": 1039, "wakni": 1049, "wal": 51, "waldo": 318, "wale": 149, "walk": [404, 410, 1032], "walker": 1033, "wall": 404, "wallach": [1033, 1034], "walli": 1037, "wallygauz": 1037, "walsh": [1041, 1043], "walt": [1032, 1033, 1037], "walter": 1035, "walton": 318, "wan": 1037, "wang": [409, 534, 679, 689, 693, 726, 756, 995, 996, 999, 1032, 1034, 1035, 1036, 1037, 1041, 1044, 1045, 1047, 1048], "wangz10": 1034, "want": [0, 30, 43, 51, 58, 61, 62, 63, 88, 97, 103, 163, 165, 179, 183, 184, 207, 208, 209, 240, 243, 255, 258, 263, 264, 273, 279, 281, 287, 301, 330, 333, 347, 355, 359, 360, 361, 370, 371, 372, 373, 374, 376, 377, 378, 384, 385, 386, 387, 390, 395, 398, 402, 403, 404, 405, 406, 411, 412, 413, 498, 501, 502, 508, 533, 547, 654, 655, 656, 658, 659, 666, 668, 674, 675, 676, 764, 799, 822, 850, 853, 869, 876, 897, 904, 988, 995, 998, 999, 1000, 1003, 1005, 1009, 1010, 1014, 1018, 1029, 1043, 1047], "ward": [0, 1, 53, 59, 71, 74, 75, 76, 79, 80, 85, 86, 87, 89, 95, 180, 186, 230, 394, 412, 438, 442, 460, 528, 857, 1020, 1029, 1032, 1034], "ward__n_clust": 87, "ward_tre": [1, 87, 438, 442, 1029, 1033], "wardagglom": 1034, "wardagglomer": 1032, "wardclust": 1032, "wareh": 734, "warm": [375, 386, 529, 535, 541, 543, 544, 610, 653, 659, 666, 667, 668, 676, 677, 678, 995, 1039, 1041, 1043], "warm_start": [63, 103, 138, 139, 141, 150, 151, 154, 155, 156, 171, 185, 192, 202, 234, 235, 244, 245, 247, 254, 258, 263, 276, 278, 302, 310, 314, 316, 317, 318, 320, 323, 374, 378, 386, 411, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 610, 646, 648, 649, 652, 658, 660, 662, 666, 667, 668, 669, 676, 677, 678, 680, 797, 798, 853, 861, 862, 1005, 1021, 1025, 1029, 1032, 1033, 1034, 1037, 1038, 1039, 1040, 1043, 1045], "warn": [1, 14, 79, 95, 104, 154, 173, 207, 221, 240, 267, 284, 300, 301, 308, 359, 360, 372, 375, 376, 377, 386, 398, 412, 494, 548, 569, 570, 571, 572, 573, 574, 575, 577, 601, 636, 647, 653, 661, 663, 690, 693, 694, 712, 713, 729, 730, 738, 783, 784, 787, 854, 868, 869, 877, 907, 908, 909, 910, 914, 915, 930, 931, 937, 941, 948, 984, 985, 1009, 1029, 1031, 1032, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "warn_for": 783, "warn_on_dtyp": 1038, "warn_when_not_sort": 859, "warner": [51, 1044, 1045], "warshal": [688, 996], "warshaw": 1035, "warut": [1036, 1037], "wase": [1046, 1047], "wasn": [102, 240, 1038], "waspa": 536, "wast": [140, 378, 408, 409, 988], "watanab": [1046, 1047], "watch": [52, 360], "watchtheblur": 1041, "water": 50, "waterburi": [1037, 1038], "waterland": 1032, "waterponei": [1035, 1036], "watson": [310, 405], "wattai": 1044, "wav": 366, "wave": [203, 372, 998], "waveform": 75, "wavelet": [53, 129, 409], "wavfil": 366, "waweru": 1046, "wa\u00ebl": 1047, "wb": [55, 398], "wchathura": 1044, "wclf": 338, "wconnel": 1040, "wdbc": [163, 369], "wderos": 1040, "wdevazelh": 1037, "wdisp": 338, "we": [0, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 62, 63, 64, 66, 68, 70, 72, 75, 76, 77, 79, 81, 82, 83, 86, 88, 89, 90, 91, 95, 97, 98, 99, 102, 103, 104, 105, 107, 109, 111, 112, 113, 116, 118, 120, 121, 122, 123, 125, 126, 127, 128, 130, 134, 135, 137, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 152, 154, 155, 156, 158, 159, 160, 162, 163, 165, 167, 169, 172, 173, 174, 175, 176, 178, 179, 182, 183, 184, 185, 186, 188, 190, 191, 192, 194, 195, 196, 198, 200, 201, 202, 204, 205, 207, 208, 209, 210, 211, 213, 214, 215, 218, 219, 220, 221, 222, 224, 226, 227, 229, 230, 231, 233, 234, 236, 237, 238, 240, 241, 243, 244, 246, 247, 249, 250, 251, 252, 254, 255, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 283, 284, 286, 287, 289, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 330, 332, 333, 334, 336, 337, 338, 339, 340, 341, 343, 345, 347, 348, 349, 351, 352, 353, 354, 355, 359, 360, 361, 366, 367, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 384, 385, 386, 387, 395, 398, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 447, 466, 467, 468, 469, 470, 471, 472, 473, 499, 521, 529, 530, 532, 535, 543, 544, 547, 559, 560, 561, 567, 568, 581, 582, 588, 611, 617, 627, 632, 633, 638, 640, 651, 655, 658, 659, 666, 668, 673, 674, 675, 676, 677, 692, 718, 720, 726, 746, 756, 764, 781, 799, 806, 822, 823, 825, 846, 847, 848, 850, 852, 853, 854, 855, 856, 867, 876, 877, 878, 884, 889, 890, 892, 893, 894, 895, 897, 900, 904, 908, 941, 942, 943, 953, 964, 966, 988, 989, 991, 993, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1022, 1023, 1026, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1045, 1047, 1048, 1049], "wea": 402, "weak": [115, 144, 147, 211, 224, 270, 408, 552, 557, 558, 630, 1002, 1023, 1045], "weak_learn": 134, "weak_learners_info": 134, "weak_learners_misclassification_error": 134, "weaker": [107, 559, 560], "weakest": [351, 1015], "weaklearn": 551, "weakli": [66, 99], "weather": [43, 52, 172, 184, 403, 995, 999], "web": [1, 163, 366, 367, 369, 372, 380, 398, 404, 412, 489, 519, 897, 948, 999, 1009, 1029, 1048], "weber": 1036, "weblog": 404, "webpag": [55, 188, 372], "websit": [366, 367, 369, 372, 375, 387, 390, 1003, 1013, 1017, 1023, 1030, 1031, 1032], "wed": [43, 149, 184], "weed": 603, "week": [43, 52, 149, 320, 371, 372, 387, 494, 1023, 1043], "weekdai": [43, 184], "weekday_co": 43, "weekday_sin": 43, "weekend": [43, 149], "weezel": [1044, 1045], "wegelin": 407, "wehenkel": [411, 555, 556, 563, 564, 914, 915], "wei": [0, 394, 1013, 1029, 1030, 1033, 1034, 1035, 1036, 1038, 1042, 1045], "weibul": [308, 869], "weidemann": 1043, "weigh": [408, 1036], "weight": [1, 45, 50, 53, 54, 57, 61, 68, 87, 102, 130, 146, 155, 156, 159, 160, 171, 172, 179, 180, 183, 189, 194, 198, 200, 207, 211, 212, 216, 217, 218, 220, 221, 222, 224, 240, 245, 249, 253, 258, 262, 267, 271, 273, 287, 289, 296, 297, 298, 299, 300, 302, 309, 311, 313, 316, 320, 321, 323, 325, 326, 331, 338, 340, 341, 343, 347, 348, 349, 354, 355, 368, 369, 381, 384, 386, 403, 404, 406, 407, 409, 410, 413, 415, 421, 427, 434, 437, 440, 441, 443, 444, 446, 450, 456, 457, 460, 461, 462, 464, 466, 471, 479, 480, 481, 494, 513, 522, 536, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 585, 588, 589, 590, 592, 596, 601, 602, 610, 611, 628, 631, 632, 633, 634, 635, 637, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 687, 689, 693, 697, 698, 700, 702, 703, 707, 708, 709, 712, 713, 716, 718, 720, 721, 722, 723, 724, 726, 727, 728, 729, 730, 734, 735, 736, 738, 739, 740, 741, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 758, 759, 769, 782, 783, 784, 785, 787, 788, 789, 790, 791, 794, 795, 796, 797, 798, 799, 822, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 860, 861, 862, 863, 866, 869, 883, 884, 885, 899, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 935, 936, 950, 969, 973, 979, 989, 990, 995, 996, 998, 999, 1001, 1002, 1003, 1004, 1006, 1009, 1012, 1013, 1014, 1015, 1020, 1025, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049], "weight_concentration_": 797, "weight_concentration_prior": [249, 255, 797, 998], "weight_concentration_prior_": 797, "weight_concentration_prior_typ": [249, 255, 797, 998, 1035], "weight_vector": [1029, 1039], "weighted_acc": 395, "weighted_mod": [1, 381], "weighted_n_node_sampl": 354, "weightedmetaregressor": 240, "weights_": [249, 797, 798, 1043], "weights_handl": 219, "weights_init": [254, 798], "weijiadu": 1043, "weinberg": 412, "weinsberg": 1029, "weinstein": 1030, "weisberg": 995, "weiss": [0, 394, 404, 691, 1029], "weitzenfeld": 1023, "weka": 841, "welch": 1035, "welcom": [371, 372, 380, 387, 1019], "welind": 1029, "well": [7, 43, 48, 51, 58, 61, 62, 64, 70, 74, 86, 90, 91, 95, 102, 109, 116, 126, 134, 135, 137, 140, 144, 146, 152, 154, 163, 172, 174, 182, 183, 184, 185, 188, 194, 196, 201, 205, 207, 208, 209, 211, 214, 226, 227, 228, 231, 233, 237, 240, 243, 251, 258, 264, 270, 271, 273, 275, 281, 284, 287, 289, 290, 291, 311, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 340, 343, 347, 348, 349, 353, 355, 367, 369, 371, 372, 376, 378, 380, 381, 384, 385, 386, 387, 398, 402, 404, 406, 408, 409, 411, 413, 415, 418, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 454, 456, 457, 461, 462, 464, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 522, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 694, 700, 721, 722, 723, 724, 785, 788, 792, 795, 797, 798, 799, 800, 803, 804, 814, 822, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 946, 947, 988, 989, 991, 993, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1009, 1012, 1013, 1015, 1016, 1018, 1019, 1023, 1029, 1030, 1033, 1035, 1036, 1037, 1040, 1047], "wellcom": 0, "wen": 1044, "wenbo": [1039, 1041], "wendi": 1039, "wendling": 1036, "weng": 1014, "wenhao": [1037, 1038], "wenhua": 1035, "wenjian": 1035, "wenliwyan": 1040, "went": [376, 999], "were": [0, 43, 68, 102, 103, 106, 111, 112, 140, 143, 146, 149, 160, 163, 172, 184, 207, 208, 211, 234, 243, 267, 271, 273, 275, 301, 302, 309, 314, 315, 317, 318, 319, 320, 321, 322, 323, 328, 340, 347, 349, 354, 355, 366, 367, 369, 372, 373, 376, 380, 384, 386, 395, 401, 405, 411, 412, 461, 464, 465, 494, 559, 560, 562, 563, 601, 803, 804, 819, 828, 851, 901, 902, 988, 991, 999, 1000, 1015, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048], "weren": [347, 878, 1038], "werman": 1041, "werneck": 1037, "werner": [1036, 1041], "werror": 380, "wersd\u00f6rfer": 1031, "weslei": [589, 730], "westermann": [0, 362, 383, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "western": 412, "weston": [44, 409, 533, 592, 593, 900], "westov": 1037, "wetter": 184, "weyb": 1047, "wfc": 51, "wget": 380, "wh": [409, 536, 538, 545], "wh_i": 409, "what": [0, 1, 43, 48, 51, 52, 63, 75, 85, 86, 116, 121, 125, 142, 182, 183, 198, 209, 213, 214, 222, 235, 240, 247, 301, 347, 349, 351, 355, 360, 367, 370, 372, 373, 374, 376, 378, 380, 385, 386, 387, 389, 403, 404, 410, 411, 412, 501, 534, 587, 588, 590, 646, 652, 696, 889, 890, 892, 893, 894, 895, 912, 913, 914, 915, 941, 998, 999, 1000, 1002, 1015, 1019, 1029, 1036, 1047], "whatnot": 347, "whats_new": [376, 380], "wheel": [322, 370, 372, 376, 390, 392, 1039, 1041, 1043, 1048], "wheeler": [1040, 1041], "wheelhouse_upload": 376, "when": [1, 43, 48, 49, 50, 52, 58, 61, 62, 63, 64, 66, 70, 74, 75, 78, 89, 93, 100, 102, 103, 104, 109, 111, 112, 116, 120, 123, 124, 125, 127, 137, 140, 142, 143, 144, 146, 149, 150, 154, 155, 160, 165, 167, 178, 182, 183, 184, 185, 186, 190, 191, 194, 198, 200, 201, 202, 205, 207, 209, 211, 212, 222, 233, 234, 235, 239, 240, 247, 250, 252, 260, 263, 264, 265, 266, 267, 271, 273, 274, 277, 278, 281, 284, 286, 287, 290, 291, 292, 304, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 320, 321, 322, 323, 327, 328, 330, 336, 339, 340, 343, 347, 348, 349, 351, 354, 355, 359, 360, 361, 366, 367, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 384, 385, 386, 390, 395, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 420, 427, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 454, 456, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 479, 480, 481, 482, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 506, 507, 508, 510, 513, 522, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 573, 574, 575, 577, 580, 581, 582, 583, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 605, 608, 609, 610, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 698, 700, 701, 702, 704, 705, 707, 708, 709, 712, 713, 716, 727, 728, 729, 730, 732, 734, 735, 738, 746, 748, 751, 754, 755, 757, 761, 763, 767, 768, 769, 771, 774, 778, 781, 782, 783, 784, 785, 787, 788, 789, 791, 792, 793, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 814, 818, 819, 821, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 890, 891, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 918, 925, 926, 929, 930, 931, 935, 937, 941, 942, 946, 947, 948, 949, 951, 952, 953, 958, 961, 963, 968, 987, 988, 989, 991, 993, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1011, 1012, 1013, 1014, 1015, 1019, 1022, 1023, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "whenev": [174, 182, 258, 355, 366, 380, 386, 390, 402, 479, 480, 481, 494, 628, 630, 969, 990, 998, 1039, 1048], "where": [47, 51, 53, 55, 58, 61, 62, 63, 66, 68, 86, 90, 111, 116, 118, 120, 123, 130, 134, 138, 140, 143, 144, 146, 149, 151, 160, 161, 163, 167, 173, 176, 179, 183, 184, 190, 194, 201, 208, 211, 216, 217, 219, 223, 224, 226, 228, 229, 233, 234, 237, 240, 243, 245, 255, 258, 260, 261, 263, 264, 266, 270, 271, 273, 275, 276, 278, 281, 283, 302, 304, 306, 307, 308, 309, 310, 311, 313, 315, 316, 321, 327, 340, 343, 344, 345, 347, 351, 355, 359, 360, 361, 366, 368, 369, 371, 372, 374, 376, 378, 379, 380, 384, 385, 386, 387, 390, 395, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 427, 434, 441, 444, 445, 449, 458, 460, 461, 462, 464, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 484, 491, 494, 524, 529, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 581, 582, 583, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 605, 608, 610, 611, 613, 615, 619, 622, 623, 625, 627, 628, 629, 630, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 684, 688, 691, 692, 693, 696, 698, 702, 707, 709, 711, 712, 716, 725, 727, 729, 730, 731, 739, 741, 745, 755, 763, 768, 769, 770, 773, 781, 782, 783, 784, 787, 788, 789, 792, 794, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 827, 828, 829, 831, 832, 833, 836, 837, 838, 839, 840, 841, 842, 843, 847, 851, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 867, 874, 877, 879, 880, 883, 884, 890, 892, 898, 899, 900, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 921, 938, 939, 940, 941, 943, 948, 953, 957, 960, 983, 988, 990, 991, 992, 993, 994, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1009, 1010, 1011, 1013, 1014, 1015, 1019, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049], "wherea": [52, 70, 86, 100, 111, 150, 205, 220, 243, 265, 266, 267, 273, 287, 309, 340, 343, 344, 361, 387, 408, 411, 441, 443, 563, 658, 659, 802, 818, 832, 991, 998, 1000, 1002, 1009, 1015, 1042, 1047], "wherein": 386, "whether": [1, 47, 49, 52, 103, 132, 150, 170, 175, 183, 184, 207, 211, 224, 227, 234, 240, 258, 262, 270, 304, 354, 355, 360, 367, 370, 371, 372, 374, 376, 377, 378, 386, 395, 403, 404, 405, 406, 408, 409, 411, 413, 416, 434, 437, 439, 440, 441, 444, 446, 448, 450, 451, 456, 461, 462, 466, 467, 468, 469, 470, 471, 472, 473, 475, 479, 480, 481, 482, 484, 485, 488, 490, 494, 495, 501, 506, 507, 512, 520, 525, 529, 530, 531, 534, 535, 536, 537, 538, 540, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 573, 580, 587, 588, 589, 590, 596, 601, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 629, 631, 632, 633, 635, 636, 637, 638, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 690, 694, 695, 697, 698, 700, 702, 704, 711, 712, 727, 742, 761, 767, 774, 778, 782, 789, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 814, 818, 819, 822, 823, 824, 827, 828, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 861, 862, 864, 867, 868, 869, 870, 871, 876, 883, 884, 885, 891, 899, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 918, 920, 921, 922, 923, 924, 928, 930, 931, 932, 934, 941, 942, 943, 947, 948, 956, 957, 971, 982, 986, 987, 988, 989, 994, 995, 999, 1004, 1005, 1011, 1013, 1014, 1023, 1036, 1037, 1038, 1046, 1048], "whi": [183, 185], "which": [0, 1, 43, 46, 49, 51, 52, 53, 54, 55, 57, 58, 59, 62, 63, 64, 66, 70, 72, 74, 75, 78, 79, 80, 82, 86, 88, 89, 90, 91, 98, 100, 102, 103, 104, 107, 109, 111, 112, 116, 118, 122, 124, 125, 126, 130, 134, 137, 138, 139, 140, 143, 145, 146, 149, 150, 152, 153, 154, 155, 156, 158, 160, 162, 163, 165, 167, 168, 172, 173, 174, 178, 179, 182, 183, 184, 186, 188, 190, 191, 194, 198, 201, 202, 205, 207, 208, 209, 211, 213, 214, 220, 222, 223, 224, 226, 227, 228, 230, 233, 234, 237, 238, 239, 240, 241, 243, 244, 249, 250, 254, 255, 257, 258, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 278, 279, 281, 283, 284, 289, 290, 291, 300, 304, 306, 307, 308, 309, 310, 311, 313, 315, 316, 317, 318, 319, 320, 321, 322, 325, 327, 328, 329, 336, 340, 343, 345, 347, 348, 349, 351, 353, 354, 355, 359, 360, 361, 364, 366, 367, 369, 370, 372, 373, 374, 376, 377, 378, 379, 380, 381, 384, 385, 386, 387, 389, 390, 392, 395, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 421, 427, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 456, 457, 459, 460, 461, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 484, 521, 529, 530, 531, 532, 535, 536, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 578, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 606, 607, 609, 610, 611, 612, 613, 614, 615, 617, 619, 622, 627, 628, 629, 630, 632, 633, 634, 640, 642, 643, 644, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 663, 665, 666, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 680, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 707, 716, 717, 719, 720, 723, 725, 726, 734, 735, 736, 737, 742, 743, 756, 758, 778, 779, 780, 781, 782, 783, 789, 797, 798, 799, 800, 801, 803, 804, 805, 806, 808, 810, 814, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 831, 832, 833, 834, 835, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 854, 855, 856, 857, 858, 861, 864, 865, 868, 871, 875, 877, 878, 879, 882, 883, 884, 885, 886, 888, 896, 897, 899, 900, 901, 904, 906, 909, 910, 912, 913, 914, 915, 916, 920, 922, 925, 926, 930, 931, 939, 941, 942, 943, 947, 948, 950, 953, 956, 957, 958, 960, 968, 970, 973, 979, 982, 987, 988, 989, 990, 991, 992, 993, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1022, 1023, 1025, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "whichev": [404, 411, 443, 542, 559, 560, 562, 563, 633, 650, 654, 656, 664, 682, 683, 697], "whidou": 1042, "while": [1, 25, 43, 46, 47, 49, 51, 55, 58, 61, 63, 64, 70, 72, 74, 78, 79, 88, 95, 99, 102, 105, 107, 118, 124, 125, 134, 137, 140, 141, 144, 149, 151, 154, 163, 168, 173, 175, 176, 178, 182, 183, 184, 185, 188, 190, 192, 194, 197, 198, 201, 203, 207, 209, 211, 222, 233, 236, 237, 240, 241, 250, 251, 255, 257, 258, 259, 263, 264, 265, 267, 271, 272, 273, 274, 275, 277, 286, 304, 305, 306, 309, 310, 311, 313, 316, 319, 320, 322, 333, 336, 347, 349, 354, 355, 360, 364, 365, 366, 367, 368, 371, 372, 374, 376, 377, 378, 380, 381, 384, 386, 387, 398, 402, 403, 404, 407, 408, 409, 411, 412, 413, 414, 415, 416, 441, 447, 461, 464, 465, 480, 482, 494, 519, 530, 550, 555, 556, 557, 558, 562, 563, 564, 565, 566, 567, 568, 574, 581, 587, 588, 589, 590, 593, 596, 601, 605, 634, 643, 646, 647, 649, 656, 657, 658, 659, 676, 677, 678, 679, 690, 694, 708, 730, 754, 774, 778, 788, 794, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 814, 815, 816, 818, 821, 823, 825, 826, 827, 828, 829, 831, 839, 850, 852, 854, 855, 856, 863, 864, 865, 866, 867, 880, 892, 897, 902, 904, 905, 912, 913, 914, 915, 926, 952, 988, 989, 991, 992, 993, 995, 996, 998, 999, 1000, 1001, 1002, 1005, 1006, 1009, 1011, 1014, 1015, 1018, 1019, 1026, 1029, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1048], "whilst": [138, 228], "whisker": 49, "white": [1, 91, 93, 120, 155, 172, 183, 220, 226, 290, 302, 306, 330, 335, 409, 412, 625, 1015, 1029, 1032, 1035, 1039, 1043], "whitekernel": [1, 167, 172, 173, 414, 611, 612, 614, 1040], "whiten": [45, 104, 120, 121, 122, 245, 263, 288, 409, 416, 531, 532, 539, 882, 884, 1009, 1033, 1035, 1043, 1044, 1047], "whiten_solv": [416, 531, 1044, 1047], "whitening_": 531, "whitespac": 412, "whl": 376, "who": [0, 102, 183, 322, 360, 367, 372, 379, 387, 390, 846, 847, 848, 850, 852, 854, 855, 856, 1018, 1031, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "whole": [49, 83, 106, 149, 155, 156, 179, 208, 243, 261, 268, 296, 336, 340, 351, 359, 372, 384, 385, 405, 407, 411, 414, 446, 480, 536, 553, 554, 555, 556, 561, 562, 563, 564, 568, 685, 686, 800, 803, 804, 814, 828, 839, 840, 841, 842, 843, 988, 999, 1009, 1037, 1039], "whose": [1, 88, 110, 111, 112, 163, 172, 207, 263, 334, 367, 381, 386, 400, 402, 404, 406, 408, 411, 413, 414, 417, 434, 435, 436, 445, 458, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 513, 532, 536, 538, 539, 542, 545, 547, 570, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 640, 671, 695, 718, 800, 807, 814, 829, 850, 869, 896, 897, 947, 957, 977, 978, 993, 1000, 1004, 1005, 1006, 1014, 1032, 1037, 1038, 1040, 1043], "why": [64, 72, 85, 120, 134, 140, 149, 183, 185, 188, 198, 209, 258, 264, 281, 347, 348, 372, 374, 380, 386, 404, 406, 409, 415, 441, 444, 448, 941, 943, 999, 1001, 1014, 1032], "wi": 999, "wick": 1041, "wide": [0, 64, 93, 94, 126, 137, 237, 305, 384, 404, 409, 412, 988, 995, 1018, 1023, 1029, 1031, 1045], "widehat": 170, "wider": [52, 209, 412, 917, 995, 1048], "widetild": 1015, "width": [47, 49, 52, 86, 111, 122, 123, 126, 128, 129, 130, 137, 142, 143, 146, 159, 169, 175, 247, 249, 287, 304, 306, 307, 310, 315, 318, 333, 369, 405, 435, 436, 449, 461, 491, 492, 504, 519, 585, 830, 869, 917, 1009, 1013, 1015, 1037], "wiesel": [406, 417, 472], "wignal": [1032, 1033, 1039, 1040], "wijewardena": [0, 1032, 1033, 1034], "wiki": [55, 61, 378, 380, 594, 636, 668, 671, 695, 705, 846, 847, 852, 853, 854, 855, 882, 898, 912, 913, 995, 999, 1015], "wikic": 991, "wikipedia": [37, 42, 61, 180, 380, 404, 594, 606, 607, 636, 656, 668, 671, 682, 683, 695, 704, 705, 707, 709, 712, 716, 718, 726, 729, 730, 731, 734, 735, 738, 743, 756, 783, 785, 786, 788, 789, 792, 793, 846, 847, 852, 853, 854, 855, 882, 898, 912, 913, 948, 991, 995, 999, 1002, 1011, 1015, 1020, 1029, 1036], "wikipedia_principal_eigenvector": [55, 1020], "wikipediadet2017": 999, "wikipediamcc2021": 999, "wil": 1041, "wild": [1, 45, 365, 491, 492, 506, 507, 1025, 1029], "wilderness_area": 243, "wildli": [289, 998], "wilei": [369, 989], "wilhelm": [1033, 1035, 1039], "wilk": 402, "wilksch": 1044, "willamett": 310, "willard": 1041, "willdarnel": 1039, "willduan": 1036, "william": [163, 367, 369, 414, 610, 611, 614, 619, 622, 639, 991, 999, 1003, 1036, 1037, 1038, 1039, 1044, 1045], "williamson": 1039, "willing": [182, 261, 403], "willocx": 1039, "willpeppo": 1041, "wilson": [111, 369, 1029, 1032], "wiman": 1029, "wimld": [1043, 1048], "win": 258, "winata": [1039, 1041], "wind": [184, 1000], "windber": 1040, "windiana42": 1045, "window": [57, 329, 367, 372, 374, 375, 380, 412, 1029, 1032, 1036, 1040, 1042, 1043, 1047], "windowsapp": 390, "windowserror": 1045, "windspe": [43, 184], "wine": [1, 48, 246, 309, 310, 365, 508, 1025], "wine_review": 310, "wineri": 310, "winn": 999, "winter": [43, 52], "winterman": 1030, "wip": [380, 390], "wipf": [645, 995], "wire": [378, 532, 539], "wiryadi": [1041, 1047, 1048], "wisc": [163, 369, 899], "wisconsin": [1, 163, 186, 365, 498, 1007, 1025, 1034], "wise": [1, 46, 63, 175, 208, 233, 274, 304, 348, 359, 386, 402, 404, 408, 409, 413, 455, 529, 532, 535, 539, 543, 544, 547, 548, 551, 553, 554, 557, 558, 591, 594, 595, 597, 598, 599, 605, 640, 652, 700, 754, 816, 818, 819, 820, 832, 851, 881, 894, 895, 898, 971, 973, 974, 975, 976, 979, 991, 993, 995, 999, 1000, 1013, 1029, 1034, 1037, 1038, 1039], "wish": [366, 372, 374, 379, 381, 390, 404, 948, 1036], "wishart": 797, "wissen": 447, "with_cent": [882, 894], "with_column": 263, "with_error": 701, "with_mean": [103, 154, 155, 183, 234, 235, 244, 245, 247, 258, 271, 278, 314, 317, 323, 377, 884, 895, 1009, 1037, 1042], "with_scal": [882, 894], "with_std": [103, 154, 155, 183, 234, 235, 244, 245, 247, 258, 271, 278, 314, 317, 323, 884, 895, 1009, 1037], "withheld": 408, "within": [1, 41, 43, 58, 93, 139, 141, 144, 149, 153, 160, 162, 163, 208, 209, 218, 224, 240, 244, 262, 263, 267, 304, 305, 315, 334, 337, 340, 343, 349, 355, 359, 367, 372, 381, 384, 386, 387, 395, 400, 401, 402, 404, 405, 408, 410, 411, 415, 434, 440, 441, 444, 445, 446, 458, 460, 461, 462, 463, 465, 466, 471, 479, 480, 481, 513, 531, 534, 536, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 589, 592, 593, 610, 611, 632, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 690, 692, 696, 699, 710, 725, 781, 797, 798, 799, 801, 802, 805, 806, 807, 809, 818, 819, 822, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 851, 852, 854, 855, 856, 861, 862, 863, 864, 865, 867, 869, 870, 871, 876, 877, 883, 884, 885, 889, 890, 892, 893, 894, 895, 899, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 988, 993, 995, 996, 1002, 1005, 1009, 1012, 1014, 1015, 1019, 1023, 1031, 1032, 1036, 1037, 1042, 1043, 1045, 1046, 1047, 1048, 1049], "within_class_std_dev_": 851, "without": [1, 43, 44, 52, 53, 61, 71, 77, 79, 81, 85, 88, 89, 95, 99, 100, 107, 125, 140, 144, 145, 148, 149, 151, 154, 159, 163, 165, 174, 180, 182, 183, 184, 194, 198, 214, 233, 237, 240, 241, 243, 244, 246, 257, 258, 265, 269, 270, 271, 281, 284, 285, 286, 287, 293, 294, 295, 296, 304, 305, 309, 311, 313, 322, 323, 340, 343, 348, 361, 367, 368, 370, 372, 373, 374, 376, 377, 378, 381, 384, 385, 386, 387, 395, 398, 400, 404, 405, 408, 409, 411, 412, 413, 414, 429, 436, 438, 443, 455, 466, 471, 489, 494, 502, 513, 530, 532, 553, 554, 561, 578, 579, 611, 627, 631, 634, 639, 657, 659, 692, 700, 781, 803, 804, 805, 812, 814, 829, 830, 846, 853, 857, 863, 864, 867, 870, 873, 874, 876, 880, 881, 882, 884, 889, 902, 904, 926, 968, 988, 989, 991, 993, 995, 996, 999, 1002, 1005, 1009, 1013, 1014, 1015, 1017, 1018, 1019, 1020, 1026, 1029, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1043, 1044, 1045, 1046, 1047, 1048], "withstrok": 75, "witten": 408, "wittenau": 1034, "wk": 705, "wl": 370, "wminkowski": [1041, 1043], "wmt": 51, "wnl": 412, "wo": 412, "wojdyla": [1044, 1045], "wolberg": [163, 369], "wolf": [1, 49, 54, 65, 70, 108, 109, 112, 113, 180, 237, 293, 470, 472, 476, 477, 510, 547, 993, 1020, 1036], "wolframalpha": 1039, "wolodzko": 1042, "wolosonovich": 1037, "wolpert": [411, 565, 566], "wolsza": [1047, 1048], "wompner": 1037, "won": [154, 301, 348, 376, 380, 404, 465, 494, 627, 628, 630, 687, 704, 717, 736, 737, 755, 757, 795, 998, 1009, 1034, 1035, 1040], "wonder": [347, 370], "wonpil": 995, "wood": 1038, "woolam": 1029, "word": [47, 54, 57, 102, 167, 197, 237, 241, 265, 336, 348, 349, 359, 367, 368, 372, 374, 376, 377, 386, 401, 403, 404, 406, 407, 408, 409, 450, 509, 521, 532, 534, 539, 587, 588, 590, 696, 833, 843, 901, 993, 997, 1001, 1004, 1009, 1012, 1013, 1023, 1029, 1037], "word_col": 57, "word_scor": 57, "word_token": 412, "wordnetlemmat": 412, "work": [0, 2, 43, 48, 52, 55, 68, 79, 85, 100, 109, 137, 143, 156, 163, 173, 174, 182, 183, 184, 198, 211, 223, 240, 262, 281, 290, 291, 310, 314, 316, 317, 319, 322, 338, 340, 348, 349, 355, 360, 361, 366, 367, 370, 372, 373, 374, 375, 376, 377, 378, 380, 385, 386, 387, 398, 400, 401, 402, 404, 405, 406, 409, 411, 412, 413, 416, 417, 418, 419, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 454, 457, 461, 462, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 479, 480, 481, 482, 502, 506, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 695, 708, 774, 778, 779, 780, 781, 788, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 948, 952, 988, 989, 991, 993, 994, 995, 996, 998, 999, 1001, 1002, 1005, 1006, 1009, 1012, 1013, 1018, 1019, 1023, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "workabl": 377, "workaround": [310, 372, 408, 800, 814, 1033], "workclass": [320, 494], "worker": [360, 386, 412, 966, 967, 1044, 1049], "workflow": [372, 375, 376, 385, 408, 1022, 1025], "working_memori": [359, 360, 465, 781, 902, 1037], "workingdai": [43, 184], "workload": 1018, "workshop": [0, 404, 412, 839, 1001], "workstat": 380, "world": [0, 88, 102, 106, 183, 211, 230, 243, 258, 347, 359, 365, 369, 404, 409, 412, 965, 989, 999, 1001, 1019, 1023, 1025, 1029], "worldwid": 1023, "wornbb": 1040, "worri": [87, 996], "wors": [43, 116, 134, 168, 184, 213, 264, 272, 283, 309, 355, 402, 404, 414, 427, 462, 479, 480, 481, 550, 552, 554, 556, 558, 560, 563, 566, 568, 610, 611, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 669, 670, 672, 673, 678, 679, 680, 705, 721, 722, 723, 724, 728, 785, 837, 838, 847, 855, 862, 905, 907, 910, 913, 915, 999, 1009, 1038], "worse_prob": 264, "worsen": 144, "worst": [163, 207, 310, 369, 404, 441, 444, 708, 712, 729, 730, 783, 784, 787, 792, 793, 829, 999, 1023, 1029, 1042], "worth": [88, 142, 184, 207, 372, 1023], "worthwhil": [104, 386], "would": [0, 25, 43, 45, 48, 52, 63, 64, 66, 68, 86, 88, 91, 102, 109, 111, 112, 116, 118, 125, 134, 146, 155, 163, 167, 172, 173, 183, 184, 185, 186, 188, 194, 199, 201, 207, 208, 209, 221, 224, 233, 240, 243, 251, 258, 260, 261, 264, 265, 270, 272, 274, 278, 281, 284, 290, 296, 301, 304, 305, 309, 310, 316, 319, 328, 336, 340, 343, 344, 347, 349, 354, 355, 359, 367, 368, 372, 373, 374, 378, 380, 381, 384, 385, 386, 387, 395, 398, 401, 402, 404, 405, 406, 407, 408, 409, 411, 412, 413, 427, 443, 462, 465, 479, 480, 481, 486, 525, 530, 532, 534, 539, 542, 550, 552, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 566, 568, 582, 583, 586, 588, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 611, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 672, 673, 674, 675, 676, 678, 679, 700, 702, 708, 712, 713, 720, 756, 778, 782, 785, 800, 802, 814, 821, 829, 837, 838, 847, 855, 862, 889, 890, 892, 893, 894, 895, 896, 897, 902, 904, 905, 907, 910, 912, 913, 914, 915, 957, 960, 988, 989, 992, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1009, 1014, 1018, 1019, 1023, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "wp": [412, 657, 671], "wpd": 347, "wprd": 412, "wrap": [1, 120, 139, 146, 165, 258, 284, 321, 366, 374, 386, 398, 403, 428, 434, 506, 609, 657, 658, 659, 676, 730, 830, 888, 942, 989, 999, 1002, 1014, 1018, 1029, 1034, 1037, 1039, 1040, 1042, 1044, 1049], "wraparound": 373, "wrapper": [1, 64, 284, 378, 381, 408, 414, 542, 620, 668, 671, 742, 904, 995, 1015, 1018, 1033, 1041, 1048], "wrath": 405, "write": [47, 55, 147, 179, 186, 240, 313, 347, 359, 360, 366, 370, 371, 372, 376, 377, 378, 380, 381, 384, 386, 398, 400, 405, 409, 412, 1010, 1019, 1030, 1042, 1046], "writeabl": [930, 931, 1047], "writer": 347, "written": [41, 44, 46, 65, 84, 86, 123, 161, 180, 257, 288, 316, 325, 326, 360, 369, 372, 373, 374, 378, 380, 384, 386, 405, 410, 484, 500, 506, 697, 709, 713, 830, 909, 916, 993, 995, 999, 1003, 1004, 1013, 1020, 1038], "wrong": [93, 207, 258, 290, 347, 355, 369, 372, 374, 412, 502, 726, 756, 793, 999, 1005, 1014, 1032, 1034, 1036, 1037, 1038, 1039, 1042, 1046, 1047], "wrongli": [207, 336, 1047, 1049], "wrote": [154, 367], "ws2001": 991, "wspace": [53, 54, 74, 79, 95, 111, 120, 136, 207, 224, 233, 249, 251, 252, 255, 289, 297, 326, 333], "wstate": 1042, "wtv": 378, "wtw": 378, "wu": [1014, 1033, 1041], "wurp": [1043, 1044], "wuthrich": [207, 224], "ww": 409, "www": [45, 103, 188, 207, 222, 224, 278, 283, 301, 366, 367, 372, 404, 408, 439, 446, 484, 506, 507, 529, 532, 535, 539, 644, 658, 664, 671, 685, 686, 853, 860, 912, 913, 995, 1012], "www4": [163, 369], "wyseguy7": 1035, "w\u00fcthrich": 402, "x": [1, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 61, 62, 63, 64, 66, 67, 69, 70, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 103, 104, 106, 107, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 124, 125, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 224, 226, 227, 228, 231, 233, 234, 236, 237, 238, 239, 240, 241, 243, 244, 246, 247, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 281, 283, 284, 286, 287, 289, 290, 291, 292, 293, 294, 295, 297, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 351, 352, 353, 354, 355, 359, 365, 366, 367, 368, 372, 373, 374, 376, 377, 378, 379, 380, 381, 384, 385, 386, 395, 398, 400, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 491, 492, 493, 496, 498, 499, 500, 503, 504, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 580, 581, 582, 584, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 706, 710, 711, 725, 732, 735, 742, 758, 759, 760, 761, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 788, 792, 793, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 921, 923, 925, 926, 927, 928, 929, 930, 931, 934, 945, 948, 949, 950, 960, 961, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 987, 988, 989, 990, 991, 993, 994, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1009, 1011, 1012, 1013, 1014, 1015, 1019, 1026, 1029, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "x0": [51, 215, 229, 247, 304, 333, 386, 425, 461, 565, 566, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 627, 628, 629, 630, 867, 868, 869, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885], "x00": 412, "x006": 1030, "x00a": 412, "x00b": 412, "x00c": 412, "x00d": 412, "x00e": 412, "x00f": 412, "x00g": 412, "x00h": 412, "x00i": 412, "x00l": 412, "x00n": 412, "x00o": 412, "x00r": 412, "x00t": 412, "x00u": 412, "x00z": 412, "x0_cat": [317, 1009], "x0_infrequent_sklearn": [317, 1009], "x0_label": 304, "x0_rabbit": [317, 1009], "x0_str_femal": 877, "x0_str_male": 877, "x0l": 1033, "x1": [51, 115, 136, 145, 170, 218, 229, 304, 333, 374, 386, 425, 461, 507, 565, 566, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 627, 628, 629, 630, 699, 867, 868, 869, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885], "x110": 1044, "x1_int_1": 877, "x1_int_2": 877, "x1_int_3": 877, "x1_label": 304, "x2": [115, 136, 145, 170, 218, 247, 374, 405, 587, 629, 699], "x27": [51, 63, 103, 104, 139, 141, 150, 151, 154, 155, 156, 160, 172, 183, 184, 185, 192, 234, 235, 244, 245, 246, 247, 254, 258, 262, 263, 264, 265, 271, 276, 278, 302, 310, 314, 315, 317, 318, 320, 323, 327, 353, 354], "x2_tr": 629, "x3": [145, 247, 405], "x7f48841cd870": 262, "x7f48843dcee0": 139, "x7f48853c5f40": 276, "x7f489c450ee0": 254, "x7f489fc71450": 276, "x7f48a4c1f9a0": [160, 247, 317], "x7f48a4c1fb50": 103, "x7f48a5f74160": 139, "x7f48a6002e60": 263, "x8": 86, "x86_64": [375, 390], "x9ft": 412, "x_": [158, 168, 255, 264, 313, 374, 404, 407, 409, 627, 635, 764, 859, 899, 900, 995, 1001, 1006, 1035], "x_0": [208, 657], "x_1": [120, 158, 170, 208, 407, 409, 411, 613, 625, 657, 877, 904, 905, 995, 1001, 1003, 1009, 1013], "x_1d": 317, "x_1x_2": 1009, "x_1x_2x_3": 1009, "x_1x_3": 1009, "x_2": [158, 170, 409, 411, 412, 613, 625, 995, 1003, 1009], "x_20": 329, "x_2d": 336, "x_2x_3": 1009, "x_3": [158, 1009], "x_6": 877, "x_7": 877, "x_a": 308, "x_adult": 320, "x_aniso": [79, 90, 95], "x_axi": [122, 214, 268], "x_b": 308, "x_bimod": 308, "x_bin": 305, "x_bound": [414, 617], "x_c": [479, 480, 482, 1006], "x_calib": 434, "x_california": 179, "x_cardiotocographi": 243, "x_center": 192, "x_check": 931, "x_chisq": 308, "x_cluster": 856, "x_convert": 930, "x_copi": 1040, "x_cu": 400, "x_d": [414, 614], "x_dens": [320, 542], "x_df": 151, "x_diabet": 179, "x_different_covari": 70, "x_digit": [105, 300, 405], "x_dist_graph": 848, "x_embed": [293, 294, 692, 696, 853, 1002], "x_error": 213, "x_errors_larg": 213, "x_featur": [106, 640, 641, 642, 991], "x_filter": 90, "x_fit": 688, "x_fit_": [533, 643], "x_forestcov": 243, "x_full": [178, 179, 304], "x_full_train": 139, "x_gaussian": 308, "x_hashed_lsa": 348, "x_hat": [529, 535, 543, 544], "x_hetero": 127, "x_homo": 127, "x_i": [52, 111, 138, 158, 183, 208, 316, 343, 404, 409, 410, 411, 414, 614, 615, 619, 622, 623, 625, 839, 840, 843, 990, 991, 995, 1001, 1002, 1003, 1009, 1013, 1014, 1015], "x_idx_sort": 1041, "x_imput": 630, "x_indic": 159, "x_inform": 311, "x_inlier": 291, "x_ipca": 124, "x_iri": 269, "x_isotropic_covari": 70, "x_j": [404, 414, 614, 615, 619, 622, 623, 625, 990, 991, 995, 1002, 1014, 1015], "x_k": [407, 409, 993, 1002], "x_label": 179, "x_leav": [555, 556, 557, 558, 562, 563, 564, 912, 913, 914, 915], "x_left_lower_corn": [50, 297, 367, 496], "x_legend": 47, "x_list": 307, "x_loadings_": [479, 480, 481], "x_lognorm": [308, 1009], "x_lsa": 348, "x_m": 1003, "x_max": [67, 85, 91, 136, 142, 152, 169, 238, 299, 306, 330, 340, 341], "x_max_": 635, "x_md": 229, "x_mean": 416, "x_mean_": 1041, "x_min": [67, 85, 91, 136, 142, 146, 152, 169, 198, 238, 299, 306, 330, 340, 341], "x_min_": 635, "x_miss": [149, 178, 179], "x_miss_california": 179, "x_miss_diabet": 179, "x_n": [120, 409, 904, 905, 1001, 1003, 1013], "x_near_unique_categori": 311, "x_new": [89, 405, 409, 413, 428, 439, 440, 442, 444, 446, 529, 530, 531, 532, 533, 534, 535, 537, 539, 540, 541, 542, 547, 565, 567, 568, 581, 582, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 628, 630, 635, 638, 639, 640, 641, 642, 688, 689, 690, 691, 692, 853, 860, 867, 868, 869, 870, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 896, 897, 1011], "x_new_again": 1011, "x_new_invers": 1011, "x_nmd": 229, "x_norm_squar": [763, 1034, 1046], "x_normal": 1009, "x_np": 400, "x_offset": 192, "x_offset_": [644, 645, 1041], "x_origin": [442, 479, 480, 481, 529, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 580, 587, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 630, 800, 803, 804, 814, 864, 868, 869, 873, 874, 877, 878, 880, 881, 882, 884, 896, 897], "x_out": [318, 868, 877, 878], "x_outlier": [193, 220, 290, 291, 335], "x_p": [404, 443, 995], "x_pca": 124, "x_plot": [190, 208, 213, 239, 267, 289, 309, 345], "x_plot_ext": 208, "x_plot_scal": 309, "x_po": 283, "x_q": 404, "x_r": [128, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602], "x_r2": 128, "x_rand": 270, "x_random": 198, "x_reconstruct": [317, 582], "x_reconstructed_kernel_pca": [44, 125], "x_reconstructed_pca": [44, 125], "x_red": 85, "x_reduc": [84, 126, 152, 442], "x_restor": 84, "x_right": 70, "x_rope": 264, "x_rotations_": [407, 479, 480, 481], "x_scale": [192, 874, 890, 1009], "x_scale_": [644, 645, 1041], "x_scaler": 49, "x_score": [291, 479, 480, 481, 482], "x_scores_": [481, 1041], "x_select": 355, "x_shared_covari": 70, "x_shuffl": 311, "x_size": 112, "x_sp": 195, "x_spars": [320, 532, 969, 972], "x_sparse_embed": 564, "x_squared_norm": [252, 457], "x_src": 289, "x_std": [874, 890, 1009], "x_std_": 1041, "x_t": [461, 627, 863], "x_test": [44, 45, 46, 47, 49, 52, 61, 62, 63, 64, 66, 67, 68, 102, 103, 107, 109, 115, 116, 125, 134, 137, 139, 141, 145, 146, 147, 148, 149, 150, 153, 159, 160, 165, 172, 175, 182, 183, 184, 185, 186, 188, 191, 194, 199, 204, 205, 213, 214, 220, 221, 222, 224, 234, 236, 242, 246, 247, 251, 257, 258, 261, 262, 267, 271, 273, 277, 279, 283, 287, 290, 292, 293, 296, 299, 301, 302, 306, 308, 309, 311, 313, 314, 315, 320, 321, 328, 329, 335, 347, 351, 353, 354, 355, 359, 366, 374, 377, 385, 398, 405, 408, 411, 435, 467, 468, 469, 470, 471, 472, 473, 507, 556, 557, 558, 565, 566, 697, 698, 700, 702, 799, 822, 830, 832, 835, 853, 861, 862, 864, 878, 914, 915, 989, 999, 1001, 1002, 1003, 1005, 1009, 1013, 1014, 1015, 1026, 1029], "x_test_df": 247, "x_test_kernel_pca": 125, "x_test_maxab": 1009, "x_test_minmax": 1009, "x_test_miss": 149, "x_test_no_cf_encod": 311, "x_test_noisi": 44, "x_test_np": 247, "x_test_pca": [45, 125], "x_test_r": 115, "x_test_scal": 247, "x_test_sel": 186, "x_test_select": 355, "x_test_text": 47, "x_test_tran": 1009, "x_test_transform": [355, 408], "x_text": 47, "x_tfidf": 348, "x_thresholds_": [236, 635, 1041], "x_torch": 400, "x_tr": [867, 873, 876, 882, 884, 887, 889, 890, 894, 895], "x_train": [44, 45, 46, 47, 49, 52, 61, 62, 63, 64, 66, 67, 68, 102, 103, 107, 109, 115, 116, 125, 134, 137, 141, 144, 145, 146, 147, 148, 149, 150, 153, 159, 160, 165, 173, 174, 175, 176, 182, 183, 184, 185, 186, 188, 191, 194, 204, 205, 208, 214, 220, 221, 222, 224, 234, 242, 246, 247, 251, 253, 257, 258, 261, 262, 267, 271, 273, 277, 283, 287, 290, 292, 293, 296, 299, 301, 302, 306, 308, 309, 311, 313, 314, 315, 320, 321, 323, 328, 329, 335, 347, 351, 354, 355, 359, 366, 374, 377, 385, 405, 408, 411, 434, 435, 507, 556, 557, 558, 565, 566, 697, 698, 700, 702, 799, 822, 830, 832, 835, 853, 861, 862, 864, 878, 914, 915, 989, 999, 1001, 1002, 1003, 1005, 1007, 1009, 1013, 1014, 1026], "x_train_": 611, "x_train_ensembl": 139, "x_train_linear": 139, "x_train_maxab": 1009, "x_train_minmax": 1009, "x_train_miss": 149, "x_train_no_cf_encod": 311, "x_train_noisi": 44, "x_train_pca": 45, "x_train_preprocess": 183, "x_train_r": 115, "x_train_sel": 186, "x_train_select": 355, "x_train_std_transform": 309, "x_train_text": 47, "x_train_tran": 1009, "x_train_transform": [309, 355, 408], "x_train_valid": 63, "x_tran": [308, 319, 400, 439, 461, 880, 885, 892, 925, 1009], "x_trans_bc": 308, "x_trans_qt": 308, "x_trans_yj": 308, "x_transform": [124, 152, 240, 482, 529, 530, 531, 532, 533, 535, 537, 541, 564, 638, 639, 688, 689, 690, 691], "x_transformed_fit_": 533, "x_true": 229, "x_uniform": 308, "x_val": [144, 322, 323, 559, 560, 1007, 1049], "x_valid": 63, "x_valu": 328, "x_vari": 90, "x_weibul": 308, "x_weights_": [407, 479, 480, 481, 482], "x_wrong": 70, "xa": 580, "xanchor": 265, "xarg": 1029, "xavier": [861, 862, 1037, 1038, 1039, 1041, 1042, 1047], "xaxi": [126, 140, 226, 228, 231, 284, 289, 347], "xaxis2": 140, "xb": [115, 883], "xbar_": 547, "xbc": 412, "xc3": 412, "xcjason": 1039, "xcode": 370, "xd": 524, "xdang": 679, "xerox": 51, "xerr": [178, 179, 348], "xethan": 1041, "xfail": [380, 941, 942, 943, 1048], "xfc": 412, "xfcche": 412, "xfea": 412, "xff": 412, "xgamma": 685, "xgboost": [149, 151, 411, 1018], "xgrid": [50, 297], "xhan": 1038, "xhy": 1036, "xi": [1, 79, 98, 369, 404, 407, 412, 447, 453, 507, 1013, 1040], "xi_i": 1013, "xi_k": 407, "xiang": 1047, "xiangyin": 1042, "xiao": [0, 383, 393, 1037, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "xiaojin": 899, "xiaoyu": 1041, "xiaoyuchai": 1042, "xin": [679, 995, 1037], "xinfan": [1029, 1030, 1033], "xing": [1037, 1038], "xinyu": 404, "xinyuliu12": 1038, "xiong": [1037, 1038, 1043], "xj": 402, "xk": [98, 548], "xlabel": [43, 47, 48, 52, 61, 62, 63, 64, 69, 72, 76, 94, 109, 110, 112, 113, 115, 116, 122, 126, 127, 135, 136, 138, 143, 145, 146, 147, 148, 149, 153, 156, 158, 159, 162, 167, 168, 169, 170, 172, 173, 174, 183, 190, 193, 194, 196, 197, 198, 199, 201, 202, 203, 205, 207, 209, 210, 212, 215, 216, 220, 224, 237, 239, 241, 243, 259, 263, 264, 268, 269, 273, 274, 277, 279, 286, 287, 290, 291, 310, 311, 333, 335, 336, 339, 347, 352, 353, 631], "xlim": [51, 63, 79, 91, 95, 105, 109, 110, 111, 122, 136, 137, 138, 153, 168, 169, 183, 190, 199, 201, 206, 213, 215, 220, 233, 241, 250, 255, 259, 273, 279, 290, 291, 335, 340, 341, 344, 353], "xm": [51, 229], "xmax": [50, 109, 199, 201, 215, 216, 297], "xmin": [50, 109, 199, 201, 215, 216, 297], "xn": 507, "xom": 51, "xor": [155, 166, 168, 169, 170, 180, 216, 217, 219, 253, 307, 341, 610, 614, 622, 995, 1015, 1020, 1036], "xp": [407, 879], "xpreprocessor": 370, "xrang": 1035, "xred": 1045, "xrot": 53, "xrx": 51, "xs_sp": 195, "xsat": 1039, "xscale": [168, 173, 239], "xt": [156, 284, 386, 627, 629, 800, 803, 804, 814, 848, 856, 864, 869, 874, 881, 893, 928, 1045, 1047], "xtick": [43, 45, 47, 50, 66, 70, 75, 79, 80, 83, 84, 85, 91, 92, 95, 113, 115, 123, 143, 145, 149, 169, 170, 171, 175, 199, 219, 233, 241, 250, 251, 252, 255, 263, 264, 279, 288, 297, 302, 310, 325, 336, 339, 341, 697], "xtick_period": 184, "xtick_start": 184, "xticklabel": [43, 49, 143, 149, 184, 310], "xticks_label": 145, "xticks_po": 145, "xticks_rot": [45, 697], "xtrain": 297, "xu": [404, 407, 415, 441, 1013, 1042, 1043, 1046, 1047, 1048, 1049], "xue": [0, 1033, 1034, 1035, 1037, 1038, 1041], "xuefeng": [1046, 1047, 1048, 1049], "xueqin": [679, 995], "xun": [1039, 1041], "xuniu": 1044, "xval": 179, "xw": [206, 316, 646, 647, 649, 652, 653, 654, 655, 656, 660, 661, 662, 663, 672, 681, 682, 683, 684, 995], "xx": [77, 91, 111, 142, 146, 152, 169, 170, 171, 184, 201, 216, 217, 218, 219, 220, 231, 233, 241, 253, 290, 299, 306, 307, 330, 335, 336, 340, 341, 344], "xx0": [136, 631], "xx1": [136, 631], "xx_coarser": 142, "xy": [48, 63, 82, 271, 297, 341, 390, 646, 647, 650, 651, 652, 653, 654, 655, 660, 661, 662, 663, 664, 681, 682, 683, 684, 686], "xycoord": [48, 63], "xyguo": [1035, 1037], "xytext": [48, 63, 188], "xyz": 371, "y": [1, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 61, 62, 63, 64, 66, 67, 69, 70, 72, 74, 75, 77, 78, 79, 85, 87, 89, 90, 93, 94, 95, 98, 99, 103, 104, 106, 107, 112, 115, 116, 118, 122, 124, 125, 128, 129, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 182, 183, 184, 185, 186, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 221, 222, 224, 226, 227, 228, 231, 234, 236, 237, 238, 239, 240, 241, 243, 244, 246, 247, 249, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 281, 283, 284, 286, 287, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 304, 305, 306, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 351, 352, 353, 354, 355, 364, 365, 366, 367, 368, 370, 372, 374, 376, 377, 379, 380, 381, 385, 386, 395, 398, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 461, 462, 465, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 484, 496, 498, 500, 503, 506, 507, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 524, 526, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 580, 581, 582, 584, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 697, 698, 699, 700, 701, 702, 706, 711, 726, 727, 732, 735, 741, 742, 756, 758, 759, 760, 761, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 785, 788, 789, 792, 793, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 917, 923, 924, 930, 935, 936, 960, 962, 963, 964, 969, 972, 985, 987, 988, 989, 990, 991, 993, 994, 995, 997, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1009, 1013, 1014, 1015, 1019, 1025, 1026, 1029, 1030, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "y0": [51, 229], "y1": [51, 136, 229, 507, 716, 1000, 1001], "y1_label": 46, "y2": [136, 716, 1000], "y2_label": 46, "y3": 1000, "y_": [236, 250, 254, 255, 296, 374, 407, 409, 637, 648, 669, 680, 709, 729, 730, 738, 764, 783, 784, 787, 995, 999, 1035], "y_1": [135, 353, 407, 999, 1003, 1013], "y_2": [135, 353, 1003], "y_20": 329, "y_2d": 336, "y_3": 353, "y_30": 330, "y_50": 330, "y_adult": 320, "y_all": [666, 668, 676, 832, 833, 861], "y_ard": 190, "y_ard_std": 190, "y_axi": [122, 214], "y_bia": 137, "y_brr": 190, "y_brr_std": 190, "y_c": [479, 480, 482], "y_calib": 434, "y_california": 179, "y_coclust": 57, "y_convert": 930, "y_cov": 611, "y_cu": 400, "y_decis": [320, 835], "y_dens": 1000, "y_diabet": 179, "y_different_covari": 70, "y_digit": [105, 300, 405], "y_error": [137, 213], "y_errors_larg": 213, "y_filter": 90, "y_full": [178, 179, 304], "y_full_train": 139, "y_grid_pr": 152, "y_hat": 462, "y_high": 146, "y_i": [138, 316, 343, 402, 411, 990, 991, 995, 999, 1003, 1013, 1014, 1015], "y_indic": 875, "y_iri": 269, "y_isotropic_covari": 70, "y_j": [991, 999, 1001, 1009, 1014], "y_k": [407, 1009], "y_kmean": 57, "y_kr": 239, "y_l": 999, "y_label": 224, "y_left_lower_corn": [50, 297, 367, 496], "y_limit": 143, "y_loadings_": [479, 480, 481], "y_loc": 347, "y_log_prob": 835, "y_log_proba": [851, 864], "y_low": 146, "y_lower": [93, 146], "y_mask": 329, "y_max": [67, 91, 136, 142, 152, 169, 224, 238, 299, 306, 330, 340, 341, 635, 637], "y_mean": [172, 173, 176, 611, 644, 645], "y_mean_": 1041, "y_med": 146, "y_min": [67, 91, 136, 142, 152, 169, 238, 299, 306, 330, 340, 341, 635, 637], "y_miss": [178, 179], "y_miss_california": 179, "y_miss_diabet": 179, "y_multirf": 153, "y_n": [999, 1003, 1013], "y_new": 89, "y_nois": 137, "y_noisi": 206, "y_norm_squar": 763, "y_normal": 209, "y_np": 400, "y_numer": [930, 987], "y_observ": 321, "y_onehot_test": 273, "y_org": 935, "y_origin": [479, 480, 481, 871, 872, 875], "y_outlier": 193, "y_pareto": 209, "y_plot": [190, 208, 213, 267, 345], "y_plot_ext": 208, "y_po": 349, "y_pred": [43, 45, 46, 52, 62, 66, 68, 70, 79, 90, 95, 102, 107, 134, 146, 147, 149, 154, 160, 183, 205, 207, 209, 216, 221, 223, 224, 233, 234, 258, 260, 262, 267, 291, 295, 302, 309, 321, 328, 329, 355, 372, 379, 386, 400, 411, 427, 436, 462, 479, 480, 481, 547, 550, 552, 554, 555, 556, 558, 560, 562, 563, 565, 566, 568, 611, 631, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 678, 679, 680, 697, 698, 700, 701, 702, 703, 708, 712, 713, 718, 721, 722, 723, 724, 728, 729, 730, 734, 736, 738, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 783, 784, 785, 787, 790, 791, 796, 800, 803, 804, 814, 825, 835, 837, 838, 847, 851, 855, 862, 864, 904, 905, 906, 907, 908, 909, 910, 913, 915, 999, 1001, 1026, 1035, 1036, 1038, 1040, 1044, 1045, 1046, 1049], "y_pred_ard": 194, "y_pred_bin": 207, "y_pred_chain": 283, "y_pred_empti": [729, 730], "y_pred_enet": 194, "y_pred_ensembl": 283, "y_pred_lasso": 194, "y_pred_lr": 209, "y_pred_nnl": 204, "y_pred_ol": 204, "y_pred_outli": [220, 290, 335], "y_pred_outliers_sgd": 220, "y_pred_ovr": 283, "y_pred_proba": 66, "y_pred_product": 224, "y_pred_qr": 209, "y_pred_ridg": 107, "y_pred_ridge_with_trans_target": 107, "y_pred_scal": 309, "y_pred_seg": 207, "y_pred_test": [220, 290, 335], "y_pred_test_sgd": 220, "y_pred_tot": 224, "y_pred_train": [220, 335], "y_pred_train_sgd": 220, "y_pred_with_": 182, "y_pred_without_": 182, "y_predict": [137, 374, 1029], "y_prob": [62, 64, 170, 435, 436, 709, 835, 861, 999, 1043, 1047], "y_proba": [145, 148, 309, 386, 709, 851, 864, 1047], "y_proba_sc": 309, "y_rand": 330, "y_rf": 153, "y_right": 70, "y_rotations_": [407, 479, 480, 481], "y_sampl": [176, 611], "y_scaler": 49, "y_score": [234, 243, 271, 273, 386, 479, 480, 481, 547, 702, 706, 707, 720, 726, 727, 739, 740, 756, 782, 788, 789, 794, 800, 803, 804, 814, 851, 864, 999, 1035, 1043, 1045, 1047, 1049], "y_scores_": [481, 1041], "y_shared_covari": 70, "y_spars": 1000, "y_std": [173, 176, 550, 611, 644, 645, 1042], "y_std_": 1041, "y_svr": 239, "y_test": [44, 45, 46, 47, 49, 52, 61, 62, 63, 64, 66, 67, 68, 102, 103, 107, 115, 116, 125, 134, 137, 139, 141, 145, 146, 147, 148, 149, 150, 153, 159, 160, 165, 175, 182, 183, 184, 185, 186, 188, 194, 204, 205, 207, 213, 214, 221, 222, 224, 234, 242, 246, 247, 251, 257, 258, 261, 262, 267, 271, 273, 277, 283, 287, 292, 293, 299, 301, 302, 306, 309, 311, 313, 314, 315, 320, 321, 328, 329, 347, 351, 354, 355, 366, 377, 385, 405, 408, 411, 435, 507, 556, 557, 558, 565, 566, 697, 698, 700, 702, 799, 822, 830, 832, 835, 853, 861, 862, 864, 914, 915, 999, 1001, 1002, 1009, 1014, 1026, 1029], "y_test_pr": 251, "y_test_predict": 242, "y_test_r": 115, "y_test_tru": 328, "y_thresholds_": [236, 635, 1041], "y_torch": 400, "y_train": [44, 45, 46, 47, 49, 52, 61, 62, 63, 64, 66, 67, 68, 102, 103, 107, 115, 116, 125, 134, 137, 141, 144, 145, 146, 147, 148, 149, 150, 153, 159, 160, 165, 173, 174, 175, 176, 182, 183, 184, 185, 186, 188, 191, 194, 204, 205, 208, 214, 221, 222, 234, 242, 246, 247, 251, 257, 258, 261, 262, 267, 271, 273, 277, 283, 287, 292, 293, 299, 301, 302, 306, 309, 311, 313, 314, 315, 320, 321, 323, 325, 326, 328, 329, 330, 347, 351, 354, 355, 359, 366, 374, 377, 385, 405, 408, 411, 434, 435, 507, 556, 557, 558, 565, 566, 697, 698, 700, 702, 799, 822, 830, 832, 835, 853, 861, 862, 864, 914, 915, 989, 999, 1001, 1002, 1007, 1009, 1014, 1026], "y_train_": 611, "y_train_ensembl": 139, "y_train_linear": 139, "y_train_noisi": 174, "y_train_pr": 251, "y_train_r": 115, "y_train_valid": 63, "y_tran": 107, "y_transform": 482, "y_true": [43, 52, 57, 68, 92, 107, 134, 154, 170, 207, 216, 224, 243, 252, 258, 328, 372, 400, 427, 435, 436, 462, 479, 480, 481, 550, 552, 554, 555, 556, 558, 560, 562, 563, 566, 568, 611, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 678, 679, 697, 698, 700, 701, 702, 703, 706, 707, 708, 709, 712, 713, 718, 720, 721, 722, 723, 724, 726, 727, 728, 729, 730, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 782, 783, 784, 785, 787, 788, 789, 790, 791, 794, 796, 799, 837, 838, 847, 855, 862, 905, 907, 910, 913, 915, 999, 1030, 1035, 1036, 1037, 1038, 1040, 1041, 1043, 1044, 1046, 1049], "y_true_bin": 207, "y_true_categor": [709, 999], "y_true_empti": 729, "y_true_mean": 209, "y_true_seg": 207, "y_type_": 871, "y_uniqu": [61, 66], "y_upper": [93, 146], "y_val": [144, 322, 323, 559, 560, 1007, 1049], "y_valid": 63, "y_var": 137, "y_vari": 90, "y_weights_": [407, 479, 480, 481, 482], "y_wrong": 70, "yacin": 1037, "yadav": 1043, "yagi": 1041, "yahoo": 51, "yaich": 1049, "yair": [404, 691, 1049], "yakov": 1041, "yalburgi": [1036, 1037], "yaman": 1044, "yamanishi": 367, "yamin": 1029, "yaml": [376, 380], "yan": [1033, 1041], "yanchor": 265, "yang": [367, 404, 409, 532, 639, 1035, 1036, 1039, 1041, 1042, 1043, 1045, 1046], "yangarbit": 1036, "yanhong": 1044, "yanlend": 1035, "yann": [1029, 1031], "yanni": 404, "yannick": [1029, 1031], "yao": [0, 369, 383, 393, 1035, 1036, 1037, 1038, 1045, 1046, 1047, 1048, 1049], "yap": 1036, "yar": 1043, "yareyaredesuyo": [1047, 1048], "yaroslav": [0, 394, 1029, 1030, 1031, 1032, 1035, 1036, 1037, 1038, 1045, 1046, 1047, 1048, 1049], "yarowski": [315, 901, 1012], "yashika": 1041, "yaslam": 1049, "yasmeen": 1042, "yat2016": 404, "yate": [589, 730], "yates2011": 589, "yau": [1032, 1033, 1034, 1035, 1036], "yaxi": [46, 49, 93, 126, 140, 226, 228, 231, 249, 284, 289, 347], "ye": [347, 380, 386, 398, 658, 659, 871, 888, 995], "year": [0, 43, 156, 163, 172, 182, 183, 184, 207, 208, 224, 321, 369, 371, 376, 384, 408, 412, 802, 807, 809, 883, 995, 999, 1019, 1023], "yearli": [43, 387], "yearremodadd": 154, "yeast": [283, 835], "yee": [1036, 1037], "yegelwel": 1041, "yeh": 1042, "yelit": 1035, "yellow": [70, 118, 336, 353, 1000], "yellowbrick": 1018, "yellowgreen": [208, 210, 216, 353], "yen": [1035, 1036], "yenchen": [0, 1035], "yenchenlin": 1035, "yenugula": [1047, 1049], "yeo": [304, 308, 880, 892, 1009, 1037, 1043, 1045, 1049], "yeojohnson": 1049, "yep": 375, "yerr": [105, 110, 112, 141, 143, 162, 286, 310, 328], "yesy": 392, "yesyesclassificationclassificationnumb": 392, "yesyesdo": 392, "yesyesfew": 392, "yesyesllelledimensionalityreductiondimension": 392, "yesyespredict": 392, "yesyessgdclassifiersgd": 392, "yesyessgdregressorsgd": 392, "yesyestextdatatext": 392, "yet": [48, 90, 194, 224, 254, 265, 322, 349, 361, 367, 371, 374, 376, 384, 389, 390, 395, 408, 409, 411, 412, 414, 445, 449, 458, 459, 551, 552, 576, 982, 988, 995, 999, 1005, 1013, 1019, 1038, 1046], "yeung": 1035, "ygrid": [50, 297], "yhoo": 51, "yi": [507, 1001, 1033, 1037, 1038, 1041], "yichuan": [1035, 1036], "yield": [1, 47, 48, 62, 88, 109, 110, 111, 112, 146, 155, 194, 204, 207, 221, 224, 269, 283, 299, 304, 333, 338, 347, 348, 355, 359, 361, 366, 377, 386, 401, 404, 406, 408, 409, 411, 412, 413, 434, 446, 465, 469, 506, 507, 535, 536, 537, 539, 544, 551, 552, 557, 558, 559, 560, 565, 566, 593, 601, 647, 651, 652, 653, 655, 661, 663, 665, 673, 675, 686, 726, 781, 788, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 827, 828, 829, 831, 835, 838, 896, 897, 941, 942, 949, 951, 952, 958, 991, 993, 995, 996, 999, 1014, 1015, 1034, 1035, 1037, 1040, 1042], "yifan": 1003, "yime": 1037, "ying": [404, 449, 459, 1043], "yinglr": 1039, "yisheng": 1046, "yiyangq": 1043, "yj": [115, 308], "ylabel": [43, 47, 48, 52, 61, 62, 63, 64, 69, 72, 94, 109, 110, 112, 113, 115, 116, 122, 126, 127, 135, 136, 138, 145, 146, 147, 148, 149, 153, 156, 158, 159, 162, 167, 168, 169, 170, 172, 173, 174, 183, 190, 193, 194, 196, 197, 198, 199, 201, 202, 203, 205, 207, 209, 210, 212, 215, 216, 224, 237, 239, 241, 259, 263, 264, 267, 268, 269, 273, 274, 277, 279, 287, 311, 333, 336, 339, 347, 352, 353, 631], "ylim": [51, 61, 63, 69, 72, 79, 91, 95, 109, 110, 111, 122, 136, 137, 143, 146, 153, 168, 169, 183, 198, 199, 201, 202, 203, 213, 215, 216, 220, 233, 241, 250, 255, 259, 263, 267, 273, 279, 290, 291, 335, 340, 341, 344, 347, 353], "ylorbr_r": 111, "ym": [51, 229], "ymax": [47, 49, 50, 109, 198, 201, 202, 208, 215, 264, 297], "ymazari": 1037, "ymean": 191, "ymin": [50, 109, 198, 201, 202, 208, 215, 264, 297], "yml": [372, 380], "yn": [507, 1000, 1001], "yoav": 1035, "yoch": 1042, "yogendrasingh": 1044, "yojana": 1044, "yokasr": 1039, "yoni": 1032, "yoon": 1040, "yoram": [281, 735], "york": [263, 788, 797, 851, 989, 999, 1011], "yoshihiro": 1039, "yoshiki": [1032, 1035], "yoshizawa": 1037, "yoshua": [861, 862, 1012], "yosshi999": 1043, "yosuk": [1041, 1042], "yotam": 1045, "you": [0, 30, 54, 58, 61, 103, 126, 142, 145, 147, 155, 160, 163, 165, 179, 184, 186, 196, 208, 211, 235, 240, 247, 252, 259, 264, 265, 271, 273, 290, 313, 314, 317, 319, 320, 322, 326, 329, 340, 347, 353, 355, 359, 360, 361, 366, 367, 370, 371, 372, 373, 374, 376, 377, 378, 380, 381, 385, 386, 390, 391, 392, 395, 398, 400, 402, 403, 404, 405, 406, 408, 411, 412, 413, 415, 416, 421, 434, 440, 441, 443, 444, 446, 451, 461, 462, 464, 466, 479, 480, 481, 498, 501, 502, 507, 508, 530, 531, 534, 536, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 578, 579, 587, 588, 589, 590, 603, 606, 607, 609, 610, 611, 627, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 687, 690, 699, 700, 785, 798, 799, 801, 802, 803, 804, 805, 807, 809, 815, 816, 818, 819, 820, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 854, 855, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 876, 877, 878, 883, 884, 889, 890, 892, 893, 894, 895, 897, 899, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 923, 941, 948, 966, 988, 989, 994, 995, 999, 1000, 1003, 1005, 1006, 1009, 1010, 1013, 1014, 1015, 1017, 1018, 1022, 1023, 1026, 1029, 1032, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "youden": 999, "younger": 224, "your": [0, 15, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 351, 352, 353, 354, 355, 359, 360, 361, 366, 370, 371, 372, 373, 375, 376, 378, 380, 381, 384, 385, 386, 390, 391, 392, 398, 400, 403, 404, 405, 406, 411, 412, 415, 416, 441, 443, 501, 531, 603, 646, 687, 941, 996, 999, 1003, 1009, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1022, 1023, 1026, 1030, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "yourlogin": 372, "yourself": [103, 371, 372, 373, 374, 377, 380, 1003], "youtub": 1017, "ypred": 1036, "yrsold": 154, "yscale": [168, 173, 207, 239, 347], "ystd": 191, "yt": 875, "ython": 0, "ytick": [45, 50, 66, 70, 75, 79, 80, 83, 84, 85, 91, 92, 95, 113, 115, 123, 147, 159, 169, 170, 171, 175, 199, 219, 233, 241, 250, 251, 252, 255, 259, 279, 288, 297, 302, 325, 336, 341, 347], "yticklabel": [259, 347], "ytrain": 297, "ytrue": 1036, "yu": [194, 404, 449, 459, 658, 995, 1003, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "yuan": [1043, 1044, 1045, 1046, 1047, 1048, 1049], "yuchen": [1045, 1046], "yucheng": 1034, "yue": [1041, 1047], "yufeng": 1037, "yuichi": 1036, "yuki": 1043, "yule": [447, 454, 778, 779, 780], "yulia": [1039, 1049], "yum": 370, "yun": [1044, 1045], "yung": [1032, 1035], "yunji": 1049, "yunqian": 995, "yurchak": [0, 394, 412, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "yuri": [1032, 1034], "yusuf": [1044, 1045], "yusuk": 1042, "yusukenagasaka": 1042, "yutaro": 1041, "yuusuk": 1046, "yuval": [401, 448], "yuvi": 1049, "yv": 407, "yve": 1042, "yy": [77, 91, 111, 142, 152, 169, 171, 184, 201, 217, 218, 219, 220, 231, 233, 241, 290, 299, 306, 307, 330, 335, 336, 340, 341, 344], "yy_coars": 142, "yy_down": 341, "yy_up": 341, "yzhenman": 1042, "z": [50, 91, 142, 169, 171, 184, 216, 218, 219, 226, 228, 233, 238, 253, 290, 297, 299, 306, 309, 330, 336, 341, 369, 376, 401, 409, 411, 551, 552, 584, 639, 664, 671, 685, 686, 689, 693, 694, 699, 724, 785, 884, 995, 996, 1003, 1004, 1044], "z_": 409, "z_1": 995, "z_2": 995, "z_3": 995, "z_4": 995, "z_5": 995, "z_i": [138, 1003], "z_l": 1003, "z_points_coars": 142, "zabidi": 1049, "zablit": 1044, "zac": 1034, "zacchari": 1041, "zach": [1037, 1038, 1043, 1049], "zachari": 1048, "zachariah": 1037, "zadrozni": [64, 402, 434, 676], "zaffalon": 264, "zahlii": 1042, "zain": [0, 393, 1043, 1044, 1045, 1046, 1048], "zalkow": 1034, "zambelli": 1032, "zamrii": 1039, "zanouda": 1036, "zaroual": 1049, "zaxi": [126, 226], "zayd": 1038, "zaytsev": 1032, "zdzieblo": 1046, "zebra": 712, "zedan": 1045, "zeel": 1043, "zeeshan": [1044, 1045], "zempleni": 1043, "zen": 935, "zenin": 1035, "zentrum": 999, "zero": [1, 25, 49, 50, 53, 64, 70, 72, 75, 76, 85, 87, 110, 112, 113, 120, 123, 125, 136, 137, 145, 147, 148, 153, 160, 163, 179, 190, 194, 195, 197, 200, 202, 203, 206, 207, 208, 211, 212, 213, 216, 221, 224, 237, 240, 241, 243, 249, 253, 255, 261, 264, 269, 273, 274, 277, 289, 304, 314, 315, 340, 343, 348, 349, 351, 354, 359, 360, 367, 374, 378, 386, 402, 404, 406, 409, 411, 412, 413, 414, 417, 443, 449, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 484, 495, 506, 507, 521, 524, 525, 529, 530, 533, 535, 536, 537, 538, 540, 541, 545, 546, 550, 555, 556, 557, 558, 559, 560, 562, 563, 564, 580, 584, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 606, 607, 611, 636, 639, 643, 644, 645, 650, 658, 659, 664, 665, 666, 667, 668, 671, 676, 677, 678, 685, 686, 703, 707, 712, 713, 715, 716, 720, 725, 727, 729, 730, 734, 738, 739, 740, 746, 782, 783, 784, 785, 787, 789, 796, 797, 815, 816, 819, 820, 833, 844, 845, 846, 847, 848, 850, 852, 853, 854, 855, 856, 857, 858, 859, 860, 867, 874, 876, 877, 879, 880, 881, 883, 884, 890, 891, 892, 893, 897, 904, 912, 913, 914, 915, 946, 973, 984, 989, 995, 997, 998, 1001, 1002, 1003, 1009, 1010, 1011, 1013, 1014, 1015, 1029, 1031, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049], "zero_bas": [484, 506, 507], "zero_class": 241, "zero_divis": [302, 713, 729, 730, 738, 783, 784, 787, 999, 1039, 1041, 1045], "zero_on": [372, 1030], "zero_one_loss": [1, 372, 400, 703, 734, 999, 1030, 1031, 1032, 1046, 1047], "zero_one_scor": 1030, "zerodivisionerror": [1036, 1039, 1045], "zeros_lik": [82, 209, 273], "zeta": 1014, "zeta_i": 1014, "zev": [1035, 1036, 1037, 1038], "zeyusun": 1042, "zha": [689, 693, 996], "zhai_pro": 1034, "zhan": 1044, "zhang": [404, 439, 664, 679, 685, 686, 689, 693, 758, 759, 995, 996, 997, 1001, 1013, 1033, 1034, 1036, 1037, 1038, 1039, 1041, 1045, 1046, 1047, 1049], "zhang02c": 676, "zhang96": [404, 439], "zhao": [1039, 1041, 1042, 1043, 1044], "zhaowei": 1041, "zhaoweiwang": 1042, "zhauniarovich": 1034, "zhdanovich": 1037, "zhechev": 1044, "zhehao": [1042, 1043, 1044, 1045, 1047], "zhenfish": 1043, "zheng": [1035, 1036, 1041], "zhenq": 1037, "zhi": [561, 1005], "zhiqe": 1037, "zhou": [561, 639, 900, 1005, 1037, 1045, 1046], "zht2007": 196, "zhu": [134, 411, 517, 551, 658, 899, 1049], "zhuyi": [1037, 1038], "zhuzhunashvili": [404, 459], "ziad": [1047, 1048], "zibulevski": [664, 685, 686], "zichen": 1034, "zielinska": 1040, "zihna": [1042, 1048], "ziji": [1037, 1038], "zijlstra": 1032, "zike": 1035, "zimek": 443, "zimmer": [1033, 1043], "zinkov": [1029, 1030, 1031, 1033, 1034], "zip": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 351, 352, 353, 354, 370, 411, 828, 1009, 1022], "zisserman": [638, 991, 999], "zito": [1029, 1042], "ziv": 1035, "zivori": 1035, "zj": [1037, 1038], "zlabel": 126, "zoj613": 1041, "zolisa": 1041, "zoom": [43, 139, 304, 392], "zoom_in_percentile_rang": 304, "zorder": [51, 91, 122, 151, 168, 176, 199, 205, 227, 229, 236, 239, 249, 314, 320, 341], "zou": [134, 196, 411, 517, 551, 656, 995, 1013], "zou_et_al_criterion_resc": 196, "zoubin": 899, "zoubir": 112, "zouhar": 1042, "zsh": 360, "zuckerberg": 0, "zwinck": 1031, "zxcvbniu": 1036, "zy": 1048, "zz": 111, "zzrh2009": 411, "z\u00e9": 1037, "\u00e4yr\u00e4m\u00f6": 995, "\u00f3scar": [1033, 1034, 1035, 1036], "\u00f6zer": 1042, "\u0142ukasz": 1044, "\u015fahin": 1043, "\u0161t\u011bp\u00e1n": [1047, 1048], "\u675c\u4e16\u6a4b": [0, 394], "\u8d75\u4e30": 1043}, "titles": ["About us", "API Reference", "sklearn", "sklearn.base", "sklearn.calibration", "sklearn.cluster", "sklearn.compose", "sklearn.covariance", "sklearn.cross_decomposition", "sklearn.datasets", "sklearn.decomposition", "sklearn.discriminant_analysis", "sklearn.dummy", "sklearn.ensemble", "sklearn.exceptions", "sklearn.experimental", "sklearn.feature_extraction", "sklearn.feature_selection", "sklearn.frozen", "sklearn.gaussian_process", "sklearn.impute", "sklearn.inspection", "sklearn.isotonic", "sklearn.kernel_approximation", "sklearn.kernel_ridge", "sklearn.linear_model", "sklearn.manifold", "sklearn.metrics", "sklearn.mixture", "sklearn.model_selection", "sklearn.multiclass", "sklearn.multioutput", "sklearn.naive_bayes", "sklearn.neighbors", "sklearn.neural_network", "sklearn.pipeline", "sklearn.preprocessing", "sklearn.random_projection", "sklearn.semi_supervised", "sklearn.svm", "sklearn.tree", "sklearn.utils", "Examples based on real world datasets", "Time-related feature engineering", "Image denoising using kernel PCA", "Faces recognition example using eigenfaces and SVMs", "Model Complexity Influence", "Out-of-core classification of text documents", "Outlier detection on a real data set", "Prediction Latency", "Species distribution modeling", "Visualizing the stock market structure", "Lagged features for time series forecasting", "Compressive sensing: tomography reconstruction with L1 prior (Lasso)", "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation", "Wikipedia principal eigenvector", "Biclustering", "Biclustering documents with the Spectral Co-clustering algorithm", "A demo of the Spectral Biclustering algorithm", "A demo of the Spectral Co-Clustering algorithm", "Calibration", "Probability calibration of classifiers", "Probability Calibration curves", "Probability Calibration for 3-class classification", "Comparison of Calibration of Classifiers", "Classification", "Plot classification probability", "Classifier comparison", "Recognizing hand-written digits", "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification", "Linear and Quadratic Discriminant Analysis with covariance ellipsoid", "Clustering", "Adjustment for chance in clustering performance evaluation", "Demo of affinity propagation clustering algorithm", "Agglomerative clustering with and without structure", "Agglomerative clustering with different metrics", "Plot Hierarchical Clustering Dendrogram", "Compare BIRCH and MiniBatchKMeans", "Bisecting K-Means and Regular K-Means Performance Comparison", "Comparing different clustering algorithms on toy datasets", "Segmenting the picture of greek coins in regions", "A demo of structured Ward hierarchical clustering on an image of coins", "Demo of DBSCAN clustering algorithm", "Online learning of a dictionary of parts of faces", "Feature agglomeration", "Various Agglomerative Clustering on a 2D embedding of digits", "Vector Quantization Example", "Feature agglomeration vs. univariate selection", "Demo of HDBSCAN clustering algorithm", "Inductive Clustering", "Demonstration of k-means assumptions", "A demo of K-Means clustering on the handwritten digits data", "An example of K-Means++ initialization", "Selecting the number of clusters with silhouette analysis on KMeans clustering", "Empirical evaluation of the impact of k-means initialization", "Comparing different hierarchical linkage methods on toy datasets", "A demo of the mean-shift clustering algorithm", "Comparison of the K-Means and MiniBatchKMeans clustering algorithms", "Demo of OPTICS clustering algorithm", "Spectral clustering for image segmentation", "Hierarchical clustering: structured vs unstructured ward", "Pipelines and composite estimators", "Column Transformer with Heterogeneous Data Sources", "Column Transformer with Mixed Types", "Selecting dimensionality reduction with Pipeline and GridSearchCV", "Pipelining: chaining a PCA and a logistic regression", "Concatenating multiple feature extraction methods", "Effect of transforming the targets in regression model", "Covariance estimation", "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood", "Ledoit-Wolf vs OAS estimation", "Robust covariance estimation and Mahalanobis distances relevance", "Robust vs Empirical covariance estimate", "Sparse inverse covariance estimation", "Cross decomposition", "Compare cross decomposition methods", "Principal Component Regression vs Partial Least Squares Regression", "Dataset examples", "Plot randomly generated multilabel dataset", "Decomposition", "Faces dataset decompositions", "Blind source separation using FastICA", "FastICA on 2D point clouds", "Image denoising using dictionary learning", "Incremental PCA", "Kernel PCA", "Principal Component Analysis (PCA) on Iris Dataset", "Model selection with Probabilistic PCA and Factor Analysis (FA)", "Comparison of LDA and PCA 2D projection of Iris dataset", "Sparse coding with a precomputed dictionary", "Factor Analysis (with rotation) to visualize patterns", "Developing Estimators", "<code class=\"docutils literal notranslate\"><span class=\"pre\">__sklearn_is_fitted__</span></code> as Developer API", "Ensemble methods", "Multi-class AdaBoosted Decision Trees", "Decision Tree Regression with AdaBoost", "Two-class AdaBoost", "Single estimator versus bagging: bias-variance decomposition", "OOB Errors for Random Forests", "Feature transformations with ensembles of trees", "Comparing Random Forests and Histogram Gradient Boosting models", "Feature importances with a forest of trees", "Plot the decision surfaces of ensembles of trees on the iris dataset", "Categorical Feature Support in Gradient Boosting", "Early stopping in Gradient Boosting", "Gradient Boosting Out-of-Bag estimates", "Prediction Intervals for Gradient Boosting Regression", "Gradient Boosting regression", "Gradient Boosting regularization", "Features in Histogram Gradient Boosting Trees", "IsolationForest example", "Monotonic Constraints", "Hashing feature transformation using Totally Random Trees", "Comparing random forests and the multi-output meta estimator", "Combine predictors using stacking", "Visualizing the probabilistic predictions of a VotingClassifier", "Plot individual and voting regression predictions", "Feature Selection", "Comparison of F-test and mutual information", "Univariate Feature Selection", "Pipeline ANOVA SVM", "Recursive feature elimination", "Recursive feature elimination with cross-validation", "Model-based and sequential feature selection", "Frozen Estimators", "Examples of Using <code class=\"docutils literal notranslate\"><span class=\"pre\">FrozenEstimator</span></code>", "Gaussian Process for Machine Learning", "Comparison of kernel ridge and Gaussian process regression", "Probabilistic predictions with Gaussian process classification (GPC)", "Gaussian process classification (GPC) on iris dataset", "Iso-probability lines for Gaussian Processes classification (GPC)", "Illustration of Gaussian process classification (GPC) on the XOR dataset", "Forecasting of CO2 level on Mona Loa dataset using Gaussian process regression (GPR)", "Ability of Gaussian process regression (GPR) to estimate data noise-level", "Gaussian Processes regression: basic introductory example", "Gaussian processes on discrete data structures", "Illustration of prior and posterior Gaussian process for different kernels", "Missing Value Imputation", "Imputing missing values with variants of IterativeImputer", "Imputing missing values before building an estimator", "Examples", "Inspection", "Failure of Machine Learning to infer causal effects", "Common pitfalls in the interpretation of coefficients of linear models", "Partial Dependence and Individual Conditional Expectation Plots", "Permutation Importance vs Random Forest Feature Importance (MDI)", "Permutation Importance with Multicollinear or Correlated Features", "Kernel Approximation", "Scalable learning with polynomial kernel approximation", "Generalized Linear Models", "Comparing Linear Bayesian Regressors", "Curve Fitting with Bayesian Ridge Regression", "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples", "HuberRegressor vs Ridge on dataset with strong outliers", "L1-based models for Sparse Signals", "Lasso on dense and sparse data", "Lasso model selection via information criteria", "Lasso, Lasso-LARS, and Elastic Net paths", "Lasso model selection: AIC-BIC / cross-validation", "Logistic function", "L1 Penalty and Sparsity in Logistic Regression", "Decision Boundaries of Multinomial and One-vs-Rest Logistic Regression", "Regularization path of L1- Logistic Regression", "Joint feature selection with multi-task Lasso", "Non-negative least squares", "Ordinary Least Squares and Ridge Regression", "Orthogonal Matching Pursuit", "Poisson regression and non-normal loss", "Polynomial and Spline interpolation", "Quantile regression", "Robust linear model estimation using RANSAC", "Ridge coefficients as a function of the L2 Regularization", "Plot Ridge coefficients as a function of the regularization", "Robust linear estimator fitting", "Early stopping of Stochastic Gradient Descent", "Plot multi-class SGD on the iris dataset", "SGD: convex loss functions", "SGD: Penalties", "SGD: Maximum margin separating hyperplane", "SGD: Weighted samples", "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent", "Multiclass sparse logistic regression on 20newgroups", "MNIST classification using multinomial logistic + L1", "Theil-Sen Regression", "Tweedie regression on insurance claims", "Manifold learning", "Comparison of Manifold Learning methods", "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026", "Manifold Learning methods on a severed sphere", "Multi-dimensional scaling", "Swiss Roll And Swiss-Hole Reduction", "t-SNE: The effect of various perplexity values on the shape", "Miscellaneous", "Comparing anomaly detection algorithms for outlier detection on toy datasets", "Visualizations with Display Objects", "Displaying estimators and complex pipelines", "Isotonic Regression", "The Johnson-Lindenstrauss bound for embedding with random projections", "Explicit feature map approximation for RBF kernels", "Comparison of kernel ridge regression and SVR", "Metadata Routing", "Multilabel classification", "Face completion with a multi-output estimators", "Evaluation of outlier detection estimators", "Advanced Plotting With Partial Dependence", "Displaying Pipelines", "ROC Curve with Visualization API", "Introducing the <code class=\"docutils literal notranslate\"><span class=\"pre\">set_output</span></code> API", "Gaussian Mixture Models", "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture", "Gaussian Mixture Model Ellipsoids", "GMM covariances", "GMM Initialization Methods", "Density Estimation for a Gaussian mixture", "Gaussian Mixture Model Selection", "Gaussian Mixture Model Sine Curve", "Model Selection", "Confusion matrix", "Post-tuning the decision threshold for cost-sensitive learning", "Visualizing cross-validation behavior in scikit-learn", "Plotting Cross-Validated Predictions", "Detection error tradeoff (DET) curve", "Custom refit strategy of a grid search with cross-validation", "Balance model complexity and cross-validated score", "Statistical comparison of models using grid search", "Sample pipeline for text feature extraction and evaluation", "Plotting Learning Curves and Checking Models\u2019 Scalability", "Class Likelihood Ratios to measure classification performance", "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV", "Nested versus non-nested cross-validation", "Test with permutations the significance of a classification score", "Precision-Recall", "Comparing randomized search and grid search for hyperparameter estimation", "Multiclass Receiver Operating Characteristic (ROC)", "Receiver Operating Characteristic (ROC) with cross validation", "Comparison between grid search and successive halving", "Successive Halving Iterations", "Effect of model regularization on training and test error", "Post-hoc tuning the cut-off point of decision function", "Underfitting vs. Overfitting", "Multiclass methods", "Overview of multiclass training meta-estimators", "Multioutput methods", "Multilabel classification using a classifier chain", "Approximate nearest neighbors in TSNE", "Nearest Neighbors", "Caching nearest neighbors", "Nearest Neighbors Classification", "Kernel Density Estimation", "Simple 1D Kernel Density Estimation", "Novelty detection with Local Outlier Factor (LOF)", "Outlier detection with Local Outlier Factor (LOF)", "Comparing Nearest Neighbors with and without Neighborhood Components Analysis", "Dimensionality Reduction with Neighborhood Components Analysis", "Neighborhood Components Analysis Illustration", "Nearest Centroid Classification", "Nearest Neighbors regression", "Kernel Density Estimate of Species Distributions", "Neural Networks", "Varying regularization in Multi-layer Perceptron", "Compare Stochastic learning strategies for MLPClassifier", "Visualization of MLP weights on MNIST", "Restricted Boltzmann Machine features for digit classification", "Preprocessing", "Compare the effect of different scalers on data with outliers", "Using KBinsDiscretizer to discretize continuous features", "Feature discretization", "Demonstrating the different strategies of KBinsDiscretizer", "Map data to a normal distribution", "Importance of Feature Scaling", "Comparing Target Encoder with Other Encoders", "Target Encoder\u2019s Internal Cross fitting", "Release Highlights", "Release Highlights for scikit-learn 0.22", "Release Highlights for scikit-learn 0.23", "Release Highlights for scikit-learn 0.24", "Release Highlights for scikit-learn 1.0", "Release Highlights for scikit-learn 1.1", "Release Highlights for scikit-learn 1.2", "Release Highlights for scikit-learn 1.3", "Release Highlights for scikit-learn 1.4", "Release Highlights for scikit-learn 1.5", "Release Highlights for scikit-learn 1.6", "Release Highlights for scikit-learn 1.7", "Semi Supervised Classification", "Label Propagation digits: Demonstrating performance", "Label Propagation digits: Active learning", "Label Propagation circles: Learning a complex structure", "Effect of varying threshold for self-training", "Semi-supervised Classification on a Text Dataset", "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset", "Support Vector Machines", "SVM with custom kernel", "Plot different SVM classifiers in the iris dataset", "Plot the support vectors in LinearSVC", "One-class SVM with non-linear kernel (RBF)", "RBF SVM parameters", "SVM: Maximum margin separating hyperplane", "SVM: Separating hyperplane for unbalanced classes", "SVM-Anova: SVM with univariate feature selection", "Plot classification boundaries with different SVM Kernels", "SVM Margins Example", "Support Vector Regression (SVR) using linear and non-linear kernels", "Scaling the regularization parameter for SVCs", "SVM Tie Breaking Example", "SVM: Weighted samples", "Working with text documents", "Classification of text documents using sparse features", "Clustering text documents using k-means", "FeatureHasher and DictVectorizer Comparison", "Decision Trees", "Post pruning decision trees with cost complexity pruning", "Plot the decision surface of decision trees trained on the iris dataset", "Decision Tree Regression", "Understanding the decision tree structure", "<span class=\"section-number\">11. </span>Common pitfalls and recommended practices", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">9. </span>Computing with scikit-learn", "<span class=\"section-number\">9.2. </span>Computational Performance", "<span class=\"section-number\">9.3. </span>Parallelism, resource management, and configuration", "<span class=\"section-number\">9.1. </span>Strategies to scale computationally: bigger data", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">7. </span>Dataset transformations", "<span class=\"section-number\">8. </span>Dataset loading utilities", "<span class=\"section-number\">8.4. </span>Loading other datasets", "<span class=\"section-number\">8.2. </span>Real world datasets", "<span class=\"section-number\">8.3. </span>Generated datasets", "<span class=\"section-number\">8.1. </span>Toy datasets", "Installing the development version of scikit-learn", "Bug triaging and issue curation", "Contributing", "Cython Best Practices, Conventions and Knowledge", "Developing scikit-learn estimators", "Developer\u2019s Guide", "Maintainer Information", "Crafting a minimal reproducer for scikit-learn", "How to optimize for speed", "Developing with the Plotting API", "Developers\u2019 Tips and Tricks", "Utilities for Developers", "<span class=\"section-number\">12. </span>Dispatching", "&lt;no title&gt;", "Frequently Asked Questions", "Getting Started", "Glossary of Common Terms and API Elements", "Scikit-learn governance and decision-making", "Index", "<span class=\"section-number\">5. </span>Inspection", "Installing scikit-learn", "&lt;no title&gt;", "<span class=\"section-number\">13. </span>Choosing the right estimator", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">4. </span>Metadata Routing", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">10. </span>Model persistence", "<span class=\"section-number\">3. </span>Model selection and evaluation", "<span class=\"section-number\">12.1. </span>Array API support (experimental)", "<span class=\"section-number\">2.4. </span>Biclustering", "<span class=\"section-number\">1.16. </span>Probability calibration", "<span class=\"section-number\">3.3. </span>Tuning the decision threshold for class prediction", "<span class=\"section-number\">2.3. </span>Clustering", "<span class=\"section-number\">7.1. </span>Pipelines and composite estimators", "<span class=\"section-number\">2.6. </span>Covariance estimation", "<span class=\"section-number\">1.8. </span>Cross decomposition", "<span class=\"section-number\">3.1. </span>Cross-validation: evaluating estimator performance", "<span class=\"section-number\">2.5. </span>Decomposing signals in components (matrix factorization problems)", "<span class=\"section-number\">2.8. </span>Density Estimation", "<span class=\"section-number\">1.11. </span>Ensembles: Gradient boosting, random forests, bagging, voting, stacking", "<span class=\"section-number\">7.2. </span>Feature extraction", "<span class=\"section-number\">1.13. </span>Feature selection", "<span class=\"section-number\">1.7. </span>Gaussian Processes", "dbscan", "fastica", "oas", "BaseEstimator", "BiclusterMixin", "ClassNamePrefixFeaturesOutMixin", "ClassifierMixin", "ClusterMixin", "DensityMixin", "MetaEstimatorMixin", "OneToOneFeatureMixin", "OutlierMixin", "RegressorMixin", "TransformerMixin", "clone", "is_classifier", "is_clusterer", "is_outlier_detector", "is_regressor", "CalibratedClassifierCV", "CalibrationDisplay", "calibration_curve", "AffinityPropagation", "AgglomerativeClustering", "Birch", "BisectingKMeans", "DBSCAN", "FeatureAgglomeration", "HDBSCAN", "KMeans", "MeanShift", "MiniBatchKMeans", "OPTICS", "SpectralBiclustering", "SpectralClustering", "SpectralCoclustering", "affinity_propagation", "cluster_optics_dbscan", "cluster_optics_xi", "compute_optics_graph", "estimate_bandwidth", "k_means", "kmeans_plusplus", "mean_shift", "spectral_clustering", "ward_tree", "ColumnTransformer", "TransformedTargetRegressor", "make_column_selector", "make_column_transformer", "config_context", "EllipticEnvelope", "EmpiricalCovariance", "GraphicalLasso", "GraphicalLassoCV", "LedoitWolf", "MinCovDet", "OAS", "ShrunkCovariance", "empirical_covariance", "graphical_lasso", "ledoit_wolf", "ledoit_wolf_shrinkage", "shrunk_covariance", "CCA", "PLSCanonical", "PLSRegression", "PLSSVD", "clear_data_home", "dump_svmlight_file", "fetch_20newsgroups", "fetch_20newsgroups_vectorized", "fetch_california_housing", "fetch_covtype", "fetch_file", "fetch_kddcup99", "fetch_lfw_pairs", "fetch_lfw_people", "fetch_olivetti_faces", "fetch_openml", "fetch_rcv1", "fetch_species_distributions", "get_data_home", "load_breast_cancer", "load_diabetes", "load_digits", "load_files", "load_iris", "load_linnerud", "load_sample_image", "load_sample_images", "load_svmlight_file", "load_svmlight_files", "load_wine", "make_biclusters", "make_blobs", "make_checkerboard", "make_circles", "make_classification", "make_friedman1", "make_friedman2", "make_friedman3", "make_gaussian_quantiles", "make_hastie_10_2", "make_low_rank_matrix", "make_moons", "make_multilabel_classification", "make_regression", "make_s_curve", "make_sparse_coded_signal", "make_sparse_spd_matrix", "make_sparse_uncorrelated", "make_spd_matrix", "make_swiss_roll", "DictionaryLearning", "FactorAnalysis", "FastICA", "IncrementalPCA", "KernelPCA", "LatentDirichletAllocation", "MiniBatchDictionaryLearning", "MiniBatchNMF", "MiniBatchSparsePCA", "NMF", "PCA", "SparseCoder", "SparsePCA", "TruncatedSVD", "dict_learning", "dict_learning_online", "non_negative_factorization", "sparse_encode", "LinearDiscriminantAnalysis", "QuadraticDiscriminantAnalysis", "DummyClassifier", "DummyRegressor", "AdaBoostClassifier", "AdaBoostRegressor", "BaggingClassifier", "BaggingRegressor", "ExtraTreesClassifier", "ExtraTreesRegressor", "GradientBoostingClassifier", "GradientBoostingRegressor", "HistGradientBoostingClassifier", "HistGradientBoostingRegressor", "IsolationForest", "RandomForestClassifier", "RandomForestRegressor", "RandomTreesEmbedding", "StackingClassifier", "StackingRegressor", "VotingClassifier", "VotingRegressor", "ConvergenceWarning", "DataConversionWarning", "DataDimensionalityWarning", "EfficiencyWarning", "EstimatorCheckFailedWarning", "FitFailedWarning", "InconsistentVersionWarning", "NotFittedError", "UndefinedMetricWarning", "enable_halving_search_cv", "enable_iterative_imputer", "DictVectorizer", "FeatureHasher", "PatchExtractor", "extract_patches_2d", "grid_to_graph", "img_to_graph", "reconstruct_from_patches_2d", "CountVectorizer", "HashingVectorizer", "TfidfTransformer", "TfidfVectorizer", "GenericUnivariateSelect", "RFE", "RFECV", "SelectFdr", "SelectFpr", "SelectFromModel", "SelectFwe", "SelectKBest", "SelectPercentile", "SelectorMixin", "SequentialFeatureSelector", "VarianceThreshold", "chi2", "f_classif", "f_regression", "mutual_info_classif", "mutual_info_regression", "r_regression", "FrozenEstimator", "GaussianProcessClassifier", "GaussianProcessRegressor", "CompoundKernel", "ConstantKernel", "DotProduct", "ExpSineSquared", "Exponentiation", "Hyperparameter", "Kernel", "Matern", "PairwiseKernel", "Product", "RBF", "RationalQuadratic", "Sum", "WhiteKernel", "get_config", "IterativeImputer", "KNNImputer", "MissingIndicator", "SimpleImputer", "DecisionBoundaryDisplay", "PartialDependenceDisplay", "partial_dependence", "permutation_importance", "IsotonicRegression", "check_increasing", "isotonic_regression", "AdditiveChi2Sampler", "Nystroem", "PolynomialCountSketch", "RBFSampler", "SkewedChi2Sampler", "KernelRidge", "ARDRegression", "BayesianRidge", "ElasticNet", "ElasticNetCV", "GammaRegressor", "HuberRegressor", "Lars", "LarsCV", "Lasso", "LassoCV", "LassoLars", "LassoLarsCV", "LassoLarsIC", "LinearRegression", "LogisticRegression", "LogisticRegressionCV", "MultiTaskElasticNet", "MultiTaskElasticNetCV", "MultiTaskLasso", "MultiTaskLassoCV", "OrthogonalMatchingPursuit", "OrthogonalMatchingPursuitCV", "PassiveAggressiveClassifier", "PassiveAggressiveRegressor", "Perceptron", "PoissonRegressor", "QuantileRegressor", "RANSACRegressor", "Ridge", "RidgeCV", "RidgeClassifier", "RidgeClassifierCV", "SGDClassifier", "SGDOneClassSVM", "SGDRegressor", "TheilSenRegressor", "TweedieRegressor", "enet_path", "lars_path", "lars_path_gram", "lasso_path", "orthogonal_mp", "orthogonal_mp_gram", "ridge_regression", "Isomap", "LocallyLinearEmbedding", "MDS", "SpectralEmbedding", "TSNE", "locally_linear_embedding", "smacof", "spectral_embedding", "trustworthiness", "ConfusionMatrixDisplay", "DetCurveDisplay", "DistanceMetric", "PrecisionRecallDisplay", "PredictionErrorDisplay", "RocCurveDisplay", "accuracy_score", "adjusted_mutual_info_score", "adjusted_rand_score", "auc", "average_precision_score", "balanced_accuracy_score", "brier_score_loss", "calinski_harabasz_score", "check_scoring", "class_likelihood_ratios", "classification_report", "contingency_matrix", "pair_confusion_matrix", "cohen_kappa_score", "completeness_score", "confusion_matrix", "consensus_score", "coverage_error", "d2_absolute_error_score", "d2_log_loss_score", "d2_pinball_score", "d2_tweedie_score", "davies_bouldin_score", "dcg_score", "det_curve", "explained_variance_score", "f1_score", "fbeta_score", "fowlkes_mallows_score", "get_scorer", "get_scorer_names", "hamming_loss", "hinge_loss", "homogeneity_completeness_v_measure", "homogeneity_score", "jaccard_score", "label_ranking_average_precision_score", "label_ranking_loss", "log_loss", "make_scorer", "matthews_corrcoef", "max_error", "mean_absolute_error", "mean_absolute_percentage_error", "mean_gamma_deviance", "mean_pinball_loss", "mean_poisson_deviance", "mean_squared_error", "mean_squared_log_error", "mean_tweedie_deviance", "median_absolute_error", "multilabel_confusion_matrix", "mutual_info_score", "ndcg_score", "normalized_mutual_info_score", "additive_chi2_kernel", "chi2_kernel", "cosine_distances", "cosine_similarity", "distance_metrics", "euclidean_distances", "haversine_distances", "kernel_metrics", "laplacian_kernel", "linear_kernel", "manhattan_distances", "nan_euclidean_distances", "paired_cosine_distances", "paired_distances", "paired_euclidean_distances", "paired_manhattan_distances", "pairwise_kernels", "polynomial_kernel", "rbf_kernel", "sigmoid_kernel", "pairwise_distances", "pairwise_distances_argmin", "pairwise_distances_argmin_min", "pairwise_distances_chunked", "precision_recall_curve", "precision_recall_fscore_support", "precision_score", "r2_score", "rand_score", "recall_score", "roc_auc_score", "roc_curve", "root_mean_squared_error", "root_mean_squared_log_error", "silhouette_samples", "silhouette_score", "top_k_accuracy_score", "v_measure_score", "zero_one_loss", "BayesianGaussianMixture", "GaussianMixture", "FixedThresholdClassifier", "GridSearchCV", "GroupKFold", "GroupShuffleSplit", "HalvingGridSearchCV", "HalvingRandomSearchCV", "KFold", "LearningCurveDisplay", "LeaveOneGroupOut", "LeaveOneOut", "LeavePGroupsOut", "LeavePOut", "ParameterGrid", "ParameterSampler", "PredefinedSplit", "RandomizedSearchCV", "RepeatedKFold", "RepeatedStratifiedKFold", "ShuffleSplit", "StratifiedGroupKFold", "StratifiedKFold", "StratifiedShuffleSplit", "TimeSeriesSplit", "TunedThresholdClassifierCV", "ValidationCurveDisplay", "check_cv", "cross_val_predict", "cross_val_score", "cross_validate", "learning_curve", "permutation_test_score", "train_test_split", "validation_curve", "OneVsOneClassifier", "OneVsRestClassifier", "OutputCodeClassifier", "ClassifierChain", "MultiOutputClassifier", "MultiOutputRegressor", "RegressorChain", "BernoulliNB", "CategoricalNB", "ComplementNB", "GaussianNB", "MultinomialNB", "BallTree", "KDTree", "KNeighborsClassifier", "KNeighborsRegressor", "KNeighborsTransformer", "KernelDensity", "LocalOutlierFactor", "NearestCentroid", "NearestNeighbors", "NeighborhoodComponentsAnalysis", "RadiusNeighborsClassifier", "RadiusNeighborsRegressor", "RadiusNeighborsTransformer", "kneighbors_graph", "radius_neighbors_graph", "sort_graph_by_row_values", "BernoulliRBM", "MLPClassifier", "MLPRegressor", "FeatureUnion", "Pipeline", "make_pipeline", "make_union", "Binarizer", "FunctionTransformer", "KBinsDiscretizer", "KernelCenterer", "LabelBinarizer", "LabelEncoder", "MaxAbsScaler", "MinMaxScaler", "MultiLabelBinarizer", "Normalizer", "OneHotEncoder", "OrdinalEncoder", "PolynomialFeatures", "PowerTransformer", "QuantileTransformer", "RobustScaler", "SplineTransformer", "StandardScaler", "TargetEncoder", "add_dummy_feature", "binarize", "label_binarize", "maxabs_scale", "minmax_scale", "normalize", "power_transform", "quantile_transform", "robust_scale", "scale", "GaussianRandomProjection", "SparseRandomProjection", "johnson_lindenstrauss_min_dim", "LabelPropagation", "LabelSpreading", "SelfTrainingClassifier", "set_config", "show_versions", "LinearSVC", "LinearSVR", "NuSVC", "NuSVR", "OneClassSVM", "SVC", "SVR", "l1_min_c", "DecisionTreeClassifier", "DecisionTreeRegressor", "ExtraTreeClassifier", "ExtraTreeRegressor", "export_graphviz", "export_text", "plot_tree", "Bunch", "ClassifierTags", "InputTags", "RegressorTags", "Tags", "TargetTags", "TransformerTags", "_safe_indexing", "min_pos", "as_float_array", "assert_all_finite", "check_X_y", "check_array", "check_consistent_length", "check_random_state", "check_scalar", "compute_class_weight", "compute_sample_weight", "deprecated", "all_displays", "all_estimators", "all_functions", "check_estimator", "estimator_checks_generator", "parametrize_with_checks", "estimator_html_repr", "density", "fast_logdet", "randomized_range_finder", "randomized_svd", "safe_sparse_dot", "weighted_mode", "gen_batches", "gen_even_slices", "get_tags", "single_source_shortest_path_length", "indexable", "MetadataRequest", "MetadataRouter", "MethodMapping", "get_routing_for_object", "process_routing", "available_if", "is_multilabel", "type_of_target", "unique_labels", "murmurhash3_32", "Parallel", "delayed", "sample_without_replacement", "resample", "safe_mask", "safe_sqr", "shuffle", "incr_mean_variance_axis", "inplace_column_scale", "inplace_csr_column_scale", "inplace_row_scale", "inplace_swap_column", "inplace_swap_row", "mean_variance_axis", "inplace_csr_row_normalize_l1", "inplace_csr_row_normalize_l2", "check_is_fitted", "check_memory", "check_symmetric", "column_or_1d", "has_fit_parameter", "validate_data", "<span class=\"section-number\">3.2. </span>Tuning the hyper-parameters of an estimator", "<span class=\"section-number\">7.4. </span>Imputation of missing values", "<span class=\"section-number\">1.15. </span>Isotonic regression", "<span class=\"section-number\">7.7. </span>Kernel Approximation", "<span class=\"section-number\">1.3. </span>Kernel ridge regression", "<span class=\"section-number\">1.2. </span>Linear and Quadratic Discriminant Analysis", "<span class=\"section-number\">3.5. </span>Validation curves: plotting scores to evaluate models", "<span class=\"section-number\">1.1. </span>Linear Models", "<span class=\"section-number\">2.2. </span>Manifold learning", "<span class=\"section-number\">7.8. </span>Pairwise metrics, Affinities and Kernels", "<span class=\"section-number\">2.1. </span>Gaussian mixture models", "<span class=\"section-number\">3.4. </span>Metrics and scoring: quantifying the quality of predictions", "<span class=\"section-number\">1.12. </span>Multiclass and multioutput algorithms", "<span class=\"section-number\">1.9. </span>Naive Bayes", "<span class=\"section-number\">1.6. </span>Nearest Neighbors", "<span class=\"section-number\">1.17. </span>Neural network models (supervised)", "<span class=\"section-number\">2.9. </span>Neural network models (unsupervised)", "<span class=\"section-number\">2.7. </span>Novelty and Outlier Detection", "<span class=\"section-number\">5.1. </span>Partial Dependence and Individual Conditional Expectation plots", "<span class=\"section-number\">5.2. </span>Permutation feature importance", "&lt;no title&gt;", "<span class=\"section-number\">7.3. </span>Preprocessing data", "<span class=\"section-number\">7.9. </span>Transforming the prediction target (<code class=\"docutils literal notranslate\"><span class=\"pre\">y</span></code>)", "<span class=\"section-number\">7.6. </span>Random Projection", "<span class=\"section-number\">1.14. </span>Semi-supervised learning", "<span class=\"section-number\">1.5. </span>Stochastic Gradient Descent", "<span class=\"section-number\">1.4. </span>Support Vector Machines", "<span class=\"section-number\">1.10. </span>Decision Trees", "<span class=\"section-number\">7.5. </span>Unsupervised dimensionality reduction", "<span class=\"section-number\">14. </span>External Resources, Videos and Talks", "Related Projects", "Roadmap", "Computation times", "<span class=\"section-number\">1. </span>Supervised learning", "Support", "Testimonials", "<span class=\"section-number\">2. </span>Unsupervised learning", "User Guide", "<span class=\"section-number\">6. </span>Visualizations", "Release History", "&lt;no title&gt;", "Older Versions", "Version 0.13", "Version 0.14", "Version 0.15", "Version 0.16", "Version 0.17", "Version 0.18", "Version 0.19", "Version 0.20", "Version 0.21", "Version 0.22", "Version 0.23", "Version 0.24", "Version 1.0", "Version 1.1", "Version 1.2", "Version 1.3", "Version 1.4", "Version 1.5", "Version 1.6", "Version 1.7"], "titleterms": {"": [185, 309, 311, 323, 375, 384, 411, 999], "0": [179, 313, 314, 315, 316, 1015, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "1": [184, 316, 317, 318, 319, 320, 321, 322, 323, 384, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "10": [100, 1029], "11": 1029, "12": 1029, "13": [322, 1030, 1048], "14": 1031, "15": 1032, "16": 1033, "17": 1034, "18": 1035, "19": 1036, "1d": [289, 353], "2": [318, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "20": [102, 347, 367, 1037], "2018": 1019, "20newgroup": 221, "21": 1038, "22": [313, 1039], "23": [314, 1040], "24": [315, 1041], "2d": [51, 66, 85, 122, 128, 184], "3": [63, 319, 322, 1037, 1038, 1043, 1045, 1048], "3d": 184, "4": [320, 1029, 1037, 1046], "5": [321, 1015, 1029, 1047], "6": [322, 1029, 1048], "7": [323, 1029, 1049], "8": 1029, "9": 1029, "99": 367, "A": [52, 58, 59, 81, 91, 96, 207, 316, 371, 378, 408], "And": [230, 387], "In": 271, "NOT": 377, "One": [201, 220, 273, 316, 335, 408, 1005, 1013], "The": [0, 116, 182, 183, 207, 231, 237, 258, 262, 271, 278, 281, 367, 376, 380, 408, 412, 998, 999, 1011, 1017], "Will": 384, "With": 244, "__sklearn_is_fitted__": 132, "_safe_index": 926, "abil": 173, "ablat": 243, "about": [0, 183, 384], "absolut": 999, "access": 405, "accuraci": [185, 238, 347, 351, 999], "accuracy_scor": 703, "across": 355, "action": 372, "activ": [0, 326], "ad": 404, "adaboost": [134, 135, 136, 411], "adaboostclassifi": [134, 551], "adaboostregressor": 552, "adapt": 999, "add": [320, 384], "add_dummy_featur": 886, "addit": [411, 991], "additive_chi2_kernel": 758, "additivechi2sampl": 638, "address": 258, "adjac": 55, "adjust": 72, "adjusted_mutual_info_scor": 704, "adjusted_rand_scor": 705, "advanc": 244, "advantag": 404, "affin": [51, 73, 404, 997], "affinity_propag": 451, "affinitypropag": 437, "agglom": [74, 75, 85], "agglomer": [84, 87, 1016], "agglomerativeclust": 438, "aggress": [988, 995], "aic": [198, 995], "algebra": [359, 381], "algorithm": [57, 58, 59, 73, 79, 82, 88, 96, 97, 98, 226, 233, 378, 384, 993, 995, 1000, 1002, 1003, 1007, 1015], "alias": 380, "align": 996, "all": [264, 273, 317, 390, 1044, 1045, 1046], "all_displai": 938, "all_estim": 939, "all_funct": 940, "alloc": [54, 409], "almost": 322, "alpha": 351, "alpin": 390, "alreadi": 55, "altern": 988, "am": [143, 243], "amount": 276, "an": [81, 92, 132, 179, 192, 198, 294, 313, 317, 322, 380, 384, 412, 988, 1005], "anaconda": 390, "analysi": [43, 64, 66, 69, 70, 93, 120, 126, 127, 130, 134, 146, 184, 194, 249, 266, 267, 274, 292, 293, 294, 347, 407, 409, 993, 1002, 1016], "analyz": [52, 988], "angl": [198, 995], "ani": [322, 384], "anomali": 233, "anova": [160, 339], "api": [1, 41, 132, 246, 247, 313, 316, 318, 322, 323, 360, 374, 379, 386, 395, 400, 999, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1039, 1046, 1047, 1048, 1049], "applic": 412, "approach": [109, 198, 264], "approxim": [180, 187, 188, 238, 284, 315, 406, 991], "ar": [100, 258, 316, 384], "arch": 390, "architectur": 1019, "ard": [194, 995], "ardregress": 644, "arff": 366, "argument": [316, 1040, 1042], "arm64": 380, "arrai": [41, 318, 321, 322, 323, 354, 381, 400, 1046, 1047, 1048, 1049], "artifact": 398, "as_float_arrai": 928, "ask": 384, "assert": 374, "assert_all_finit": 929, "assign": 404, "assumpt": 90, "atom": [49, 359], "attent": 384, "attribut": [374, 386, 988], "auc": [313, 706], "author": [376, 1029], "autom": 372, "automat": [194, 385, 995], "auxiliari": 41, "avail": [317, 1026], "available_if": 961, "averag": [271, 273, 404, 411, 999], "average_precision_scor": 707, "avoid": [355, 405], "aweb": 1023, "ax": 379, "b": 115, "backend": 380, "backward": 372, "bag": [137, 145, 347, 411, 412, 988], "baggingclassifi": 553, "baggingregressor": 554, "balanc": [263, 999], "balanced_accuracy_scor": 708, "ball": 1002, "balltre": [844, 1002], "base": [3, 41, 42, 43, 115, 141, 163, 180, 194, 239, 313, 314, 316, 318, 319, 320, 323, 372, 374, 404, 408, 411, 413, 995, 1007, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049], "baseestim": [374, 418], "baselin": [188, 207, 261], "basi": [44, 176, 414, 991, 995], "basic": [174, 224, 385, 406, 414], "batch": [404, 409], "bay": [61, 62, 1001], "bayesian": [25, 190, 191, 249, 264, 995, 998], "bayesiangaussianmixtur": 797, "bayesianridg": 645, "befor": 179, "behavior": 259, "behind": 0, "being": 183, "benchmark": [46, 49, 91, 347], "bernoulli": [1001, 1004], "bernoullinb": 839, "bernoullirbm": 860, "best": [254, 373, 384], "bestofmedia": 1023, "beta": 409, "betawork": 1023, "between": [97, 275, 995], "bia": 137, "bic": [198, 254, 995], "biclust": [27, 56, 57, 58, 180, 368, 401], "biclustermixin": 419, "bigger": 361, "bike": [43, 52, 184], "bin": 1009, "binar": [867, 887, 1009, 1010], "binari": [271, 283, 321, 995, 999], "birch": [77, 404, 439], "birchbox": 1023, "bisect": [78, 404], "bisectingkmean": [317, 440], "blind": 121, "bnp": 1023, "boil": 377, "boltzmann": [302, 1004], "book": 1023, "boost": [43, 140, 143, 144, 145, 146, 147, 148, 149, 184, 207, 313, 314, 316, 318, 319, 323, 411], "bouldin": 404, "bound": 237, "boundari": [66, 150, 201, 287, 330, 340], "branch": 380, "brand": 0, "break": 344, "breast": [186, 369], "brier": 999, "brier_score_loss": 709, "brute": [988, 1002], "bug": [371, 372, 1022, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "build": [172, 179, 370, 372, 380, 405, 1047, 1048], "bulk": [49, 359], "bump": 376, "bunch": [384, 919], "busi": 258, "c": 378, "c4": 1015, "c5": 1015, "cach": [104, 286, 405], "calcul": 144, "calibr": [4, 60, 61, 62, 63, 64, 146, 165, 180, 207, 402, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "calibratedclassifiercv": 434, "calibration_curv": 436, "calibrationdisplai": 435, "california": 367, "calinski": 404, "calinski_harabasz_scor": 710, "call": [355, 371], "callabl": 999, "callgrind": 378, "can": 384, "cancer": [186, 369], "candid": [276, 988], "canon": [115, 407], "card": 258, "cardif": 1023, "cardiotocographi": 243, "cart": 1015, "case": [343, 995, 999], "categor": [143, 310, 315, 320, 384, 411, 1001, 1009], "categori": [43, 317, 319, 1009], "categoricalnb": 840, "caus": 390, "causal": [182, 183], "cautiou": 183, "cca": [115, 479], "center": [120, 1009], "central": 55, "centroid": [295, 1002], "chain": [105, 245, 283, 385, 405], "chanc": 72, "chang": [240, 372, 387, 1023, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "changelog": [1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "characterist": [273, 274, 999], "check": [183, 266, 313, 380, 400, 1037, 1038, 1039], "check_arrai": 931, "check_consistent_length": 932, "check_cv": 824, "check_estim": 941, "check_increas": 636, "check_is_fit": [374, 982], "check_memori": 983, "check_random_st": 933, "check_scalar": 934, "check_scor": 711, "check_symmetr": 984, "check_x_i": 930, "checker": 41, "checklist": 372, "chi": [991, 997], "chi2": 603, "chi2_kernel": 759, "choic": 409, "choleski": 322, "choos": [46, 392], "ci": [372, 380], "circl": [99, 327], "cite": 0, "claim": [207, 224], "class": [41, 63, 72, 134, 136, 215, 220, 267, 271, 273, 316, 335, 338, 386, 403, 408, 411, 412, 999, 1002, 1005, 1013, 1014, 1029, 1030], "class_likelihood_ratio": 712, "classic": 25, "classif": [27, 47, 63, 65, 66, 68, 69, 102, 168, 169, 170, 171, 175, 180, 222, 241, 267, 270, 271, 274, 283, 287, 295, 302, 313, 324, 329, 340, 347, 368, 414, 995, 999, 1000, 1002, 1003, 1013, 1014, 1015], "classifi": [25, 41, 61, 62, 64, 66, 67, 132, 156, 165, 201, 245, 261, 278, 283, 287, 313, 321, 330, 333, 336, 347, 354, 402, 411, 993, 1002], "classification_report": 713, "classifierchain": [835, 1000], "classifiermixin": 421, "classifiertag": 920, "classnameprefixfeaturesoutmixin": 420, "clear": 1039, "clear_data_hom": 483, "clone": [374, 429], "close": [371, 380], "cloud": 122, "cloudpickl": 398, "cluster": [5, 27, 51, 57, 59, 71, 72, 73, 74, 75, 76, 79, 81, 82, 85, 88, 89, 91, 93, 96, 97, 98, 99, 100, 120, 180, 317, 319, 348, 368, 401, 404, 409, 999, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "cluster_optics_dbscan": 452, "cluster_optics_xi": 453, "clustermixin": 422, "co": [57, 59, 401], "co2": 172, "code": [0, 46, 120, 129, 372, 374, 377, 378, 380, 409, 1033, 1034, 1035, 1036, 1037], "coeffici": [163, 183, 190, 211, 212, 277, 404, 999], "cohen": 999, "cohen_kappa_scor": 716, "coin": [80, 81], "column": [102, 103, 245], "column_or_1d": 985, "columntransform": [321, 405, 461], "com": 1023, "combin": [154, 234], "comment": 377, "commit": 372, "committe": 387, "common": [183, 355, 386, 400, 412], "commun": [0, 372], "compact": 235, "compar": [63, 77, 79, 95, 109, 115, 140, 153, 159, 188, 190, 195, 209, 233, 239, 261, 264, 272, 292, 300, 304, 310, 384], "comparison": [64, 67, 70, 78, 97, 111, 128, 143, 144, 158, 167, 226, 227, 239, 264, 275, 277, 281, 349, 995], "compat": [41, 313, 372, 400], "compil": [370, 378], "complement": 1001, "complementnb": 841, "complet": [242, 322, 404], "completeness_scor": 717, "complex": [46, 235, 245, 263, 266, 327, 351, 359, 995, 1002, 1003, 1013, 1014, 1015], "compon": [116, 120, 126, 292, 293, 294, 409, 1002, 1016], "compos": [6, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "composit": [101, 180, 405, 988], "compoundkernel": 612, "compress": [53, 86, 359], "comput": [41, 55, 73, 81, 82, 96, 97, 100, 109, 140, 202, 212, 358, 359, 405, 408, 1006, 1020], "computation": 361, "compute_class_weight": 935, "compute_optics_graph": 454, "compute_sample_weight": 936, "concaten": 106, "concentr": 249, "concept": [386, 995], "conclud": [43, 230], "conclus": [46, 52, 167, 194, 198, 205, 263, 281, 287, 311, 340], "conda": 370, "condit": [184, 315, 1006], "confid": 146, "config_context": 465, "configur": [359, 360], "conflict": 372, "confus": [257, 404, 999], "confusion_matrix": 718, "confusionmatrixdisplai": [234, 697], "connect": [404, 412], "consensu": 995, "consensus_scor": 719, "consider": 258, "consist": 323, "constant": [207, 258, 989], "constantkernel": 613, "constraint": [149, 151, 318, 320, 404, 411], "construct": 239, "consum": 240, "content": 384, "conting": 404, "contingency_matrix": 714, "continu": [305, 372], "contribut": [372, 384], "contributor": [0, 371, 372, 387, 1033, 1034, 1035, 1036, 1037], "control": [355, 411, 1003], "convent": 373, "converg": 134, "convergencewarn": 569, "convex": 216, "cookbook": 176, "coordin": 198, "core": [0, 47, 361, 371, 378, 384, 387, 1001], "corpu": 412, "correl": [183, 186, 407, 999, 1007], "cosin": 997, "cosine_dist": 760, "cosine_similar": 761, "cost": [258, 351, 1015], "countvector": 587, "covari": [7, 70, 108, 109, 111, 112, 113, 180, 251, 406, 993, 1037, 1041, 1042, 1043, 1045, 1046, 1048, 1049], "coverag": [372, 380, 999], "coverage_error": 720, "covertyp": [243, 367], "cpython": [322, 1048], "craft": 377, "crash": 384, "creat": [102, 127, 134, 211, 234, 271, 311, 339, 340, 353, 384, 999], "credit": 258, "criteria": [196, 384, 995, 1015], "criterion": [198, 315, 988, 1013], "cross": [43, 114, 115, 162, 180, 198, 258, 259, 260, 262, 263, 267, 269, 274, 311, 323, 339, 355, 403, 407, 408, 988, 995], "cross_decomposit": [8, 1039, 1041, 1043, 1045, 1047, 1048], "cross_val_predict": 825, "cross_val_scor": [268, 826], "cross_valid": [408, 827], "cubic": 191, "cumul": 999, "curat": 371, "curv": [62, 64, 191, 239, 246, 255, 261, 266, 271, 273, 323, 402, 994], "custom": [132, 184, 262, 321, 323, 332, 412, 999, 1009, 1014], "cut": [258, 278], "cv": [259, 355], "cv_results_": 988, "cython": [373, 378, 380], "d": [408, 1002], "d2_absolute_error_scor": 721, "d2_log_loss_scor": 722, "d2_pinball_scor": 723, "d2_tweedie_scor": 724, "data": [43, 46, 48, 51, 55, 58, 61, 63, 66, 70, 73, 81, 82, 83, 88, 90, 91, 96, 97, 99, 100, 102, 107, 109, 111, 113, 115, 116, 121, 122, 125, 127, 135, 141, 144, 147, 149, 150, 154, 159, 162, 163, 173, 175, 179, 182, 185, 186, 188, 191, 195, 202, 203, 205, 211, 234, 239, 246, 254, 259, 261, 265, 270, 271, 273, 274, 277, 287, 291, 296, 302, 304, 308, 309, 310, 320, 322, 325, 336, 339, 342, 343, 348, 349, 355, 359, 361, 377, 384, 386, 404, 405, 408, 413, 1009, 1013, 1023], "dataconversionwarn": 570, "datadimensionalitywarn": 571, "datafram": [313, 320, 384, 1046], "dataiku": 1023, "datarobot": 1023, "dataset": [9, 42, 43, 44, 47, 52, 61, 62, 66, 68, 79, 91, 95, 102, 115, 117, 118, 120, 126, 128, 134, 140, 142, 143, 154, 167, 169, 171, 172, 174, 176, 180, 182, 183, 184, 190, 193, 194, 198, 201, 207, 209, 215, 224, 226, 227, 229, 233, 238, 243, 244, 258, 262, 263, 270, 271, 278, 281, 283, 311, 322, 329, 330, 333, 340, 347, 352, 353, 364, 365, 366, 367, 368, 369, 377, 384, 414, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "davi": 404, "davies_bouldin_scor": 725, "dbscan": [82, 404, 415, 441], "dbscan_clust": 88, "dcg_score": 726, "deal": [41, 384], "debian": 390, "debug": 380, "debugg": 378, "decis": [66, 134, 135, 142, 150, 165, 180, 201, 238, 258, 278, 287, 319, 321, 330, 340, 350, 351, 352, 353, 354, 384, 387, 403, 1015], "decisionboundarydisplai": 631, "decisiontre": 135, "decisiontreeclassifi": 912, "decisiontreeregressor": [315, 913], "decod": 412, "decompos": 409, "decomposit": [10, 114, 115, 119, 120, 137, 180, 368, 407, 409, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "decreas": [141, 185], "deep": 384, "default": [240, 291, 372], "defin": [72, 81, 91, 100, 226, 259, 261, 262, 349, 999], "definit": [224, 277, 302, 1006, 1039], "deflat": 115, "delai": 967, "demand": [43, 52], "demo": [58, 59, 73, 81, 82, 88, 91, 96, 98], "demonstr": [90, 268, 307, 325], "dendrogram": 76, "denois": [44, 123], "dens": 195, "densiti": [253, 288, 289, 297, 319, 410, 945, 1014], "densitymixin": 423, "depend": [184, 240, 244, 376, 1006, 1029, 1042, 1043], "deploi": 384, "deploy": 390, "deprec": [240, 372, 937, 1039], "descent": [198, 214, 220, 995, 1013], "descript": 182, "design": 172, "det": [261, 999], "det_curv": 727, "detail": [991, 1013, 1014], "detcurvedisplai": 698, "detect": [48, 233, 243, 261, 290, 291, 999, 1005, 1014], "determin": [112, 194, 406, 995, 999], "develop": [131, 132, 180, 240, 322, 370, 373, 374, 375, 379, 380, 381, 988, 1045], "devianc": [147, 999], "devic": 400, "diabet": [244, 278, 369], "diagnost": 369, "dict": 412, "dict_learn": 543, "dict_learning_onlin": 544, "dictionari": [83, 120, 123, 129, 409], "dictionarylearn": 529, "dictvector": [349, 580], "did": 384, "diff": 380, "differ": [75, 79, 95, 109, 176, 184, 304, 307, 310, 333, 340, 374, 384, 395, 404, 995], "digit": [68, 85, 91, 227, 263, 302, 325, 326, 369], "dimension": [104, 226, 229, 245, 293, 309, 348, 993, 996, 1002, 1016], "direct": 223, "dirichlet": [54, 409, 998], "discount": 999, "discov": 41, "discret": [150, 175, 305, 306, 1009], "discrimin": [69, 70, 993], "discriminant_analysi": [11, 1037, 1038, 1041, 1043, 1044, 1045, 1048], "discuss": 371, "disk": 55, "dispatch": 382, "displai": [123, 212, 234, 235, 245, 318, 319, 320, 380, 1026, 1045], "distanc": [27, 111, 321], "distance_metr": 762, "distancemetr": 699, "distort": 123, "distribut": [50, 224, 226, 297, 308, 367, 390, 996, 1009], "diverg": 409, "divid": 317, "do": [377, 384], "document": [0, 47, 57, 180, 315, 316, 346, 347, 348, 372, 1018, 1019, 1022, 1029, 1032, 1033, 1036, 1037], "doe": 384, "domain": 1018, "donat": 0, "dot": [176, 414], "dotproduct": 614, "down": 377, "download": [55, 154, 179, 322, 366], "drawback": 404, "drop": [143, 1048], "dtype": 320, "dummi": [12, 999, 1037, 1038, 1039, 1042, 1043, 1047], "dummyclassifi": 549, "dummyregressor": 550, "dump_svmlight_fil": 484, "dure": 355, "d\u00b2": 999, "each": [271, 276, 347], "earli": [144, 149, 214], "earlier": 1029, "eas": 373, "effect": [107, 149, 182, 231, 277, 304, 309, 328, 351], "effici": [318, 320, 381], "efficiencywarn": 572, "eigenfac": [45, 120], "eigenmap": 996, "eigenvector": 55, "elast": [192, 197, 995], "elasticnet": [194, 314, 646], "elasticnetcv": 647, "element": 386, "elimin": [161, 162, 413, 988], "ellipsoid": [70, 250], "ellipt": 1005, "ellipticenvelop": 466, "embed": [51, 85, 226, 227, 237, 294, 411, 996], "emeritu": 0, "empir": [94, 112, 237, 406], "empirical_covari": 474, "empiricalcovari": 467, "enable_halving_search_cv": 578, "enable_iterative_imput": 579, "encod": [86, 143, 310, 311, 319, 1009, 1010], "enet_path": 681, "enforc": [1040, 1042], "engin": [43, 52, 185, 1018, 1023], "enhanc": [318, 387, 1018, 1032, 1033, 1034, 1035, 1036], "enrich": 320, "ensembl": [13, 133, 139, 142, 180, 411, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "enthought": 390, "entir": 384, "entri": 1012, "envelop": 1005, "environ": [360, 380, 398], "equival": 264, "error": [134, 138, 144, 146, 190, 211, 261, 277, 380, 390, 995, 999], "establish": [97, 188], "estim": [41, 101, 108, 109, 110, 111, 112, 113, 131, 132, 137, 143, 145, 153, 164, 173, 179, 180, 190, 210, 213, 235, 240, 242, 243, 253, 272, 281, 288, 289, 297, 313, 314, 315, 318, 320, 322, 323, 355, 374, 384, 385, 386, 392, 400, 405, 406, 408, 410, 411, 988, 989, 993, 995, 999, 1014, 1018, 1030, 1037, 1038, 1039], "estimate_bandwidth": 455, "estimator_checks_gener": 942, "estimator_html_repr": 944, "estimatorcheckfailedwarn": 573, "euclidean_dist": 763, "evalu": [52, 66, 72, 91, 94, 112, 205, 207, 243, 258, 265, 268, 277, 302, 310, 348, 385, 399, 401, 404, 408, 411, 988, 994, 999], "evernot": 1023, "exact": 409, "exampl": [42, 45, 48, 86, 92, 107, 117, 132, 150, 165, 174, 180, 211, 341, 344, 361, 377, 395, 400, 403, 412, 414, 418, 421, 424, 427, 428, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 457, 459, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 476, 479, 480, 481, 485, 486, 487, 488, 489, 490, 492, 493, 494, 496, 497, 498, 499, 500, 502, 508, 509, 510, 511, 512, 513, 517, 518, 519, 520, 521, 522, 523, 524, 525, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 580, 581, 583, 586, 587, 588, 589, 590, 592, 593, 596, 598, 599, 601, 603, 604, 605, 606, 607, 609, 610, 611, 613, 614, 615, 617, 618, 619, 622, 623, 625, 627, 628, 630, 631, 632, 633, 634, 635, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 652, 653, 655, 656, 657, 658, 659, 662, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 684, 688, 689, 690, 691, 692, 693, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 709, 712, 713, 717, 718, 719, 727, 729, 732, 734, 735, 737, 738, 741, 742, 745, 746, 748, 749, 750, 752, 753, 755, 757, 761, 778, 779, 782, 784, 785, 786, 787, 788, 789, 790, 792, 793, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 839, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 857, 860, 861, 862, 863, 864, 865, 868, 869, 871, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 893, 897, 898, 900, 901, 902, 904, 907, 908, 909, 910, 911, 912, 913, 918, 919, 923, 931, 933, 941, 943, 945, 952, 957, 958, 959, 960, 961, 972, 982, 987, 1029], "except": [14, 381, 1041, 1045], "execut": [355, 384], "exhaust": 988, "exist": 372, "exp": [176, 414], "expans": 190, "expect": [184, 315, 1006], "experi": [0, 72, 371], "experiment": [15, 318, 376, 400, 1045], "explain": 999, "explained_variance_scor": 728, "explicit": 238, "explor": 43, "exponenti": 616, "export": [40, 384], "export_graphviz": 916, "export_text": 917, "expsinesquar": 615, "extend": 995, "extens": [378, 390], "extern": [366, 1017, 1029, 1038], "extra": 322, "extract": [54, 106, 123, 224, 265, 348, 359, 361, 412], "extract_patches_2d": 583, "extrapol": 172, "extratreeclassifi": 914, "extratreeregressor": 915, "extratreesclassifi": 555, "extratreesregressor": 556, "extrem": [377, 411], "f": [158, 999], "f1": 271, "f1_score": 729, "f_classif": 604, "f_regress": 605, "fa": [120, 127], "face": [45, 83, 120, 242, 367, 1023], "factor": [54, 120, 127, 130, 290, 291, 409, 1005], "factoranalysi": 530, "fail": 377, "failur": [182, 988], "fast_logdet": 946, "faster": [318, 411], "fastica": [120, 121, 122, 416, 531], "fbeta_scor": 730, "featur": [43, 52, 84, 87, 106, 125, 126, 139, 141, 143, 147, 149, 151, 152, 157, 159, 161, 162, 163, 180, 185, 186, 188, 190, 203, 224, 238, 244, 265, 302, 305, 306, 309, 310, 313, 315, 316, 339, 347, 348, 359, 361, 372, 376, 395, 405, 411, 412, 413, 989, 1007, 1009, 1016, 1032, 1033, 1034, 1035, 1036], "feature_extract": [16, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "feature_select": [17, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049], "featureagglomer": [404, 442], "featurehash": [349, 581], "featureunion": [405, 863], "fedora": 390, "fetch_20newsgroup": 485, "fetch_20newsgroups_vector": 486, "fetch_california_h": 487, "fetch_covtyp": 488, "fetch_fil": 489, "fetch_kddcup99": 490, "fetch_lfw_pair": 491, "fetch_lfw_peopl": 492, "fetch_olivetti_fac": 493, "fetch_openml": [318, 494], "fetch_rcv1": 495, "fetch_species_distribut": 496, "file": [55, 372, 380, 390, 412], "final": [90, 167], "find": 1002, "first": [48, 72], "fit": [29, 58, 63, 90, 121, 127, 141, 146, 147, 165, 172, 190, 191, 192, 203, 209, 213, 263, 271, 283, 291, 296, 311, 342, 353, 355, 374, 385, 395, 411, 1001, 1005], "fitfailedwarn": 574, "fix": [72, 1029, 1032, 1033, 1034, 1035, 1036, 1042], "fixedthresholdclassifi": [321, 799], "flag": 380, "flexibl": [316, 989], "float64": 400, "fold": [380, 408], "footprint": 86, "forc": [988, 1002], "forecast": [52, 172], "forest": [138, 140, 141, 153, 185, 186, 243, 246, 320, 367, 411, 1005], "forg": 370, "format": [366, 377, 384, 1000], "formul": [401, 411, 993, 1002, 1013, 1014, 1015], "four": 99, "fowlk": 404, "fowlkes_mallows_scor": 731, "framework": 1018, "free": [174, 322, 1048], "freebsd": 370, "freez": [322, 384], "french": 207, "frequenc": 224, "frequent": 384, "frequentist": 264, "frobeniu": 409, "from": [16, 51, 123, 163, 185, 310, 313, 322, 323, 360, 366, 370, 384, 412, 999, 1039], "frozen": [18, 164, 180, 1048], "frozenestim": [165, 322, 609], "fruit": 371, "fulli": 182, "function": [41, 49, 70, 176, 199, 211, 212, 216, 227, 259, 263, 278, 315, 339, 349, 381, 400, 408, 411, 414, 991, 995, 999, 1014, 1046], "functiontransform": 868, "fund": 0, "futur": 384, "futurewarn": 1039, "gain": [258, 999], "galleri": [418, 421, 424, 427, 428, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 457, 459, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 476, 479, 480, 481, 485, 486, 487, 488, 489, 490, 492, 493, 494, 496, 497, 498, 499, 500, 502, 508, 509, 510, 511, 512, 513, 517, 518, 519, 520, 521, 522, 523, 524, 525, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 580, 581, 583, 586, 587, 588, 589, 590, 592, 593, 596, 598, 599, 601, 603, 604, 605, 606, 607, 609, 610, 611, 613, 614, 615, 617, 618, 619, 622, 623, 625, 627, 628, 630, 631, 632, 633, 634, 635, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 652, 653, 655, 656, 657, 658, 659, 662, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 684, 688, 689, 690, 691, 692, 693, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 709, 712, 713, 717, 718, 719, 727, 729, 732, 734, 735, 737, 738, 741, 742, 745, 746, 748, 749, 750, 752, 753, 755, 757, 761, 778, 779, 782, 784, 785, 786, 787, 788, 789, 790, 792, 793, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 839, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 857, 860, 861, 862, 863, 864, 865, 868, 869, 871, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 893, 897, 898, 900, 901, 902, 904, 907, 908, 909, 910, 911, 912, 913, 918, 919, 923, 931, 933, 941, 943, 945, 952, 957, 958, 959, 960, 961, 972, 982, 987], "gamma": [224, 319, 999], "gammaregressor": 648, "gaussian": [61, 62, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 180, 248, 249, 250, 253, 254, 255, 304, 414, 998, 1001, 1009, 1011], "gaussian_process": [19, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1049], "gaussianmixtur": 798, "gaussiannb": 842, "gaussianprocessclassifi": 610, "gaussianprocessregressor": 611, "gaussianrandomproject": 896, "gdb": 378, "gen_batch": 951, "gen_even_slic": 952, "gener": [9, 25, 52, 58, 61, 70, 73, 81, 82, 88, 90, 96, 97, 99, 100, 109, 111, 113, 118, 121, 122, 123, 141, 150, 159, 162, 167, 173, 174, 176, 180, 189, 190, 191, 194, 201, 203, 207, 209, 239, 254, 261, 277, 291, 296, 302, 314, 325, 342, 343, 355, 368, 372, 386, 409, 411, 995, 1009, 1019], "genericunivariateselect": 591, "german": 258, "get": [355, 380, 384, 385], "get_config": 626, "get_data_hom": 497, "get_feature_names_out": 317, "get_param": 374, "get_routing_for_object": 959, "get_scor": 732, "get_scorer_nam": 733, "get_tag": 953, "git": 372, "github": 372, "gitter": 1022, "glm": 25, "glossari": 386, "gmm": [251, 252], "goal": 1019, "good": [372, 377], "govern": [0, 387], "gpc": [168, 169, 170, 171, 414], "gperftool": 378, "gpr": [172, 173, 414], "gprof": 378, "gpu": 384, "gradient": [43, 140, 143, 144, 145, 146, 147, 148, 149, 184, 207, 214, 220, 313, 314, 316, 318, 319, 323, 411, 995, 1013], "gradientboostingclassifi": [411, 557], "gradientboostingregressor": [411, 558], "gram": 192, "graph": [41, 51, 313, 381, 384, 404, 412], "graphic": [384, 1004], "graphical_lasso": 475, "graphicallasso": 468, "graphicallassocv": 469, "greek": 80, "grid": [245, 262, 263, 264, 272, 275, 988], "grid_to_graph": 584, "gridsearchcv": [104, 263, 268, 800], "ground": [72, 190], "group": [317, 319, 408, 1023], "groupkfold": 801, "groupshufflesplit": 802, "grow": 72, "guid": [375, 1025], "guidelin": [372, 374, 376], "halv": [275, 276, 315, 988], "halvinggridsearchcv": 803, "halvingrandomsearchcv": 804, "ham": 999, "hamming_loss": 734, "hand": 68, "handl": [41, 186, 400, 989], "handwritten": [91, 227, 369], "harabasz": 404, "hard": 411, "has_fit_paramet": 986, "hash": [152, 381, 412], "hashingvector": [348, 588], "haversine_dist": 764, "hdbscan": [88, 319, 404, 443], "help": [371, 384], "helper": [49, 176, 227, 263, 381], "here": 354, "hessian": 996, "heterogen": [102, 405], "hierarch": [76, 81, 95, 100, 319, 404], "hierarchi": 404, "higher": 360, "highlight": [180, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 1029, 1032, 1033, 1036, 1037], "hing": 999, "hinge_loss": 735, "histgradientboost": [315, 320], "histgradientboostingclassifi": [411, 559], "histgradientboostingregressor": [317, 560], "histogram": [140, 149, 314, 316, 318, 323, 410, 411], "histori": [0, 1027], "hmm": 384, "hoc": 278, "hole": 230, "home": 264, "homebrew": 370, "homogen": 404, "homogeneity_completeness_v_measur": 736, "homogeneity_scor": 737, "hot": 143, "hour": 52, "hourli": 182, "hous": [143, 243, 367], "how": [355, 372, 378, 384], "howaboutw": 1023, "html": [235, 323, 374], "huber": 995, "huberregressor": [193, 649], "hug": 1023, "hyper": [29, 146, 262, 315, 988], "hyperparamet": [88, 172, 173, 265, 272, 281, 617], "hyperplan": [201, 218, 337, 338], "i": [321, 354, 377, 384, 408, 999, 1023], "ic": [184, 1006], "ica": [121, 409], "id3": 1015, "idf": 412, "illustr": [104, 171, 176, 294, 414], "imag": [16, 44, 81, 83, 86, 99, 123, 366, 384, 412], "img_to_graph": 585, "impact": [43, 94, 277, 1044, 1045, 1046, 1047, 1048, 1049], "implement": [132, 195, 384, 1002, 1013, 1014], "import": [141, 147, 163, 185, 186, 238, 281, 309, 313, 403, 411, 1007], "improv": [314, 315, 316, 317, 318, 320, 321, 322, 323, 371, 372, 1032, 1033], "impur": [141, 185, 351, 1007], "imput": [20, 177, 178, 179, 180, 313, 321, 989, 1009, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "includ": 384, "inclus": 384, "incom": 182, "inconsist": 355, "inconsistentversionwarn": 575, "incr_mean_variance_axi": 973, "increment": [124, 361, 409], "incrementalpca": 532, "independ": [120, 409], "index": [404, 955], "indic": 259, "individu": [156, 184, 315, 1006], "induct": 89, "infer": 182, "influenc": [46, 49, 359], "infonea": 1023, "inform": [158, 196, 198, 261, 376, 404, 988, 995], "infrequ": [317, 319, 1009], "initi": [92, 94, 252], "inplace_column_scal": 974, "inplace_csr_column_scal": 975, "inplace_csr_row_normalize_l1": 980, "inplace_csr_row_normalize_l2": 981, "inplace_row_scal": 976, "inplace_swap_column": 977, "inplace_swap_row": 978, "input": [41, 359, 374, 400, 404, 1009], "inputtag": 921, "inria": 1023, "inspect": [21, 180, 181, 184, 389, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049], "instal": [370, 390], "instanc": [355, 361], "instanti": 374, "instead": 258, "instruct": 370, "insur": 224, "integr": 372, "intel": 390, "interact": [43, 184, 318, 411], "interfac": [27, 395], "intern": [311, 403], "internet": 51, "interoper": 1018, "interpol": 208, "interpret": [172, 183, 211, 243, 283, 409, 411], "interv": 146, "introduc": 247, "introduct": [263, 996], "introductori": 174, "invari": [88, 267], "invers": [113, 406, 1011], "io": 398, "iri": [66, 126, 128, 142, 169, 215, 330, 333, 352, 369, 414], "is_classifi": 430, "is_cluster": 431, "is_multilabel": 962, "is_outlier_detector": 432, "is_regressor": 433, "iso": [170, 271], "isol": 1005, "isolationforest": [150, 561], "isomap": [226, 227, 688, 996], "isoton": [22, 236, 402, 990, 1037, 1038, 1039, 1041, 1043, 1044], "isotonic_regress": 637, "isotonicregress": 635, "issu": [371, 372, 380], "iter": [179, 276, 408], "iterativeimput": [178, 627, 989], "j": 1023, "jaccard": 999, "jaccard_scor": 738, "job": 384, "joblib": [360, 378, 398], "johnson": [237, 1011], "johnson_lindenstrauss_min_dim": 898, "joint": 203, "k": [78, 90, 91, 92, 94, 97, 100, 115, 287, 309, 348, 404, 408, 999, 1002, 1009], "k_mean": 456, "kappa": 999, "kbinsdiscret": [305, 307, 869], "kcachegrind": 378, "kddcup": 367, "kddcup99": 243, "kdtree": [845, 1002], "keep": 989, "kei": 398, "kernel": [19, 43, 44, 125, 167, 172, 173, 175, 176, 180, 187, 188, 238, 239, 288, 289, 297, 315, 332, 335, 340, 342, 409, 410, 414, 618, 991, 992, 997, 1009, 1014], "kernel_approxim": [23, 1039, 1041, 1042, 1043, 1044, 1045], "kernel_metr": 765, "kernel_ridg": [24, 1046], "kernelcenter": 870, "kerneldens": 849, "kernelpca": [125, 533], "kernelridg": 643, "keyword": [316, 1040, 1042], "kfold": 805, "kind": 0, "kmean": [93, 97, 314, 444], "kmeans_plusplu": 457, "kneighbors_graph": 857, "kneighborsclassifi": 846, "kneighborsregressor": 847, "kneighborstransform": 848, "knn": [179, 313], "knnimput": 628, "knowledg": 373, "known": [1037, 1038], "kpca": 409, "l": 191, "l1": [53, 194, 200, 202, 222, 343, 413], "l1_min_c": 911, "l2": [211, 343], "label": [41, 72, 271, 325, 326, 327, 367, 368, 404, 408, 411, 999, 1010, 1012], "label_binar": 888, "label_ranking_average_precision_scor": 739, "label_ranking_loss": 740, "labelbinar": [871, 1010], "labelencod": 872, "labelpropag": 899, "labelspread": 900, "lag": 52, "laplacian": 997, "laplacian_kernel": 766, "lar": [197, 650, 995], "larg": 412, "lars_path": 682, "lars_path_gram": 683, "larscv": 651, "lasso": [53, 194, 195, 196, 197, 198, 203, 314, 652, 995], "lasso_path": 684, "lassocv": 653, "lassolar": 654, "lassolars": 656, "lassolarscv": 655, "latenc": [49, 359], "latent": [54, 115, 409], "latentdirichletalloc": 534, "latest": 390, "layer": [184, 299, 323, 1003], "lda": [70, 128, 409, 993], "leakag": 355, "learn": [0, 41, 44, 51, 83, 120, 123, 166, 180, 182, 183, 184, 188, 225, 226, 227, 228, 239, 240, 258, 259, 266, 294, 300, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 358, 359, 361, 368, 370, 372, 373, 374, 376, 377, 384, 387, 390, 409, 411, 994, 996, 1004, 1012, 1017, 1018, 1019, 1021, 1023, 1024], "learner": [134, 411], "learning_curv": 828, "learningcurvedisplai": 806, "least": [116, 146, 198, 204, 205, 995], "leav": [351, 408, 995], "leaveonegroupout": 807, "leaveoneout": 808, "leavepgroupsout": 809, "leavepout": 810, "ledoit": [69, 110, 406], "ledoit_wolf": 476, "ledoit_wolf_shrinkag": 477, "ledoitwolf": [109, 470], "lemma": 1011, "length": [150, 390], "lesson": [182, 183], "level": [172, 173, 360, 404, 411], "liabil": 207, "librari": [322, 359, 360], "libsvm": 366, "likelihood": [109, 190, 191, 267, 999, 1004], "limit": [143, 167, 359, 390, 398, 412], "lindenstrauss": [237, 1011], "line": 170, "linear": [25, 43, 62, 69, 70, 146, 167, 180, 183, 189, 190, 205, 207, 210, 213, 226, 227, 238, 314, 335, 340, 342, 359, 381, 384, 993, 995, 996, 997, 1009], "linear_kernel": 767, "linear_model": [25, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "lineardiscriminantanalysi": [318, 547], "linearregress": [209, 657], "linearsvc": [334, 904], "linearsvr": 905, "link": [359, 999], "linkag": [95, 404], "linnerrud": 369, "linux": [370, 384, 390], "list": [72, 376, 1022], "loa": 172, "load": [44, 46, 55, 83, 91, 126, 140, 143, 147, 163, 185, 202, 205, 224, 227, 234, 238, 246, 263, 265, 273, 274, 283, 287, 309, 310, 336, 339, 347, 348, 349, 365, 366, 377, 384, 412], "load_breast_canc": 498, "load_diabet": 499, "load_digit": 500, "load_fil": 501, "load_iri": 502, "load_linnerud": 503, "load_sample_imag": [504, 505], "load_svmlight_fil": [506, 507], "load_win": 508, "loader": 9, "local": [226, 227, 290, 291, 996, 1005], "locally_linear_embed": 693, "locallylinearembed": 689, "localoutlierfactor": 850, "lock": [372, 380], "lof": [290, 291], "log": [190, 191, 999], "log_loss": 741, "logarithm": 999, "logist": [105, 199, 200, 201, 202, 221, 222, 995], "logisticregress": [283, 322, 658], "logisticregressioncv": 659, "logo": 0, "loo": 408, "look": [52, 239, 342], "loss": [149, 207, 216, 314, 317, 319, 411, 999, 1046], "lot": 384, "love": 1023, "low": [404, 411, 413], "lower": 360, "lpo": 408, "lsa": 348, "mac": 390, "machin": [166, 180, 182, 183, 184, 302, 331, 380, 1004, 1014], "machinali": 1023, "maco": 370, "macport": 390, "macro": 273, "mahalanobi": 111, "mail": 1022, "main": [47, 207], "maintain": [0, 372, 376, 398], "major": [411, 1037, 1038], "make": [154, 156, 179, 372, 387], "make_biclust": 509, "make_blob": [377, 510], "make_checkerboard": 511, "make_circl": 512, "make_classif": [377, 513], "make_column_selector": 463, "make_column_transform": 464, "make_friedman1": 514, "make_friedman2": 515, "make_friedman3": 516, "make_gaussian_quantil": 517, "make_hastie_10_2": 518, "make_low_rank_matrix": 519, "make_moon": 520, "make_multilabel_classif": 521, "make_pipelin": 865, "make_regress": [377, 522], "make_s_curv": 523, "make_scor": [742, 999], "make_sparse_coded_sign": 524, "make_sparse_spd_matrix": 525, "make_sparse_uncorrel": 526, "make_spd_matrix": 527, "make_swiss_rol": 528, "make_union": 866, "mallow": 404, "manag": [360, 390], "manhattan_dist": 768, "mani": [259, 318, 360, 384, 1046, 1047, 1048, 1049], "manifold": [26, 180, 225, 226, 227, 228, 368, 996, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049], "manual": [258, 403], "map": [238, 308, 1009], "mar": 1023, "margin": [190, 191, 218, 337, 341], "mark": 989, "markdown": 377, "marker": 372, "market": 51, "match": [206, 995], "matern": 619, "mathemat": [41, 401, 411, 991, 993, 1002, 1006, 1013, 1014, 1015], "matric": [41, 381, 1009], "matrix": [54, 55, 175, 192, 257, 404, 409, 999], "matter": 183, "matthew": 999, "matthews_corrcoef": 743, "mat\u00e9rn": [176, 414], "max": [109, 999], "max_error": 744, "maxabs_scal": 889, "maxabsscal": [304, 873], "maximum": [218, 337, 1004], "md": [690, 996], "mdi": 185, "mean": [78, 90, 91, 92, 94, 96, 97, 141, 179, 185, 211, 348, 404, 999, 1009], "mean_absolute_error": 745, "mean_absolute_percentage_error": 746, "mean_gamma_devi": 747, "mean_pinball_loss": 748, "mean_poisson_devi": 749, "mean_shift": 458, "mean_squared_error": 750, "mean_squared_log_error": 751, "mean_tweedie_devi": 752, "mean_variance_axi": 979, "meanshift": [96, 445], "measur": [154, 267, 404, 999], "media": 1022, "median": [995, 999], "median_absolute_error": 753, "member": 371, "memori": [86, 320, 359, 378, 380], "merg": 376, "meson": [380, 1047], "messag": [264, 372], "meta": [41, 153, 240, 281, 315, 400, 411], "metadata": [41, 240, 319, 320, 322, 347, 386, 395, 1046, 1047, 1048, 1049], "metadatarequest": 956, "metadatarout": 957, "metaestimatormixin": 424, "method": [95, 106, 115, 133, 167, 180, 226, 228, 252, 280, 282, 386, 398, 404, 991, 1005, 1006], "methodmap": 958, "metric": [27, 72, 75, 146, 258, 268, 400, 404, 408, 988, 997, 999, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "micro": [271, 273], "migrat": 323, "min_cluster_s": 88, "min_po": 927, "min_sampl": 88, "mincovdet": 471, "mini": [404, 409], "minibatchdictionarylearn": 535, "minibatchkmean": [77, 97, 120, 446], "minibatchnmf": [317, 536], "minibatchsparsepca": [120, 409, 537], "minim": [377, 1015, 1042, 1043], "minimum": [112, 376, 406], "minmax_scal": 890, "minmaxscal": [304, 874], "misc": 1029, "miscellan": [25, 180, 232, 1037, 1038, 1039, 1040, 1041, 1042, 1045], "mislead": 1007, "miss": [149, 177, 178, 179, 180, 313, 319, 320, 322, 411, 989, 1009, 1015], "missingind": 629, "mix": 103, "mixin": 374, "mixtur": [28, 180, 248, 249, 250, 253, 254, 255, 998, 1037, 1038, 1042, 1043, 1045, 1047, 1049], "mlp": 301, "mlpclassifi": [300, 861], "mlpregressor": 862, "mnist": [222, 301], "mode": [115, 359], "model": [25, 27, 29, 43, 46, 50, 52, 90, 107, 115, 121, 127, 140, 141, 143, 144, 147, 150, 162, 163, 167, 172, 180, 183, 184, 185, 188, 189, 190, 194, 196, 198, 203, 205, 207, 210, 224, 234, 239, 243, 244, 248, 250, 254, 255, 256, 258, 263, 264, 266, 271, 277, 283, 291, 296, 302, 309, 314, 316, 320, 340, 342, 347, 353, 359, 384, 385, 387, 398, 399, 408, 988, 994, 995, 998, 999, 1001, 1003, 1004, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "model_select": [29, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "modifi": 996, "modul": [1029, 1037, 1038, 1044, 1045, 1046, 1047, 1048, 1049], "mona": 172, "monitor": 372, "monoton": [149, 151, 320, 411], "mooc": 1017, "more": [316, 384, 1003], "morgan": 1023, "most": 325, "motor": 207, "mp": 400, "multi": [25, 88, 134, 153, 184, 203, 215, 229, 242, 268, 271, 299, 323, 353, 378, 995, 996, 999, 1003, 1014, 1015], "multiclass": [30, 41, 180, 221, 273, 280, 281, 313, 322, 381, 402, 999, 1000, 1038, 1041, 1042, 1043, 1049], "multicollinear": 186, "multidimension": 226, "multilabel": [27, 118, 241, 283, 368, 381, 999, 1000], "multilabel_confusion_matrix": 754, "multilabelbinar": [875, 1010], "multinomi": [201, 222, 995, 1001], "multinomialnb": 843, "multioutput": [31, 180, 282, 1000, 1037, 1038, 1039, 1040, 1041, 1044, 1045, 1046, 1047, 1049], "multioutputclassifi": [836, 1000], "multioutputregressor": [837, 1000], "multipl": [106, 245, 268, 355, 379, 408, 988, 989, 999, 1037, 1038], "multitaskelasticnet": 660, "multitaskelasticnetcv": 661, "multitasklasso": 662, "multitasklassocv": 663, "multivari": [115, 989], "murmurhash3_32": 965, "mutual": [158, 404], "mutual_info_classif": 606, "mutual_info_regress": 607, "mutual_info_scor": 755, "my": 384, "n_featur": 49, "n_job": 384, "naiv": [43, 52, 61, 62, 1001], "naive_bay": [32, 1037, 1039, 1040, 1041, 1042, 1044, 1045, 1049], "name": [151, 316, 384, 405, 999], "nan": 989, "nan_euclidean_dist": 769, "nativ": [143, 310, 313, 315, 320, 384], "ndcg_score": 756, "nearest": [100, 180, 284, 285, 286, 287, 292, 295, 296, 313, 989, 1002], "nearestcentroid": 851, "nearestneighbor": 852, "necessari": 377, "need": 384, "neg": [54, 120, 163, 204, 409, 995], "neighbor": [33, 100, 180, 226, 284, 285, 286, 287, 292, 296, 309, 313, 989, 996, 1002, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "neighborhood": [292, 293, 294, 1002], "neighborhoodcomponentsanalysi": 853, "nest": [269, 405], "net": [192, 197, 995], "netbsd": 390, "network": [180, 184, 298, 1003, 1004], "neural": [180, 184, 298, 1003, 1004], "neural_network": [34, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1048, 1049], "new": [313, 315, 316, 318, 319, 372, 384, 1017, 1029, 1030, 1032, 1033, 1034, 1035, 1036], "newsgroup": [102, 347, 367], "newton": 322, "next": [52, 385], "nightli": 370, "nmf": [120, 317, 409, 538], "nnmf": 409, "nois": [173, 174, 191], "noisi": [123, 174, 211], "non": [43, 54, 120, 146, 204, 207, 211, 226, 261, 269, 321, 335, 342, 409, 995, 1009], "non_negative_factor": 545, "none": 355, "norm": 409, "normal": [69, 188, 207, 304, 308, 876, 891, 999, 1009], "normalized_mutual_info_scor": 757, "note": [361, 400, 403, 408], "notfittederror": 576, "novelti": [290, 1005, 1014], "now": [313, 316, 1039], "number": [72, 93, 143, 149, 162, 276, 359, 374, 989], "numer": [183, 321, 360, 374], "numpi": [360, 377], "nusvc": 906, "nusvr": 907, "nystroem": [639, 991], "oa": [69, 109, 110, 417, 472], "object": [41, 234, 259, 374, 384, 988, 999, 1026], "observ": 182, "obtain": [384, 408], "off": [258, 278, 995], "offici": 1048, "okcupid": 1023, "older": 1029, "olivetti": 367, "omp": 995, "one": [116, 143, 244, 995, 999], "oneclasssvm": 908, "onehotencod": [317, 877], "onetoonefeaturemixin": 425, "onevsoneclassifi": [832, 1000], "onevsrestclassifi": [283, 833, 1000], "onli": [223, 1040, 1042], "onlin": [83, 316, 317, 1013], "onnx": 398, "oob": 138, "openml": [44, 310, 313, 366], "openmp": [360, 373], "oper": [41, 273, 274, 371, 381, 414, 999], "optic": [98, 369, 404, 447], "optim": [29, 41, 378, 988], "optimis": 173, "option": 403, "oracl": 406, "ordin": 143, "ordinalencod": [319, 878], "ordinari": [205, 995], "org": [366, 376, 1023], "origin": [86, 125, 270, 294, 304], "orthogon": [206, 995], "orthogonal_mp": 685, "orthogonal_mp_gram": 686, "orthogonalmatchingpursuit": 664, "orthogonalmatchingpursuitcv": 665, "osx": [384, 390], "other": [310, 322, 366, 384, 411, 1018, 1029], "otto": 1023, "our": [91, 259, 262, 278, 372, 376], "out": [47, 145, 361, 380, 408, 988, 995, 1001], "outdat": 380, "outlier": [25, 48, 193, 223, 233, 243, 290, 291, 304, 995, 1005, 1009], "outliermixin": 426, "outlin": 1007, "output": [153, 242, 304, 318, 320, 353, 400, 1015], "outputcodeclassifi": [834, 1000], "over": 245, "overfit": 279, "overhead": 359, "oversubscript": 360, "overview": [281, 379, 398, 404, 999, 1005], "ovo": 273, "ovr": 273, "own": [374, 384], "p": [408, 1023], "packag": [238, 1018, 1041], "paid": 1022, "pair": [126, 404], "pair_confusion_matrix": 715, "paired_cosine_dist": 770, "paired_dist": 771, "paired_euclidean_dist": 772, "paired_manhattan_dist": 773, "pairwis": [27, 43, 264, 321, 997], "pairwise_dist": 778, "pairwise_distances_argmin": 779, "pairwise_distances_argmin_min": 780, "pairwise_distances_chunk": 781, "pairwise_kernel": 774, "pairwisekernel": 620, "panda": [318, 377], "parallel": [41, 360, 378, 404, 411, 966, 988], "paramet": [29, 41, 46, 109, 146, 262, 263, 277, 315, 336, 343, 372, 385, 386, 405, 411, 988, 995, 999, 1014], "parametergrid": 811, "parametersampl": 812, "parametr": 1004, "parametrize_with_check": 943, "pariba": 1023, "paristech": 1023, "pariti": 97, "parser": [318, 366], "part": [83, 413], "parti": [207, 240, 322, 390], "partial": [116, 182, 184, 244, 1006], "partial_depend": 633, "partialdependencedisplai": 632, "partit": 188, "passiv": 995, "passiveaggressiveclassifi": 666, "passiveaggressiveregressor": 667, "past": 0, "patch": [123, 412], "patchextractor": 582, "path": [150, 197, 202, 212, 354, 390], "pattern": 130, "pca": [44, 91, 105, 120, 121, 124, 125, 126, 127, 128, 309, 320, 321, 409, 539, 1016], "pdp": 184, "peerindex": 1023, "penalti": [200, 217, 343], "peopl": [0, 384, 1029, 1030, 1031, 1032], "per": 348, "percentag": 999, "percentil": 339, "perceptron": [184, 299, 323, 668, 995, 1003], "perform": [72, 78, 263, 267, 309, 315, 317, 321, 325, 348, 359, 372, 373, 404, 408], "period": [43, 208], "permiss": 384, "permut": [141, 185, 186, 270, 313, 408, 1007], "permutation_import": 634, "permutation_test_scor": 829, "perplex": 231, "persist": 398, "phimeca": 1023, "pickl": 398, "pictur": 80, "pinbal": 999, "pipelin": [35, 101, 102, 104, 105, 154, 160, 180, 183, 235, 240, 245, 263, 265, 310, 322, 339, 384, 385, 405, 413, 864, 1016, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049], "pitfal": [183, 355], "pl": 115, "plai": 339, "plan": 384, "plant": 369, "platform": [370, 380, 390], "plot": [21, 27, 40, 46, 47, 49, 58, 61, 66, 70, 73, 76, 81, 82, 83, 90, 96, 97, 99, 100, 109, 113, 115, 118, 121, 122, 126, 135, 140, 142, 147, 150, 154, 156, 162, 179, 184, 190, 191, 194, 202, 203, 205, 211, 212, 215, 227, 234, 238, 243, 244, 246, 254, 260, 266, 268, 271, 273, 283, 291, 302, 310, 313, 315, 316, 323, 325, 333, 334, 339, 340, 347, 352, 353, 379, 994, 1006, 1026], "plot_tre": 918, "pls1": 115, "pls2": 115, "plscanon": [407, 480], "plsregress": [407, 481], "plssvd": [407, 482], "point": [122, 184, 258, 278, 294, 398], "poisson": [207, 224, 314, 315, 999], "poissonregressor": 669, "polar": [52, 320], "polici": 372, "polynomi": [43, 188, 190, 191, 208, 340, 991, 995, 997, 1009], "polynomial_kernel": 775, "polynomialcountsketch": [315, 640], "polynomialfeatur": 879, "posit": [120, 316], "possibl": [90, 377], "post": [29, 258, 267, 278, 351, 403], "post1": 1039, "posterior": 176, "power": [116, 207], "power_transform": 892, "powertransform": [304, 880], "pr": 371, "practic": [264, 355, 373, 377, 996, 1003, 1013, 1014, 1015], "pre": [165, 267, 355, 385], "precis": [271, 999], "precision_recall_curv": 782, "precision_recall_fscore_support": 783, "precision_scor": 784, "precisionrecalldisplai": [234, 700], "precomput": [129, 192, 313, 409], "predefin": [408, 999], "predefinedsplit": 813, "predict": [43, 49, 52, 61, 116, 135, 146, 155, 156, 168, 182, 191, 207, 239, 258, 260, 271, 325, 353, 359, 384, 385, 403, 408, 414, 999, 1010], "predictionerrordisplai": 701, "predictor": 154, "premium": 224, "prepar": [120, 135, 144, 149, 188, 205, 226, 229, 273, 274, 309, 336], "preprocess": [36, 147, 154, 180, 183, 184, 243, 245, 303, 349, 355, 384, 1009, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "preprocessor": 184, "preserv": 380, "preval": 267, "princip": [55, 116, 126, 409, 1016], "print": 263, "prior": [53, 176, 249], "privat": 1046, "probabilist": [66, 127, 155, 168, 409, 414], "probabl": [61, 62, 63, 66, 170, 402, 411, 1014], "problem": [183, 258, 409, 1014, 1015], "process": [166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 180, 183, 355, 387, 414, 998], "process_rout": 960, "processor": 385, "product": [176, 224, 380, 384, 398, 414, 621], "profil": 378, "project": [0, 66, 116, 125, 128, 237, 374, 384, 1011, 1016, 1018], "pronounc": 384, "propag": [51, 73, 325, 326, 327, 404, 1012], "proper": [52, 172], "properti": 386, "propos": 387, "provid": 377, "prune": [313, 351, 1015], "public": 1039, "publica": 1023, "pull": [372, 376, 380, 384], "pure": 224, "purpos": [211, 349, 1019], "pursuit": [206, 995], "pypi": [384, 1048], "pytest": 380, "python": [238, 360, 378, 1017, 1018], "pytorch": 400, "qda": [70, 993], "quadrat": [70, 176, 414, 993], "quadraticdiscriminantanalysi": 548, "qualit": [43, 52], "qualiti": [348, 999], "quantifi": [348, 999], "quantil": [52, 146, 149, 209, 316, 317, 995], "quantile_transform": 893, "quantileregressor": [209, 670], "quantiletransform": [304, 881], "quantit": 66, "quantiz": 86, "question": [384, 1022], "r2_score": 785, "r_regress": 608, "radial": [176, 414, 991], "radius_neighbors_graph": 858, "radiusneighborsclassifi": 854, "radiusneighborsregressor": 855, "radiusneighborstransform": 856, "rand": 404, "rand_scor": 786, "random": [41, 55, 120, 138, 140, 152, 153, 185, 186, 237, 246, 270, 272, 320, 353, 355, 374, 381, 408, 409, 411, 988, 995, 1011, 1016], "random_project": [37, 1043], "random_st": 384, "randomforestclassifi": 562, "randomforestregressor": 563, "randomized_range_find": 947, "randomized_svd": 948, "randomizedsearchcv": 814, "randomli": 118, "randomst": 355, "randomtreesembed": 564, "rang": 1009, "rangespan": 1023, "rank": [27, 207, 999], "ransac": [210, 995], "ransacregressor": 671, "rate": 411, "ratio": [267, 999], "ration": [176, 414], "rationalquadrat": 623, "rbf": [238, 335, 336, 340, 414, 622, 997, 1014], "rbf_kernel": 776, "rbfsampler": 641, "rcv1": 367, "reachabl": 404, "read": 372, "real": [42, 48, 107, 180, 367], "recal": [271, 999], "recall_scor": 787, "receiv": [273, 274, 999], "recogn": 68, "recognit": [45, 367, 369], "recommend": [355, 1018], "reconstruct": [44, 53, 123], "reconstruct_from_patches_2d": 586, "recov": 190, "recurs": [161, 162, 413], "redirect": 55, "reduc": [91, 359], "reduct": [104, 226, 230, 245, 293, 309, 348, 993, 1002, 1016], "refer": [1, 50, 62, 64, 112, 123, 137, 188, 194, 281, 297, 376, 414], "refit": [258, 262], "regard": [258, 403], "region": [80, 264], "regress": [25, 27, 43, 52, 105, 107, 115, 116, 135, 146, 147, 156, 167, 172, 173, 174, 175, 190, 191, 198, 200, 201, 202, 205, 207, 209, 221, 223, 224, 236, 239, 296, 342, 353, 368, 405, 414, 990, 992, 995, 999, 1000, 1002, 1003, 1013, 1014, 1015], "regressor": [25, 49, 135, 146, 190, 211, 311, 313, 316, 411], "regressorchain": [838, 1000], "regressormixin": 427, "regressortag": 922, "regular": [78, 109, 148, 183, 202, 211, 212, 277, 299, 343, 995, 1003], "reinforc": 384, "relat": [43, 47, 1007, 1018, 1036], "releas": [180, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 376, 390, 1027], "relev": [111, 194, 995], "remark": [43, 90, 230, 237], "remot": 380, "remov": [384, 413, 1009, 1029], "repeat": [355, 405, 408], "repeatedkfold": 815, "repeatedstratifiedkfold": 816, "replac": 179, "repli": 380, "replic": 398, "report": [372, 377, 999], "repositori": 366, "represent": [126, 184, 235, 314, 323, 359, 374, 412], "reproduc": [355, 377], "request": [372, 376, 380, 384], "resampl": 969, "rescal": 309, "reshap": 359, "resolv": 372, "resourc": [276, 360, 372, 1017, 1022], "respect": 267, "respons": [115, 387], "rest": [201, 273], "restart": 378, "restrict": [302, 1004], "result": [46, 47, 58, 64, 73, 81, 82, 83, 90, 91, 96, 97, 100, 109, 111, 113, 121, 122, 135, 140, 154, 156, 179, 188, 194, 205, 212, 239, 243, 263, 268, 283, 291, 310, 323, 342, 348, 353, 355, 988], "retriev": [51, 313], "reuter": 47, "review": [371, 372, 380], "rfe": 592, "rfecv": 593, "rich": [235, 314], "ridg": [167, 191, 193, 205, 211, 212, 239, 311, 672, 992, 995], "ridge_regress": 687, "ridgeclassifi": 674, "ridgeclassifiercv": 675, "ridgecv": 673, "right": 392, "roadmap": 1019, "robust": [25, 88, 111, 112, 190, 210, 213, 355, 406, 988, 995], "robust_scal": 894, "robustscal": [304, 882], "roc": [246, 261, 273, 274, 313, 323, 999], "roc_auc_scor": 788, "roc_curv": 789, "roccurvedisplai": [234, 702], "role": 387, "roll": [230, 374], "root_mean_squared_error": 790, "root_mean_squared_log_error": 791, "rotat": 130, "rout": [41, 240, 319, 320, 322, 386, 395, 1046, 1047, 1048, 1049], "routin": [47, 360, 381], "rule": 999, "run": [46, 91, 268], "runtim": 320, "r\u00b2": 999, "sa": 243, "safe_mask": 970, "safe_sparse_dot": 949, "safe_sqr": 971, "sampl": [9, 41, 58, 73, 88, 96, 109, 121, 122, 159, 192, 219, 239, 265, 277, 296, 314, 342, 345, 366, 381, 386, 411, 995], "sample_without_replac": 968, "saniti": 380, "save": 384, "scalabl": [188, 266, 314], "scale": [88, 183, 226, 229, 309, 343, 361, 895, 996, 1005, 1009, 1016], "scaler": 304, "scatter": 115, "scenario": 995, "scientif": 1017, "scikit": [0, 41, 240, 259, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 358, 359, 370, 373, 374, 376, 377, 384, 387, 390, 1017, 1018, 1019, 1023], "scipi": [360, 1046], "score": [55, 115, 140, 162, 179, 190, 254, 263, 270, 271, 339, 395, 400, 404, 408, 994, 999, 1014], "scorer": 999, "script": 377, "search": [245, 262, 263, 264, 272, 275, 281, 385, 988], "second": [48, 72], "secur": [398, 1047], "segment": [80, 99], "select": [25, 27, 87, 93, 104, 127, 157, 159, 162, 163, 180, 196, 198, 203, 254, 256, 339, 384, 395, 399, 408, 413, 988, 995, 1035], "selectfdr": 594, "selectfpr": 595, "selectfrommodel": [413, 596], "selectfw": 597, "selectkbest": 598, "selectormixin": 600, "selectpercentil": 599, "self": [315, 328, 1012], "selftrainingclassifi": 901, "semant": 409, "semi": [180, 324, 325, 329, 330, 1012], "semi_supervis": [38, 1039, 1040, 1041, 1045, 1048], "sen": [223, 995], "sens": 53, "sensit": 258, "separ": [121, 218, 337, 338], "sequenc": [175, 384], "sequenti": [163, 413], "sequentialfeatureselector": [315, 601], "seri": [52, 203, 408], "serv": 398, "set": [48, 107, 109, 154, 165, 179, 211, 258, 263, 271, 321, 323, 336, 351, 384, 403, 408, 995], "set_config": 902, "set_output": [247, 318, 320, 374], "set_param": 374, "setuptool": 1048, "sever": [224, 228], "sgd": [215, 216, 217, 218, 219, 995, 1013], "sgdclassifi": 676, "sgdoneclasssvm": 677, "sgdregressor": 678, "shape": 231, "share": [43, 52, 184], "shift": [96, 404], "should": [384, 999], "show": 273, "show_vers": 903, "shrinkag": [109, 406, 411, 993], "shrunk": 406, "shrunk_covari": 478, "shrunkcovari": 473, "shrunken": 1002, "shuffl": [408, 972], "shufflesplit": 817, "sigmoid": [340, 402, 997], "sigmoid_kernel": 777, "signal": [194, 409], "signific": 270, "silhouett": [93, 404], "silhouette_sampl": 792, "silhouette_scor": 793, "similar": [175, 997, 999], "simpl": [132, 167, 240, 289, 378], "simpleimput": [321, 630], "simul": 182, "sine": [176, 255, 414], "singl": [137, 154, 224, 234, 368, 404, 989], "single_source_shortest_path_length": 954, "singular": [55, 409], "sinusoid": 191, "size": 411, "sketch": 991, "skew": 991, "skewedchi2sampl": 642, "sklearn": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "sklearn_assume_finit": 360, "sklearn_build_enable_debug_symbol": 360, "sklearn_enable_debug_cython_direct": 360, "sklearn_pairwise_dist_chunk_s": 360, "sklearn_run_float32_test": 360, "sklearn_se": 360, "sklearn_skip_network_test": 360, "sklearn_tests_global_random_se": 360, "sklearn_warnings_as_error": 360, "sklearn_working_memori": 360, "skop": 398, "slep": 387, "smacof": 694, "small": 377, "sne": [231, 996], "so": 384, "social": 1022, "soft": 411, "solido": 1023, "solut": 90, "solver": [322, 409, 995], "some": 339, "someth": 377, "sometim": 384, "sort_graph_by_row_valu": 859, "sourc": [102, 121, 370], "space": [51, 125, 405, 988, 996], "spars": [41, 113, 120, 129, 183, 194, 195, 221, 313, 320, 323, 347, 348, 381, 406, 409, 413, 1009, 1011, 1013, 1046], "sparse_encod": 546, "sparsecod": 540, "sparsefunc": 1038, "sparsepca": [409, 541], "sparserandomproject": 897, "sparsiti": [200, 412], "spawn": 360, "speci": [50, 297, 367], "special": 349, "specif": [273, 370, 988, 1018], "specifi": [151, 384, 988], "spectral": [57, 58, 59, 99, 226, 401, 404, 996], "spectral_clust": 459, "spectral_embed": 695, "spectralbiclust": [58, 448], "spectralclust": 449, "spectralcoclust": 450, "spectralembed": 691, "speed": [49, 378], "sphere": 228, "sphinx": 372, "spline": [43, 208, 316, 1009], "splinetransform": 883, "split": [143, 315, 355, 408], "splitter": [29, 355], "sponsor": 0, "spotifi": 1023, "sprint": 0, "squar": [116, 146, 176, 204, 205, 211, 414, 991, 995, 997, 999], "stabil": 314, "stabl": 316, "stack": [154, 313, 411], "stackingclassifi": 565, "stackingregressor": 566, "stall": 372, "standard": [380, 1009], "standardscal": [304, 884], "start": [384, 385], "statement": 1019, "statist": [264, 1018], "statlog": 258, "statu": 395, "std": 190, "step": [43, 245, 376, 385, 405], "stochast": [214, 220, 226, 300, 995, 996, 1004, 1013], "stock": 51, "stop": [144, 149, 214, 412, 1013], "strategi": [86, 262, 281, 300, 307, 319, 321, 361, 404], "stratif": 408, "stratifi": 408, "stratifiedgroupkfold": [408, 818], "stratifiedkfold": 819, "stratifiedshufflesplit": 820, "stream": 361, "string": [384, 999], "strip": 347, "strong": 193, "strongli": 1007, "structur": [51, 74, 81, 100, 175, 327, 354], "studi": 243, "submit": 372, "subsampl": 411, "subscript": 321, "subtleti": 355, "success": [275, 276, 315, 988], "sum": 624, "summar": 398, "summari": [62, 144, 198, 348, 349, 398, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "supervis": [180, 324, 325, 329, 330, 1003, 1012, 1021], "support": [62, 143, 149, 180, 203, 310, 313, 314, 315, 316, 318, 319, 320, 322, 323, 331, 334, 342, 384, 390, 395, 400, 402, 411, 1014, 1015, 1022, 1046, 1047, 1048, 1049], "surfac": [142, 238, 352], "svc": [246, 340, 343, 909, 1014], "svd": [55, 120, 409], "svm": [39, 45, 159, 160, 188, 220, 238, 316, 330, 332, 333, 335, 336, 337, 338, 339, 340, 341, 344, 345, 995, 1005, 1013, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1049], "svmlight": 366, "svr": [239, 342, 910, 1014], "swag": 0, "swiss": 230, "switch": 360, "symmetr": 115, "synthet": [61, 107, 190, 194, 261, 311, 377], "system": 370, "t": [226, 231, 996], "tabl": 384, "tag": [370, 372, 374, 923], "take": 264, "takeawai": 207, "talk": 1017, "tangent": 996, "target": [41, 107, 174, 224, 310, 311, 353, 384, 386, 405, 1000, 1009, 1010], "targetencod": [319, 885], "targettag": 924, "task": [25, 203, 353, 995, 1018], "team": [0, 371], "technic": 387, "techniqu": 227, "templat": 374, "tensor": 991, "term": [348, 386, 412], "test": [44, 109, 158, 267, 270, 277, 347, 351, 372, 374, 380, 381, 408], "text": [16, 47, 180, 235, 265, 329, 346, 347, 348, 349, 367, 412], "tf": 412, "tfidftransform": 589, "tfidfvector": [348, 349, 590], "than": [322, 384], "theil": [223, 995], "theilsenregressor": 679, "them": [123, 371], "theoret": 237, "thi": [211, 1019], "third": [207, 240, 322, 390], "thread": [322, 360, 1048], "threshold": [165, 258, 278, 321, 328, 403], "throughput": [49, 359], "tie": 344, "time": [43, 52, 140, 203, 238, 239, 347, 408, 1020], "timeseriessplit": 821, "tip": [359, 373, 380, 988, 996, 1003, 1013, 1014, 1015], "togeth": [244, 273], "toi": [79, 95, 233, 369], "toler": 163, "tomographi": 53, "too": 360, "tool": [381, 384, 400], "top": [348, 999], "top_k_accuracy_scor": 794, "topic": 54, "total": [152, 351, 411], "tough": 371, "toward": 323, "track": [380, 405], "tracker": [372, 1022], "trade": 995, "tradeoff": [261, 999], "train": [134, 135, 144, 147, 150, 156, 162, 201, 211, 234, 239, 243, 244, 246, 254, 277, 281, 302, 310, 311, 315, 328, 336, 340, 347, 351, 352, 354, 398, 408, 1002, 1012], "train_test_split": 830, "transform": [102, 103, 104, 107, 115, 139, 152, 245, 315, 316, 317, 322, 364, 384, 385, 405, 1002, 1009, 1010, 1011], "transformedtargetregressor": 462, "transformermixin": 428, "transformertag": 925, "translat": 1018, "tree": [40, 134, 135, 139, 141, 142, 149, 152, 180, 185, 207, 313, 318, 319, 320, 322, 350, 351, 352, 353, 354, 384, 411, 413, 1002, 1007, 1015, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "triag": 371, "trick": [359, 378, 380, 412], "trigonometr": 43, "troubleshoot": 390, "true": [190, 191], "truncat": 409, "truncatedsvd": 542, "trustworthi": 696, "truth": [72, 190], "tsne": [284, 692], "tune": [29, 146, 258, 262, 265, 278, 315, 321, 403, 988], "tunedthresholdclassifiercv": [321, 822], "tutori": 1017, "tweedi": [224, 999], "tweedieregressor": [224, 680], "two": [99, 136, 195, 244, 264], "type": [103, 249, 373, 374, 384, 386, 400, 404], "type_of_target": 963, "typic": 371, "t\u00e9l\u00e9com": 1023, "u": 0, "ubuntu": 390, "uci": 281, "unbalanc": [338, 1014], "uncertain": 325, "uncertainti": 52, "unclaim": 372, "undefinedmetricwarn": 577, "under": [175, 384, 1045], "underfit": 279, "understand": 354, "unfold": 380, "uniform": [304, 1009], "unique_label": 964, "univari": [87, 115, 159, 339, 413, 989], "univers": 374, "unlabel": 1012, "unless": 377, "unstructur": 100, "unsupervis": [1002, 1004, 1016, 1024], "unweight": 395, "up": [263, 1005], "updat": [376, 1039], "us": [44, 45, 51, 55, 120, 121, 123, 151, 152, 154, 163, 165, 172, 210, 220, 222, 264, 268, 273, 283, 305, 342, 347, 348, 354, 355, 361, 373, 377, 378, 380, 384, 408, 409, 412, 413, 993, 995, 996, 999, 1003, 1013, 1014, 1015, 1023, 1039], "usabl": 384, "usag": [378, 384, 395, 400, 402, 405, 411, 412, 995], "user": [1022, 1025], "util": [41, 365, 377, 381, 1026, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "v": [87, 100, 109, 110, 112, 116, 125, 162, 184, 185, 193, 201, 224, 267, 273, 279, 351, 404, 411, 989], "v_measure_scor": 795, "valgrind": [378, 380], "valid": [29, 41, 43, 162, 198, 237, 258, 259, 260, 262, 263, 267, 269, 274, 323, 339, 355, 359, 374, 381, 403, 408, 988, 994, 995], "validate_data": 987, "validation_curv": 831, "validationcurvedisplai": [319, 823], "valu": [149, 163, 177, 178, 179, 180, 231, 240, 313, 319, 320, 322, 354, 372, 409, 411, 989, 1007, 1009, 1015], "vanilla": [258, 278], "vari": [72, 299, 328, 404], "variabl": [25, 115, 182, 183, 360, 384], "varianc": [137, 205, 413, 999, 1009], "variancethreshold": 602, "variant": 178, "variat": [249, 998], "variou": [49, 85, 231, 384], "vector": [55, 62, 86, 180, 331, 334, 342, 347, 349, 412, 1014], "version": [317, 366, 370, 372, 376, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "versu": [137, 220, 269, 330, 359], "via": [44, 52, 86, 196, 198, 224, 411, 991, 999], "video": [372, 1017], "visual": [4, 29, 51, 91, 130, 144, 155, 201, 234, 239, 246, 259, 263, 301, 314, 336, 404, 405, 999, 1026], "vote": [156, 411], "votingclassifi": [155, 567], "votingregressor": 568, "wage": [182, 183], "wai": [184, 372, 384], "ward": [81, 100, 404], "ward_tre": 460, "warm": 378, "warm_start": 1003, "warn": 381, "we": 100, "weak": [134, 411], "web": 322, "websit": [376, 1039], "weight": [41, 134, 190, 192, 219, 301, 314, 345, 395, 411, 412], "weighted_mod": 950, "what": [354, 384], "when": 258, "which": [995, 999], "whitekernel": 625, "who": 1023, "why": [384, 411], "wikipedia": 55, "wild": 367, "window": [370, 390], "wine": 369, "winpython": 390, "wisconsin": 369, "within": 104, "without": [74, 292, 347], "wolf": [69, 110, 406], "word": [347, 412], "work": [41, 180, 346, 359, 371, 384], "workflow": [371, 398], "world": [42, 107, 180, 367], "wrap": 283, "written": 68, "wrong": [183, 384], "x": [223, 322], "x86_64": 380, "xor": [171, 340, 414], "y": [223, 384, 1010, 1012], "yeast": 281, "yep": 378, "yhat": 1023, "you": 384, "your": [374, 377], "zero": 999, "zero_one_loss": 796, "zopa": 1023}})